(function (console, $hx_exports) { "use strict";
$hx_exports.BABYLON = $hx_exports.BABYLON || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var snow_App = function() {
	this.next_render = 0;
	this.next_tick = 0;
	this.alpha = 1.0;
	this.cur_frame_start = 0.0;
	this.current_time = 0;
	this.last_frame_start = 0.0;
	this.delta_sim = 0.016666666666666666;
	this.delta_time = 0.016666666666666666;
	this.max_frame_time = 0.25;
	this.update_rate = 0;
	this.render_rate = 0.016666666666666666;
	this.fixed_delta = 0;
	this.timescale = 1;
};
$hxClasses["snow.App"] = snow_App;
snow_App.__name__ = ["snow","App"];
snow_App.prototype = {
	app: null
	,timescale: null
	,fixed_delta: null
	,render_rate: null
	,update_rate: null
	,max_frame_time: null
	,delta_time: null
	,delta_sim: null
	,last_frame_start: null
	,current_time: null
	,cur_frame_start: null
	,alpha: null
	,next_tick: null
	,next_render: null
	,config: function(config) {
		return config;
	}
	,ready: function() {
	}
	,update: function(dt) {
	}
	,ondestroy: function() {
	}
	,onevent: function(event) {
	}
	,onkeydown: function(keycode,scancode,repeat,mod,timestamp,window_id) {
	}
	,onkeyup: function(keycode,scancode,repeat,mod,timestamp,window_id) {
	}
	,ontextinput: function(text,start,length,type,timestamp,window_id) {
	}
	,onmousedown: function(x,y,button,timestamp,window_id) {
	}
	,onmouseup: function(x,y,button,timestamp,window_id) {
	}
	,onmousewheel: function(x,y,timestamp,window_id) {
	}
	,onmousemove: function(x,y,xrel,yrel,timestamp,window_id) {
	}
	,ontouchdown: function(x,y,touch_id,timestamp) {
	}
	,ontouchup: function(x,y,touch_id,timestamp) {
	}
	,ontouchmove: function(x,y,dx,dy,touch_id,timestamp) {
	}
	,ongamepadaxis: function(gamepad,axis,value,timestamp) {
	}
	,ongamepaddown: function(gamepad,button,value,timestamp) {
	}
	,ongamepadup: function(gamepad,button,value,timestamp) {
	}
	,ongamepaddevice: function(gamepad,type,timestamp) {
	}
	,on_internal_init: function() {
		this.cur_frame_start = snow_Snow.core.timestamp();
		this.last_frame_start = this.cur_frame_start;
		this.current_time = 0;
		this.delta_time = 0.016;
	}
	,on_internal_update: function() {
		if(this.update_rate != 0) {
			if(this.next_tick < snow_Snow.core.timestamp()) this.next_tick = snow_Snow.core.timestamp() + this.update_rate; else return;
		}
		this.cur_frame_start = snow_Snow.core.timestamp();
		this.delta_time = this.cur_frame_start - this.last_frame_start;
		this.last_frame_start = this.cur_frame_start;
		if(this.delta_time > this.max_frame_time) this.delta_time = this.max_frame_time;
		var used_delta;
		if(this.fixed_delta == 0) used_delta = this.delta_time; else used_delta = this.fixed_delta;
		used_delta *= this.timescale;
		this.delta_sim = used_delta;
		this.current_time += used_delta;
		this.app.do_internal_update(used_delta);
	}
	,on_internal_render: function() {
		if(this.render_rate != 0) {
			if(this.next_render < snow_Snow.core.timestamp()) {
				this.app.windowing.update();
				this.next_render += this.render_rate;
			}
		}
	}
	,__class__: snow_App
};
var MainSnow = function() {
	snow_App.call(this);
};
$hxClasses["MainSnow"] = MainSnow;
MainSnow.__name__ = ["MainSnow"];
MainSnow.__super__ = snow_App;
MainSnow.prototype = $extend(snow_App.prototype,{
	engine: null
	,scene: null
	,config: function(config) {
		config.window.title = "BabylonHx_Snow";
		return config;
	}
	,ready: function() {
		this.engine = new com_babylonhx_Engine(SnowApp._snow.window);
		this.scene = new com_babylonhx_Scene(this.engine);
		new samples_LoadScene(this.scene);
		this.app.window.onrender = $bind(this,this.render);
	}
	,onmousedown: function(x,y,button,timestamp,window_id) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,button);
		}
	}
	,onmouseup: function(x,y,button,timestamp,window_id) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,button);
		}
	}
	,onmousemove: function(x,y,xrel,yrel,timestamp,window_id) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y);
		}
	}
	,onmousewheel: function(x,y,timestamp,window_id) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseWheel;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(y);
		}
	}
	,ontouchdown: function(x,y,touch_id,timestamp) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,touch_id,timestamp);
		}
	}
	,ontouchup: function(x,y,touch_id,timestamp) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,touch_id,timestamp);
		}
	}
	,ontouchmove: function(x,y,dx,dy,touch_id,timestamp) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(x,y,dx,dy,touch_id,timestamp);
		}
	}
	,onkeyup: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(keycode == snow_system_input_Keycodes.escape) this.app.shutdown();
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(keycode);
		}
	}
	,onkeydown: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(keycode);
		}
	}
	,render: function(window) {
		this.engine._renderLoop();
	}
	,__class__: MainSnow
});
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
var SnowApp = function() { };
$hxClasses["SnowApp"] = SnowApp;
SnowApp.__name__ = ["SnowApp"];
SnowApp.main = function() {
	SnowApp._snow = new snow_Snow();
	SnowApp._host = new MainSnow();
	var _snow_config = { has_loop : true, config_custom_assets : false, config_custom_runtime : false, config_runtime_path : "config.json", config_assets_path : "manifest", app_package : "com.babylonhx.snow"};
	SnowApp._snow.init(_snow_config,SnowApp._host);
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var com_babylonhx_Engine = $hx_exports.BABYLON.Engine = function(canvas,antialias,options) {
	if(antialias == null) antialias = false;
	this._uintIndicesCurrentlySet = false;
	this._canvasClientRect = { x : 0, y : 0, width : 800, height : 600};
	this._compiledEffects = new haxe_ds_StringMap();
	this._activeTexturesCache = [];
	this._loadedTexturesCache = [];
	this._alphaMode = 0;
	this._alphaState = new com_babylonhx__$AlphaState();
	this._depthCullingState = new com_babylonhx__$DepthCullingState();
	this.deltaTime = 0.0;
	this.fps = 60.0;
	this.previousFramesDuration = [];
	this.fpsRange = 60.0;
	this._activeRenderLoops = [];
	this._renderingQueueLaunched = false;
	this._drawCalls = 0;
	this._runningLoop = false;
	this._windowIsBackground = false;
	this.scenes = [];
	this.renderEvenInBackground = true;
	this.cullBackFaces = true;
	this.isPointerLock = false;
	this.isFullscreen = false;
	var _g = this;
	haxe_Log.trace("BabylonHx - Cross-Platform 3D Engine | " + new Date().getFullYear() + " | www.babylonhx.com",{ fileName : "Engine.hx", lineNumber : 164, className : "com.babylonhx.Engine", methodName : "new"});
	com_babylonhx_Engine.app = canvas;
	this._renderingCanvas = canvas;
	this._canvasClientRect.width = 800;
	this._canvasClientRect.height = 600;
	if(options != null) options = options; else options = { };
	options.antialias = antialias;
	if(options.preserveDrawingBuffer == null) options.preserveDrawingBuffer = false;
	this._onBlur = function() {
		_g._windowIsBackground = true;
	};
	this._onFocus = function() {
		_g._windowIsBackground = false;
	};
	this._hardwareScalingLevel = 1;
	this.resize();
	this._caps = new com_babylonhx_EngineCapabilities();
	this._caps.maxTexturesImageUnits = snow_modules_opengl_web_GL.getParameter(34930);
	this._caps.maxTextureSize = snow_modules_opengl_web_GL.getParameter(3379);
	this._caps.maxCubemapTextureSize = snow_modules_opengl_web_GL.getParameter(34076);
	this._caps.maxRenderTextureSize = snow_modules_opengl_web_GL.getParameter(34024);
	this._glVersion = snow_modules_opengl_web_GL.getParameter(7938);
	this._glExtensions = snow_modules_opengl_web_GL.getSupportedExtensions();
	try {
		this._caps.standardDerivatives = snow_modules_opengl_web_GL.getExtension("OES_standard_derivatives") != null;
		this._caps.s3tc = snow_modules_opengl_web_GL.getExtension("WEBGL_compressed_texture_s3tc");
		this._caps.textureFloat = snow_modules_opengl_web_GL.getExtension("OES_texture_float") != null;
		this._caps.textureAnisotropicFilterExtension = snow_modules_opengl_web_GL.getExtension("EXT_texture_filter_anisotropic") || snow_modules_opengl_web_GL.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || snow_modules_opengl_web_GL.getExtension("MOZ_EXT_texture_filter_anisotropic");
		if(this._caps.textureAnisotropicFilterExtension != null) this._caps.maxAnisotropy = snow_modules_opengl_web_GL.getParameter(this._caps.textureAnisotropicFilterExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT); else this._caps.maxAnisotropy = 0;
		this._caps.instancedArrays = snow_modules_opengl_web_GL.getExtension("ANGLE_instanced_arrays");
		this._caps.uintIndices = snow_modules_opengl_web_GL.getExtension("OES_element_index_uint") != null;
		this._caps.highPrecisionShaderSupported = true;
		if(snow_modules_opengl_web_GL.getShaderPrecisionFormat != null) {
			var highp = snow_modules_opengl_web_GL.getShaderPrecisionFormat(35632,36338);
			this._caps.highPrecisionShaderSupported = highp != null && highp.precision != 0;
		}
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
	}
	this._depthCullingState.set_depthTest(true);
	this._depthCullingState.set_depthFunc(515);
	this._depthCullingState.set_depthMask(true);
	this.isFullscreen = false;
	this.isPointerLock = false;
};
$hxClasses["com.babylonhx.Engine"] = com_babylonhx_Engine;
com_babylonhx_Engine.__name__ = ["com","babylonhx","Engine"];
com_babylonhx_Engine.compileShader = function(source,type,defines) {
	var shader = snow_modules_opengl_web_GL.createShader(type == "vertex"?35633:35632);
	snow_modules_opengl_web_GL.shaderSource(shader,(defines != null?defines + "\n":"") + source);
	snow_modules_opengl_web_GL.compileShader(shader);
	if(snow_modules_opengl_web_GL.getShaderParameter(shader,35713) == 0) throw new js__$Boot_HaxeError(snow_modules_opengl_web_GL.getShaderInfoLog(shader));
	return shader;
};
com_babylonhx_Engine.getWebGLTextureType = function(type) {
	var textureType;
	if(type == 1) textureType = 5126; else textureType = 5121;
	return textureType;
};
com_babylonhx_Engine.getSamplingParameters = function(samplingMode,generateMipMaps) {
	var magFilter = 9728;
	var minFilter = 9728;
	if(samplingMode == 2) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9985; else minFilter = 9729;
	} else if(samplingMode == 3) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9987; else minFilter = 9729;
	} else if(samplingMode == 1) {
		magFilter = 9728;
		if(generateMipMaps) minFilter = 9986; else minFilter = 9728;
	}
	return { min : minFilter, mag : magFilter};
};
com_babylonhx_Engine.prepareTexture = function(texture,gl,scene,width,height,invertY,noMipmap,isCompressed,processFunction,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	var engine = scene._engine;
	var potWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(width,engine.getCaps().maxTextureSize);
	var potHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(height,engine.getCaps().maxTextureSize);
	if(potWidth != width || potHeight != height) haxe_Log.trace("Texture '" + texture.url + "' is not power of two !",{ fileName : "Engine.hx", lineNumber : 1749, className : "com.babylonhx.Engine", methodName : "prepareTexture"});
	snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
	texture._baseWidth = width;
	texture._baseHeight = height;
	texture._width = potWidth;
	texture._height = potHeight;
	texture.isReady = true;
	processFunction(potWidth | 0,potHeight | 0);
	var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,!noMipmap);
	snow_modules_opengl_web_GL.texParameteri(3553,10240,filters.mag);
	snow_modules_opengl_web_GL.texParameteri(3553,10241,filters.min);
	if(!noMipmap && !isCompressed) snow_modules_opengl_web_GL.generateMipmap(3553);
	snow_modules_opengl_web_GL.bindTexture(3553,null);
	engine._activeTexturesCache = [];
	scene._removePendingData(texture);
};
com_babylonhx_Engine.partialLoad = function(url,index,loadedImages,scene,onfinish) {
};
com_babylonhx_Engine.cascadeLoad = function(rootUrl,scene,onfinish,extensions) {
};
com_babylonhx_Engine.prototype = {
	isFullscreen: null
	,isPointerLock: null
	,cullBackFaces: null
	,renderEvenInBackground: null
	,scenes: null
	,_renderingCanvas: null
	,_windowIsBackground: null
	,_onBlur: null
	,_onFocus: null
	,_onFullscreenChange: null
	,_onPointerLockChange: null
	,_hardwareScalingLevel: null
	,_caps: null
	,_pointerLockRequested: null
	,_alphaTest: null
	,_runningLoop: null
	,_renderFunction: null
	,_drawCalls: null
	,get_drawCalls: function() {
		return this._drawCalls;
	}
	,_glVersion: null
	,_glExtensions: null
	,_glRenderer: null
	,_glVendor: null
	,_renderingQueueLaunched: null
	,_activeRenderLoops: null
	,fpsRange: null
	,previousFramesDuration: null
	,fps: null
	,deltaTime: null
	,_depthCullingState: null
	,_alphaState: null
	,_alphaMode: null
	,_loadedTexturesCache: null
	,_activeTexturesCache: null
	,_currentEffect: null
	,_compiledEffects: null
	,_vertexAttribArrays: null
	,_cachedViewport: null
	,_cachedVertexBuffers: null
	,_cachedIndexBuffer: null
	,_cachedEffectForVertexBuffers: null
	,_currentRenderTarget: null
	,_canvasClientRect: null
	,_uintIndicesCurrentlySet: null
	,_workingCanvas: null
	,getExtensions: function() {
		return this._glExtensions;
	}
	,getAspectRatio: function(camera) {
		var viewport = camera.viewport;
		return this.getRenderWidth() * viewport.width / (this.getRenderHeight() * viewport.height);
	}
	,getRenderWidth: function() {
		return com_babylonhx_Engine.app.width;
	}
	,getRenderHeight: function() {
		return com_babylonhx_Engine.app.height;
	}
	,getRenderingCanvas: function() {
		return this._renderingCanvas;
	}
	,setHardwareScalingLevel: function(level) {
		this._hardwareScalingLevel = level;
		this.resize();
	}
	,getHardwareScalingLevel: function() {
		return this._hardwareScalingLevel;
	}
	,getLoadedTexturesCache: function() {
		return this._loadedTexturesCache;
	}
	,getCaps: function() {
		return this._caps;
	}
	,resetDrawCalls: function() {
		this._drawCalls = 0;
	}
	,setDepthFunctionToGreater: function() {
		this._depthCullingState.set_depthFunc(516);
	}
	,setDepthFunctionToGreaterOrEqual: function() {
		this._depthCullingState.set_depthFunc(518);
	}
	,setDepthFunctionToLess: function() {
		this._depthCullingState.set_depthFunc(513);
	}
	,setDepthFunctionToLessOrEqual: function() {
		this._depthCullingState.set_depthFunc(515);
	}
	,stopRenderLoop: function() {
		this._renderFunction = null;
		this._runningLoop = false;
	}
	,_renderLoop: function(rect) {
		this._measureFps();
		if(this._renderFunction != null) this._renderFunction();
		null;
	}
	,runRenderLoop: function(renderFunction) {
		this._runningLoop = true;
		this._renderFunction = renderFunction;
	}
	,switchFullscreen: function(requestPointerLock) {
	}
	,clear: function(color,backBuffer,depthStencil) {
		this._depthCullingState.apply();
		this._alphaState.apply();
		if(js_Boot.__instanceof(color,com_babylonhx_math_Color4)) snow_modules_opengl_web_GL.clearColor(color.r,color.g,color.b,color.a); else snow_modules_opengl_web_GL.clearColor(color.r,color.g,color.b,1.0);
		if(this._depthCullingState.get_depthMask()) snow_modules_opengl_web_GL.clearDepth(1.0);
		var mode = 0;
		if(backBuffer) mode |= 16384;
		if(depthStencil && this._depthCullingState.get_depthMask()) mode |= 256;
		snow_modules_opengl_web_GL.clear(mode);
	}
	,setViewport: function(viewport,requiredWidth,requiredHeight) {
		if(requiredHeight == null) requiredHeight = 0;
		if(requiredWidth == null) requiredWidth = 0;
		var width;
		if(requiredWidth == 0) width = this.getRenderWidth(); else width = requiredWidth;
		var height;
		if(requiredHeight == 0) height = this.getRenderHeight(); else height = requiredHeight;
		var x = viewport.x;
		var y = viewport.y;
		this._cachedViewport = viewport;
		snow_modules_opengl_web_GL.viewport(x * width | 0,y * height | 0,width * viewport.width | 0,height * viewport.height | 0);
	}
	,setDirectViewport: function(x,y,width,height) {
		this._cachedViewport = null;
		snow_modules_opengl_web_GL.viewport(x,y,width,height);
	}
	,beginFrame: function() {
		this._measureFps();
	}
	,endFrame: function() {
	}
	,getFps: function() {
		return this.fps;
	}
	,getDeltaTime: function() {
		return this.deltaTime;
	}
	,_measureFps: function() {
		this.previousFramesDuration.push(Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000));
		var length = this.previousFramesDuration.length;
		if(length >= 2) this.deltaTime = this.previousFramesDuration[length - 1] - this.previousFramesDuration[length - 2];
		if(length >= this.fpsRange) {
			if(length > this.fpsRange) {
				this.previousFramesDuration.splice(0,1);
				length = this.previousFramesDuration.length;
			}
			var sum = 0.0;
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var id = _g1++;
				sum += this.previousFramesDuration[id + 1] - this.previousFramesDuration[id];
			}
			this.fps = 1000.0 / (sum / (length - 1));
		}
	}
	,resize: function() {
	}
	,setSize: function(width,height) {
	}
	,bindFramebuffer: function(texture) {
		this._currentRenderTarget = texture;
		snow_modules_opengl_web_GL.bindFramebuffer(36160,texture._framebuffer);
		snow_modules_opengl_web_GL.viewport(0,0,texture._width | 0,texture._height | 0);
		this.wipeCaches();
	}
	,unBindFramebuffer: function(texture) {
		this._currentRenderTarget = null;
		if(texture.generateMipMaps) {
			snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
			snow_modules_opengl_web_GL.generateMipmap(3553);
			snow_modules_opengl_web_GL.bindTexture(3553,null);
		}
		snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
	}
	,flushFramebuffer: function() {
	}
	,restoreDefaultFramebuffer: function() {
		snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
		this.setViewport(this._cachedViewport,null,null);
		this.wipeCaches();
	}
	,_resetVertexBufferBinding: function() {
		snow_modules_opengl_web_GL.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,createVertexBuffer: function(vertices) {
		var vbo = snow_modules_opengl_web_GL.createBuffer();
		snow_modules_opengl_web_GL.bindBuffer(34962,vbo);
		snow_modules_opengl_web_GL.bufferData(34962,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(vertices != null) this1 = new Float32Array(vertices); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35044);
		snow_modules_opengl_web_GL.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,createDynamicVertexBuffer: function(capacity) {
		var vbo = snow_modules_opengl_web_GL.createBuffer();
		snow_modules_opengl_web_GL.bindBuffer(34962,vbo);
		snow_modules_opengl_web_GL.bufferData(34962,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		snow_modules_opengl_web_GL.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,updateDynamicVertexBuffer: function(vertexBuffer,vertices,offset) {
		if(offset == null) offset = 0;
		snow_modules_opengl_web_GL.bindBuffer(34962,vertexBuffer.buffer);
		if(!((vertices instanceof Array) && vertices.__enum__ == null)) snow_modules_opengl_web_GL.bufferSubData(34962,offset,vertices); else snow_modules_opengl_web_GL.bufferSubData(34962,offset,(function($this) {
			var $r;
			var elements = vertices;
			var len = null;
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		snow_modules_opengl_web_GL.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,_resetIndexBufferBinding: function() {
		snow_modules_opengl_web_GL.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
	}
	,createIndexBuffer: function(indices) {
		var vbo = snow_modules_opengl_web_GL.createBuffer();
		snow_modules_opengl_web_GL.bindBuffer(34963,vbo);
		var arrayBuffer = null;
		var need32Bits = false;
		if(this._caps.uintIndices) {
			var _g1 = 0;
			var _g = indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				if(indices[index] > 65535) {
					need32Bits = true;
					break;
				}
			}
			if(need32Bits) {
				var len = null;
				var this1;
				if(indices != null) this1 = new Int32Array(indices); else this1 = null;
				arrayBuffer = this1;
			} else {
				var len1 = null;
				var this2;
				if(indices != null) this2 = new Int16Array(indices); else this2 = null;
				arrayBuffer = this2;
			}
		} else {
			var len2 = null;
			var this3;
			if(indices != null) this3 = new Int16Array(indices); else this3 = null;
			arrayBuffer = this3;
		}
		snow_modules_opengl_web_GL.bufferData(34963,arrayBuffer,35044);
		snow_modules_opengl_web_GL.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		ret.is32Bits = need32Bits;
		return ret;
	}
	,bindBuffers: function(vertexBuffer,indexBuffer,vertexDeclaration,vertexStrideSize,effect) {
		if(this._cachedVertexBuffers != vertexBuffer || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffer;
			this._cachedEffectForVertexBuffers = effect;
			snow_modules_opengl_web_GL.bindBuffer(34962,vertexBuffer.buffer);
			var offset = 0;
			var _g1 = 0;
			var _g = vertexDeclaration.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) snow_modules_opengl_web_GL.vertexAttribPointer(order,vertexDeclaration[index],5126,false,vertexStrideSize,offset);
				offset += vertexDeclaration[index] * 4;
			}
		}
		if(this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			snow_modules_opengl_web_GL.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,bindMultiBuffers: function(vertexBuffers,indexBuffer,effect) {
		if(this._cachedVertexBuffers != vertexBuffers || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffers;
			this._cachedEffectForVertexBuffers = effect;
			var attributes = effect._attributesNames;
			var _g1 = 0;
			var _g = attributes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) {
					var vertexBuffer = vertexBuffers.get(attributes[index]);
					if(vertexBuffer == null) continue;
					var stride = vertexBuffer._strideSize;
					snow_modules_opengl_web_GL.bindBuffer(34962,vertexBuffer._buffer.buffer);
					snow_modules_opengl_web_GL.vertexAttribPointer(order,stride,5126,false,stride * 4,0);
				}
			}
		}
		if(indexBuffer != null && this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			snow_modules_opengl_web_GL.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,_releaseBuffer: function(buffer) {
		buffer.references--;
		if(buffer.references == 0) {
			snow_modules_opengl_web_GL.deleteBuffer(buffer.buffer);
			return true;
		}
		return false;
	}
	,createInstancesBuffer: function(capacity) {
		var buffer = new com_babylonhx_mesh_WebGLBuffer(snow_modules_opengl_web_GL.createBuffer());
		buffer.capacity = capacity;
		snow_modules_opengl_web_GL.bindBuffer(34962,buffer.buffer);
		snow_modules_opengl_web_GL.bufferData(34962,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		return buffer;
	}
	,deleteInstancesBuffer: function(buffer) {
		snow_modules_opengl_web_GL.deleteBuffer(buffer.buffer);
		buffer = null;
	}
	,updateAndBindInstancesBuffer: function(instancesBuffer,data,offsetLocations) {
		snow_modules_opengl_web_GL.bindBuffer(34962,instancesBuffer.buffer);
		snow_modules_opengl_web_GL.bufferSubData(34962,0,data);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			snow_modules_opengl_web_GL.enableVertexAttribArray(offsetLocation);
			snow_modules_opengl_web_GL.vertexAttribPointer(offsetLocation,4,5126,false,64,index * 16);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,1);
		}
	}
	,unBindInstancesBuffer: function(instancesBuffer,offsetLocations) {
		snow_modules_opengl_web_GL.bindBuffer(34962,instancesBuffer.buffer);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			snow_modules_opengl_web_GL.disableVertexAttribArray(offsetLocation);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,0);
		}
	}
	,applyStates: function() {
		this._depthCullingState.apply();
		this._alphaState.apply();
	}
	,draw: function(useTriangles,indexStart,indexCount,instancesCount) {
		this._depthCullingState.apply();
		this._alphaState.apply();
		var indexFormat;
		if(this._uintIndicesCurrentlySet) indexFormat = 5125; else indexFormat = 5123;
		var mult;
		if(this._uintIndicesCurrentlySet) mult = 4; else mult = 2;
		if(instancesCount != null) {
			this._caps.instancedArrays.drawElementsInstancedANGLE(useTriangles?4:1,indexCount,indexFormat,indexStart * mult,instancesCount);
			return;
		}
		snow_modules_opengl_web_GL.drawElements(useTriangles?4:1,indexCount,indexFormat,indexStart * mult);
		this._drawCalls++;
	}
	,drawPointClouds: function(verticesStart,verticesCount,instancesCount) {
		if(instancesCount == null) instancesCount = -1;
		this._depthCullingState.apply();
		this._alphaState.apply();
		if(instancesCount > -1) {
			this._caps.instancedArrays.drawArraysInstancedANGLE(0,verticesStart,verticesCount,instancesCount);
			return;
		}
		snow_modules_opengl_web_GL.drawArrays(0,verticesStart,verticesCount);
		this._drawCalls++;
	}
	,_releaseEffect: function(effect) {
		if(this._compiledEffects.exists(effect._key)) {
			this._compiledEffects.remove(effect._key);
			if(effect._program != null) snow_modules_opengl_web_GL.deleteProgram(effect._program);
		}
	}
	,createEffect: function(baseName,attributesNames,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		var vertex;
		if(baseName.vertexElement != null) vertex = baseName.vertexElement; else if(baseName.vertex != null) vertex = baseName.vertex; else vertex = baseName;
		var fragment;
		if(baseName.fragmentElement != null) fragment = baseName.fragmentElement; else if(baseName.fragment != null) fragment = baseName.fragment; else fragment = baseName;
		var name = vertex + "+" + fragment + "@" + defines;
		if(this._compiledEffects.exists(name)) return this._compiledEffects.get(name);
		var effect = new com_babylonhx_materials_Effect(baseName,attributesNames,uniformsNames,samplers,this,defines,fallbacks,onCompiled,onError);
		effect._key = name;
		this._compiledEffects.set(name,effect);
		return effect;
	}
	,createEffectForParticles: function(fragmentName,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		if(defines == null) defines = "";
		if(uniformsNames == null) uniformsNames = [];
		if(samplers == null) samplers = [];
		return this.createEffect({ vertex : "particles", fragment : fragmentName},["position","color","options"],["view","projection"].concat(uniformsNames),["diffuseSampler"].concat(samplers),defines,fallbacks,onCompiled,onError);
	}
	,createShaderProgram: function(vertexCode,fragmentCode,defines) {
		var vertexShader = com_babylonhx_Engine.compileShader(vertexCode,"vertex",defines);
		var fragmentShader = com_babylonhx_Engine.compileShader(fragmentCode,"fragment",defines);
		var shaderProgram = snow_modules_opengl_web_GL.createProgram();
		snow_modules_opengl_web_GL.attachShader(shaderProgram,vertexShader);
		snow_modules_opengl_web_GL.attachShader(shaderProgram,fragmentShader);
		snow_modules_opengl_web_GL.linkProgram(shaderProgram);
		var linked = snow_modules_opengl_web_GL.getProgramParameter(shaderProgram,35714);
		if(linked == 0) {
			var error = snow_modules_opengl_web_GL.getProgramInfoLog(shaderProgram);
			if(error != "") throw new js__$Boot_HaxeError(error);
		}
		snow_modules_opengl_web_GL.deleteShader(vertexShader);
		snow_modules_opengl_web_GL.deleteShader(fragmentShader);
		return shaderProgram;
	}
	,getUniforms: function(shaderProgram,uniformsNames) {
		var results = [];
		var _g1 = 0;
		var _g = uniformsNames.length;
		while(_g1 < _g) {
			var index = _g1++;
			results.push(snow_modules_opengl_web_GL.getUniformLocation(shaderProgram,uniformsNames[index]));
		}
		return results;
	}
	,getAttributes: function(shaderProgram,attributesNames) {
		var results = [];
		var _g1 = 0;
		var _g = attributesNames.length;
		while(_g1 < _g) {
			var index = _g1++;
			try {
				results.push(snow_modules_opengl_web_GL.getAttribLocation(shaderProgram,attributesNames[index]));
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace("getAttributes() -> ERROR: " + Std.string(e),{ fileName : "Engine.hx", lineNumber : 844, className : "com.babylonhx.Engine", methodName : "getAttributes"});
				results.push(-1);
			}
		}
		return results;
	}
	,enableEffect: function(effect) {
		if(effect == null || effect._attributes.length == 0 || this._currentEffect == effect) {
			if(effect != null && effect.onBind != null) effect.onBind(effect);
			return;
		}
		if(this._vertexAttribArrays != null) this._vertexAttribArrays = this._vertexAttribArrays; else this._vertexAttribArrays = [];
		snow_modules_opengl_web_GL.useProgram(effect._program);
		var _g1 = 0;
		var _g = this._vertexAttribArrays.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 34338 || !this._vertexAttribArrays[i]) continue;
			this._vertexAttribArrays[i] = false;
			snow_modules_opengl_web_GL.disableVertexAttribArray(i);
		}
		var attributesCount = effect._attributes.length;
		var _g2 = 0;
		while(_g2 < attributesCount) {
			var index = _g2++;
			var order = effect._attributes[index];
			if(order >= 0) {
				this._vertexAttribArrays[order] = true;
				snow_modules_opengl_web_GL.enableVertexAttribArray(order);
			}
		}
		this._currentEffect = effect;
		if(effect.onBind != null) effect.onBind(effect);
	}
	,setArray: function(uniform,array) {
		snow_modules_opengl_web_GL.uniform1fv(uniform,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray2: function(uniform,array) {
		if(array.length % 2 == 0) snow_modules_opengl_web_GL.uniform2fv(uniform,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray3: function(uniform,array) {
		if(array.length % 3 == 0) snow_modules_opengl_web_GL.uniform3fv(uniform,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray4: function(uniform,array) {
		if(array.length % 4 == 0) snow_modules_opengl_web_GL.uniform4fv(uniform,(function($this) {
			var $r;
			var len = null;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setMatrices: function(uniform,matrices) {
		snow_modules_opengl_web_GL.uniformMatrix4fv(uniform,false,matrices);
	}
	,setMatrix: function(uniform,matrix) {
		snow_modules_opengl_web_GL.uniformMatrix4fv(uniform,false,matrix.toArray());
	}
	,setFloat: function(uniform,value) {
		snow_modules_opengl_web_GL.uniform1f(uniform,value);
	}
	,setFloat2: function(uniform,x,y) {
		snow_modules_opengl_web_GL.uniform2f(uniform,x,y);
	}
	,setFloat3: function(uniform,x,y,z) {
		snow_modules_opengl_web_GL.uniform3f(uniform,x,y,z);
	}
	,setBool: function(uniform,bool) {
		snow_modules_opengl_web_GL.uniform1i(uniform,bool?1:0);
	}
	,setFloat4: function(uniform,x,y,z,w) {
		snow_modules_opengl_web_GL.uniform4f(uniform,x,y,z,w);
	}
	,setColor3: function(uniform,color3) {
		snow_modules_opengl_web_GL.uniform3f(uniform,color3.r,color3.g,color3.b);
	}
	,setColor4: function(uniform,color3,alpha) {
		snow_modules_opengl_web_GL.uniform4f(uniform,color3.r,color3.g,color3.b,alpha);
	}
	,setState: function(culling,zOffset,force) {
		if(force == null) force = false;
		if(zOffset == null) zOffset = 0;
		if(this._depthCullingState.get_cull() != culling || force) {
			if(culling) {
				this._depthCullingState.set_cullFace(this.cullBackFaces?1029:1028);
				this._depthCullingState.set_cull(true);
			} else this._depthCullingState.set_cull(false);
		}
		this._depthCullingState.set_zOffset(zOffset);
	}
	,setDepthBuffer: function(enable) {
		this._depthCullingState.set_depthTest(enable);
	}
	,getDepthWrite: function() {
		return this._depthCullingState.get_depthMask();
	}
	,setDepthWrite: function(enable) {
		this._depthCullingState.set_depthMask(enable);
	}
	,setColorWrite: function(enable) {
		snow_modules_opengl_web_GL.colorMask(enable,enable,enable,enable);
	}
	,setAlphaMode: function(mode) {
		switch(mode) {
		case 0:
			this._depthCullingState.set_depthMask(true);
			this._alphaState.set_alphaBlend(false);
			break;
		case 2:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 1:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			this._alphaState.set_alphaBlend(true);
			break;
		}
		this._alphaMode = mode;
	}
	,getAlphaMode: function() {
		return this._alphaMode;
	}
	,setAlphaTesting: function(enable) {
		this._alphaTest = enable;
	}
	,getAlphaTesting: function() {
		return this._alphaTest;
	}
	,wipeCaches: function() {
		this._activeTexturesCache = [];
		this._currentEffect = null;
		this._depthCullingState.reset();
		this._alphaState.reset();
		this._cachedVertexBuffers = null;
		this._cachedIndexBuffer = null;
		this._cachedEffectForVertexBuffers = null;
	}
	,setSamplingMode: function(texture,samplingMode) {
		snow_modules_opengl_web_GL.bindTexture(3553,texture);
		var magFilter = 9728;
		var minFilter = 9728;
		if(samplingMode == 2) {
			magFilter = 9729;
			minFilter = 9729;
		} else if(samplingMode == 3) {
			magFilter = 9729;
			minFilter = 9987;
		}
		snow_modules_opengl_web_GL.texParameteri(3553,10240,magFilter);
		snow_modules_opengl_web_GL.texParameteri(3553,10241,minFilter);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
	}
	,createTexture: function(url,noMipmap,invertY,scene,samplingMode,onLoad,onError,buffer) {
		if(samplingMode == null) samplingMode = 3;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(url,snow_modules_opengl_web_GL.createTexture());
		var extension = "";
		var fromData = null;
		if(HxOverrides.substr(url,0,5) == "data:") fromData = true;
		if(fromData == null) extension = HxOverrides.substr(url,url.length - 4,4).toLowerCase(); else {
			var oldUrl = url;
			fromData = oldUrl.split(":");
			url = oldUrl;
			extension = fromData[1].substr(fromData[1].length - 4,4).toLowerCase();
		}
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		var isTGA = extension == ".tga";
		scene._addPendingData(texture);
		texture.url = url;
		texture.noMipmap = noMipmap;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		var onerror = function(e) {
			scene._removePendingData(texture);
			if(onError != null) onError();
		};
		if(isTGA) {
		} else if(isDDS) {
		} else {
			var onload = function(img) {
				com_babylonhx_Engine.prepareTexture(texture,snow_modules_opengl_web_GL,scene,img.width,img.height,invertY,noMipmap,false,function(potWidth,potHeight) {
					snow_modules_opengl_web_GL.texImage2D(3553,0,6408,potWidth,potHeight,0,6408,5121,img.data);
					if(onLoad != null) onLoad();
				},samplingMode);
			};
			if(!((fromData instanceof Array) && fromData.__enum__ == null)) com_babylonhx_tools_Tools.LoadImage(url,onload,onerror,scene.database); else com_babylonhx_tools_Tools.LoadImage(buffer,onload,onerror,scene.database);
		}
		return texture;
	}
	,createRawTexture: function(data,width,height,format,generateMipMaps,invertY,samplingMode) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",snow_modules_opengl_web_GL.createTexture());
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		var internalFormat = 6408;
		switch(format) {
		case 0:
			internalFormat = 6406;
			break;
		case 1:
			internalFormat = 6409;
			break;
		case 2:
			internalFormat = 6410;
			break;
		case 3:
			internalFormat = 6407;
			break;
		case 4:
			internalFormat = 6408;
			break;
		}
		snow_modules_opengl_web_GL.texImage2D(3553,0,internalFormat,width,height,0,internalFormat,5121,data);
		if(generateMipMaps) snow_modules_opengl_web_GL.generateMipmap(3553);
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		snow_modules_opengl_web_GL.texParameteri(3553,10240,filters.mag);
		snow_modules_opengl_web_GL.texParameteri(3553,10241,filters.min);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.isReady = true;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,createDynamicTexture: function(width,height,generateMipMaps,samplingMode) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",snow_modules_opengl_web_GL.createTexture());
		width = com_babylonhx_tools_Tools.GetExponantOfTwo(width,this._caps.maxTextureSize);
		height = com_babylonhx_tools_Tools.GetExponantOfTwo(height,this._caps.maxTextureSize);
		this._activeTexturesCache = [];
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.isReady = false;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this.updateTextureSamplingMode(samplingMode,texture);
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,updateDynamicTexture: function(texture,canvas,invertY) {
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		snow_modules_opengl_web_GL.texImage2D(3553,0,6408,canvas.width,canvas.height,0,6408,5121,canvas.data);
		if(texture.generateMipMaps) snow_modules_opengl_web_GL.generateMipmap(3553);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,updateTextureSamplingMode: function(samplingMode,texture) {
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,texture.generateMipMaps);
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		snow_modules_opengl_web_GL.texParameteri(3553,10240,filters.mag);
		snow_modules_opengl_web_GL.texParameteri(3553,10241,filters.min);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
	}
	,updateRawTexture: function(texture,data,format,size,invertY) {
		if(invertY == null) invertY = false;
		var internalFormat = 6408;
		switch(format) {
		case 0:
			internalFormat = 6406;
			break;
		case 1:
			internalFormat = 6409;
			break;
		case 2:
			internalFormat = 6410;
			break;
		case 3:
			internalFormat = 6407;
			break;
		case 4:
			internalFormat = 6408;
			break;
		}
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		snow_modules_opengl_web_GL.texImage2D(3553,0,internalFormat,size.width,size.height,0,internalFormat,5121,data);
		if(texture.generateMipMaps) snow_modules_opengl_web_GL.generateMipmap(3553);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,updateVideoTexture: function(texture,video,invertY) {
	}
	,createRenderTargetTexture: function(size,options) {
		var generateMipMaps = false;
		var generateDepthBuffer = true;
		var type = 0;
		var samplingMode = 3;
		if(options != null) {
			if(options.generateMipMaps != null) generateMipMaps = options.generateMipmaps; else generateMipMaps = options;
			if(options.generateDepthBuffer != null) generateDepthBuffer = options.generateDepthBuffer; else generateDepthBuffer = true;
			if(options.type == null) type = type; else type = options.type;
			if(options.samplingMode != null) samplingMode = options.samplingMode;
			if(type == 1) samplingMode = 1;
		}
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",snow_modules_opengl_web_GL.createTexture());
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		var width;
		if(size.width != null) width = size.width; else width = size;
		var height;
		if(size.height != null) height = size.height; else height = size;
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		if(type == 1 && !this._caps.textureFloat) {
			type = 0;
			haxe_Log.trace("Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type",{ fileName : "Engine.hx", lineNumber : 1356, className : "com.babylonhx.Engine", methodName : "createRenderTargetTexture"});
		}
		snow_modules_opengl_web_GL.texParameteri(3553,10240,filters.mag);
		snow_modules_opengl_web_GL.texParameteri(3553,10241,filters.min);
		snow_modules_opengl_web_GL.texParameteri(3553,10242,33071);
		snow_modules_opengl_web_GL.texParameteri(3553,10243,33071);
		snow_modules_opengl_web_GL.texImage2D(3553,0,6408,width,height,0,6408,com_babylonhx_Engine.getWebGLTextureType(type),null);
		var depthBuffer = null;
		if(generateDepthBuffer) {
			depthBuffer = snow_modules_opengl_web_GL.createRenderbuffer();
			snow_modules_opengl_web_GL.bindRenderbuffer(36161,depthBuffer);
			snow_modules_opengl_web_GL.renderbufferStorage(36161,33189,width,height);
		}
		var framebuffer = snow_modules_opengl_web_GL.createFramebuffer();
		snow_modules_opengl_web_GL.bindFramebuffer(36160,framebuffer);
		snow_modules_opengl_web_GL.framebufferTexture2D(36160,36064,3553,texture.data,0);
		if(generateDepthBuffer) snow_modules_opengl_web_GL.framebufferRenderbuffer(36160,36096,36161,depthBuffer);
		snow_modules_opengl_web_GL.bindTexture(3553,null);
		snow_modules_opengl_web_GL.bindRenderbuffer(36161,null);
		snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
		texture._framebuffer = framebuffer;
		if(generateDepthBuffer) texture._depthBuffer = depthBuffer;
		texture._width = width;
		texture._height = height;
		texture.isReady = true;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._activeTexturesCache = [];
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,createCubeTexture: function(rootUrl,scene,extensions,noMipmap) {
		if(noMipmap == null) noMipmap = false;
		var _g = this;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(rootUrl,snow_modules_opengl_web_GL.createTexture());
		texture.isCube = true;
		texture.url = rootUrl;
		texture.references = 1;
		this._loadedTexturesCache.push(texture);
		var extension = HxOverrides.substr(rootUrl,rootUrl.length - 4,4).toLowerCase();
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		if(isDDS) {
		} else {
			var faces = [34069,34071,34073,34070,34072,34074];
			var imgs = [];
			var _setTex = function(img,index) {
				_g._workingCanvas = img;
				snow_modules_opengl_web_GL.texImage2D(faces[index],0,6408,_g._workingCanvas.width,_g._workingCanvas.height,0,6408,5121,img.data);
			};
			var generate = function() {
				var width = com_babylonhx_tools_Tools.GetExponantOfTwo(imgs[0].width,_g._caps.maxCubemapTextureSize);
				var height = width;
				snow_modules_opengl_web_GL.bindTexture(34067,texture.data);
				var _g2 = 0;
				var _g1 = faces.length;
				while(_g2 < _g1) {
					var index1 = _g2++;
					_setTex(imgs[index1],index1);
				}
				if(!noMipmap) snow_modules_opengl_web_GL.generateMipmap(34067);
				snow_modules_opengl_web_GL.texParameteri(34067,10240,9729);
				snow_modules_opengl_web_GL.texParameteri(34067,10241,noMipmap?9729:9987);
				snow_modules_opengl_web_GL.texParameteri(34067,10242,33071);
				snow_modules_opengl_web_GL.texParameteri(34067,10243,33071);
				snow_modules_opengl_web_GL.bindTexture(34067,null);
				_g._activeTexturesCache = [];
				texture._width = width;
				texture._height = height;
				texture.isReady = true;
			};
			var i = 0;
			var loadImage;
			var loadImage1 = null;
			loadImage1 = function() {
				com_babylonhx_tools_Tools.LoadImage(rootUrl + extensions[i],function(bd) {
					imgs.push(bd);
					if(++i == extensions.length) generate(); else loadImage1();
				});
			};
			loadImage = loadImage1;
			loadImage();
		}
		return texture;
	}
	,_releaseTexture: function(texture) {
		if(texture._framebuffer != null) snow_modules_opengl_web_GL.deleteFramebuffer(texture._framebuffer);
		if(texture._depthBuffer != null) snow_modules_opengl_web_GL.deleteRenderbuffer(texture._depthBuffer);
		snow_modules_opengl_web_GL.deleteTexture(texture.data);
		var _g1 = 0;
		var _g = this._caps.maxTexturesImageUnits;
		while(_g1 < _g) {
			var channel = _g1++;
			snow_modules_opengl_web_GL.activeTexture(33984 + channel);
			snow_modules_opengl_web_GL.bindTexture(3553,null);
			snow_modules_opengl_web_GL.bindTexture(34067,null);
			this._activeTexturesCache[channel] = null;
		}
		var index = HxOverrides.indexOf(this._loadedTexturesCache,texture,0);
		if(index != -1) this._loadedTexturesCache.splice(index,1);
		texture = null;
	}
	,getGLTexture: function(channel) {
		return 33984 + channel;
	}
	,bindSamplers: function(effect) {
		snow_modules_opengl_web_GL.useProgram(effect._program);
		var samplers = effect._samplers;
		var _g1 = 0;
		var _g = samplers.length;
		while(_g1 < _g) {
			var index = _g1++;
			var uniform = effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,samplers[index],0)];
			snow_modules_opengl_web_GL.uniform1i(uniform,index);
		}
		this._currentEffect = null;
	}
	,_bindTexture: function(channel,texture) {
		snow_modules_opengl_web_GL.activeTexture(33984 + channel);
		snow_modules_opengl_web_GL.bindTexture(3553,texture.data);
		this._activeTexturesCache[channel] = null;
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		if(postProcess._textures.length > 0) this._bindTexture(channel,postProcess._textures.data[postProcess._currentRenderTextureInd]);
	}
	,setTexture: function(channel,texture) {
		if(channel < 0) return;
		if(texture == null || !texture.isReady()) {
			if(this._activeTexturesCache[channel] != null) {
				snow_modules_opengl_web_GL.activeTexture(33984 + channel);
				snow_modules_opengl_web_GL.bindTexture(3553,null);
				snow_modules_opengl_web_GL.bindTexture(34067,null);
				this._activeTexturesCache[channel] = null;
			}
			return;
		}
		if(js_Boot.__instanceof(texture,com_babylonhx_materials_textures_VideoTexture)) {
		} else if(texture.delayLoadState == 4) {
			texture.delayLoad();
			return;
		}
		if(this._activeTexturesCache[channel] == texture) return;
		this._activeTexturesCache[channel] = texture;
		var internalTexture = texture.getInternalTexture();
		snow_modules_opengl_web_GL.activeTexture(33984 + channel);
		if(internalTexture.isCube) {
			snow_modules_opengl_web_GL.bindTexture(34067,internalTexture.data);
			snow_modules_opengl_web_GL.texParameteri(34067,10242,33071);
			snow_modules_opengl_web_GL.texParameteri(34067,10243,33071);
			this._setAnisotropicLevel(34067,texture);
		} else {
			snow_modules_opengl_web_GL.bindTexture(3553,internalTexture.data);
			if(internalTexture._cachedWrapU != texture.wrapU) {
				internalTexture._cachedWrapU = texture.wrapU;
				var _g = texture.wrapU;
				switch(_g) {
				case 1:
					snow_modules_opengl_web_GL.texParameteri(3553,10242,10497);
					break;
				case 0:
					snow_modules_opengl_web_GL.texParameteri(3553,10242,33071);
					break;
				case 2:
					snow_modules_opengl_web_GL.texParameteri(3553,10242,33648);
					break;
				}
			}
			if(internalTexture._cachedWrapV != texture.wrapV) {
				internalTexture._cachedWrapV = texture.wrapV;
				var _g1 = texture.wrapV;
				switch(_g1) {
				case 1:
					snow_modules_opengl_web_GL.texParameteri(3553,10243,10497);
					break;
				case 0:
					snow_modules_opengl_web_GL.texParameteri(3553,10243,33071);
					break;
				case 2:
					snow_modules_opengl_web_GL.texParameteri(3553,10243,33648);
					break;
				}
			}
			this._setAnisotropicLevel(3553,texture);
		}
	}
	,_setAnisotropicLevel: function(key,texture) {
		var anisotropicFilterExtension = this._caps.textureAnisotropicFilterExtension;
		if(anisotropicFilterExtension != null && texture._cachedAnisotropicFilteringLevel != texture.anisotropicFilteringLevel) {
			snow_modules_opengl_web_GL.texParameterf(key,anisotropicFilterExtension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropicFilteringLevel,this._caps.maxAnisotropy));
			texture._cachedAnisotropicFilteringLevel = texture.anisotropicFilteringLevel;
		}
	}
	,readPixels: function(x,y,width,height) {
		var data;
		var elements = height * width * 4;
		var len = null;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		data = this1;
		snow_modules_opengl_web_GL.readPixels(0,0,width,height,6408,5121,data);
		return data;
	}
	,dispose: function() {
		this.stopRenderLoop();
		while(this.scenes.length > 0) {
			this.scenes[0].dispose();
			this.scenes[0] = null;
			this.scenes.shift();
		}
		var $it0 = this._compiledEffects.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			snow_modules_opengl_web_GL.deleteProgram(this._compiledEffects.get(name)._program);
		}
	}
	,__class__: com_babylonhx_Engine
	,__properties__: {get_drawCalls:"get_drawCalls"}
};
var com_babylonhx_EngineCapabilities = $hx_exports.BABYLON.EngineCapabilities = function() {
};
$hxClasses["com.babylonhx.EngineCapabilities"] = com_babylonhx_EngineCapabilities;
com_babylonhx_EngineCapabilities.__name__ = ["com","babylonhx","EngineCapabilities"];
com_babylonhx_EngineCapabilities.prototype = {
	maxTexturesImageUnits: null
	,maxTextureSize: null
	,maxCubemapTextureSize: null
	,maxRenderTextureSize: null
	,standardDerivatives: null
	,s3tc: null
	,textureFloat: null
	,textureAnisotropicFilterExtension: null
	,highPrecisionShaderSupported: null
	,maxAnisotropy: null
	,instancedArrays: null
	,uintIndices: null
	,__class__: com_babylonhx_EngineCapabilities
};
var com_babylonhx_IDisposable = $hx_exports.BABYLON.IDisposable = function() { };
$hxClasses["com.babylonhx.IDisposable"] = com_babylonhx_IDisposable;
com_babylonhx_IDisposable.__name__ = ["com","babylonhx","IDisposable"];
com_babylonhx_IDisposable.prototype = {
	dispose: null
	,__class__: com_babylonhx_IDisposable
};
var com_babylonhx_ISmartArrayCompatible = $hx_exports.BABYLON.ISmartArrayCompatible = function() { };
$hxClasses["com.babylonhx.ISmartArrayCompatible"] = com_babylonhx_ISmartArrayCompatible;
com_babylonhx_ISmartArrayCompatible.__name__ = ["com","babylonhx","ISmartArrayCompatible"];
com_babylonhx_ISmartArrayCompatible.prototype = {
	__smartArrayFlags: null
	,__class__: com_babylonhx_ISmartArrayCompatible
};
var com_babylonhx_Node = $hx_exports.BABYLON.Node = function(name,scene) {
	this.__smartArrayFlags = [];
	this._parentRenderId = -1;
	this._currentRenderId = -1;
	this._isReady = true;
	this._isEnabled = true;
	this._childrenFlag = -1;
	this.animations = [];
	this.state = "";
	this.name = name;
	this.id = name;
	this._scene = scene;
	this._initCache();
};
$hxClasses["com.babylonhx.Node"] = com_babylonhx_Node;
com_babylonhx_Node.__name__ = ["com","babylonhx","Node"];
com_babylonhx_Node.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_Node.prototype = {
	parent: null
	,name: null
	,id: null
	,uniqueId: null
	,state: null
	,animations: null
	,onReady: null
	,_childrenFlag: null
	,_isEnabled: null
	,_isReady: null
	,_currentRenderId: null
	,_parentRenderId: null
	,__smartArrayFlags: null
	,_waitingParentId: null
	,_scene: null
	,_cache: null
	,getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._scene._engine;
	}
	,getWorldMatrix: function() {
		return null;
	}
	,_initCache: function() {
		this._cache = { };
		this._cache.parent = null;
	}
	,updateCache: function(force) {
		if(force == null) force = false;
		if(!force && this.isSynchronized(null)) return;
		this._cache.parent = this.parent;
		this._updateCache();
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
	}
	,_isSynchronized: function() {
		return true;
	}
	,_markSyncedWithParent: function() {
		this._parentRenderId = this.parent._currentRenderId;
	}
	,isSynchronizedWithParent: function() {
		if(this.parent == null) return true;
		if(this._parentRenderId != this.parent._currentRenderId) return false;
		return this.parent.isSynchronized(null);
	}
	,isSynchronized: function(updateCache) {
		if(updateCache == null) updateCache = false;
		var check = this.hasNewParent();
		check = check || !this.isSynchronizedWithParent();
		check = check || !this._isSynchronized();
		if(updateCache) this.updateCache(true);
		return !check;
	}
	,hasNewParent: function(update) {
		if(update == null) update = false;
		if(this._cache.parent == this.parent) return false;
		if(update) this._cache.parent = this.parent;
		return true;
	}
	,isReady: function() {
		return this._isReady;
	}
	,isEnabled: function() {
		if(!this._isEnabled) return false;
		if(this.parent != null) return this.parent.isEnabled();
		return true;
	}
	,setEnabled: function(value) {
		this._isEnabled = value;
	}
	,isDescendantOf: function(ancestor) {
		if(this.parent != null) {
			if(this.parent == ancestor) return true;
			return this.parent.isDescendantOf(ancestor);
		}
		return false;
	}
	,_getDescendants: function(list,results) {
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var index = _g1++;
			var item = list[index];
			if(item.isDescendantOf(this)) results.push(item);
		}
	}
	,getDescendants: function() {
		var results = [];
		this._getDescendants(this._scene.meshes,results);
		this._getDescendants(this._scene.lights,results);
		this._getDescendants(this._scene.cameras,results);
		return results;
	}
	,_setReady: function(state) {
		if(state == this._isReady) return;
		if(!state) {
			this._isReady = false;
			return;
		}
		this._isReady = true;
		if(this.onReady != null) this.onReady(this);
	}
	,__class__: com_babylonhx_Node
};
var com_babylonhx_Scene = $hx_exports.BABYLON.Scene = function(engine) {
	this._uniqueIdCounter = 0;
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._activeAnimatables = [];
	this._activeBones = 0;
	this._activeSkeletons = new com_babylonhx_tools_SmartArray(32);
	this._activeParticleSystems = new com_babylonhx_tools_SmartArray(256);
	this._renderTargets = new com_babylonhx_tools_SmartArray(256);
	this._processedMaterials = new com_babylonhx_tools_SmartArray(256);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._pendingData = [];
	this._onReadyCallbacks = [];
	this._toBeDisposed = new com_babylonhx_tools_SmartArray(256);
	this._executeWhenReadyTimeoutId = -1;
	this._renderId = 0;
	this._animationStartDate = -1;
	this._animationRatio = 0;
	this._spritesDuration = 0;
	this._renderDuration = 0;
	this._particlesDuration = 0;
	this._renderTargetsDuration = 0;
	this._evaluateActiveMeshesDuration = 0;
	this._lastFrameDuration = 0;
	this._activeParticles = 0;
	this._activeIndices = 0;
	this._totalVertices = 0;
	this._proceduralTextures = [];
	this.proceduralTexturesEnabled = true;
	this._meshesForIntersections = new com_babylonhx_tools_SmartArray(256);
	this._actionManagers = [];
	this.importedMeshesFiles = [];
	this.customRenderTargets = [];
	this.dumpNextRenderTargets = false;
	this.renderTargetsEnabled = true;
	this.postProcessesEnabled = true;
	this.gravity = new com_babylonhx_math_Vector3(0,-9.0,0);
	this._workerCollisions = false;
	this.collisionsEnabled = true;
	this.lensFlareSystems = [];
	this.lensFlaresEnabled = true;
	this.skeletons = [];
	this.skeletonsEnabled = true;
	this.layers = [];
	this.spriteManagers = [];
	this.spritesEnabled = true;
	this.particleSystems = [];
	this.particlesEnabled = true;
	this.textures = [];
	this.texturesEnabled = true;
	this.multiMaterials = [];
	this.materials = [];
	this._geometries = [];
	this.meshes = [];
	this.activeCameras = [];
	this.cameras = [];
	this.lights = [];
	this.lightsEnabled = true;
	this.shadowsEnabled = true;
	this.fogEnd = 1000.0;
	this.fogStart = 0;
	this.fogDensity = 0.1;
	this.fogColor = new com_babylonhx_math_Color3(0.2,0.2,0.3);
	this.fogMode = com_babylonhx_Scene.FOGMODE_NONE;
	this.fogEnabled = true;
	this.cameraToUseForPointers = null;
	this.animationsEnabled = true;
	this.forceShowBoundingBoxes = false;
	this.forcePointsCloud = false;
	this.forceWireframe = false;
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.clearColor = new com_babylonhx_math_Color3(0.2,0.2,0.3);
	this.autoClear = true;
	this._engine = engine;
	engine.scenes.push(this);
	this.defaultMaterial = new com_babylonhx_materials_StandardMaterial("default material",this);
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(this);
	this.postProcessManager = new com_babylonhx_postprocess_PostProcessManager(this);
	this.postProcessRenderPipelineManager = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager();
	this._boundingBoxRenderer = new com_babylonhx_rendering_BoundingBoxRenderer(this);
	this._outlineRenderer = new com_babylonhx_rendering_OutlineRenderer(this);
	this.attachControl();
	this.simplificationQueue = new com_babylonhx_mesh_simplification_SimplificationQueue();
};
$hxClasses["com.babylonhx.Scene"] = com_babylonhx_Scene;
com_babylonhx_Scene.__name__ = ["com","babylonhx","Scene"];
com_babylonhx_Scene.prototype = {
	autoClear: null
	,clearColor: null
	,ambientColor: null
	,beforeRender: null
	,afterRender: null
	,onDispose: null
	,beforeCameraRender: null
	,afterCameraRender: null
	,forceWireframe: null
	,forcePointsCloud: null
	,forceShowBoundingBoxes: null
	,clipPlane: null
	,animationsEnabled: null
	,_onPointerMove: null
	,_onPointerDown: null
	,onPointerDown: null
	,_onPointerUp: null
	,onPointerUp: null
	,cameraToUseForPointers: null
	,_pointerX: null
	,_pointerY: null
	,_meshUnderPointer: null
	,_onKeyDown: null
	,_onKeyUp: null
	,fogEnabled: null
	,fogMode: null
	,fogColor: null
	,fogDensity: null
	,fogStart: null
	,fogEnd: null
	,shadowsEnabled: null
	,lightsEnabled: null
	,lights: null
	,onNewLightAdded: null
	,onLightRemoved: null
	,cameras: null
	,onNewCameraAdded: null
	,onCameraRemoved: null
	,activeCameras: null
	,activeCamera: null
	,meshes: null
	,onNewMeshAdded: null
	,onMeshRemoved: null
	,_geometries: null
	,onGeometryAdded: null
	,onGeometryRemoved: null
	,materials: null
	,multiMaterials: null
	,defaultMaterial: null
	,texturesEnabled: null
	,textures: null
	,particlesEnabled: null
	,particleSystems: null
	,spritesEnabled: null
	,spriteManagers: null
	,layers: null
	,skeletonsEnabled: null
	,skeletons: null
	,lensFlaresEnabled: null
	,lensFlareSystems: null
	,collisionsEnabled: null
	,_workerCollisions: null
	,set_workerCollisions: function(enabled) {
		this._workerCollisions = enabled;
		if(this.collisionCoordinator != null) this.collisionCoordinator.destroy();
		this.collisionCoordinator = new com_babylonhx_collisions_CollisionCoordinatorLegacy();
		this.collisionCoordinator.init(this);
		return enabled;
	}
	,get_workerCollisions: function() {
		return this._workerCollisions;
	}
	,collisionCoordinator: null
	,gravity: null
	,postProcessesEnabled: null
	,postProcessManager: null
	,postProcessRenderPipelineManager: null
	,renderTargetsEnabled: null
	,dumpNextRenderTargets: null
	,customRenderTargets: null
	,useDelayedTextureLoading: null
	,importedMeshesFiles: null
	,database: null
	,actionManager: null
	,_actionManagers: null
	,_meshesForIntersections: null
	,proceduralTexturesEnabled: null
	,_proceduralTextures: null
	,simplificationQueue: null
	,_engine: null
	,_totalVertices: null
	,_activeIndices: null
	,_activeParticles: null
	,_lastFrameDuration: null
	,_evaluateActiveMeshesDuration: null
	,_renderTargetsDuration: null
	,_particlesDuration: null
	,_renderDuration: null
	,_spritesDuration: null
	,_animationRatio: null
	,_animationStartDate: null
	,_cachedMaterial: null
	,_renderId: null
	,_executeWhenReadyTimeoutId: null
	,_toBeDisposed: null
	,_onReadyCallbacks: null
	,_pendingData: null
	,_onBeforeRenderCallbacks: null
	,_onAfterRenderCallbacks: null
	,_activeMeshes: null
	,_processedMaterials: null
	,_renderTargets: null
	,_activeParticleSystems: null
	,_activeSkeletons: null
	,_activeBones: null
	,_renderingManager: null
	,_physicsEngine: null
	,_activeAnimatables: null
	,_transformMatrix: null
	,_pickWithRayInverseMatrix: null
	,_scaledPosition: null
	,_scaledVelocity: null
	,_boundingBoxRenderer: null
	,_outlineRenderer: null
	,_depthRenderer: null
	,_uniqueIdCounter: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_frustumPlanes: null
	,_selectionOctree: null
	,_pointerOverMesh: null
	,get_meshUnderPointer: function() {
		return this._meshUnderPointer;
	}
	,get_pointerX: function() {
		return this._pointerX;
	}
	,get_pointerY: function() {
		return this._pointerY;
	}
	,getCachedMaterial: function() {
		return this._cachedMaterial;
	}
	,getBoundingBoxRenderer: function() {
		return this._boundingBoxRenderer;
	}
	,getOutlineRenderer: function() {
		return this._outlineRenderer;
	}
	,getEngine: function() {
		return this._engine;
	}
	,getTotalVertices: function() {
		return this._totalVertices;
	}
	,getActiveVertices: function() {
		return this._activeIndices;
	}
	,getActiveParticles: function() {
		return this._activeParticles;
	}
	,getActiveBones: function() {
		return this._activeBones;
	}
	,getLastFrameDuration: function() {
		return this._lastFrameDuration;
	}
	,getEvaluateActiveMeshesDuration: function() {
		return this._evaluateActiveMeshesDuration;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,getRenderTargetsDuration: function() {
		return this._renderTargetsDuration;
	}
	,getRenderDuration: function() {
		return this._renderDuration;
	}
	,getParticlesDuration: function() {
		return this._particlesDuration;
	}
	,getSpritesDuration: function() {
		return this._spritesDuration;
	}
	,getAnimationRatio: function() {
		return this._animationRatio;
	}
	,getRenderId: function() {
		return this._renderId;
	}
	,incrementRenderId: function() {
		this._renderId++;
	}
	,_updatePointerPosition: function(x,y) {
		this._pointerX = x;
		this._pointerY = y;
		if(this.cameraToUseForPointers != null) {
			this._pointerX = this._pointerX - (this.cameraToUseForPointers.viewport.x | 0) * this._engine.getRenderWidth();
			this._pointerY = this._pointerY - (this.cameraToUseForPointers.viewport.y | 0) * this._engine.getRenderHeight();
		}
	}
	,attachControl: function() {
		var _g = this;
		this._onPointerMove = function(x,y) {
			_g._pointerX = x;
			_g._pointerY = y;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var pickResult = _g.pick(_g._pointerX,_g._pointerY,function(mesh) {
				return mesh.get_isPickable() && mesh.isVisible && mesh.isReady() && mesh.actionManager != null && mesh.actionManager.get_hasPointerTriggers();
			},false,_g.cameraToUseForPointers);
			if(pickResult.hit) {
				_g._meshUnderPointer = pickResult.pickedMesh;
				_g.setPointerOverMesh(pickResult.pickedMesh);
			} else {
				_g.setPointerOverMesh(null);
				_g._meshUnderPointer = null;
			}
		};
		this._onPointerDown = function(x1,y1,button) {
			var predicate = null;
			if(_g.onPointerDown == null) predicate = function(mesh1) {
				return mesh1.get_isPickable() && mesh1.isVisible && mesh1.isReady() && mesh1.actionManager != null && mesh1.actionManager.get_hasPickTriggers();
			};
			_g._pointerX = x1;
			_g._pointerY = y1;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var pickResult1 = _g.pick(_g._pointerX,_g._pointerY,predicate,false,_g.cameraToUseForPointers);
			if(pickResult1.hit) {
				if(pickResult1.pickedMesh.actionManager != null) {
					switch(button) {
					case 0:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnLeftPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 1:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnCenterPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 2:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnRightPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					}
					pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
				}
			}
			if(_g.onPointerDown != null) _g.onPointerDown(x1,y1,button,pickResult1);
		};
		this._onPointerUp = function(x2,y2,button1) {
			var predicate1 = null;
			if(_g.onPointerUp == null) predicate1 = function(mesh2) {
				return mesh2.get_isPickable() && mesh2.isVisible && mesh2.isReady() && mesh2.actionManager != null && mesh2.actionManager.hasSpecificTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger);
			};
			_g._pointerX = x2;
			_g._pointerY = y2;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var pickResult2 = _g.pick(_g._pointerX,_g._pointerY,predicate1,false,_g.cameraToUseForPointers);
			if(pickResult2.hit) {
				if(pickResult2.pickedMesh.actionManager != null) pickResult2.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult2.pickedMesh));
			}
			if(_g.onPointerUp != null) _g.onPointerUp(x2,y2,button1,pickResult2);
		};
		this._onKeyDown = function(keycode) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyDownTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode));
		};
		this._onKeyUp = function(keycode1) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyUpTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode1));
		};
		com_babylonhx_Engine.mouseDown.push(this._onPointerDown);
		com_babylonhx_Engine.mouseUp.push(this._onPointerUp);
		com_babylonhx_Engine.mouseMove.push(this._onPointerMove);
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
	}
	,detachControl: function() {
		var x = this._onPointerDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x);
		var x1 = this._onPointerUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x1);
		var x2 = this._onPointerMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x2);
		var x3 = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x3);
		var x4 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x4);
	}
	,isReady: function() {
		if(this._pendingData.length > 0) return false;
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var geometry = this._geometries[index];
			if(geometry.delayLoadState == 2) return false;
		}
		var _g11 = 0;
		var _g2 = this.meshes.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var mesh = this.meshes[index1];
			if(!mesh.isReady()) return false;
			var mat = mesh.get_material();
			if(mat != null) {
				if(!mat.isReady(mesh)) return false;
			}
		}
		return true;
	}
	,resetCachedMaterial: function() {
		this._cachedMaterial = null;
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		HxOverrides.remove(this._onBeforeRenderCallbacks,func);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		HxOverrides.remove(this._onAfterRenderCallbacks,func);
	}
	,_addPendingData: function(data) {
		this._pendingData.push(data);
	}
	,_removePendingData: function(data) {
		var x = data;
		HxOverrides.remove(this._pendingData,x);
	}
	,getWaitingItemsCount: function() {
		return this._pendingData.length;
	}
	,executeWhenReady: function(func) {
		this._onReadyCallbacks.push(func);
		if(this._executeWhenReadyTimeoutId != -1) return;
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,_checkIsReady: function() {
		if(this.isReady()) {
			var _g = 0;
			var _g1 = this._onReadyCallbacks;
			while(_g < _g1.length) {
				var func = _g1[_g];
				++_g;
				func();
			}
			this._onReadyCallbacks = [];
			this._executeWhenReadyTimeoutId = -1;
			return;
		}
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,beginAnimation: function(target,from,to,loop,speedRatio,onAnimationEnd,animatable) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		this.stopAnimation(target);
		if(animatable == null) animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd);
		if(target.animations != null) animatable.appendAnimations(target,target.animations);
		if(target.getAnimatables != null) {
			var animatables = target.getAnimatables();
			var _g1 = 0;
			var _g = animatables.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.beginAnimation(animatables[index],from,to,loop,speedRatio,onAnimationEnd,animatable);
			}
		}
		return animatable;
	}
	,beginDirectAnimation: function(target,animations,from,to,loop,speedRatio,onAnimationEnd) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		var animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd,animations);
		return animatable;
	}
	,getAnimatableByTarget: function(target) {
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index].target == target) return this._activeAnimatables[index];
		}
		return null;
	}
	,stopAnimation: function(target) {
		var animatable = this.getAnimatableByTarget(target);
		if(animatable != null) animatable.stop();
	}
	,_animate: function() {
		if(!this.animationsEnabled) return;
		if(this._animationStartDate == -1) this._animationStartDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var now = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var delay = now - this._animationStartDate;
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index] != null) this._activeAnimatables[index]._animate(delay);
		}
	}
	,getViewMatrix: function() {
		return this._viewMatrix;
	}
	,getProjectionMatrix: function() {
		return this._projectionMatrix;
	}
	,getTransformMatrix: function() {
		return this._transformMatrix;
	}
	,setTransformMatrix: function(view,projection) {
		this._viewMatrix = view;
		this._projectionMatrix = projection;
		this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
	}
	,addMesh: function(newMesh) {
		newMesh.uniqueId = this._uniqueIdCounter++;
		var position = this.meshes.push(newMesh);
		if(this.onNewMeshAdded != null) this.onNewMeshAdded(newMesh,position,this);
	}
	,removeMesh: function(toRemove) {
		var index = HxOverrides.indexOf(this.meshes,toRemove,0);
		if(index != -1) this.meshes.splice(index,1);
		if(this.onMeshRemoved != null) this.onMeshRemoved(toRemove);
		return index;
	}
	,removeLight: function(toRemove) {
		var index = HxOverrides.indexOf(this.lights,toRemove,0);
		if(index != -1) this.lights.splice(index,1);
		if(this.onLightRemoved != null) this.onLightRemoved(toRemove);
		return index;
	}
	,removeCamera: function(toRemove) {
		var index = HxOverrides.indexOf(this.cameras,toRemove,0);
		if(index != -1) this.cameras.splice(index,1);
		index = HxOverrides.indexOf(this.activeCameras,toRemove,0);
		if(index != -1) this.activeCameras.splice(index,1);
		if(this.activeCamera == toRemove) {
			if(this.cameras.length > 0) this.activeCamera = this.cameras[0]; else this.activeCamera = null;
		}
		if(this.onCameraRemoved != null) this.onCameraRemoved(toRemove);
		return index;
	}
	,addLight: function(newLight) {
		newLight.uniqueId = this._uniqueIdCounter++;
		var position = this.lights.push(newLight);
		if(this.onNewLightAdded != null) this.onNewLightAdded(newLight,position,this);
	}
	,addCamera: function(newCamera) {
		newCamera.uniqueId = this._uniqueIdCounter++;
		var position = this.cameras.push(newCamera);
		if(this.onNewCameraAdded != null) this.onNewCameraAdded(newCamera,position,this);
	}
	,setActiveCameraByID: function(id) {
		var camera = this.getCameraByID(id);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,setActiveCameraByName: function(name) {
		var camera = this.getCameraByName(name);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,getMaterialByID: function(id) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].id == id) return this.materials[index];
		}
		return null;
	}
	,getMaterialByName: function(name) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].name == name) return this.materials[index];
		}
		return null;
	}
	,getCameraByID: function(id) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].id == id) return this.cameras[index];
		}
		return null;
	}
	,getCameraByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].uniqueId == uniqueId) return this.cameras[index];
		}
		return null;
	}
	,getCameraByName: function(name) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].name == name) return this.cameras[index];
		}
		return null;
	}
	,getLightByName: function(name) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].name == name) return this.lights[index];
		}
		return null;
	}
	,getLightByID: function(id) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].id == id) return this.lights[index];
		}
		return null;
	}
	,getLightByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].uniqueId == uniqueId) return this.lights[index];
		}
		return null;
	}
	,getGeometryByID: function(id) {
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._geometries[index].id == id) return this._geometries[index];
		}
		return null;
	}
	,pushGeometry: function(geometry,force) {
		if(force == null) force = false;
		if(!force && this.getGeometryByID(geometry.id) != null) return false;
		this._geometries.push(geometry);
		if(this.onGeometryAdded != null) this.onGeometryAdded(geometry);
		return true;
	}
	,removeGeometry: function(geometry) {
		var index = HxOverrides.indexOf(this._geometries,geometry,0);
		if(index > -1) {
			this._geometries.splice(index,1);
			if(this.onGeometryRemoved != null) this.onGeometryRemoved(geometry);
			return true;
		}
		return false;
	}
	,getGeometries: function() {
		return this._geometries;
	}
	,getMeshByID: function(id) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].id == id) return this.meshes[index];
		}
		return null;
	}
	,getMeshByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].uniqueId == uniqueId) return this.meshes[index];
		}
		return null;
	}
	,getLastMeshByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		return null;
	}
	,getLastEntryByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		index = this.cameras.length - 1;
		while(index >= 0) {
			if(this.cameras[index].id == id) return this.cameras[index];
			--index;
		}
		index = this.lights.length - 1;
		while(index >= 0) {
			if(this.lights[index].id == id) return this.lights[index];
			--index;
		}
		return null;
	}
	,getNodeByName: function(name) {
		var mesh = this.getMeshByName(name);
		if(mesh != null) return mesh;
		var light = this.getLightByName(name);
		if(light != null) return light;
		return this.getCameraByName(name);
	}
	,getMeshByName: function(name) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].name == name) return this.meshes[index];
		}
		return null;
	}
	,getLastSkeletonByID: function(id) {
		var index = this.skeletons.length - 1;
		while(index >= 0) {
			if(this.skeletons[index].id == id) return this.skeletons[index];
			--index;
		}
		return null;
	}
	,getSkeletonById: function(id) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].id == id) return this.skeletons[index];
		}
		return null;
	}
	,getSkeletonByName: function(name) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].name == name) return this.skeletons[index];
		}
		return null;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_evaluateSubMesh: function(subMesh,mesh) {
		if(mesh.alwaysSelectAsActiveMesh || mesh.subMeshes.length == 1 || subMesh._boundingInfo.isInFrustum(this._frustumPlanes)) {
			var material = subMesh.getMaterial();
			if(mesh.showSubMeshesBoundingBox) this._boundingBoxRenderer.renderList.push(subMesh._boundingInfo.boundingBox);
			if(material != null) {
				if(material.getRenderTargetTextures != null) {
					if(this._processedMaterials.indexOf(material) == -1) {
						this._processedMaterials.push(material);
						this._renderTargets.concat(material.getRenderTargetTextures());
					}
				}
				this._activeIndices += subMesh.verticesCount;
				this._renderingManager.dispatch(subMesh);
			}
		}
	}
	,_evaluateActiveMeshes: function() {
		this.activeCamera._activeMeshes.reset();
		this._activeMeshes.reset();
		this._renderingManager.reset();
		this._processedMaterials.reset();
		this._activeParticleSystems.reset();
		this._activeSkeletons.reset();
		this._boundingBoxRenderer.reset();
		if(this._frustumPlanes == null) this._frustumPlanes = com_babylonhx_math_Frustum.GetPlanes(this._transformMatrix); else com_babylonhx_math_Frustum.GetPlanesToRef(this._transformMatrix,this._frustumPlanes);
		var meshes = null;
		var len = -1;
		if(this._selectionOctree != null) {
			var selection = this._selectionOctree.select(this._frustumPlanes,null);
			meshes = selection.data;
			len = selection.length;
		} else {
			len = this.meshes.length;
			meshes = this.meshes;
		}
		var _g = 0;
		while(_g < len) {
			var meshIndex = _g++;
			var mesh = meshes[meshIndex];
			if(mesh.get_isBlocked()) continue;
			this._totalVertices += mesh.getTotalVertices();
			if(!mesh.isReady() || !mesh.isEnabled()) continue;
			mesh.computeWorldMatrix();
			if(mesh.actionManager != null && mesh.actionManager.hasSpecificTriggers([com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger,com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger])) this._meshesForIntersections.pushNoDuplicate(mesh);
			var meshLOD = mesh.getLOD(this.activeCamera);
			if(meshLOD == null) continue;
			mesh._preActivate();
			if(mesh.alwaysSelectAsActiveMesh || mesh.isVisible && mesh.get_visibility() > 0 && (mesh.layerMask & this.activeCamera.layerMask) != 0 && mesh.isInFrustum(this._frustumPlanes)) {
				this._activeMeshes.push(mesh);
				this.activeCamera._activeMeshes.push(mesh);
				mesh._activate(this._renderId);
				this._activeMesh(meshLOD);
			}
		}
		var beforeParticlesDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.particlesEnabled) {
			var _g1 = 0;
			var _g2 = this.particleSystems.length;
			while(_g1 < _g2) {
				var particleIndex = _g1++;
				var particleSystem = this.particleSystems[particleIndex];
				if(!particleSystem._started) continue;
				if(particleSystem.emitter.position == null || particleSystem.emitter != null && particleSystem.emitter.isEnabled()) {
					this._activeParticleSystems.push(particleSystem);
					particleSystem.animate();
				}
			}
		}
		this._particlesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeParticlesDate;
	}
	,_activeMesh: function(mesh) {
		if(mesh.get_skeleton() != null && this.skeletonsEnabled) this._activeSkeletons.pushNoDuplicate(mesh.get_skeleton());
		if(mesh.showBoundingBox || this.forceShowBoundingBoxes) this._boundingBoxRenderer.renderList.push(mesh.getBoundingInfo().boundingBox);
		if(mesh != null && mesh.subMeshes != null) {
			var len = -1;
			var subMeshes = null;
			if(mesh._submeshesOctree != null && mesh.useOctreeForRenderingSelection) {
				var intersections = mesh._submeshesOctree.select(this._frustumPlanes,null);
				len = intersections.length;
				subMeshes = intersections.data;
			} else {
				subMeshes = mesh.subMeshes;
				len = subMeshes.length;
			}
			var _g = 0;
			while(_g < len) {
				var subIndex = _g++;
				var subMesh = subMeshes[subIndex];
				this._evaluateSubMesh(subMesh,mesh);
			}
		}
	}
	,updateTransformMatrix: function(force) {
		if(force == null) force = false;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(force));
	}
	,_renderForCamera: function(camera) {
		var engine = this._engine;
		this.activeCamera = camera;
		if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
		engine.setViewport(this.activeCamera.viewport,null,null);
		this._renderId++;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		if(this.beforeCameraRender != null) this.beforeCameraRender(this.activeCamera);
		var beforeEvaluateActiveMeshesDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		this._evaluateActiveMeshes();
		this._evaluateActiveMeshesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeEvaluateActiveMeshesDate;
		var _g1 = 0;
		var _g = this._activeSkeletons.length;
		while(_g1 < _g) {
			var skeletonIndex = _g1++;
			var skeleton = this._activeSkeletons.data[skeletonIndex];
			skeleton.prepare();
		}
		var beforeRenderTargetDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.renderTargetsEnabled) {
			var _g11 = 0;
			var _g2 = this._renderTargets.length;
			while(_g11 < _g2) {
				var renderIndex = _g11++;
				var renderTarget = this._renderTargets.data[renderIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					var hasSpecialRenderTargetCamera = renderTarget.activeCamera != null && renderTarget.activeCamera != this.activeCamera;
					renderTarget.render(hasSpecialRenderTargetCamera,this.dumpNextRenderTargets);
				}
			}
			this._renderId++;
		}
		if(this._renderTargets.length > 0) {
			snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this._renderTargetsDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderTargetDate;
		this.postProcessManager._prepareFrame();
		var beforeRenderDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var layer = null;
			var _g12 = 0;
			var _g3 = this.layers.length;
			while(_g12 < _g3) {
				var layerIndex = _g12++;
				layer = this.layers[layerIndex];
				if(layer.isBackground) layer.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderingManager.render(null,null,true,true);
		this._boundingBoxRenderer.render();
		if(this.lensFlaresEnabled) {
			var _g13 = 0;
			var _g4 = this.lensFlareSystems.length;
			while(_g13 < _g4) {
				var lensFlareSystemIndex = _g13++;
				this.lensFlareSystems[lensFlareSystemIndex].render();
			}
		}
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var _g14 = 0;
			var _g5 = this.layers.length;
			while(_g14 < _g5) {
				var layerIndex1 = _g14++;
				var layer1 = this.layers[layerIndex1];
				if(!layer1.isBackground) layer1.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderDate;
		this.postProcessManager._finalizeFrame(camera.isIntermediate);
		this.activeCamera._updateFromScene();
		this._renderTargets.reset();
		if(this.afterCameraRender != null) this.afterCameraRender(this.activeCamera);
	}
	,_processSubCameras: function(camera) {
		if(camera.subCameras.length == 0) {
			this._renderForCamera(camera);
			return;
		}
		var _g1 = 0;
		var _g = camera.subCameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this._renderForCamera(camera.subCameras[index]);
		}
		this.activeCamera = camera;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		this.activeCamera._updateFromScene();
	}
	,_checkIntersections: function() {
		var _g1 = 0;
		var _g = this._meshesForIntersections.length;
		while(_g1 < _g) {
			var index = _g1++;
			var sourceMesh = this._meshesForIntersections.data[index];
			var _g3 = 0;
			var _g2 = sourceMesh.actionManager.actions.length;
			while(_g3 < _g2) {
				var actionIndex = _g3++;
				var action = sourceMesh.actionManager.actions[actionIndex];
				if(action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger || action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
					var otherMesh = action.getTriggerParameter();
					var areIntersecting = otherMesh.intersectsMesh(sourceMesh,false);
					var currentIntersectionInProgress = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
					if(areIntersecting && currentIntersectionInProgress == -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						sourceMesh._intersectionsInProgress.push(otherMesh);
					} else if(!areIntersecting && currentIntersectionInProgress > -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						var indexOfOther = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
						if(indexOfOther > -1) sourceMesh._intersectionsInProgress.splice(indexOfOther,1);
					}
				}
			}
		}
	}
	,render: function() {
		this._particlesDuration = 0;
		this._spritesDuration = 0;
		this._activeParticles = 0;
		this._renderDuration = 0;
		this._renderTargetsDuration = 0;
		this._evaluateActiveMeshesDuration = 0;
		this._totalVertices = 0;
		this._activeIndices = 0;
		this._activeBones = 0;
		this._engine._drawCalls = 0;
		this._meshesForIntersections.reset();
		this._cachedMaterial = null;
		if(this.actionManager != null) this.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnEveryFrameTrigger,null);
		if(!this.simplificationQueue.running) this.simplificationQueue.executeNext();
		if(this.beforeRender != null) this.beforeRender();
		var _g = 0;
		var _g1 = this._onBeforeRenderCallbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var deltaTime = Math.max(com_babylonhx_Scene.MinDeltaTime,Math.min(this._engine.deltaTime,com_babylonhx_Scene.MaxDeltaTime));
		this._animationRatio = deltaTime * 0.06;
		this._animate();
		if(this._physicsEngine != null) this._physicsEngine._runOneStep(deltaTime / 1000.0);
		var beforeRenderTargetDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var engine = this._engine;
		var currentActiveCamera = this.activeCamera;
		if(this.renderTargetsEnabled) {
			var _g11 = 0;
			var _g2 = this.customRenderTargets.length;
			while(_g11 < _g2) {
				var customIndex = _g11++;
				var renderTarget = this.customRenderTargets[customIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					if(renderTarget.activeCamera != null) this.activeCamera = renderTarget.activeCamera; else this.activeCamera = this.activeCamera;
					if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
					engine.setViewport(this.activeCamera.viewport,null,null);
					this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
					renderTarget.render(currentActiveCamera != this.activeCamera);
				}
			}
			this._renderId++;
		}
		if(this.customRenderTargets.length > 0) {
			snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this._renderTargetsDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderTargetDate;
		this.activeCamera = currentActiveCamera;
		if(this.proceduralTexturesEnabled) {
			var _g12 = 0;
			var _g3 = this._proceduralTextures.length;
			while(_g12 < _g3) {
				var proceduralIndex = _g12++;
				var proceduralTexture = this._proceduralTextures[proceduralIndex];
				if(proceduralTexture._shouldRender()) proceduralTexture.render();
			}
		}
		this._engine.clear(this.clearColor,this.autoClear || this.forceWireframe || this.forcePointsCloud,true);
		if(this.shadowsEnabled) {
			var _g13 = 0;
			var _g4 = this.lights.length;
			while(_g13 < _g4) {
				var lightIndex = _g13++;
				var light = this.lights[lightIndex];
				var shadowGenerator = light.getShadowGenerator();
				if(light.isEnabled() && shadowGenerator != null && (function($this) {
					var $r;
					var _this = shadowGenerator.getShadowMap().getScene().textures;
					var x = shadowGenerator.getShadowMap();
					$r = HxOverrides.indexOf(_this,x,0);
					return $r;
				}(this)) != -1) this._renderTargets.push(shadowGenerator.getShadowMap());
			}
		}
		if(this._depthRenderer != null) this._renderTargets.push(this._depthRenderer._depthMap);
		this.postProcessRenderPipelineManager.update();
		if(this.activeCameras.length > 0) {
			var currentRenderId = this._renderId;
			var _g14 = 0;
			var _g5 = this.activeCameras.length;
			while(_g14 < _g5) {
				var cameraIndex = _g14++;
				this._renderId = currentRenderId;
				this._processSubCameras(this.activeCameras[cameraIndex]);
			}
		} else {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("No camera defined");
			this._processSubCameras(this.activeCamera);
		}
		this._checkIntersections();
		if(this.afterRender != null) this.afterRender();
		var _g6 = 0;
		var _g15 = this._onAfterRenderCallbacks;
		while(_g6 < _g15.length) {
			var callback1 = _g15[_g6];
			++_g6;
			callback1();
		}
		var _g16 = 0;
		var _g7 = this._toBeDisposed.length;
		while(_g16 < _g7) {
			var index = _g16++;
			this._toBeDisposed.data[index].dispose();
			this._toBeDisposed.data[index] = null;
		}
		this._toBeDisposed.reset();
		if(this.dumpNextRenderTargets) this.dumpNextRenderTargets = false;
	}
	,enableDepthRenderer: function() {
		if(this._depthRenderer != null) return this._depthRenderer;
		this._depthRenderer = new com_babylonhx_rendering_DepthRenderer(this);
		return this._depthRenderer;
	}
	,disableDepthRenderer: function() {
		if(this._depthRenderer == null) return;
		this._depthRenderer._depthMap.dispose();
		this._depthRenderer = null;
	}
	,dispose: function() {
		this.beforeRender = null;
		this.afterRender = null;
		this.skeletons = [];
		this._boundingBoxRenderer.dispose();
		if(this._depthRenderer != null) this._depthRenderer._depthMap.dispose();
		if(this.onDispose != null) this.onDispose();
		this.detachControl();
		this._onBeforeRenderCallbacks = [];
		this._onAfterRenderCallbacks = [];
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.cameras[index].detachControl(this);
		}
		while(this.lights.length > 0) this.lights[0].dispose();
		while(this.meshes.length > 0) this.meshes[0].dispose(true);
		while(this.cameras.length > 0) this.cameras[0].dispose();
		while(this.materials.length > 0) this.materials[0].dispose();
		while(this.particleSystems.length > 0) this.particleSystems[0].dispose(null);
		while(this.spriteManagers.length > 0) this.spriteManagers[0].dispose();
		while(this.layers.length > 0) this.layers[0].dispose();
		while(this.textures.length > 0) this.textures[0].dispose();
		this.postProcessManager.dispose();
		if(this._physicsEngine != null) this.disablePhysicsEngine();
		HxOverrides.remove(this._engine.scenes,this);
		this._engine.wipeCaches();
	}
	,_getNewPosition: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,finalPosition,excludedMesh);
		finalPosition.multiplyInPlace(collider.radius);
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,getWorldExtends: function() {
		var min = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		var max = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			mesh.computeWorldMatrix(true);
			var minBox = mesh.getBoundingInfo().boundingBox.minimumWorld;
			var maxBox = mesh.getBoundingInfo().boundingBox.maximumWorld;
			if(minBox.x < min.x) min.x = minBox.x;
			if(minBox.y < min.y) min.y = minBox.y;
			if(minBox.z < min.z) min.z = minBox.z;
			if(minBox.x > max.x) max.x = minBox.x;
			if(minBox.y > max.y) max.y = minBox.y;
			if(minBox.z > max.z) max.z = minBox.z;
			if(maxBox.x < min.x) min.x = maxBox.x;
			if(maxBox.y < min.y) min.y = maxBox.y;
			if(maxBox.z < min.z) min.z = maxBox.z;
			if(maxBox.x > max.x) max.x = maxBox.x;
			if(maxBox.y > max.y) max.y = maxBox.y;
			if(maxBox.z > max.z) max.z = maxBox.z;
		}
		return { min : min, max : max};
	}
	,createOrUpdateSelectionOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._selectionOctree == null) this._selectionOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes,maxCapacity,maxDepth);
		var worldExtends = this.getWorldExtends();
		this._selectionOctree.update(worldExtends.min,worldExtends.max,this.meshes);
		return this._selectionOctree;
	}
	,createPickingRay: function(x,y,world,camera) {
		var engine = this._engine;
		if(camera == null) {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
			camera = this.activeCamera;
		}
		var cameraViewport = camera.viewport;
		var viewport = cameraViewport.toGlobal(engine);
		x = x / this._engine.getHardwareScalingLevel() - viewport.x;
		y = y / this._engine.getHardwareScalingLevel() - (this._engine.getRenderHeight() - viewport.y - viewport.height);
		return com_babylonhx_math_Ray.CreateNew(x,y,viewport.width,viewport.height,world != null?world:com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),camera.getViewMatrix(),camera.getProjectionMatrix(false));
	}
	,_internalPick: function(rayFunction,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = null;
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var meshIndex = _g1++;
			var mesh = this.meshes[meshIndex];
			if(predicate != null) {
				if(!predicate(mesh)) continue;
			} else if(!mesh.isEnabled() || !mesh.isVisible || !mesh.get_isPickable()) continue;
			var world = mesh.getWorldMatrix();
			var ray = rayFunction(world);
			var result = mesh.intersects(ray,fastCheck);
			if(result == null || !result.hit) continue;
			if(!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) continue;
			pickingInfo = result;
			if(fastCheck) break;
		}
		if(pickingInfo != null) return pickingInfo; else return new com_babylonhx_collisions_PickingInfo();
	}
	,pick: function(x,y,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			return _g.createPickingRay(x,y,world,camera);
		},predicate,fastCheck);
	}
	,pickWithRay: function(ray,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			if(_g._pickWithRayInverseMatrix == null) _g._pickWithRayInverseMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			world.invertToRef(_g._pickWithRayInverseMatrix);
			return com_babylonhx_math_Ray.Transform(ray,_g._pickWithRayInverseMatrix);
		},predicate,fastCheck);
	}
	,setPointerOverMesh: function(mesh) {
		if(this._pointerOverMesh == mesh) return;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOutTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
		this._pointerOverMesh = mesh;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOverTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
	}
	,getPointerOverMesh: function() {
		return this._pointerOverMesh;
	}
	,getPhysicsEngine: function() {
		return this._physicsEngine;
	}
	,enablePhysics: function(gravity,plugin) {
		if(this._physicsEngine != null) return true;
		this._physicsEngine = new com_babylonhx_physics_PhysicsEngine(plugin);
		if(!this._physicsEngine.isSupported()) {
			this._physicsEngine = null;
			return false;
		}
		this._physicsEngine._initialize(gravity);
		return true;
	}
	,disablePhysicsEngine: function() {
		if(this._physicsEngine == null) return;
		this._physicsEngine.dispose();
		this._physicsEngine = null;
	}
	,isPhysicsEnabled: function() {
		return this._physicsEngine != null;
	}
	,setGravity: function(gravity) {
		if(this._physicsEngine == null) return;
		this._physicsEngine._setGravity(gravity);
	}
	,createCompoundImpostor: function(parts,options) {
		if(parts.parts != null) {
			options = parts;
			parts = parts.parts;
		}
		if(this._physicsEngine == null) return null;
		var _g1 = 0;
		var _g = parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = parts[index].mesh;
			mesh._physicImpostor = parts[index].impostor;
			mesh._physicsMass = options.mass / parts.length;
			mesh._physicsFriction = options.friction;
			mesh._physicRestitution = options.restitution;
		}
		return this._physicsEngine._registerMeshesAsCompound(parts,options);
	}
	,deleteCompoundImpostor: function(compound) {
		var _g1 = 0;
		var _g = compound.parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = compound.parts[index].mesh;
			mesh._physicImpostor = 0;
			this._physicsEngine._unregisterMesh(mesh);
		}
	}
	,createDefaultCameraOrLight: function() {
		if(this.lights.length == 0) new com_babylonhx_lights_HemisphericLight("default light",new com_babylonhx_math_Vector3(0,1.0,0),this);
		if(this.activeCamera == null) {
			var camera = new com_babylonhx_cameras_FreeCamera("default camera",new com_babylonhx_math_Vector3(0,0,0),this);
			var worldExtends = this.getWorldExtends();
			var worldCenter = worldExtends.min.add(worldExtends.max.subtract(worldExtends.min).scale(0.5));
			camera.position = new com_babylonhx_math_Vector3(worldCenter.x,worldCenter.y,worldExtends.min.z - (worldExtends.max.z - worldExtends.min.z));
			camera.setTarget(worldCenter);
			this.activeCamera = camera;
		}
	}
	,__class__: com_babylonhx_Scene
	,__properties__: {get_pointerY:"get_pointerY",get_pointerX:"get_pointerX",get_meshUnderPointer:"get_meshUnderPointer",set_workerCollisions:"set_workerCollisions",get_workerCollisions:"get_workerCollisions"}
};
var com_babylonhx__$AlphaState = $hx_exports.BABYLON._AlphaState = function() {
	this._blendFunctionParameters = [];
	this._alphaBlend = false;
	this._isBlendFunctionParametersDirty = false;
	this._isAlphaBlendDirty = false;
};
$hxClasses["com.babylonhx._AlphaState"] = com_babylonhx__$AlphaState;
com_babylonhx__$AlphaState.__name__ = ["com","babylonhx","_AlphaState"];
com_babylonhx__$AlphaState.prototype = {
	_isAlphaBlendDirty: null
	,_isBlendFunctionParametersDirty: null
	,_alphaBlend: null
	,_blendFunctionParameters: null
	,get_isDirty: function() {
		return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty;
	}
	,get_alphaBlend: function() {
		return this._alphaBlend;
	}
	,set_alphaBlend: function(value) {
		if(this._alphaBlend == value) return value;
		this._alphaBlend = value;
		this._isAlphaBlendDirty = true;
		return value;
	}
	,setAlphaBlendFunctionParameters: function(value0,value1,value2,value3) {
		if(this._blendFunctionParameters[0] == value0 && this._blendFunctionParameters[1] == value1 && this._blendFunctionParameters[2] == value2 && this._blendFunctionParameters[3] == value3) return;
		this._blendFunctionParameters[0] = value0;
		this._blendFunctionParameters[1] = value1;
		this._blendFunctionParameters[2] = value2;
		this._blendFunctionParameters[3] = value3;
		this._isBlendFunctionParametersDirty = true;
	}
	,reset: function() {
		this._alphaBlend = false;
		this._blendFunctionParameters[0] = -1;
		this._blendFunctionParameters[1] = -1;
		this._blendFunctionParameters[2] = -1;
		this._blendFunctionParameters[3] = -1;
		this._isAlphaBlendDirty = true;
		this._isBlendFunctionParametersDirty = false;
	}
	,apply: function() {
		if(!this.get_isDirty()) return;
		if(this._isAlphaBlendDirty) {
			if(this._alphaBlend) snow_modules_opengl_web_GL.enable(3042); else snow_modules_opengl_web_GL.disable(3042);
			this._isAlphaBlendDirty = false;
		}
		if(this._isBlendFunctionParametersDirty) {
			snow_modules_opengl_web_GL.blendFuncSeparate(this._blendFunctionParameters[0],this._blendFunctionParameters[1],this._blendFunctionParameters[2],this._blendFunctionParameters[3]);
			this._isBlendFunctionParametersDirty = false;
		}
	}
	,__class__: com_babylonhx__$AlphaState
	,__properties__: {set_alphaBlend:"set_alphaBlend",get_alphaBlend:"get_alphaBlend",get_isDirty:"get_isDirty"}
};
var com_babylonhx__$DepthCullingState = $hx_exports.BABYLON._DepthCullingState = function() {
	this._zOffset = 0.0;
	this._isZOffsetDirty = false;
	this._isCullDirty = false;
	this._isCullFaceDirty = false;
	this._isDepthFuncDirty = false;
	this._isDepthMaskDirty = false;
	this._isDepthTestDirty = false;
};
$hxClasses["com.babylonhx._DepthCullingState"] = com_babylonhx__$DepthCullingState;
com_babylonhx__$DepthCullingState.__name__ = ["com","babylonhx","_DepthCullingState"];
com_babylonhx__$DepthCullingState.prototype = {
	_isDepthTestDirty: null
	,_isDepthMaskDirty: null
	,_isDepthFuncDirty: null
	,_isCullFaceDirty: null
	,_isCullDirty: null
	,_isZOffsetDirty: null
	,_depthTest: null
	,_depthMask: null
	,_depthFunc: null
	,_cull: null
	,_cullFace: null
	,_zOffset: null
	,get_isDirty: function() {
		return this._isDepthFuncDirty || this._isDepthTestDirty || this._isDepthMaskDirty || this._isCullFaceDirty || this._isCullDirty || this._isZOffsetDirty;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		if(this._zOffset == value) return value;
		this._zOffset = value;
		this._isZOffsetDirty = true;
		return value;
	}
	,get_cullFace: function() {
		return this._cullFace;
	}
	,set_cullFace: function(value) {
		if(this._cullFace == value) return value;
		this._cullFace = value;
		this._isCullFaceDirty = true;
		return value;
	}
	,get_cull: function() {
		return this._cull;
	}
	,set_cull: function(value) {
		if(this._cull == value) return value;
		this._cull = value;
		this._isCullDirty = true;
		return value;
	}
	,get_depthFunc: function() {
		return this._depthFunc;
	}
	,set_depthFunc: function(value) {
		if(this._depthFunc == value) return value;
		this._depthFunc = value;
		this._isDepthFuncDirty = true;
		return value;
	}
	,get_depthMask: function() {
		return this._depthMask;
	}
	,set_depthMask: function(value) {
		if(this._depthMask == value) return value;
		this._depthMask = value;
		this._isDepthMaskDirty = true;
		return value;
	}
	,get_depthTest: function() {
		return this._depthTest;
	}
	,set_depthTest: function(value) {
		if(this._depthTest == value) return value;
		this._depthTest = value;
		this._isDepthTestDirty = true;
		return value;
	}
	,reset: function() {
		this._depthMask = true;
		this._depthTest = true;
		this._depthFunc = null;
		this._cull = null;
		this._cullFace = null;
		this._zOffset = 0;
		this._isDepthTestDirty = true;
		this._isDepthMaskDirty = true;
		this._isDepthFuncDirty = false;
		this._isCullFaceDirty = false;
		this._isCullDirty = false;
		this._isZOffsetDirty = false;
	}
	,apply: function() {
		if(this.get_isDirty()) {
			if(this._isCullDirty) {
				if(this.get_cull() != null && this.get_cull()) snow_modules_opengl_web_GL.enable(2884); else snow_modules_opengl_web_GL.disable(2884);
				this._isCullDirty = false;
			}
			if(this._isCullFaceDirty) {
				snow_modules_opengl_web_GL.cullFace(this.get_cullFace());
				this._isCullFaceDirty = false;
			}
			if(this._isDepthMaskDirty) {
				snow_modules_opengl_web_GL.depthMask(this.get_depthMask());
				this._isDepthMaskDirty = false;
			}
			if(this._isDepthTestDirty) {
				if(this.get_depthTest()) snow_modules_opengl_web_GL.enable(2929); else snow_modules_opengl_web_GL.disable(2929);
				this._isDepthTestDirty = false;
			}
			if(this._isDepthFuncDirty) {
				snow_modules_opengl_web_GL.depthFunc(this.get_depthFunc());
				this._isDepthFuncDirty = false;
			}
			if(this._isZOffsetDirty) {
				if(this.get_zOffset() != 0) {
					snow_modules_opengl_web_GL.enable(32823);
					snow_modules_opengl_web_GL.polygonOffset(this.get_zOffset(),0);
				} else snow_modules_opengl_web_GL.disable(32823);
				this._isZOffsetDirty = false;
			}
		}
	}
	,__class__: com_babylonhx__$DepthCullingState
	,__properties__: {set_depthTest:"set_depthTest",get_depthTest:"get_depthTest",set_depthMask:"set_depthMask",get_depthMask:"get_depthMask",set_depthFunc:"set_depthFunc",get_depthFunc:"get_depthFunc",set_cull:"set_cull",get_cull:"get_cull",set_cullFace:"set_cullFace",get_cullFace:"get_cullFace",set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_isDirty:"get_isDirty"}
};
var com_babylonhx_actions_Action = $hx_exports.BABYLON.Action = function(triggerOptions,condition) {
	if(Reflect.getProperty(triggerOptions,"parameter") != null) {
		this.trigger = Reflect.getProperty(triggerOptions,"trigger");
		this._triggerParameter = Reflect.getProperty(triggerOptions,"parameter");
	} else this.trigger = triggerOptions;
	this._nextActiveAction = this;
	this._condition = condition;
};
$hxClasses["com.babylonhx.actions.Action"] = com_babylonhx_actions_Action;
com_babylonhx_actions_Action.__name__ = ["com","babylonhx","actions","Action"];
com_babylonhx_actions_Action.prototype = {
	trigger: null
	,_actionManager: null
	,_nextActiveAction: null
	,_child: null
	,_condition: null
	,_triggerParameter: null
	,_prepare: function() {
	}
	,getTriggerParameter: function() {
		return this._triggerParameter;
	}
	,_executeCurrent: function(evt) {
		if(this._nextActiveAction._condition != null) {
			var condition = this._nextActiveAction._condition;
			var currentRenderId = this._actionManager.getScene().getRenderId();
			if(condition._evaluationId == currentRenderId) {
				if(!condition._currentResult) return;
			} else {
				condition._evaluationId = currentRenderId;
				if(!condition.isValid()) {
					condition._currentResult = false;
					return;
				}
				condition._currentResult = true;
			}
		}
		this._nextActiveAction.execute(evt);
		if(this._nextActiveAction._child != null) {
			if(this._nextActiveAction._child._actionManager == null) this._nextActiveAction._child._actionManager = this._actionManager;
			this._nextActiveAction = this._nextActiveAction._child;
		} else this._nextActiveAction = this;
	}
	,execute: function(evt) {
	}
	,then: function(action) {
		this._child = action;
		action._actionManager = this._actionManager;
		action._prepare();
		return action;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Action
};
var com_babylonhx_actions_ActionEvent = $hx_exports.BABYLON.ActionEvent = function(source,pointerX,pointerY,meshUnderPointer,sourceEvent) {
	this.source = source;
	this.pointerX = pointerX;
	this.pointerY = pointerY;
	this.meshUnderPointer = meshUnderPointer;
	this.sourceEvent = sourceEvent;
};
$hxClasses["com.babylonhx.actions.ActionEvent"] = com_babylonhx_actions_ActionEvent;
com_babylonhx_actions_ActionEvent.__name__ = ["com","babylonhx","actions","ActionEvent"];
com_babylonhx_actions_ActionEvent.CreateNew = function(source) {
	var scene = source._scene;
	return new com_babylonhx_actions_ActionEvent(source,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer());
};
com_babylonhx_actions_ActionEvent.CreateNewFromScene = function(scene,evt) {
	return new com_babylonhx_actions_ActionEvent(null,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer(),evt);
};
com_babylonhx_actions_ActionEvent.prototype = {
	source: null
	,pointerX: null
	,pointerY: null
	,meshUnderPointer: null
	,sourceEvent: null
	,__class__: com_babylonhx_actions_ActionEvent
};
var com_babylonhx_actions_ActionManager = $hx_exports.BABYLON.ActionManager = function(scene) {
	this.actions = [];
	this._scene = scene;
	scene._actionManagers.push(this);
};
$hxClasses["com.babylonhx.actions.ActionManager"] = com_babylonhx_actions_ActionManager;
com_babylonhx_actions_ActionManager.__name__ = ["com","babylonhx","actions","ActionManager"];
com_babylonhx_actions_ActionManager.prototype = {
	actions: null
	,_scene: null
	,dispose: function() {
		var index = HxOverrides.indexOf(this._scene._actionManagers,this,0);
		if(index > -1) this._scene._actionManagers.splice(index,1);
	}
	,getScene: function() {
		return this._scene;
	}
	,hasSpecificTriggers: function(triggers) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(HxOverrides.indexOf(triggers,action.trigger,0) > -1) return true;
		}
		return false;
	}
	,hasSpecificTrigger: function(trigger) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) return true;
		}
		return false;
	}
	,hasPointerTriggers: null
	,get_hasPointerTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnPointerOutTrigger) return true;
		}
		return false;
	}
	,hasPickTriggers: null
	,get_hasPickTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnCenterPickTrigger) return true;
			if(action.trigger == com_babylonhx_actions_ActionManager.OnPickUpTrigger) return true;
		}
		return false;
	}
	,registerAction: function(action) {
		if(action.trigger == com_babylonhx_actions_ActionManager.OnEveryFrameTrigger) {
			if(this.getScene().actionManager != this) {
				haxe_Log.trace("OnEveryFrameTrigger can only be used with scene.actionManager",{ fileName : "ActionManager.hx", lineNumber : 117, className : "com.babylonhx.actions.ActionManager", methodName : "registerAction"});
				return null;
			}
		}
		this.actions.push(action);
		action._actionManager = this;
		action._prepare();
		return action;
	}
	,processTrigger: function(trigger,evt) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) {
				if(trigger == com_babylonhx_actions_ActionManager.OnKeyUpTrigger || trigger == com_babylonhx_actions_ActionManager.OnKeyDownTrigger) {
					var parameter = action.getTriggerParameter();
					if(parameter != null) {
						if(evt.sourceEvent.key != parameter) continue;
					}
				}
				action._executeCurrent(evt);
			}
		}
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		var properties = propertyPath.split(".");
		var _g1 = 0;
		var _g = properties.length - 1;
		while(_g1 < _g) {
			var index = _g1++;
			target = Reflect.getProperty(target,properties[index]);
		}
		return target;
	}
	,_getProperty: function(propertyPath) {
		var properties = propertyPath.split(".");
		return properties[properties.length - 1];
	}
	,__class__: com_babylonhx_actions_ActionManager
	,__properties__: {get_hasPickTriggers:"get_hasPickTriggers",get_hasPointerTriggers:"get_hasPointerTriggers"}
};
var com_babylonhx_actions_Condition = $hx_exports.BABYLON.Condition = function(actionManager) {
	this._actionManager = actionManager;
};
$hxClasses["com.babylonhx.actions.Condition"] = com_babylonhx_actions_Condition;
com_babylonhx_actions_Condition.__name__ = ["com","babylonhx","actions","Condition"];
com_babylonhx_actions_Condition.prototype = {
	_actionManager: null
	,_evaluationId: null
	,_currentResult: null
	,isValid: function() {
		return true;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Condition
};
var com_babylonhx_actions_InterpolateValueAction = $hx_exports.BABYLON.InterpolateValueAction = function(triggerOptions,target,propertyPath,value,duration,condition,stopOtherAnimations) {
	if(stopOtherAnimations == null) stopOtherAnimations = false;
	if(duration == null) duration = 1000;
	com_babylonhx_actions_Action.call(this,triggerOptions,condition);
	this._target = target;
	this.propertyPath = propertyPath;
	this.value = value;
	this.duration = duration;
	this.stopOtherAnimations = stopOtherAnimations;
};
$hxClasses["com.babylonhx.actions.InterpolateValueAction"] = com_babylonhx_actions_InterpolateValueAction;
com_babylonhx_actions_InterpolateValueAction.__name__ = ["com","babylonhx","actions","InterpolateValueAction"];
com_babylonhx_actions_InterpolateValueAction.__super__ = com_babylonhx_actions_Action;
com_babylonhx_actions_InterpolateValueAction.prototype = $extend(com_babylonhx_actions_Action.prototype,{
	_target: null
	,_property: null
	,propertyPath: null
	,value: null
	,duration: null
	,stopOtherAnimations: null
	,_prepare: function() {
		this._target = this._getEffectiveTarget(this._target,this.propertyPath);
		this._property = this._getProperty(this.propertyPath);
	}
	,execute: function(evt) {
		var scene = this._actionManager.getScene();
		var keys = [{ frame : 0, value : Reflect.getProperty(this._target,this._property)},{ frame : 100, value : this.value}];
		var dataType = -1;
		if(js_Boot.__instanceof(this.value,Int) || typeof(this.value) == "number") dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_FLOAT; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Color3)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_COLOR3; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Vector3)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR3; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Matrix)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_MATRIX; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Quaternion)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_QUATERNION; else {
			haxe_Log.trace("InterpolateValueAction:Unsupported type (" + Type.getClassName(this.value) + ")",{ fileName : "InterpolateValueAction.hx", lineNumber : 65, className : "com.babylonhx.actions.InterpolateValueAction", methodName : "execute"});
			return;
		}
		var animation = new com_babylonhx_animations_Animation("InterpolateValueAction",this._property,100 * (1000.0 / this.duration) | 0,dataType,com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CONSTANT);
		animation.setKeys(keys);
		if(this.stopOtherAnimations) scene.stopAnimation(this._target);
		scene.beginDirectAnimation(this._target,[animation],0,100);
	}
	,__class__: com_babylonhx_actions_InterpolateValueAction
});
var com_babylonhx_actions_PlayAnimationAction = $hx_exports.BABYLON.PlayAnimationAction = function(triggerOptions,target,from,to,loop,condition) {
	com_babylonhx_actions_Action.call(this,triggerOptions,condition);
	this._target = target;
	this.from = from;
	this.to = to;
	this.loop = loop;
};
$hxClasses["com.babylonhx.actions.PlayAnimationAction"] = com_babylonhx_actions_PlayAnimationAction;
com_babylonhx_actions_PlayAnimationAction.__name__ = ["com","babylonhx","actions","PlayAnimationAction"];
com_babylonhx_actions_PlayAnimationAction.__super__ = com_babylonhx_actions_Action;
com_babylonhx_actions_PlayAnimationAction.prototype = $extend(com_babylonhx_actions_Action.prototype,{
	_target: null
	,from: null
	,to: null
	,loop: null
	,execute: function(evt) {
		var scene = this._actionManager.getScene();
		scene.beginAnimation(this._target,this.from,this.to,this.loop);
	}
	,__class__: com_babylonhx_actions_PlayAnimationAction
});
var com_babylonhx_actions_ValueCondition = $hx_exports.BABYLON.ValueCondition = function(actionManager,target,propertyPath,value,operator) {
	if(operator == null) operator = 0;
	com_babylonhx_actions_Condition.call(this,actionManager);
	this._target = this._getEffectiveTarget(target,this.propertyPath);
	this._property = this._getProperty(this.propertyPath);
	this.propertyPath = propertyPath;
	this.value = value;
	this.operator = operator;
};
$hxClasses["com.babylonhx.actions.ValueCondition"] = com_babylonhx_actions_ValueCondition;
com_babylonhx_actions_ValueCondition.__name__ = ["com","babylonhx","actions","ValueCondition"];
com_babylonhx_actions_ValueCondition.__super__ = com_babylonhx_actions_Condition;
com_babylonhx_actions_ValueCondition.prototype = $extend(com_babylonhx_actions_Condition.prototype,{
	_target: null
	,_property: null
	,propertyPath: null
	,value: null
	,operator: null
	,isValid: function() {
		var _g = this.operator;
		switch(_g) {
		case 2:
			return Reflect.field(this._target,this._property) > this.value;
		case 3:
			return Reflect.field(this._target,this._property) < this.value;
		case 0:case 1:
			var check = false;
			if(this.value.equals != null) check = this.value.equals(Reflect.field(this._target,this._property)); else check = this.value == Reflect.field(this._target,this._property);
			if(this.operator == 0) return check; else return !check;
			break;
		}
		return false;
	}
	,__class__: com_babylonhx_actions_ValueCondition
});
var com_babylonhx_animations_Animatable = $hx_exports.BABYLON.Animatable = function(scene,target,fromFrame,toFrame,loopAnimation,speedRatio,onAnimationEnd,animations) {
	if(speedRatio == null) speedRatio = 1.0;
	if(loopAnimation == null) loopAnimation = false;
	if(toFrame == null) toFrame = 100;
	if(fromFrame == null) fromFrame = 0;
	this.animationStarted = false;
	this._paused = false;
	this._animations = [];
	this._pausedDelay = -1;
	this._localDelayOffset = -1;
	this.target = target;
	this.fromFrame = fromFrame;
	this.toFrame = toFrame;
	this.loopAnimation = loopAnimation;
	this.speedRatio = speedRatio;
	this.onAnimationEnd = onAnimationEnd;
	if(animations != null) this.appendAnimations(target,animations);
	this._scene = scene;
	scene._activeAnimatables.push(this);
};
$hxClasses["com.babylonhx.animations.Animatable"] = com_babylonhx_animations_Animatable;
com_babylonhx_animations_Animatable.__name__ = ["com","babylonhx","animations","Animatable"];
com_babylonhx_animations_Animatable.prototype = {
	_localDelayOffset: null
	,_pausedDelay: null
	,_animations: null
	,_paused: null
	,_scene: null
	,target: null
	,fromFrame: null
	,toFrame: null
	,loopAnimation: null
	,speedRatio: null
	,onAnimationEnd: null
	,animationStarted: null
	,appendAnimations: function(target,animations) {
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			animation._target = target;
			this._animations.push(animation);
		}
	}
	,getAnimationByTargetProperty: function(property) {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(animations[index].targetProperty == property) return animations[index];
		}
		return null;
	}
	,pause: function() {
		this._paused = true;
	}
	,restart: function() {
		this._paused = false;
	}
	,stop: function() {
		var index = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
		if(index > -1) this._scene._activeAnimatables.splice(index,1);
		if(this.onAnimationEnd != null) this.onAnimationEnd();
	}
	,_animate: function(delay) {
		if(this._paused) {
			if(this._pausedDelay == -1) this._pausedDelay = delay;
			return true;
		}
		if(this._localDelayOffset == -1) this._localDelayOffset = delay; else if(this._pausedDelay != -1) {
			this._localDelayOffset += delay - this._pausedDelay;
			this._pausedDelay = -1;
		}
		var running = false;
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			var isRunning = animation.animate(delay - this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this.speedRatio);
			running = running || isRunning;
		}
		if(!running) {
			var index1 = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
			this._scene._activeAnimatables.splice(index1,1);
		}
		if(!running && this.onAnimationEnd != null) this.onAnimationEnd();
		return running;
	}
	,__class__: com_babylonhx_animations_Animatable
};
var com_babylonhx_math_Quaternion = $hx_exports.BABYLON.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Quaternion"] = com_babylonhx_math_Quaternion;
com_babylonhx_math_Quaternion.__name__ = ["com","babylonhx","math","Quaternion"];
com_babylonhx_math_Quaternion.FromRotationMatrix = function(matrix) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,result);
	return result;
};
com_babylonhx_math_Quaternion.FromRotationMatrixToRef = function(matrix,result) {
	var data = matrix.m;
	var m11 = data[0];
	var m12 = data[4];
	var m13 = data[8];
	var m21 = data[1];
	var m22 = data[5];
	var m23 = data[9];
	var m31 = data[2];
	var m32 = data[6];
	var m33 = data[10];
	var _trace = m11 + m22 + m33;
	var s = 0;
	if(_trace > 0) {
		s = 0.5 / Math.sqrt(_trace + 1.0);
		result.w = 0.25 / s;
		result.x = (m32 - m23) * s;
		result.y = (m13 - m31) * s;
		result.z = (m21 - m12) * s;
	} else if(m11 > m22 && m11 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
		result.w = (m32 - m23) / s;
		result.x = 0.25 * s;
		result.y = (m12 + m21) / s;
		result.z = (m13 + m31) / s;
	} else if(m22 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
		result.w = (m13 - m31) / s;
		result.x = (m12 + m21) / s;
		result.y = 0.25 * s;
		result.z = (m23 + m32) / s;
	} else {
		s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
		result.w = (m21 - m12) / s;
		result.x = (m13 + m31) / s;
		result.y = (m23 + m32) / s;
		result.z = 0.25 * s;
	}
};
com_babylonhx_math_Quaternion.Inverse = function(q) {
	return new com_babylonhx_math_Quaternion(-q.x,-q.y,-q.z,q.w);
};
com_babylonhx_math_Quaternion.Identity = function() {
	return new com_babylonhx_math_Quaternion(0,0,0,1);
};
com_babylonhx_math_Quaternion.RotationAxis = function(axis,angle) {
	var result = new com_babylonhx_math_Quaternion();
	var sin = Math.sin(angle / 2);
	result.w = Math.cos(angle / 2);
	result.x = axis.x * sin;
	result.y = axis.y * sin;
	result.z = axis.z * sin;
	return result;
};
com_babylonhx_math_Quaternion.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Quaternion(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Quaternion.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,result);
	return result;
};
com_babylonhx_math_Quaternion.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	var halfRoll = roll * 0.5;
	var halfPitch = pitch * 0.5;
	var halfYaw = yaw * 0.5;
	var sinRoll = Math.sin(halfRoll);
	var cosRoll = Math.cos(halfRoll);
	var sinPitch = Math.sin(halfPitch);
	var cosPitch = Math.cos(halfPitch);
	var sinYaw = Math.sin(halfYaw);
	var cosYaw = Math.cos(halfYaw);
	result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
	result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
	result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;
	result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;
};
com_babylonhx_math_Quaternion.Slerp = function(left,right,amount) {
	var num2 = 0.0;
	var num3 = 0.0;
	var num = amount;
	var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	var flag = false;
	if(num4 < 0) {
		flag = true;
		num4 = -num4;
	}
	if(num4 > 0.999999) {
		num3 = 1 - num;
		if(flag) num2 = -num; else num2 = num;
	} else {
		var num5 = Math.acos(num4);
		var num6 = 1.0 / Math.sin(num5);
		num3 = Math.sin((1.0 - num) * num5) * num6;
		if(flag) num2 = -Math.sin(num * num5) * num6; else num2 = Math.sin(num * num5) * num6;
	}
	return new com_babylonhx_math_Quaternion(num3 * left.x + num2 * right.x,num3 * left.y + num2 * right.y,num3 * left.z + num2 * right.z,num3 * left.w + num2 * right.w);
};
com_babylonhx_math_Quaternion.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + " W:" + this.w + "}";
	}
	,asArray: function() {
		return [this.x,this.y,this.z,this.w];
	}
	,set: function(x,y,z,w) {
		if(w == null) w = 1;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,equals: function(otherQuaternion) {
		return otherQuaternion != null && this.x == otherQuaternion.x && this.y == otherQuaternion.y && this.z == otherQuaternion.z && this.w == otherQuaternion.w;
	}
	,clone: function() {
		return new com_babylonhx_math_Quaternion(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
		this.w = other.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(other) {
		return new com_babylonhx_math_Quaternion(this.x + other.x,this.y + other.y,this.z + other.z,this.w + other.w);
	}
	,subtract: function(other) {
		return new com_babylonhx_math_Quaternion(this.x - other.x,this.y - other.y,this.z - other.z,this.w - other.w);
	}
	,scale: function(value) {
		return new com_babylonhx_math_Quaternion(this.x * value,this.y * value,this.z * value,this.w * value);
	}
	,multiply: function(q1) {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1.0);
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
		return result;
	}
	,multiplyToRef: function(q1,result) {
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,normalize: function() {
		var length = 1.0 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= length;
		this.y *= length;
		this.z *= length;
		this.w *= length;
		return this;
	}
	,toEulerAngles: function() {
		var result = new com_babylonhx_math_Vector3(0,0,0);
		this.toEulerAnglesToRef(result);
		return result;
	}
	,toEulerAnglesToRef: function(result) {
		var qx = this.x;
		var qy = this.y;
		var qz = this.z;
		var qw = this.w;
		var qxy = qx * qy;
		var qxz = qx * qz;
		var qwy = qw * qy;
		var qwz = qw * qz;
		var qwx = qw * qx;
		var qyz = qy * qz;
		var sqx = qx * qx;
		var sqy = qy * qy;
		var determinant = sqx + sqy;
		if(determinant != 0.000 && determinant != 1.000) {
			result.x = Math.atan2(qxz + qwy,qwx - qyz);
			result.y = Math.acos(1 - 2 * determinant);
			result.z = Math.atan2(qxz - qwy,qwx + qyz);
		} else if(determinant == 0.000) {
			result.x = 0.0;
			result.y = 0.0;
			result.z = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
		} else {
			result.x = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
			result.y = Math.PI;
			result.z = 0.0;
		}
	}
	,toRotationMatrix: function(result) {
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var xy = this.x * this.y;
		var zw = this.z * this.w;
		var zx = this.z * this.x;
		var yw = this.y * this.w;
		var yz = this.y * this.z;
		var xw = this.x * this.w;
		result.m[0] = 1.0 - 2.0 * (yy + zz);
		result.m[1] = 2.0 * (xy + zw);
		result.m[2] = 2.0 * (zx - yw);
		result.m[3] = 0;
		result.m[4] = 2.0 * (xy - zw);
		result.m[5] = 1.0 - 2.0 * (zz + xx);
		result.m[6] = 2.0 * (yz + xw);
		result.m[7] = 0;
		result.m[8] = 2.0 * (zx + yw);
		result.m[9] = 2.0 * (yz - xw);
		result.m[10] = 1.0 - 2.0 * (yy + xx);
		result.m[11] = 0;
		result.m[12] = 0;
		result.m[13] = 0;
		result.m[14] = 0;
		result.m[15] = 1.0;
	}
	,fromRotationMatrix: function(matrix) {
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,this);
		return this;
	}
	,__class__: com_babylonhx_math_Quaternion
};
var com_babylonhx_math_Vector3 = $hx_exports.BABYLON.Vector3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["com.babylonhx.math.Vector3"] = com_babylonhx_math_Vector3;
com_babylonhx_math_Vector3.__name__ = ["com","babylonhx","math","Vector3"];
com_babylonhx_math_Vector3.GetClipFactor = function(vector0,vector1,axis,size) {
	var d0 = vector0.x * axis.x + vector0.y * axis.y + vector0.z * axis.z - size;
	var d1 = vector1.x * axis.x + vector1.y * axis.y + vector1.z * axis.z - size;
	var s = d0 / (d0 - d1);
	return s;
};
com_babylonhx_math_Vector3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector3(array[offset],array[offset + 1],array[offset + 2]);
};
com_babylonhx_math_Vector3.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatsToRef = function(x,y,z,result) {
	result.x = x;
	result.y = y;
	result.z = z;
};
com_babylonhx_math_Vector3.Zero = function() {
	return new com_babylonhx_math_Vector3(0,0,0);
};
com_babylonhx_math_Vector3.Up = function() {
	return new com_babylonhx_math_Vector3(0,1.0,0);
};
com_babylonhx_math_Vector3.TransformCoordinates = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_math_Vector3.TransformCoordinatesToRef(vector,transformation,result);
	return result;
};
com_babylonhx_math_Vector3.TransformCoordinatesToRef = function(vector,transformation,result) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8] + transformation.m[12];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9] + transformation.m[13];
	var z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10] + transformation.m[14];
	var w = vector.x * transformation.m[3] + vector.y * transformation.m[7] + vector.z * transformation.m[11] + transformation.m[15];
	result.x = x / w;
	result.y = y / w;
	result.z = z / w;
};
com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef = function(x,y,z,transformation,result) {
	var rx = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8] + transformation.m[12];
	var ry = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9] + transformation.m[13];
	var rz = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10] + transformation.m[14];
	var rw = x * transformation.m[3] + y * transformation.m[7] + z * transformation.m[11] + transformation.m[15];
	result.x = rx / rw;
	result.y = ry / rw;
	result.z = rz / rw;
};
com_babylonhx_math_Vector3.TransformNormal = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
	return result;
};
com_babylonhx_math_Vector3.TransformNormalToRef = function(vector,transformation,result) {
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
};
com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef = function(x,y,z,transformation,result) {
	result.x = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8];
	result.y = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9];
	result.z = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10];
};
com_babylonhx_math_Vector3.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	var z = 0.5 * (2.0 * value2.z + (-value1.z + value3.z) * amount + (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared + (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	var z = value.z;
	if(z > max.z) z = max.z; else z = z;
	if(z < min.z) z = min.z; else z = z;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	var z = start.z + (end.z - start.z) * amount;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y + left.z * right.z;
};
com_babylonhx_math_Vector3.Cross = function(left,right) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
	return result;
};
com_babylonhx_math_Vector3.CrossToRef = function(left,right,result) {
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
};
com_babylonhx_math_Vector3.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector3.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
};
com_babylonhx_math_Vector3.Project = function(vector,world,transform,viewport) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,1,0,cx + cw / 2.0,ch / 2.0 + cy,0,1);
	var finalMatrix = world.multiply(transform).multiply(viewportMatrix);
	return com_babylonhx_math_Vector3.TransformCoordinates(vector,finalMatrix);
};
com_babylonhx_math_Vector3.Unproject = function(source,viewportWidth,viewportHeight,world,view,projection) {
	var matrix = world.multiply(view).multiply(projection);
	matrix.invert();
	source.x = source.x / viewportWidth * 2 - 1;
	source.y = -(source.y / viewportHeight * 2 - 1);
	var vector = com_babylonhx_math_Vector3.TransformCoordinates(source,matrix);
	var num = source.x * matrix.m[3] + source.y * matrix.m[7] + source.z * matrix.m[11] + matrix.m[15];
	if(com_babylonhx_tools_Tools.WithinEpsilon(num,1.0,null)) vector = vector.scale(1.0 / num);
	return vector;
};
com_babylonhx_math_Vector3.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	return min;
};
com_babylonhx_math_Vector3.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	return max;
};
com_babylonhx_math_Vector3.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector3.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	return x * x + y * y + z * z;
};
com_babylonhx_math_Vector3.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector3(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		return result;
	}
	,set: function(x,y,z) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
	}
	,toQuaternion: function() {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1);
		var cosxPlusz = Math.cos((this.x + this.z) * 0.5);
		var sinxPlusz = Math.sin((this.x + this.z) * 0.5);
		var coszMinusx = Math.cos((this.z - this.x) * 0.5);
		var sinzMinusx = Math.sin((this.z - this.x) * 0.5);
		var cosy = Math.cos(this.y * 0.5);
		var siny = Math.sin(this.y * 0.5);
		result.x = coszMinusx * siny;
		result.y = -sinzMinusx * siny;
		result.z = sinxPlusz * cosy;
		result.w = cosxPlusz * cosy;
		return result;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
	}
	,subtractFromFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x - x,this.y - y,this.z - z);
	}
	,subtractFromFloatsToRef: function(x,y,z,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector3(-this.x,-this.y,-this.z);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector3(this.x * scale,this.y * scale,this.z * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon);
	}
	,equalsToFloats: function(x,y,z) {
		return this.x == x && this.y == y && this.z == z;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
	}
	,multiplyByFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x * x,this.y * y,this.z * z);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector3(this.x,this.y,this.z);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
	}
	,copyFromFloats: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,__class__: com_babylonhx_math_Vector3
};
var com_babylonhx_animations_Animation = $hx_exports.BABYLON.Animation = function(name,targetProperty,framePerSecond,dataType,loopMode) {
	if(loopMode == null) loopMode = -1;
	this._stopped = false;
	this._highLimitsCache = [];
	this._offsetsCache = [];
	this.name = name;
	this.targetProperty = targetProperty;
	this.targetPropertyPath = targetProperty.split(".");
	this.framePerSecond = framePerSecond;
	this.dataType = dataType;
	if(loopMode == -1) this.loopMode = com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE; else this.loopMode = loopMode;
};
$hxClasses["com.babylonhx.animations.Animation"] = com_babylonhx_animations_Animation;
com_babylonhx_animations_Animation.__name__ = ["com","babylonhx","animations","Animation"];
com_babylonhx_animations_Animation.CreateAndStartAnimation = function(name,mesh,targetProperty,framePerSecond,totalFrame,from,to,loopMode) {
	var dataType = -1;
	if(typeof(from) == "number") dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_FLOAT; else if(js_Boot.__instanceof(from,com_babylonhx_math_Quaternion)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_QUATERNION; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector3)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR3; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector2)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR2; else if(js_Boot.__instanceof(from,com_babylonhx_math_Color3)) dataType = com_babylonhx_animations_Animation.ANIMATIONTYPE_COLOR3;
	if(dataType == -1) return null;
	var animation = new com_babylonhx_animations_Animation(name,targetProperty,framePerSecond,dataType,loopMode);
	var keys = [];
	keys.push({ frame : 0, value : from});
	keys.push({ frame : totalFrame, value : to});
	animation.setKeys(keys);
	mesh.animations.push(animation);
	return mesh._scene.beginAnimation(mesh,0,totalFrame,animation.loopMode == 1);
};
com_babylonhx_animations_Animation.prototype = {
	_keys: null
	,_offsetsCache: null
	,_highLimitsCache: null
	,_stopped: null
	,_easingFunction: null
	,_target: null
	,name: null
	,targetProperty: null
	,targetPropertyPath: null
	,framePerSecond: null
	,dataType: null
	,loopMode: null
	,currentFrame: null
	,isStopped: function() {
		return this._stopped;
	}
	,getKeys: function() {
		return this._keys;
	}
	,getEasingFunction: function() {
		return this._easingFunction;
	}
	,setEasingFunction: function(easingFunction) {
		this._easingFunction = easingFunction;
	}
	,floatInterpolateFunction: function(startValue,endValue,gradient) {
		return startValue + (endValue - startValue) * gradient;
	}
	,quaternionInterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
	}
	,vector3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
	}
	,vector2InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
	}
	,color3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
	}
	,matrixInterpolateFunction: function(startValue,endValue,gradient) {
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation.set(0,0,0);
		startValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation.set(0,0,0);
		endValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation);
		var resultScale = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,gradient);
		var resultRotation = com_babylonhx_math_Quaternion.Slerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,gradient);
		var resultTranslation = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation,gradient);
		return com_babylonhx_math_Matrix.Compose(resultScale,resultRotation,resultTranslation);
	}
	,clone: function() {
		var clone = new com_babylonhx_animations_Animation(this.name,this.targetPropertyPath.join("."),this.framePerSecond,this.dataType,this.loopMode);
		clone.setKeys(this._keys);
		return clone;
	}
	,setKeys: function(values) {
		this._keys = values.slice(0);
		this._offsetsCache = [];
		this._highLimitsCache = [];
	}
	,_interpolate: function(currentFrame,repeatCount,loopMode,offsetValue,highLimitValue) {
		if(loopMode == com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CONSTANT && repeatCount > 0 && highLimitValue != null) if(highLimitValue.clone != null) return highLimitValue.clone(); else return highLimitValue;
		this.currentFrame = currentFrame;
		var startKey = Std["int"](Math.max(0,Math.min(this._keys.length - 1,Math.floor(this._keys.length * (currentFrame - this._keys[0].frame) / (this._keys[this._keys.length - 1].frame - this._keys[0].frame)) - 1)));
		if(this._keys[startKey].frame >= currentFrame) while(startKey - 1 >= 0 && this._keys[startKey].frame >= currentFrame) startKey--;
		var _g1 = startKey;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var key = _g1++;
			if(this._keys[key + 1] != null && this._keys[key + 1].frame >= currentFrame) {
				var startValue = this._keys[key].value;
				var endValue = this._keys[key + 1].value;
				var gradient = (currentFrame - this._keys[key].frame) / (this._keys[key + 1].frame - this._keys[key].frame);
				if(this._easingFunction != null) gradient = this._easingFunction.ease(gradient);
				var _g2 = this.dataType;
				switch(_g2) {
				case 0:
					switch(loopMode) {
					case 1:case 2:
						return this.floatInterpolateFunction(startValue,endValue,gradient);
					case 0:
						return offsetValue * repeatCount + this.floatInterpolateFunction(startValue,endValue,gradient);
					}
					break;
				case 2:
					var quaternion = null;
					switch(loopMode) {
					case 1:case 2:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
						break;
					case 0:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
						break;
					}
					return quaternion;
				case 1:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 5:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 4:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 3:
					switch(loopMode) {
					case 1:case 2:case 0:
						return startValue;
					}
					break;
				default:
				}
			}
		}
		return this._keys[this._keys.length - 1].value;
	}
	,animate: function(delay,from,to,loop,speedRatio) {
		if(this.targetPropertyPath == null || this.targetPropertyPath.length < 1) {
			this._stopped = true;
			return false;
		}
		var returnValue = true;
		if(this._keys[0].frame != 0) {
			var newKey = { frame : 0, value : this._keys[0].value};
			this._keys.unshift(newKey);
		}
		if(from < this._keys[0].frame || from > this._keys[this._keys.length - 1].frame) from = this._keys[0].frame;
		if(to < this._keys[0].frame || to > this._keys[this._keys.length - 1].frame) to = this._keys[this._keys.length - 1].frame;
		var range = to - from;
		var offsetValue = null;
		var ratio = delay * (this.framePerSecond * speedRatio) / 1000.0;
		var highLimitValue = null;
		if(ratio > range && !loop) {
			returnValue = false;
			highLimitValue = this._keys[this._keys.length - 1].value;
		} else {
			highLimitValue = 0;
			if(this.loopMode != com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE) {
				var keyOffset = to + from;
				if(this._offsetsCache.length > keyOffset) {
					var fromValue = this._interpolate(from,0,com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE);
					var toValue = this._interpolate(to,0,com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE);
					var _g = this.dataType;
					switch(_g) {
					case 0:
						this._offsetsCache[keyOffset] = toValue - fromValue;
						break;
					case 2:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Quaternion)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Quaternion));
						break;
					case 1:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector3));
						break;
					case 5:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector2)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector2));
						break;
					case 4:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Color3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Color3));
						break;
					default:
					}
					this._highLimitsCache[keyOffset] = toValue;
				}
				highLimitValue = this._highLimitsCache[keyOffset];
				offsetValue = this._offsetsCache[keyOffset];
			}
		}
		if(offsetValue == null) {
			var _g1 = this.dataType;
			switch(_g1) {
			case 0:
				offsetValue = 0;
				break;
			case 2:
				offsetValue = new com_babylonhx_math_Quaternion(0,0,0,0);
				break;
			case 1:
				offsetValue = new com_babylonhx_math_Vector3(0,0,0);
				break;
			case 5:
				offsetValue = new com_babylonhx_math_Vector2(0,0);
				break;
			case 4:
				offsetValue = new com_babylonhx_math_Color3(0,0,0);
				break;
			}
		}
		var repeatCount = ratio / range | 0;
		var currentFrame;
		currentFrame = returnValue?from + ratio % range:to;
		var currentValue = this._interpolate(currentFrame,repeatCount,this.loopMode,offsetValue,highLimitValue);
		if(this.targetPropertyPath.length > 1) {
			var property = Reflect.getProperty(this._target,this.targetPropertyPath[0]);
			var _g11 = 1;
			var _g2 = this.targetPropertyPath.length - 1;
			while(_g11 < _g2) {
				var index = _g11++;
				property = Reflect.getProperty(property,this.targetPropertyPath[index]);
			}
			Reflect.setProperty(property,this.targetPropertyPath[this.targetPropertyPath.length - 1],currentValue);
		} else Reflect.setProperty(this._target,this.targetPropertyPath[0],currentValue);
		if(this._target.markAsDirty != null) this._target.markAsDirty(this.targetProperty);
		if(!returnValue) this._stopped = true;
		return returnValue;
	}
	,__class__: com_babylonhx_animations_Animation
};
var com_babylonhx_animations_IAnimatable = $hx_exports.BABYLON.IAnimatable = function() { };
$hxClasses["com.babylonhx.animations.IAnimatable"] = com_babylonhx_animations_IAnimatable;
com_babylonhx_animations_IAnimatable.__name__ = ["com","babylonhx","animations","IAnimatable"];
com_babylonhx_animations_IAnimatable.prototype = {
	animations: null
	,__class__: com_babylonhx_animations_IAnimatable
};
var com_babylonhx_animations_easing_IEasingFunction = $hx_exports.BABYLON.IEasingFunction = function() { };
$hxClasses["com.babylonhx.animations.easing.IEasingFunction"] = com_babylonhx_animations_easing_IEasingFunction;
com_babylonhx_animations_easing_IEasingFunction.__name__ = ["com","babylonhx","animations","easing","IEasingFunction"];
com_babylonhx_animations_easing_IEasingFunction.prototype = {
	ease: null
	,__class__: com_babylonhx_animations_easing_IEasingFunction
};
var com_babylonhx_animations_easing_EasingFunction = $hx_exports.BABYLON.EasingFunction = function() {
	this._easingMode = com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN;
};
$hxClasses["com.babylonhx.animations.easing.EasingFunction"] = com_babylonhx_animations_easing_EasingFunction;
com_babylonhx_animations_easing_EasingFunction.__name__ = ["com","babylonhx","animations","easing","EasingFunction"];
com_babylonhx_animations_easing_EasingFunction.__interfaces__ = [com_babylonhx_animations_easing_IEasingFunction];
com_babylonhx_animations_easing_EasingFunction.prototype = {
	_easingMode: null
	,setEasingMode: function(easingMode) {
		var n = Math.min(Math.max(easingMode,0),2);
		this._easingMode = n;
	}
	,getEasingMode: function() {
		return this._easingMode;
	}
	,easeInCore: function(gradient) {
		throw new js__$Boot_HaxeError("You must implement this method");
	}
	,ease: function(gradient) {
		var _g = this._easingMode;
		switch(_g) {
		case 0:
			return this.easeInCore(gradient);
		case 1:
			return 1 - this.easeInCore(1 - gradient);
		}
		if(gradient >= 0.5) return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;
		return this.easeInCore(gradient * 2) * 0.5;
	}
	,__class__: com_babylonhx_animations_easing_EasingFunction
};
var com_babylonhx_bones_Bone = $hx_exports.BABYLON.Bone = function(name,skeleton,parentBone,matrix) {
	this._invertedAbsoluteTransform = new com_babylonhx_math_Matrix();
	this._absoluteTransform = new com_babylonhx_math_Matrix();
	this._worldTransform = new com_babylonhx_math_Matrix();
	this.children = [];
	com_babylonhx_Node.call(this,name,skeleton.getScene());
	this._skeleton = skeleton;
	this._matrix = matrix;
	this._baseMatrix = matrix;
	skeleton.bones.push(this);
	if(parentBone != null) {
		this._parent = parentBone;
		parentBone.children.push(this);
	} else this._parent = null;
	this._updateDifferenceMatrix();
};
$hxClasses["com.babylonhx.bones.Bone"] = com_babylonhx_bones_Bone;
com_babylonhx_bones_Bone.__name__ = ["com","babylonhx","bones","Bone"];
com_babylonhx_bones_Bone.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_bones_Bone.__super__ = com_babylonhx_Node;
com_babylonhx_bones_Bone.prototype = $extend(com_babylonhx_Node.prototype,{
	children: null
	,_skeleton: null
	,_matrix: null
	,_baseMatrix: null
	,_worldTransform: null
	,_absoluteTransform: null
	,_invertedAbsoluteTransform: null
	,_parent: null
	,getParent: function() {
		return this._parent;
	}
	,getLocalMatrix: function() {
		return this._matrix;
	}
	,getBaseMatrix: function() {
		return this._baseMatrix;
	}
	,getWorldMatrix: function() {
		return this._worldTransform;
	}
	,getInvertedAbsoluteTransform: function() {
		return this._invertedAbsoluteTransform;
	}
	,getAbsoluteMatrix: function() {
		var matrix = this._matrix.clone();
		var parent = this._parent;
		while(parent != null) {
			matrix = matrix.multiply(parent._matrix);
			parent = parent._parent;
		}
		return matrix;
	}
	,updateMatrix: function(matrix) {
		this._matrix = matrix;
		this._skeleton._isDirty = true;
		this._updateDifferenceMatrix();
	}
	,_updateDifferenceMatrix: function() {
		if(this._parent != null) this._matrix.multiplyToRef(this._parent._absoluteTransform,this._absoluteTransform); else this._absoluteTransform.copyFrom(this._matrix);
		this._absoluteTransform.invertToRef(this._invertedAbsoluteTransform);
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.children[index]._updateDifferenceMatrix();
		}
	}
	,markAsDirty: function() {
		this._currentRenderId++;
		this._skeleton._isDirty = true;
	}
	,__class__: com_babylonhx_bones_Bone
});
var com_babylonhx_bones_Skeleton = $hx_exports.BABYLON.Skeleton = function(name,id,scene) {
	this._identity = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = true;
	this.name = name;
	this.id = id;
	this.bones = [];
	this._scene = scene;
	scene.skeletons.push(this);
	this.prepare();
	this._isDirty = true;
};
$hxClasses["com.babylonhx.bones.Skeleton"] = com_babylonhx_bones_Skeleton;
com_babylonhx_bones_Skeleton.__name__ = ["com","babylonhx","bones","Skeleton"];
com_babylonhx_bones_Skeleton.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_bones_Skeleton.prototype = {
	id: null
	,name: null
	,bones: null
	,_scene: null
	,_isDirty: null
	,_transformMatrices: null
	,_animatables: null
	,_identity: null
	,__smartArrayFlags: null
	,getTransformMatrices: function() {
		return this._transformMatrices;
	}
	,getScene: function() {
		return this._scene;
	}
	,_markAsDirty: function() {
		this._isDirty = true;
	}
	,prepare: function() {
		if(!this._isDirty) return;
		if(this._transformMatrices == null || this._transformMatrices.length != 16 * (this.bones.length + 1)) {
			var elements = 16 * (this.bones.length + 1);
			var len = null;
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._transformMatrices = this1;
		}
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var bone = this.bones[index];
			var parentBone = bone._parent;
			if(parentBone != null) bone._matrix.multiplyToRef(parentBone.getWorldMatrix(),bone.getWorldMatrix()); else bone.getWorldMatrix().copyFrom(bone._matrix);
			bone._invertedAbsoluteTransform.multiplyToArray(bone.getWorldMatrix(),this._transformMatrices,index * 16);
		}
		this._identity.copyToArray(this._transformMatrices,this.bones.length * 16);
		this._isDirty = false;
	}
	,getAnimatables: function() {
		if(this._animatables == null || this._animatables.length != this.bones.length) {
			this._animatables = [];
			var _g1 = 0;
			var _g = this.bones.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._animatables.push(this.bones[index]);
			}
		}
		return this._animatables;
	}
	,clone: function(name,id) {
		var result = new com_babylonhx_bones_Skeleton(name,id != null?id:name,this._scene);
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var source = this.bones[index];
			var parentBone = null;
			if(source._parent != null) {
				var parentIndex = HxOverrides.indexOf(this.bones,source._parent,0);
				parentBone = result.bones[parentIndex];
			}
			var bone = new com_babylonhx_bones_Bone(source.name,result,parentBone,source._baseMatrix);
			var _g2 = 0;
			var _g3 = source.animations;
			while(_g2 < _g3.length) {
				var anim = _g3[_g2];
				++_g2;
				bone.animations.push(anim.clone());
			}
		}
		return result;
	}
	,__class__: com_babylonhx_bones_Skeleton
};
var com_babylonhx_cameras_Camera = $hx_exports.BABYLON.Camera = function(name,position,scene) {
	this._globalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._postProcessesTakenIndices = [];
	this._postProcesses = [];
	this._projectionMatrix = new com_babylonhx_math_Matrix();
	this._computedViewMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._rigCameras = [];
	this.cameraRigMode = 0;
	this.fovMode = 0;
	this.layerMask = -1;
	this.subCameras = [];
	this.viewport = new com_babylonhx_math_Viewport(0,0,1,1);
	this.isIntermediate = false;
	this.mode = 0;
	this.inertia = 0.9;
	this.maxZ = 10000.0;
	this.minZ = 1.0;
	this.fov = 0.8;
	this.orthoTop = null;
	this.orthoBottom = null;
	this.orthoRight = null;
	this.orthoLeft = null;
	this.upVector = new com_babylonhx_math_Vector3(0,1.0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_Node.call(this,name,scene);
	this.position = position;
	scene.addCamera(this);
	if(scene.activeCamera == null) scene.activeCamera = this;
	this.getProjectionMatrix = $bind(this,this.getProjectionMatrix_default);
	this._getViewMatrix = $bind(this,this._getViewMatrix_default);
};
$hxClasses["com.babylonhx.cameras.Camera"] = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_Camera.__name__ = ["com","babylonhx","cameras","Camera"];
com_babylonhx_cameras_Camera.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_cameras_Camera.__super__ = com_babylonhx_Node;
com_babylonhx_cameras_Camera.prototype = $extend(com_babylonhx_Node.prototype,{
	position: null
	,upVector: null
	,orthoLeft: null
	,orthoRight: null
	,orthoBottom: null
	,orthoTop: null
	,fov: null
	,minZ: null
	,maxZ: null
	,inertia: null
	,mode: null
	,isIntermediate: null
	,viewport: null
	,subCameras: null
	,layerMask: null
	,fovMode: null
	,cameraRigMode: null
	,_cameraRigParams: null
	,_rigCameras: null
	,_computedViewMatrix: null
	,_projectionMatrix: null
	,_worldMatrix: null
	,_postProcesses: null
	,_postProcessesTakenIndices: null
	,_activeMeshes: null
	,_globalPosition: null
	,getProjectionMatrix: null
	,_getViewMatrix: null
	,get_globalPosition: function() {
		return this._globalPosition;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.position = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.upVector = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.mode = null;
		this._cache.minZ = null;
		this._cache.maxZ = null;
		this._cache.fov = null;
		this._cache.aspectRatio = null;
		this._cache.orthoLeft = null;
		this._cache.orthoRight = null;
		this._cache.orthoBottom = null;
		this._cache.orthoTop = null;
		this._cache.renderWidth = null;
		this._cache.renderHeight = null;
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_Node.prototype._updateCache.call(this);
		var engine = this._scene._engine;
		this._cache.position.copyFrom(this.position);
		this._cache.upVector.copyFrom(this.upVector);
		this._cache.mode = this.mode;
		this._cache.minZ = this.minZ;
		this._cache.maxZ = this.maxZ;
		this._cache.fov = this.fov;
		this._cache.aspectRatio = engine.getAspectRatio(this);
		this._cache.orthoLeft = this.orthoLeft;
		this._cache.orthoRight = this.orthoRight;
		this._cache.orthoBottom = this.orthoBottom;
		this._cache.orthoTop = this.orthoTop;
		this._cache.renderWidth = engine.getRenderWidth();
		this._cache.renderHeight = engine.getRenderHeight();
	}
	,_updateFromScene: function() {
		this.updateCache();
		this._update();
	}
	,_isSynchronized: function() {
		return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_Node.prototype._isSynchronized.call(this)) return false;
		return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();
	}
	,_isSynchronizedProjectionMatrix: function() {
		var check = this._cache.mode == this.mode && this._cache.minZ == this.minZ && this._cache.maxZ == this.maxZ;
		if(!check) return false;
		var engine = this._scene._engine;
		if(this.mode == 0) check = this._cache.fov == this.fov && this._cache.aspectRatio == engine.getAspectRatio(this); else check = this._cache.orthoLeft == this.orthoLeft && this._cache.orthoRight == this.orthoRight && this._cache.orthoBottom == this.orthoBottom && this._cache.orthoTop == this.orthoTop && this._cache.renderWidth == engine.getRenderWidth() && this._cache.renderHeight == engine.getRenderHeight();
		return check;
	}
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
	}
	,detachControl: function(element) {
	}
	,_update: function() {
		if(this.cameraRigMode != 0) this._updateRigCameras();
		this._checkInputs();
	}
	,_checkInputs: function() {
	}
	,attachPostProcess: function(postProcess,insertAt) {
		if(!postProcess.isReusable() && HxOverrides.indexOf(this._postProcesses,postProcess,0) > -1) {
			haxe_Log.trace("You're trying to reuse a post process not defined as reusable.",{ fileName : "Camera.hx", lineNumber : 226, className : "com.babylonhx.cameras.Camera", methodName : "attachPostProcess"});
			return 0;
		}
		if(insertAt == null || insertAt < 0) {
			this._postProcesses.push(postProcess);
			this._postProcessesTakenIndices.push(this._postProcesses.length - 1);
			return this._postProcesses.length - 1;
		}
		var add = 0;
		if(this._postProcesses[insertAt] != null) {
			var start = this._postProcesses.length - 1;
			var i = start;
			while(i >= insertAt + 1) {
				this._postProcesses[i + 1] = this._postProcesses[i];
				--i;
			}
			add = 1;
		}
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this._postProcessesTakenIndices[i1] < insertAt) continue;
			var start1 = this._postProcessesTakenIndices.length - 1;
			var j = start1;
			while(j >= i1) {
				this._postProcessesTakenIndices[j + 1] = this._postProcessesTakenIndices[j] + add;
				--j;
			}
			this._postProcessesTakenIndices[i1] = insertAt;
			break;
		}
		if(add == 0 && HxOverrides.indexOf(this._postProcessesTakenIndices,insertAt,0) == -1) this._postProcessesTakenIndices.push(insertAt);
		var result = insertAt + add;
		this._postProcesses[result] = postProcess;
		return result;
	}
	,detachPostProcess: function(postProcess,atIndices) {
		var result = [];
		if(atIndices == null) {
			var _g1 = 0;
			var _g = this._postProcesses.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._postProcesses[i] != postProcess) continue;
				this._postProcesses.splice(i,1);
				var index = HxOverrides.indexOf(this._postProcessesTakenIndices,i,0);
				this._postProcessesTakenIndices.splice(index,1);
			}
		} else {
			if((atIndices instanceof Array) && atIndices.__enum__ == null) atIndices = atIndices; else atIndices = [atIndices];
			var _g11 = 0;
			var _g2 = atIndices.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var foundPostProcess = this._postProcesses[atIndices[i1]];
				if(foundPostProcess != postProcess) {
					result.push(i1);
					continue;
				}
				this._postProcesses.splice(atIndices[i1],1);
				var index1 = HxOverrides.indexOf(this._postProcessesTakenIndices,atIndices[i1],0);
				this._postProcessesTakenIndices.splice(index1,1);
			}
		}
		return result;
	}
	,getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		var viewMatrix = this.getViewMatrix();
		viewMatrix.invertToRef(this._worldMatrix);
		return this._worldMatrix;
	}
	,_getViewMatrix_default: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,getViewMatrix: function(force) {
		if(force == null) force = false;
		this._computedViewMatrix = this._computeViewMatrix(force);
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		if(this.parent == null || ($_=this.parent,$bind($_,$_.getWorldMatrix)) == null) this._globalPosition.copyFrom(this.position); else {
			if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			this._computedViewMatrix.invertToRef(this._worldMatrix);
			this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._computedViewMatrix);
			this._globalPosition.copyFromFloats(this._computedViewMatrix.m[12],this._computedViewMatrix.m[13],this._computedViewMatrix.m[14]);
			this._computedViewMatrix.invert();
			this._parentRenderId = this.parent._currentRenderId;
		}
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,_computeViewMatrix: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		this._computedViewMatrix = this._getViewMatrix();
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,getProjectionMatrix_default: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedProjectionMatrix()) return this._projectionMatrix;
		var engine = this._scene._engine;
		if(this.mode == 0) {
			if(this.minZ <= 0) this.minZ = 0.1;
			com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.fov,engine.getAspectRatio(this),this.minZ,this.maxZ,this._projectionMatrix,this.fovMode);
			return this._projectionMatrix;
		}
		var halfWidth = engine.getRenderWidth() / 2.0;
		var halfHeight = engine.getRenderHeight() / 2.0;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(this.orthoLeft == null?-halfWidth:this.orthoLeft,this.orthoRight == null?halfWidth:this.orthoRight,this.orthoBottom == null?-halfHeight:this.orthoBottom,this.orthoTop == null?halfHeight:this.orthoTop,this.minZ,this.maxZ,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,dispose: function() {
		this._scene.removeCamera(this);
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._postProcesses[this._postProcessesTakenIndices[i]].dispose(this);
		}
	}
	,setCameraRigMode: function(mode,rigParams) {
		while(this._rigCameras.length > 0) this._rigCameras.pop().dispose();
		this.cameraRigMode = mode;
		this._cameraRigParams = { };
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:
			if(rigParams.interaxialDistance != null) this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance; else this._cameraRigParams.interaxialDistance = 0.0637;
			this._cameraRigParams.stereoHalfAngle = this._cameraRigParams.interaxialDistance / 0.0637 * Math.PI / 180;
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			break;
		}
		var postProcesses = [];
		var _g1 = this.cameraRigMode;
		switch(_g1) {
		case 10:
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[0]));
			this._rigCameras[0].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_AnaglyphPostProcess(this.name + "_anaglyph",1.0,this._rigCameras[1]));
			postProcesses[1].onApply = function(effect) {
				effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"leftSampler",0),postProcesses[0]);
			};
			break;
		case 11:case 12:case 13:
			var isStereoscopicHoriz = this.cameraRigMode == 11 || this.cameraRigMode == 12;
			var firstCamIndex;
			if(this.cameraRigMode == 12) firstCamIndex = 1; else firstCamIndex = 0;
			var secondCamIndex = 1 - firstCamIndex;
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[firstCamIndex]));
			this._rigCameras[firstCamIndex].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_StereoscopicInterlacePostProcess(this.name + "_stereoInterlace",this._rigCameras[secondCamIndex],postProcesses[0],isStereoscopicHoriz));
			break;
		case 20:
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			var metrics;
			if(rigParams.vrCameraMetrics != null) metrics = rigParams.vrCameraMetrics; else metrics = com_babylonhx_cameras_VRCameraMetrics.GetDefault();
			this._rigCameras[0]._cameraRigParams.vrMetrics = metrics;
			this._rigCameras[0].viewport = new com_babylonhx_math_Viewport(0,0,0.5,1.0);
			this._rigCameras[0]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.get_leftHMatrix();
			this._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.get_leftPreViewMatrix();
			this._rigCameras[0].getProjectionMatrix = ($_=this._rigCameras[0],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistorsion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Left",this._rigCameras[0],false,metrics));
			this._rigCameras[1]._cameraRigParams.vrMetrics = this._rigCameras[0]._cameraRigParams.vrMetrics;
			this._rigCameras[1].viewport = new com_babylonhx_math_Viewport(0.5,0,0.5,1.0);
			this._rigCameras[1]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.get_rightHMatrix();
			this._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.get_rightPreViewMatrix();
			this._rigCameras[1].getProjectionMatrix = ($_=this._rigCameras[1],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistorsion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Right",this._rigCameras[1],true,metrics));
			break;
		}
		this._update();
	}
	,_getVRProjectionMatrix: function(force) {
		if(force == null) force = false;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this._cameraRigParams.vrMetrics.aspectRatioFov,this._cameraRigParams.vrMetrics.aspectRatio,this.minZ,this.maxZ,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,setCameraRigParameter: function(name,value) {
		if(name == "interaxialDistance") this._cameraRigParams.stereoHalfAngle = value / 0.0637 * Math.PI / 180;
	}
	,createRigCamera: function(name,cameraIndex) {
		return null;
	}
	,_updateRigCameras: function() {
		var _g1 = 0;
		var _g = this._rigCameras.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._rigCameras[i].minZ = this.minZ;
			this._rigCameras[i].maxZ = this.maxZ;
			this._rigCameras[i].fov = this.fov;
		}
		if(this.cameraRigMode == 10) this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;
	}
	,__class__: com_babylonhx_cameras_Camera
	,__properties__: {get_globalPosition:"get_globalPosition"}
});
var com_babylonhx_cameras_TargetCamera = $hx_exports.BABYLON.TargetCamera = function(name,position,scene) {
	this._tempMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._lookAtTemp = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformedReferencePoint = new com_babylonhx_math_Vector3(0,0,0);
	this._referencePoint = new com_babylonhx_math_Vector3(0,0,1);
	this._cameraRotationMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._cameraTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._camMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._currentTarget = new com_babylonhx_math_Vector3(0,0,0);
	this.lockedTarget = null;
	this.noRotationConstraint = false;
	this.speed = 2.0;
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.cameraRotation = new com_babylonhx_math_Vector2(0,0);
	this.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_cameras_Camera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.TargetCamera"] = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_TargetCamera.__name__ = ["com","babylonhx","cameras","TargetCamera"];
com_babylonhx_cameras_TargetCamera.__super__ = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_TargetCamera.prototype = $extend(com_babylonhx_cameras_Camera.prototype,{
	cameraDirection: null
	,cameraRotation: null
	,rotation: null
	,speed: null
	,noRotationConstraint: null
	,lockedTarget: null
	,_currentTarget: null
	,_viewMatrix: null
	,_camMatrix: null
	,_cameraTransformMatrix: null
	,_cameraRotationMatrix: null
	,_rigCamTransformMatrix: null
	,_referencePoint: null
	,_transformedReferencePoint: null
	,_lookAtTemp: null
	,_tempMatrix: null
	,_reset: null
	,_waitingLockedTargetId: null
	,_getLockedTargetPosition: function() {
		if(this.lockedTarget == null) return null;
		if(this.lockedTarget.position != null) return this.lockedTarget.position; else return this.lockedTarget;
	}
	,_initCache: function() {
		com_babylonhx_cameras_Camera.prototype._initCache.call(this);
		this._cache.lockedTarget = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.rotation = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_cameras_Camera.prototype._updateCache.call(this);
		var lockedTargetPosition = this._getLockedTargetPosition();
		if(lockedTargetPosition == null) this._cache.lockedTarget = null; else if(this._cache.lockedTarget == null) this._cache.lockedTarget = new com_babylonhx_math_Vector3(lockedTargetPosition.x,lockedTargetPosition.y,lockedTargetPosition.z); else this._cache.lockedTarget.copyFrom(lockedTargetPosition);
		this._cache.rotation.copyFrom(this.rotation);
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_cameras_Camera.prototype._isSynchronizedViewMatrix.call(this)) return false;
		var lockedTargetPosition = this._getLockedTargetPosition();
		return (this._cache.lockedTarget != null?this._cache.lockedTarget.equals(lockedTargetPosition):lockedTargetPosition == null) && this._cache.rotation.equals(this.rotation);
	}
	,_computeLocalCameraSpeed: function() {
		var engine = this._scene._engine;
		return this.speed * (engine.deltaTime / (engine.fps * 10.0));
	}
	,setTarget: function(target) {
		this.upVector.normalize();
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,target,this.upVector,this._camMatrix);
		this._camMatrix.invert();
		this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);
		var vDir = target.subtract(this.position);
		if(vDir.x >= 0.0) this.rotation.y = -Math.atan(vDir.z / vDir.x) + Math.PI / 2.0; else this.rotation.y = -Math.atan(vDir.z / vDir.x) - Math.PI / 2.0;
		this.rotation.z = -Math.acos(com_babylonhx_math_Vector3.Dot(new com_babylonhx_math_Vector3(0,1.0,0),this.upVector));
	}
	,getTarget: function() {
		return this._currentTarget;
	}
	,_decideIfNeedsToMove: function() {
		return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		this.position.addInPlace(this.cameraDirection);
	}
	,_update: function() {
		var needToMove = this._decideIfNeedsToMove();
		var needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;
		if(needToMove) this._updatePosition();
		if(needToRotate) {
			this.rotation.x += this.cameraRotation.x;
			this.rotation.y += this.cameraRotation.y;
			if(!this.noRotationConstraint) {
				var limit = Math.PI / 2 * 0.95;
				if(this.rotation.x > limit) this.rotation.x = limit;
				if(this.rotation.x < -limit) this.rotation.x = -limit;
			}
		}
		if(needToMove) {
			if(Math.abs(this.cameraDirection.x) < 0.001) this.cameraDirection.x = 0;
			if(Math.abs(this.cameraDirection.y) < 0.001) this.cameraDirection.y = 0;
			if(Math.abs(this.cameraDirection.z) < 0.001) this.cameraDirection.z = 0;
			this.cameraDirection.scaleInPlace(this.inertia);
		}
		if(needToRotate) {
			if(Math.abs(this.cameraRotation.x) < 0.001) this.cameraRotation.x = 0;
			if(Math.abs(this.cameraRotation.y) < 0.001) this.cameraRotation.y = 0;
			this.cameraRotation.scaleInPlace(this.inertia);
		}
	}
	,_getViewMatrix_default: function() {
		if(this.lockedTarget == null) {
			if(this.upVector.x != 0 || this.upVector.y != 1.0 || this.upVector.z != 0) {
				com_babylonhx_math_Matrix.LookAtLHToRef(new com_babylonhx_math_Vector3(0,0,0),this._referencePoint,this.upVector,this._lookAtTemp);
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
				this._lookAtTemp.multiplyToRef(this._cameraRotationMatrix,this._tempMatrix);
				this._lookAtTemp.invert();
				this._tempMatrix.multiplyToRef(this._lookAtTemp,this._cameraRotationMatrix);
			} else {
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
			}
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
			this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		} else this._currentTarget.copyFrom(this._getLockedTargetPosition());
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this.upVector,this._viewMatrix);
		return this._viewMatrix;
	}
	,_getVRViewMatrix: function() {
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
		com_babylonhx_math_Vector3.TransformNormalToRef(this.upVector,this._cameraRotationMatrix,this._cameraRigParams.vrActualUp);
		this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this._cameraRigParams.vrActualUp,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix,this._viewMatrix);
		return this._viewMatrix;
	}
	,createRigCamera: function(name,cameraIndex) {
		if(this.cameraRigMode != 0) {
			var rigCamera = new com_babylonhx_cameras_TargetCamera(name,this.position.clone(),this._scene);
			if(this.cameraRigMode == 20) {
				rigCamera._cameraRigParams = { };
				rigCamera._cameraRigParams.vrActualUp = new com_babylonhx_math_Vector3(0,0,0);
				rigCamera._getViewMatrix = $bind(rigCamera,rigCamera._getVRViewMatrix);
			}
			return rigCamera;
		}
		return null;
	}
	,_updateRigCameras: function() {
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:case 20:
			var camLeft = this._rigCameras[0];
			var camRight = this._rigCameras[1];
			if(this.cameraRigMode == 20) {
				camLeft.rotation.x = camRight.rotation.x = this.rotation.x;
				camLeft.rotation.y = camRight.rotation.y = this.rotation.y;
				camLeft.rotation.z = camRight.rotation.z = this.rotation.z;
				camLeft.position.copyFrom(this.position);
				camRight.position.copyFrom(this.position);
			} else {
				this._getRigCamPosition(-this._cameraRigParams.stereoHalfAngle,camLeft.position);
				this._getRigCamPosition(this._cameraRigParams.stereoHalfAngle,camRight.position);
				camLeft.setTarget(this.getTarget());
				camRight.setTarget(this.getTarget());
			}
			break;
		}
		com_babylonhx_cameras_Camera.prototype._updateRigCameras.call(this);
	}
	,_getRigCamPosition: function(halfSpace,result) {
		if(this._rigCamTransformMatrix == null) this._rigCamTransformMatrix = new com_babylonhx_math_Matrix();
		var target = this.getTarget();
		com_babylonhx_math_Matrix.Translation(-target.x,-target.y,-target.z).multiplyToRef(com_babylonhx_math_Matrix.RotationY(halfSpace),this._rigCamTransformMatrix);
		this._rigCamTransformMatrix = this._rigCamTransformMatrix.multiply(com_babylonhx_math_Matrix.Translation(target.x,target.y,target.z));
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this._rigCamTransformMatrix,result);
	}
	,__class__: com_babylonhx_cameras_TargetCamera
});
var com_babylonhx_cameras_ArcRotateCamera = $hx_exports.BABYLON.ArcRotateCamera = function(name,alpha,beta,radius,target,scene) {
	this._newPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._collisionVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._previousPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._collider = new com_babylonhx_collisions_Collider();
	this.collisionRadius = new com_babylonhx_math_Vector3(0.5,0.5,0.5);
	this.checkCollisions = false;
	this._lastPanningPosition = new com_babylonhx_math_Vector2(0,0);
	this._isCtrlPushed = false;
	this._isRightClick = false;
	this._keys = [];
	this.allowUpsideDown = true;
	this.pinchInwards = true;
	this.targetScreenOffset = new com_babylonhx_math_Vector2(0,0);
	this.zoomOnFactor = 1;
	this.keysRight = [com_babylonhx_utils_Keycodes.right];
	this.keysLeft = [com_babylonhx_utils_Keycodes.left];
	this.keysDown = [com_babylonhx_utils_Keycodes.down];
	this.keysUp = [com_babylonhx_utils_Keycodes.up];
	this.panningSensibility = 0.1;
	this.pinchPrecision = 2.0;
	this.wheelPrecision = 3.0;
	this.angularSensibility = 1000.0;
	this.upperRadiusLimit = null;
	this.lowerRadiusLimit = null;
	this.upperBetaLimit = Math.PI;
	this.lowerBetaLimit = 0.01;
	this.upperAlphaLimit = null;
	this.lowerAlphaLimit = null;
	this.inertialRadiusOffset = 0;
	this.inertialBetaOffset = 0;
	this.inertialAlphaOffset = 0;
	com_babylonhx_cameras_TargetCamera.call(this,name,new com_babylonhx_math_Vector3(0,0,0),scene);
	this.alpha = alpha;
	this.beta = beta;
	this.radius = radius;
	if(target != null) {
		if(target.position != null) this.target = target.position.clone(); else this.target = target.clone();
	} else this.target = new com_babylonhx_math_Vector3(0,0,0);
	this.getViewMatrix();
};
$hxClasses["com.babylonhx.cameras.ArcRotateCamera"] = com_babylonhx_cameras_ArcRotateCamera;
com_babylonhx_cameras_ArcRotateCamera.__name__ = ["com","babylonhx","cameras","ArcRotateCamera"];
com_babylonhx_cameras_ArcRotateCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_ArcRotateCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	inertialAlphaOffset: null
	,inertialBetaOffset: null
	,inertialRadiusOffset: null
	,lowerAlphaLimit: null
	,upperAlphaLimit: null
	,lowerBetaLimit: null
	,upperBetaLimit: null
	,lowerRadiusLimit: null
	,upperRadiusLimit: null
	,angularSensibility: null
	,wheelPrecision: null
	,pinchPrecision: null
	,panningSensibility: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,zoomOnFactor: null
	,targetScreenOffset: null
	,pinchInwards: null
	,allowUpsideDown: null
	,_keys: null
	,_attachedElement: null
	,_onContextMenu: null
	,_onPointerDown: null
	,_onPointerUp: null
	,_onPointerMove: null
	,_wheel: null
	,_onMouseMove: null
	,_onKeyDown: null
	,_onKeyUp: null
	,_onLostFocus: null
	,_onGestureStart: null
	,_onGesture: null
	,_MSGestureHandler: null
	,_localDirection: null
	,_transformedDirection: null
	,_isRightClick: null
	,_isCtrlPushed: null
	,_lastPanningPosition: null
	,onCollide: null
	,checkCollisions: null
	,collisionRadius: null
	,_collider: null
	,_previousPosition: null
	,_collisionVelocity: null
	,_newPosition: null
	,_previousAlpha: null
	,_previousBeta: null
	,_previousRadius: null
	,_collisionTriggered: null
	,alpha: null
	,beta: null
	,radius: null
	,target: null
	,_getTargetPosition: function() {
		if(this.target.position != null) return this.target.position; else return this.target;
	}
	,_initCache: function() {
		com_babylonhx_cameras_TargetCamera.prototype._initCache.call(this);
		this._cache.target = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.alpha = null;
		this._cache.beta = null;
		this._cache.radius = null;
		this._cache.targetScreenOffset = null;
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_cameras_TargetCamera.prototype._updateCache.call(this);
		this._cache.target.copyFrom(this._getTargetPosition());
		this._cache.alpha = this.alpha;
		this._cache.beta = this.beta;
		this._cache.radius = this.radius;
		this._cache.targetScreenOffset = this.targetScreenOffset.clone();
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_cameras_TargetCamera.prototype._isSynchronizedViewMatrix.call(this)) return false;
		return this._cache.target.equals(this._getTargetPosition()) && this._cache.alpha == this.alpha && this._cache.beta == this.beta && this._cache.radius == this.radius && this._cache.targetScreenOffset.equals(this.targetScreenOffset);
	}
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
		var _g = this;
		var previousPosition = null;
		var pointerId = -1;
		if(this._attachedElement != null) return;
		this._attachedElement = element;
		var engine = this._scene._engine;
		if(this._onPointerDown == null) {
			this._onPointerDown = function(x,y,button) {
				previousPosition = { x : x, y : y};
			};
			this._onPointerUp = function(x1,y1,button1) {
				previousPosition = null;
			};
			this._onMouseMove = function(x2,y2) {
				if(previousPosition == null && !engine.isPointerLock) return;
				var offsetX = 0;
				var offsetY = 0;
				if(!engine.isPointerLock) {
					offsetX = x2 - previousPosition.x;
					offsetY = y2 - previousPosition.y;
				}
				_g.inertialAlphaOffset -= offsetX / _g.angularSensibility;
				_g.inertialBetaOffset -= offsetY / _g.angularSensibility;
				previousPosition = { x : x2, y : y2};
			};
			this._wheel = function(delta) {
				var _delta = delta / _g.wheelPrecision;
				_g.inertialRadiusOffset += _delta / 20;
			};
			this._onKeyDown = function(keycode) {
				if(HxOverrides.indexOf(_g.keysUp,keycode,0) != -1 || HxOverrides.indexOf(_g.keysDown,keycode,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keycode,0) != -1 || HxOverrides.indexOf(_g.keysRight,keycode,0) != -1) {
					var index = HxOverrides.indexOf(_g._keys,keycode,0);
					if(index == -1) _g._keys.push(keycode);
				}
			};
			this._onKeyUp = function(keycode1) {
				if(HxOverrides.indexOf(_g.keysUp,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysDown,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysRight,keycode1,0) != -1) {
					var index1 = HxOverrides.indexOf(_g._keys,keycode1,0);
					if(index1 >= 0) _g._keys.splice(index1,1);
				}
			};
			this._onLostFocus = function() {
				_g._keys = [];
				pointerId = 0;
			};
			this._reset = function() {
				_g._keys = [];
				_g.inertialAlphaOffset = 0;
				_g.inertialBetaOffset = 0;
				_g.inertialRadiusOffset = 0;
				previousPosition = null;
				pointerId = 0;
			};
		}
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
		com_babylonhx_Engine.mouseDown.push(this._onPointerDown);
		com_babylonhx_Engine.mouseUp.push(this._onPointerUp);
		com_babylonhx_Engine.mouseMove.push(this._onMouseMove);
		com_babylonhx_Engine.mouseWheel.push(this._wheel);
	}
	,detachControl: function(element) {
		if(this._attachedElement != element) return;
		var x = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x);
		var x1 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x1);
		var x2 = this._onPointerDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x2);
		var x3 = this._onPointerUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x3);
		var x4 = this._onMouseMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x4);
		var x5 = this._wheel;
		HxOverrides.remove(com_babylonhx_Engine.mouseWheel,x5);
		this._attachedElement = null;
		if(this._reset != null) this._reset();
	}
	,_update: function() {
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var index = _g1++;
			var keyCode = this._keys[index];
			if(HxOverrides.indexOf(this.keysLeft,keyCode,0) != -1) this.inertialAlphaOffset -= 0.01; else if(HxOverrides.indexOf(this.keysUp,keyCode,0) != -1) this.inertialBetaOffset -= 0.01; else if(HxOverrides.indexOf(this.keysRight,keyCode,0) != -1) this.inertialAlphaOffset += 0.01; else if(HxOverrides.indexOf(this.keysDown,keyCode,0) != -1) this.inertialBetaOffset += 0.01;
		}
		if(this.inertialAlphaOffset != 0 || this.inertialBetaOffset != 0 || this.inertialRadiusOffset != 0) {
			this.alpha += this.inertialAlphaOffset;
			this.beta += this.inertialBetaOffset;
			this.radius -= this.inertialRadiusOffset;
			this.inertialAlphaOffset *= this.inertia;
			this.inertialBetaOffset *= this.inertia;
			this.inertialRadiusOffset *= this.inertia;
			if(Math.abs(this.inertialAlphaOffset) < 0.001) this.inertialAlphaOffset = 0;
			if(Math.abs(this.inertialBetaOffset) < 0.001) this.inertialBetaOffset = 0;
			if(Math.abs(this.inertialRadiusOffset) < 0.001) this.inertialRadiusOffset = 0;
		}
		if(this.lowerAlphaLimit != null && this.alpha < this.lowerAlphaLimit) this.alpha = this.lowerAlphaLimit;
		if(this.upperAlphaLimit != null && this.alpha > this.upperAlphaLimit) this.alpha = this.upperAlphaLimit;
		if(this.beta < this.lowerBetaLimit) this.beta = this.lowerBetaLimit;
		if(this.beta > this.upperBetaLimit) this.beta = this.upperBetaLimit;
		if(this.lowerRadiusLimit != null && this.radius < this.lowerRadiusLimit) this.radius = this.lowerRadiusLimit;
		if(this.upperRadiusLimit != null && this.radius > this.upperRadiusLimit) this.radius = this.upperRadiusLimit;
	}
	,setPosition: function(position) {
		var radiusv3 = position.subtract(this._getTargetPosition());
		this.radius = Math.sqrt(radiusv3.x * radiusv3.x + radiusv3.y * radiusv3.y + radiusv3.z * radiusv3.z);
		this.alpha = Math.acos(radiusv3.x / Math.sqrt(Math.pow(radiusv3.x,2) + Math.pow(radiusv3.z,2)));
		if(radiusv3.z < 0) this.alpha = 2 * Math.PI - this.alpha;
		this.beta = Math.acos(radiusv3.y / this.radius);
	}
	,_getViewMatrix_default: function() {
		var cosa = Math.cos(this.alpha);
		var sina = Math.sin(this.alpha);
		var cosb = Math.cos(this.beta);
		var sinb = Math.sin(this.beta);
		var target = this._getTargetPosition();
		target.addToRef(new com_babylonhx_math_Vector3(this.radius * cosa * sinb,this.radius * cosb,this.radius * sina * sinb),this.position);
		if(this.checkCollisions) {
			this._collider.radius = this.collisionRadius;
			this.position.subtractToRef(this._previousPosition,this._collisionVelocity);
			this._scene._getNewPosition(this._previousPosition,this._collisionVelocity,this._collider,3,this._newPosition);
			if(!this._newPosition.equalsWithEpsilon(this.position,null)) {
				this.position.copyFrom(this._previousPosition);
				this.alpha = this._previousAlpha;
				this.beta = this._previousBeta;
				this.radius = this._previousRadius;
				if(this.onCollide != null) this.onCollide(this._collider.collidedMesh);
			}
		}
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,target,this.upVector,this._viewMatrix);
		this._previousAlpha = this.alpha;
		this._previousBeta = this.beta;
		this._previousRadius = this.radius;
		this._previousPosition.copyFrom(this.position);
		this._viewMatrix.m[12] = this._viewMatrix.m[12] + this.targetScreenOffset.x;
		this._viewMatrix.m[13] = this._viewMatrix.m[13] + this.targetScreenOffset.y;
		return this._viewMatrix;
	}
	,zoomOn: function(meshes,doNotUpdateMaxZ) {
		if(doNotUpdateMaxZ == null) doNotUpdateMaxZ = false;
		if(meshes != null) meshes = meshes; else meshes = this._scene.meshes;
		var minMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshes);
		var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(minMaxVector.minimum,minMaxVector.maximum));
		this.radius = distance * this.zoomOnFactor;
		this.focusOn({ min : minMaxVector.minimum, max : minMaxVector.maximum, distance : distance},doNotUpdateMaxZ);
	}
	,focusOn: function(meshesOrMinMaxVectorAndDistance,doNotUpdateMaxZ) {
		if(doNotUpdateMaxZ == null) doNotUpdateMaxZ = false;
		var meshesOrMinMaxVector = null;
		var distance = 0;
		if(meshesOrMinMaxVectorAndDistance.minimum == null) {
			if(meshesOrMinMaxVectorAndDistance != null) meshesOrMinMaxVector = meshesOrMinMaxVectorAndDistance; else meshesOrMinMaxVector = this._scene.meshes;
			meshesOrMinMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshesOrMinMaxVector);
			distance = com_babylonhx_math_Vector3.Distance(meshesOrMinMaxVector.minimum,meshesOrMinMaxVector.maximum);
		} else {
			meshesOrMinMaxVector = meshesOrMinMaxVectorAndDistance;
			distance = meshesOrMinMaxVectorAndDistance.distance;
		}
		this.target.position = com_babylonhx_mesh_Mesh.Center(meshesOrMinMaxVector);
		if(!doNotUpdateMaxZ) this.maxZ = distance * 2;
	}
	,__class__: com_babylonhx_cameras_ArcRotateCamera
});
var com_babylonhx_cameras_AnaglyphArcRotateCamera = $hx_exports.BABYLON.AnaglyphArcRotateCamera = function(name,alpha,beta,radius,target,eyeSpace,scene) {
	com_babylonhx_cameras_ArcRotateCamera.call(this,name,alpha,beta,radius,target,scene);
	this._eyeSpace = eyeSpace * Math.PI / 180;
	this._leftCamera = new com_babylonhx_cameras_ArcRotateCamera(name + "_left",alpha - this._eyeSpace,beta,radius,target,scene);
	this._rightCamera = new com_babylonhx_cameras_ArcRotateCamera(name + "_right",alpha + this._eyeSpace,beta,radius,target,scene);
	com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera(this,name);
};
$hxClasses["com.babylonhx.cameras.AnaglyphArcRotateCamera"] = com_babylonhx_cameras_AnaglyphArcRotateCamera;
com_babylonhx_cameras_AnaglyphArcRotateCamera.__name__ = ["com","babylonhx","cameras","AnaglyphArcRotateCamera"];
com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera = function(that,name) {
	that._leftCamera.isIntermediate = true;
	that.subCameras.push(that._leftCamera);
	that.subCameras.push(that._rightCamera);
	that._leftTexture = new com_babylonhx_postprocess_PassPostProcess(name + "_leftTexture",1.0,that._leftCamera);
	that._anaglyphPostProcess = new com_babylonhx_postprocess_AnaglyphPostProcess(name + "_anaglyph",1.0,that._rightCamera);
	that._anaglyphPostProcess.onApply = function(effect) {
		effect.setTextureFromPostProcess("leftSampler",that._leftTexture);
	};
	that._update();
};
com_babylonhx_cameras_AnaglyphArcRotateCamera.__super__ = com_babylonhx_cameras_ArcRotateCamera;
com_babylonhx_cameras_AnaglyphArcRotateCamera.prototype = $extend(com_babylonhx_cameras_ArcRotateCamera.prototype,{
	_eyeSpace: null
	,_leftCamera: null
	,_rightCamera: null
	,_update: function() {
		this._updateCamera(this._leftCamera);
		this._updateCamera(this._rightCamera);
		this._leftCamera.alpha = this.alpha - this._eyeSpace;
		this._rightCamera.alpha = this.alpha + this._eyeSpace;
		com_babylonhx_cameras_ArcRotateCamera.prototype._update.call(this);
	}
	,_updateCamera: function(camera) {
		camera.beta = this.beta;
		camera.radius = this.radius;
		camera.minZ = this.minZ;
		camera.maxZ = this.maxZ;
		camera.fov = this.fov;
		camera.target = this.target;
	}
	,__class__: com_babylonhx_cameras_AnaglyphArcRotateCamera
});
var com_babylonhx_cameras_FreeCamera = $hx_exports.BABYLON.FreeCamera = function(name,position,scene) {
	this._newPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._needMoveForGravity = true;
	this._collider = new com_babylonhx_collisions_Collider();
	this._keys = [];
	this.angularSensibility = 2000.0;
	this.applyGravity = false;
	this.checkCollisions = false;
	this.keysRight = [com_babylonhx_utils_Keycodes.right,com_babylonhx_utils_Keycodes.key_d];
	this.keysLeft = [com_babylonhx_utils_Keycodes.left,com_babylonhx_utils_Keycodes.key_a];
	this.keysDown = [com_babylonhx_utils_Keycodes.down,com_babylonhx_utils_Keycodes.key_s];
	this.keysUp = [com_babylonhx_utils_Keycodes.up,com_babylonhx_utils_Keycodes.key_w];
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	com_babylonhx_cameras_TargetCamera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.FreeCamera"] = com_babylonhx_cameras_FreeCamera;
com_babylonhx_cameras_FreeCamera.__name__ = ["com","babylonhx","cameras","FreeCamera"];
com_babylonhx_cameras_FreeCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_FreeCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	ellipsoid: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,checkCollisions: null
	,applyGravity: null
	,angularSensibility: null
	,onCollide: null
	,_keys: null
	,_collider: null
	,_needMoveForGravity: null
	,_oldPosition: null
	,_diffPosition: null
	,_newPosition: null
	,_attachedElement: null
	,_localDirection: null
	,_transformedDirection: null
	,_onMouseDown: null
	,_onMouseUp: null
	,_onMouseOut: null
	,_onMouseMove: null
	,_onKeyDown: null
	,_onKeyUp: null
	,_onLostFocus: null
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
		var _g = this;
		var previousPosition = null;
		var engine = this._scene._engine;
		this._attachedElement = element;
		if(this._onMouseDown == null) {
			this._onMouseDown = function(x,y,button) {
				previousPosition = { x : x, y : y};
			};
			this._onMouseUp = function(x1,y1,button1) {
				previousPosition = null;
			};
			this._onMouseOut = function() {
				previousPosition = null;
				_g._keys = [];
			};
			this._onMouseMove = function(x2,y2) {
				if(previousPosition == null && !engine.isPointerLock) return;
				var offsetX = 0;
				var offsetY = 0;
				if(!engine.isPointerLock) {
					offsetX = x2 - previousPosition.x;
					offsetY = y2 - previousPosition.y;
				}
				_g.cameraRotation.y += offsetX / _g.angularSensibility;
				_g.cameraRotation.x += offsetY / _g.angularSensibility;
				previousPosition = { x : x2, y : y2};
			};
			this._onKeyDown = function(keyCode) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode,0) != -1) {
					var index = HxOverrides.indexOf(_g._keys,keyCode,0);
					if(index == -1) _g._keys.push(keyCode);
				}
			};
			this._onKeyUp = function(keyCode1) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode1,0) != -1) {
					var index1 = HxOverrides.indexOf(_g._keys,keyCode1,0);
					if(index1 >= 0) _g._keys.splice(index1,1);
				}
			};
			this._onLostFocus = function() {
				_g._keys = [];
			};
			this._reset = function() {
				_g._keys = [];
				previousPosition = null;
				_g.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
				_g.cameraRotation = new com_babylonhx_math_Vector2(0,0);
			};
		}
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
		com_babylonhx_Engine.mouseDown.push(this._onMouseDown);
		com_babylonhx_Engine.mouseUp.push(this._onMouseUp);
		com_babylonhx_Engine.mouseMove.push(this._onMouseMove);
	}
	,detachControl: function(element) {
		var x = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x);
		var x1 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x1);
		var x2 = this._onMouseDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x2);
		var x3 = this._onMouseUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x3);
		var x4 = this._onMouseMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x4);
		if(this._reset != null) this._reset();
	}
	,_collideWithWorld: function(velocity) {
		var globalPosition = null;
		if(this.parent != null) globalPosition = com_babylonhx_math_Vector3.TransformCoordinates(this.position,this.parent.getWorldMatrix()); else globalPosition = this.position;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPosition);
		this._collider.radius = this.ellipsoid;
		this._scene._getNewPosition(this._oldPosition,velocity,this._collider,3,this._newPosition);
		this._newPosition.subtractToRef(this._oldPosition,this._diffPosition);
		if(this._diffPosition.length() > com_babylonhx_Engine.CollisionsEpsilon) {
			this.position.addInPlace(this._diffPosition);
			if(this.onCollide != null) this.onCollide(this._collider.collidedMesh);
		}
	}
	,_checkInputs: function() {
		if(this._localDirection == null) {
			this._localDirection = new com_babylonhx_math_Vector3(0,0,0);
			this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
		}
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var index = _g1++;
			haxe_Log.trace(this._keys,{ fileName : "FreeCamera.hx", lineNumber : 239, className : "com.babylonhx.cameras.FreeCamera", methodName : "_checkInputs"});
			var keyCode = this._keys[index];
			var speed = this._computeLocalCameraSpeed();
			if(HxOverrides.indexOf(this.keysLeft,keyCode,0) != -1) this._localDirection.copyFromFloats(-speed,0,0); else if(HxOverrides.indexOf(this.keysUp,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,speed); else if(HxOverrides.indexOf(this.keysRight,keyCode,0) != -1) this._localDirection.copyFromFloats(speed,0,0); else if(HxOverrides.indexOf(this.keysDown,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,-speed);
			this.getViewMatrix().invertToRef(this._cameraTransformMatrix);
			com_babylonhx_math_Vector3.TransformNormalToRef(this._localDirection,this._cameraTransformMatrix,this._transformedDirection);
			this.cameraDirection.addInPlace(this._transformedDirection);
		}
	}
	,_decideIfNeedsToMove: function() {
		return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		if(this.checkCollisions && this._scene.collisionsEnabled) {
			this._collideWithWorld(this.cameraDirection);
			if(this.applyGravity) {
				var oldPosition = this.position;
				this._collideWithWorld(this._scene.gravity);
				this._needMoveForGravity = com_babylonhx_math_Vector3.DistanceSquared(oldPosition,this.position) != 0;
			}
		} else this.position.addInPlace(this.cameraDirection);
	}
	,_update: function() {
		this._checkInputs();
		com_babylonhx_cameras_TargetCamera.prototype._update.call(this);
	}
	,__class__: com_babylonhx_cameras_FreeCamera
});
var com_babylonhx_cameras_AnaglyphFreeCamera = $hx_exports.BABYLON.AnaglyphFreeCamera = function(name,position,eyeSpace,scene) {
	com_babylonhx_cameras_FreeCamera.call(this,name,position,scene);
	this._eyeSpace = eyeSpace * Math.PI / 180;
	this._transformMatrix = new com_babylonhx_math_Matrix();
	this._leftCamera = new com_babylonhx_cameras_FreeCamera(name + "_left",new com_babylonhx_math_Vector3(position.x,position.y,position.z),scene);
	this._rightCamera = new com_babylonhx_cameras_FreeCamera(name + "_right",new com_babylonhx_math_Vector3(position.x,position.y,position.z),scene);
	com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera(this,name);
};
$hxClasses["com.babylonhx.cameras.AnaglyphFreeCamera"] = com_babylonhx_cameras_AnaglyphFreeCamera;
com_babylonhx_cameras_AnaglyphFreeCamera.__name__ = ["com","babylonhx","cameras","AnaglyphFreeCamera"];
com_babylonhx_cameras_AnaglyphFreeCamera.__super__ = com_babylonhx_cameras_FreeCamera;
com_babylonhx_cameras_AnaglyphFreeCamera.prototype = $extend(com_babylonhx_cameras_FreeCamera.prototype,{
	_eyeSpace: null
	,_leftCamera: null
	,_rightCamera: null
	,_transformMatrix: null
	,_getSubCameraPosition: function(eyeSpace,result) {
		var target = this.getTarget();
		com_babylonhx_math_Matrix.Translation(-target.x,-target.y,-target.z).multiplyToRef(com_babylonhx_math_Matrix.RotationY(eyeSpace),this._transformMatrix);
		this._transformMatrix = this._transformMatrix.multiply(com_babylonhx_math_Matrix.Translation(target.x,target.y,target.z));
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this._transformMatrix,result);
	}
	,_update: function() {
		this._getSubCameraPosition(-this._eyeSpace,this._leftCamera.position);
		this._getSubCameraPosition(this._eyeSpace,this._rightCamera.position);
		this._updateCamera(this._leftCamera);
		this._updateCamera(this._rightCamera);
		com_babylonhx_cameras_FreeCamera.prototype._update.call(this);
	}
	,_updateCamera: function(camera) {
		camera.minZ = this.minZ;
		camera.maxZ = this.maxZ;
		camera.fov = this.fov;
		camera.viewport = this.viewport;
		camera.setTarget(this.getTarget());
	}
	,__class__: com_babylonhx_cameras_AnaglyphFreeCamera
});
var com_babylonhx_cameras_FollowCamera = $hx_exports.BABYLON.FollowCamera = function(name,position,scene) {
	this.maxCameraSpeed = 20;
	this.cameraAcceleration = 0.05;
	this.heightOffset = 4;
	this.rotationOffset = 0;
	this.radius = 12;
	com_babylonhx_cameras_TargetCamera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.FollowCamera"] = com_babylonhx_cameras_FollowCamera;
com_babylonhx_cameras_FollowCamera.__name__ = ["com","babylonhx","cameras","FollowCamera"];
com_babylonhx_cameras_FollowCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_FollowCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	radius: null
	,rotationOffset: null
	,heightOffset: null
	,cameraAcceleration: null
	,maxCameraSpeed: null
	,target: null
	,getRadians: function(degrees) {
		return degrees * Math.PI / 180;
	}
	,follow: function(cameraTarget) {
		if(cameraTarget == null) return;
		var yRotation = 0;
		if(cameraTarget.rotationQuaternion != null) {
			var rotMatrix = new com_babylonhx_math_Matrix();
			cameraTarget.rotationQuaternion.toRotationMatrix(rotMatrix);
			yRotation = Math.atan2(rotMatrix.m[8],rotMatrix.m[10]);
		} else yRotation = cameraTarget.rotation.y;
		var radians = this.getRadians(this.rotationOffset) + yRotation;
		var targetX = cameraTarget.position.x + Math.sin(radians) * this.radius;
		var targetZ = cameraTarget.position.z + Math.cos(radians) * this.radius;
		var dx = targetX - this.position.x;
		var dy = cameraTarget.position.y + this.heightOffset - this.position.y;
		var dz = targetZ - this.position.z;
		var vx = dx * this.cameraAcceleration * 2;
		var vy = dy * this.cameraAcceleration;
		var vz = dz * this.cameraAcceleration * 2;
		if(vx > this.maxCameraSpeed || vx < -this.maxCameraSpeed) if(vx < 1) vx = -this.maxCameraSpeed; else vx = this.maxCameraSpeed;
		if(vy > this.maxCameraSpeed || vy < -this.maxCameraSpeed) if(vy < 1) vy = -this.maxCameraSpeed; else vy = this.maxCameraSpeed;
		if(vz > this.maxCameraSpeed || vz < -this.maxCameraSpeed) if(vz < 1) vz = -this.maxCameraSpeed; else vz = this.maxCameraSpeed;
		this.position = new com_babylonhx_math_Vector3(this.position.x + vx,this.position.y + vy,this.position.z + vz);
		this.setTarget(cameraTarget.position);
	}
	,_update: function() {
		com_babylonhx_cameras_TargetCamera.prototype._update.call(this);
		this.follow(this.target);
	}
	,__class__: com_babylonhx_cameras_FollowCamera
});
var com_babylonhx_cameras_VRCameraMetrics = $hx_exports.BABYLON.VRCameraMetrics = function() {
	this.compensateDistorsion = true;
};
$hxClasses["com.babylonhx.cameras.VRCameraMetrics"] = com_babylonhx_cameras_VRCameraMetrics;
com_babylonhx_cameras_VRCameraMetrics.__name__ = ["com","babylonhx","cameras","VRCameraMetrics"];
com_babylonhx_cameras_VRCameraMetrics.GetDefault = function() {
	var result = new com_babylonhx_cameras_VRCameraMetrics();
	result.hResolution = 1280;
	result.vResolution = 800;
	result.hScreenSize = 0.149759993;
	result.vScreenSize = 0.0935999975;
	result.vScreenCenter = 0.0467999987;
	result.eyeToScreenDistance = 0.0410000011;
	result.lensSeparationDistance = 0.0635000020;
	result.interpupillaryDistance = 0.0640000030;
	result.distortionK = [1.0,0.219999999,0.239999995,0.0];
	result.chromaAbCorrection = [0.995999992,-0.00400000019,1.01400006,0.0];
	result.postProcessScaleFactor = 1.714605507808412;
	result.lensCenterOffset = 0.151976421;
	return result;
};
com_babylonhx_cameras_VRCameraMetrics.prototype = {
	hResolution: null
	,vResolution: null
	,hScreenSize: null
	,vScreenSize: null
	,vScreenCenter: null
	,eyeToScreenDistance: null
	,lensSeparationDistance: null
	,interpupillaryDistance: null
	,distortionK: null
	,chromaAbCorrection: null
	,postProcessScaleFactor: null
	,lensCenterOffset: null
	,compensateDistorsion: null
	,get_aspectRatio: function() {
		return this.hResolution / (2 * this.vResolution);
	}
	,get_aspectRatioFov: function() {
		return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));
	}
	,get_leftHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(h,0,0);
	}
	,get_rightHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(-h,0,0);
	}
	,get_leftPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(0.5 * this.interpupillaryDistance,0,0);
	}
	,get_rightPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(-0.5 * this.interpupillaryDistance,0,0);
	}
	,__class__: com_babylonhx_cameras_VRCameraMetrics
	,__properties__: {get_rightPreViewMatrix:"get_rightPreViewMatrix",get_leftPreViewMatrix:"get_leftPreViewMatrix",get_rightHMatrix:"get_rightHMatrix",get_leftHMatrix:"get_leftHMatrix",get_aspectRatioFov:"get_aspectRatioFov",get_aspectRatio:"get_aspectRatio"}
};
var com_babylonhx_collisions_Collider = $hx_exports.BABYLON.Collider = function() {
	this._displacementVector = new com_babylonhx_math_Vector3(0,0,0);
	this._slidePlaneNormal = new com_babylonhx_math_Vector3(0,0,0);
	this._destinationPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._baseToVertex = new com_babylonhx_math_Vector3(0,0,0);
	this._edge = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector4 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector2 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector = new com_babylonhx_math_Vector3(0,0,0);
	this._planeIntersectionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._collisionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this.normalizedVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this.velocityWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.basePointWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.retry = 0;
	this.radius = new com_babylonhx_math_Vector3(1,1,1);
};
$hxClasses["com.babylonhx.collisions.Collider"] = com_babylonhx_collisions_Collider;
com_babylonhx_collisions_Collider.__name__ = ["com","babylonhx","collisions","Collider"];
com_babylonhx_collisions_Collider.intersectBoxAASphere = function(boxMin,boxMax,sphereCenter,sphereRadius) {
	if(boxMin.x > sphereCenter.x + sphereRadius) return false;
	if(sphereCenter.x - sphereRadius > boxMax.x) return false;
	if(boxMin.y > sphereCenter.y + sphereRadius) return false;
	if(sphereCenter.y - sphereRadius > boxMax.y) return false;
	if(boxMin.z > sphereCenter.z + sphereRadius) return false;
	if(sphereCenter.z - sphereRadius > boxMax.z) return false;
	return true;
};
com_babylonhx_collisions_Collider.getLowestRoot = function(a,b,c,maxR) {
	var determinant = b * b - 4.0 * a * c;
	var result = { root : 0, found : false};
	if(determinant < 0) return result;
	var sqrtD = Math.sqrt(determinant);
	var r1 = (-b - sqrtD) / (2.0 * a);
	var r2 = (-b + sqrtD) / (2.0 * a);
	if(r1 > r2) {
		var temp = r2;
		r2 = r1;
		r1 = temp;
	}
	if(r1 > 0 && r1 < maxR) {
		result.root = r1;
		result.found = true;
		return result;
	}
	if(r2 > 0 && r2 < maxR) {
		result.root = r2;
		result.found = true;
		return result;
	}
	return result;
};
com_babylonhx_collisions_Collider.prototype = {
	radius: null
	,retry: null
	,velocity: null
	,basePoint: null
	,epsilon: null
	,collisionFound: null
	,velocityWorldLength: null
	,basePointWorld: null
	,velocityWorld: null
	,normalizedVelocity: null
	,initialVelocity: null
	,initialPosition: null
	,nearestDistance: null
	,intersectionPoint: null
	,collidedMesh: null
	,_collisionPoint: null
	,_planeIntersectionPoint: null
	,_tempVector: null
	,_tempVector2: null
	,_tempVector3: null
	,_tempVector4: null
	,_edge: null
	,_baseToVertex: null
	,_destinationPoint: null
	,_slidePlaneNormal: null
	,_displacementVector: null
	,_initialize: function(source,dir,e) {
		this.velocity = dir;
		com_babylonhx_math_Vector3.NormalizeToRef(dir,this.normalizedVelocity);
		this.basePoint = source;
		source.multiplyToRef(this.radius,this.basePointWorld);
		dir.multiplyToRef(this.radius,this.velocityWorld);
		this.velocityWorldLength = this.velocityWorld.length();
		this.epsilon = e;
		this.collisionFound = false;
	}
	,_checkPointInTriangle: function(point,pa,pb,pc,n) {
		pa.subtractToRef(point,this._tempVector);
		pb.subtractToRef(point,this._tempVector2);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector,this._tempVector2,this._tempVector4);
		var d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		pc.subtractToRef(point,this._tempVector3);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector2,this._tempVector3,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector3,this._tempVector,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		return d >= 0;
	}
	,_canDoCollision: function(sphereCenter,sphereRadius,vecMin,vecMax) {
		var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(this.basePointWorld,sphereCenter));
		var max = Math.max(Math.max(this.radius.x,this.radius.y),this.radius.z);
		if(distance > this.velocityWorldLength + max + sphereRadius) return false;
		if(!com_babylonhx_collisions_Collider.intersectBoxAASphere(vecMin,vecMax,this.basePointWorld,this.velocityWorldLength + max)) return false;
		return true;
	}
	,_testTriangle: function(faceIndex,subMesh,p1,p2,p3) {
		var t0 = 0;
		var embeddedInPlane = false;
		if(subMesh._trianglePlanes == null) subMesh._trianglePlanes = [];
		if(subMesh._trianglePlanes[faceIndex] == null) {
			subMesh._trianglePlanes[faceIndex] = new com_babylonhx_math_Plane(0,0,0,0);
			subMesh._trianglePlanes[faceIndex].copyFromPoints(p1,p2,p3);
		}
		var trianglePlane = subMesh._trianglePlanes[faceIndex];
		if(subMesh.getMaterial() == null && !trianglePlane.isFrontFacingTo(this.normalizedVelocity,0)) return;
		var signedDistToTrianglePlane = com_babylonhx_math_Vector3.Dot(this.basePoint,trianglePlane.normal) + trianglePlane.d;
		var normalDotVelocity = com_babylonhx_math_Vector3.Dot(trianglePlane.normal,this.velocity);
		if(normalDotVelocity == 0) {
			if(Math.abs(signedDistToTrianglePlane) >= 1.0) return;
			embeddedInPlane = true;
			t0 = 0;
		} else {
			t0 = (-1. - signedDistToTrianglePlane) / normalDotVelocity;
			var t1 = (1.0 - signedDistToTrianglePlane) / normalDotVelocity;
			if(t0 > t1) {
				var temp = t1;
				t1 = t0;
				t0 = temp;
			}
			if(t0 > 1.0 || t1 < 0.0) return;
			if(t0 < 0) t0 = 0;
			if(t0 > 1.0) t0 = 1.0;
		}
		this._collisionPoint.copyFromFloats(0,0,0);
		var found = false;
		var t = 1.0;
		if(!embeddedInPlane) {
			this.basePoint.subtractToRef(trianglePlane.normal,this._planeIntersectionPoint);
			this.velocity.scaleToRef(t0,this._tempVector);
			this._planeIntersectionPoint.addInPlace(this._tempVector);
			if(this._checkPointInTriangle(this._planeIntersectionPoint,p1,p2,p3,trianglePlane.normal)) {
				found = true;
				t = t0;
				this._collisionPoint.copyFrom(this._planeIntersectionPoint);
			}
		}
		if(!found) {
			var velocitySquaredLength = this.velocity.lengthSquared();
			var a = velocitySquaredLength;
			this.basePoint.subtractToRef(p1,this._tempVector);
			var b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			var c = this._tempVector.lengthSquared() - 1.0;
			var lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p1);
			}
			this.basePoint.subtractToRef(p2,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p2);
			}
			this.basePoint.subtractToRef(p3,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p3);
			}
			p2.subtractToRef(p1,this._edge);
			p1.subtractToRef(this.basePoint,this._baseToVertex);
			var edgeSquaredLength = this._edge.lengthSquared();
			var edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			var edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f >= 0.0 && f <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f);
					p1.addToRef(this._edge,this._collisionPoint);
				}
			}
			p3.subtractToRef(p2,this._edge);
			p2.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f1 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f1 >= 0.0 && f1 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f1);
					p2.addToRef(this._edge,this._collisionPoint);
				}
			}
			p1.subtractToRef(p3,this._edge);
			p3.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f2 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f2 >= 0.0 && f2 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f2);
					p3.addToRef(this._edge,this._collisionPoint);
				}
			}
		}
		if(found) {
			var distToCollision = t * this.velocity.length();
			if(!this.collisionFound || distToCollision < this.nearestDistance) {
				if(this.intersectionPoint == null) this.intersectionPoint = this._collisionPoint.clone(); else this.intersectionPoint.copyFrom(this._collisionPoint);
				this.nearestDistance = distToCollision;
				this.collisionFound = true;
				this.collidedMesh = subMesh._mesh;
			}
		}
	}
	,_collide: function(subMesh,pts,indices,indexStart,indexEnd,decal) {
		var i = indexStart;
		while(i < indexEnd) {
			var p1 = pts[indices[i] - decal];
			var p2 = pts[indices[i + 1] - decal];
			var p3 = pts[indices[i + 2] - decal];
			this._testTriangle(i,subMesh,p3,p2,p1);
			i += 3;
		}
	}
	,_getResponse: function(pos,vel) {
		pos.addToRef(vel,this._destinationPoint);
		vel.scaleInPlace(this.nearestDistance / Math.sqrt(vel.x * vel.x + vel.y * vel.y + vel.z * vel.z));
		this.basePoint.addToRef(vel,pos);
		pos.subtractToRef(this.intersectionPoint,this._slidePlaneNormal);
		this._slidePlaneNormal.normalize();
		this._slidePlaneNormal.scaleToRef(this.epsilon,this._displacementVector);
		pos.addInPlace(this._displacementVector);
		this.intersectionPoint.addInPlace(this._displacementVector);
		this._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(this.intersectionPoint,this._slidePlaneNormal,this._destinationPoint));
		this._destinationPoint.subtractInPlace(this._slidePlaneNormal);
		this._destinationPoint.subtractToRef(this.intersectionPoint,vel);
	}
	,__class__: com_babylonhx_collisions_Collider
};
var com_babylonhx_collisions_ICollisionCoordinator = $hx_exports.BABYLON.ICollisionCoordinator = function() { };
$hxClasses["com.babylonhx.collisions.ICollisionCoordinator"] = com_babylonhx_collisions_ICollisionCoordinator;
com_babylonhx_collisions_ICollisionCoordinator.__name__ = ["com","babylonhx","collisions","ICollisionCoordinator"];
com_babylonhx_collisions_ICollisionCoordinator.prototype = {
	getNewPosition: null
	,init: null
	,destroy: null
	,onMeshAdded: null
	,onMeshUpdated: null
	,onMeshRemoved: null
	,onGeometryAdded: null
	,onGeometryUpdated: null
	,onGeometryDeleted: null
	,__class__: com_babylonhx_collisions_ICollisionCoordinator
};
var com_babylonhx_collisions_CollisionCoordinatorLegacy = $hx_exports.BABYLON.CollisionCoordinatorLegacy = function() {
	this._finalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.collisions.CollisionCoordinatorLegacy"] = com_babylonhx_collisions_CollisionCoordinatorLegacy;
com_babylonhx_collisions_CollisionCoordinatorLegacy.__name__ = ["com","babylonhx","collisions","CollisionCoordinatorLegacy"];
com_babylonhx_collisions_CollisionCoordinatorLegacy.__interfaces__ = [com_babylonhx_collisions_ICollisionCoordinator];
com_babylonhx_collisions_CollisionCoordinatorLegacy.prototype = {
	_scene: null
	,_scaledPosition: null
	,_scaledVelocity: null
	,_finalPosition: null
	,init: function(scene) {
		this._scene = scene;
	}
	,destroy: function() {
	}
	,getNewPosition: function(position,velocity,collider,maximumRetry,excludedMesh,onNewPosition,collisionIndex) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.collidedMesh = null;
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,this._finalPosition,excludedMesh);
		this._finalPosition.multiplyInPlace(collider.radius);
		onNewPosition(collisionIndex,this._finalPosition,collider.collidedMesh);
	}
	,onMeshAdded: function(mesh) {
	}
	,onMeshUpdated: function(mesh) {
	}
	,onMeshRemoved: function(mesh) {
	}
	,onGeometryAdded: function(geometry) {
	}
	,onGeometryUpdated: function(geometry) {
	}
	,onGeometryDeleted: function(geometry) {
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g = 0;
		var _g1 = this._scene.meshes;
		while(_g < _g1.length) {
			var mesh = _g1[_g];
			++_g;
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,__class__: com_babylonhx_collisions_CollisionCoordinatorLegacy
};
var com_babylonhx_collisions_IntersectionInfo = $hx_exports.BABYLON.IntersectionInfo = function(bu,bv,distance) {
	this.subMeshId = 0;
	this.faceId = 0;
	this.bu = bu;
	this.bv = bv;
	this.distance = distance;
};
$hxClasses["com.babylonhx.collisions.IntersectionInfo"] = com_babylonhx_collisions_IntersectionInfo;
com_babylonhx_collisions_IntersectionInfo.__name__ = ["com","babylonhx","collisions","IntersectionInfo"];
com_babylonhx_collisions_IntersectionInfo.prototype = {
	faceId: null
	,subMeshId: null
	,bu: null
	,bv: null
	,distance: null
	,__class__: com_babylonhx_collisions_IntersectionInfo
};
var com_babylonhx_collisions_PickingInfo = $hx_exports.BABYLON.PickingInfo = function() {
	this.subMeshId = 0;
	this.faceId = -1;
	this.bv = 0;
	this.bu = 0;
	this.pickedMesh = null;
	this.pickedPoint = null;
	this.distance = 0;
	this.hit = false;
};
$hxClasses["com.babylonhx.collisions.PickingInfo"] = com_babylonhx_collisions_PickingInfo;
com_babylonhx_collisions_PickingInfo.__name__ = ["com","babylonhx","collisions","PickingInfo"];
com_babylonhx_collisions_PickingInfo.prototype = {
	hit: null
	,distance: null
	,pickedPoint: null
	,pickedMesh: null
	,bu: null
	,bv: null
	,faceId: null
	,subMeshId: null
	,getNormal: function(useWorldCoordinates,useVerticesNormals) {
		if(useVerticesNormals == null) useVerticesNormals = true;
		if(useWorldCoordinates == null) useWorldCoordinates = false;
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("normal")) return null;
		var indices = this.pickedMesh.getIndices();
		var result = new com_babylonhx_math_Vector3(0,0,0);
		if(useVerticesNormals) {
			var normals = this.pickedMesh.getVerticesData("normal");
			var normal0 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3] * 3);
			var normal1 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 1] * 3);
			var normal2 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 2] * 3);
			normal0 = normal0.scale(this.bu);
			normal1 = normal1.scale(this.bv);
			normal2 = normal2.scale(1.0 - this.bu - this.bv);
			result = new com_babylonhx_math_Vector3(normal0.x + normal1.x + normal2.x,normal0.y + normal1.y + normal2.y,normal0.z + normal1.z + normal2.z);
		} else {
			var positions = this.pickedMesh.getVerticesData("position");
			var vertex1 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3] * 3);
			var vertex2 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 1] * 3);
			var vertex3 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 2] * 3);
			var p1p2 = new com_babylonhx_math_Vector3(vertex1.x - vertex2.x,vertex1.y - vertex2.y,vertex1.z - vertex2.z);
			var p3p2 = new com_babylonhx_math_Vector3(vertex3.x - vertex2.x,vertex3.y - vertex2.y,vertex3.z - vertex2.z);
			result = com_babylonhx_math_Vector3.Cross(p1p2,p3p2);
		}
		if(useWorldCoordinates) result = com_babylonhx_math_Vector3.TransformNormal(result,this.pickedMesh.getWorldMatrix());
		return com_babylonhx_math_Vector3.Normalize(result);
	}
	,getTextureCoordinates: function() {
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("uv")) return null;
		var indices = this.pickedMesh.getIndices();
		var uvs = this.pickedMesh.getVerticesData("uv");
		var uv0 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3] * 2);
		var uv1 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 1] * 2);
		var uv2 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 2] * 2);
		uv0 = uv0.scale(this.bu);
		uv1 = uv1.scale(this.bv);
		uv2 = uv2.scale(1.0 - this.bu - this.bv);
		return new com_babylonhx_math_Vector2(uv0.x + uv1.x + uv2.x,uv0.y + uv1.y + uv2.y);
	}
	,__class__: com_babylonhx_collisions_PickingInfo
};
var com_babylonhx_culling_BoundingBox = $hx_exports.BABYLON.BoundingBox = function(minimum,maximum) {
	this.vectorsWorld = [];
	this.vectors = [];
	this.minimum = minimum;
	this.maximum = maximum;
	this.vectors.push(this.minimum.clone());
	this.vectors.push(this.maximum.clone());
	this.vectors.push(this.minimum.clone());
	this.vectors[2].x = this.maximum.x;
	this.vectors.push(this.minimum.clone());
	this.vectors[3].y = this.maximum.y;
	this.vectors.push(this.minimum.clone());
	this.vectors[4].z = this.maximum.z;
	this.vectors.push(this.maximum.clone());
	this.vectors[5].z = this.minimum.z;
	this.vectors.push(this.maximum.clone());
	this.vectors[6].x = this.minimum.x;
	this.vectors.push(this.maximum.clone());
	this.vectors[7].y = this.minimum.y;
	this.center = this.maximum.add(this.minimum).scale(0.5);
	this.extendSize = this.maximum.subtract(this.minimum).scale(0.5);
	this.directions = [new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0)];
	var _g1 = 0;
	var _g = this.vectors.length;
	while(_g1 < _g) {
		var index = _g1++;
		this.vectorsWorld[index] = new com_babylonhx_math_Vector3(0,0,0);
	}
	this.minimumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.maximumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingBox"] = com_babylonhx_culling_BoundingBox;
com_babylonhx_culling_BoundingBox.__name__ = ["com","babylonhx","culling","BoundingBox"];
com_babylonhx_culling_BoundingBox.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_culling_BoundingBox.Intersects = function(box0,box1) {
	if(box0.maximumWorld.x < box1.minimumWorld.x || box0.minimumWorld.x > box1.maximumWorld.x) return false;
	if(box0.maximumWorld.y < box1.minimumWorld.y || box0.minimumWorld.y > box1.maximumWorld.y) return false;
	if(box0.maximumWorld.z < box1.minimumWorld.z || box0.minimumWorld.z > box1.maximumWorld.z) return false;
	return true;
};
com_babylonhx_culling_BoundingBox.IntersectsSphere = function(minPoint,maxPoint,sphereCenter,sphereRadius) {
	com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = com_babylonhx_math_Vector3.Clamp(sphereCenter,minPoint,maxPoint);
	var num = com_babylonhx_math_Vector3.DistanceSquared(sphereCenter,com_babylonhx_culling_BoundingBox.IntersectsSphere_vector);
	return num <= sphereRadius * sphereRadius;
};
com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) return false;
		}
	}
	return true;
};
com_babylonhx_culling_BoundingBox.IsInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var inCount = 8;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) --inCount; else break;
		}
		if(inCount == 0) return false;
	}
	return true;
};
com_babylonhx_culling_BoundingBox.prototype = {
	minimum: null
	,maximum: null
	,vectors: null
	,center: null
	,extendSize: null
	,directions: null
	,vectorsWorld: null
	,minimumWorld: null
	,maximumWorld: null
	,_worldMatrix: null
	,__smartArrayFlags: null
	,getWorldMatrix: function() {
		return this._worldMatrix;
	}
	,_update: function(world) {
		com_babylonhx_math_Vector3.FromFloatsToRef(Infinity,Infinity,Infinity,this.minimumWorld);
		com_babylonhx_math_Vector3.FromFloatsToRef(-Infinity,-Infinity,-Infinity,this.maximumWorld);
		var _g1 = 0;
		var _g = this.vectors.length;
		while(_g1 < _g) {
			var index = _g1++;
			var v = this.vectorsWorld[index];
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.vectors[index],world,v);
			if(v.x < this.minimumWorld.x) this.minimumWorld.x = v.x;
			if(v.y < this.minimumWorld.y) this.minimumWorld.y = v.y;
			if(v.z < this.minimumWorld.z) this.minimumWorld.z = v.z;
			if(v.x > this.maximumWorld.x) this.maximumWorld.x = v.x;
			if(v.y > this.maximumWorld.y) this.maximumWorld.y = v.y;
			if(v.z > this.maximumWorld.z) this.maximumWorld.z = v.z;
		}
		this.maximumWorld.addToRef(this.minimumWorld,this.center);
		this.center.scaleInPlace(0.5);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,0,this.directions[0]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,4,this.directions[1]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,8,this.directions[2]);
		this._worldMatrix = world;
	}
	,isInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,intersectsPoint: function(point) {
		var delta = -0.001;
		if(this.maximumWorld.x - point.x < delta || delta > point.x - this.minimumWorld.x) return false;
		if(this.maximumWorld.y - point.y < delta || delta > point.y - this.minimumWorld.y) return false;
		if(this.maximumWorld.z - point.z < delta || delta > point.z - this.minimumWorld.z) return false;
		return true;
	}
	,intersectsSphere: function(sphere) {
		return com_babylonhx_culling_BoundingBox.IntersectsSphere(this.minimumWorld,this.maximumWorld,sphere.centerWorld,sphere.radiusWorld);
	}
	,intersectsMinMax: function(min,max) {
		if(this.maximumWorld.x < min.x || this.minimumWorld.x > max.x) return false;
		if(this.maximumWorld.y < min.y || this.minimumWorld.y > max.y) return false;
		if(this.maximumWorld.z < min.z || this.minimumWorld.z > max.z) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingBox
};
var com_babylonhx_culling_BoundingInfo = $hx_exports.BABYLON.BoundingInfo = function(minimum,maximum) {
	this.minimum = minimum;
	this.maximum = maximum;
	this.boundingBox = new com_babylonhx_culling_BoundingBox(minimum,maximum);
	this.boundingSphere = new com_babylonhx_culling_BoundingSphere(minimum,maximum);
};
$hxClasses["com.babylonhx.culling.BoundingInfo"] = com_babylonhx_culling_BoundingInfo;
com_babylonhx_culling_BoundingInfo.__name__ = ["com","babylonhx","culling","BoundingInfo"];
com_babylonhx_culling_BoundingInfo.computeBoxExtents = function(axis,box) {
	var p = com_babylonhx_math_Vector3.Dot(box.center,axis);
	var r0 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[0],axis)) * box.extendSize.x;
	var r1 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[1],axis)) * box.extendSize.y;
	var r2 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[2],axis)) * box.extendSize.z;
	var r = r0 + r1 + r2;
	return { min : p - r, max : p + r};
};
com_babylonhx_culling_BoundingInfo.extentsOverlap = function(min0,max0,min1,max1) {
	return !(min0 > max1 || min1 > max0);
};
com_babylonhx_culling_BoundingInfo.axisOverlap = function(axis,box0,box1) {
	var result0 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box0);
	var result1 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box1);
	return !(result0.min > result1.max || result1.min > result0.max);
};
com_babylonhx_culling_BoundingInfo.prototype = {
	boundingBox: null
	,boundingSphere: null
	,minimum: null
	,maximum: null
	,_update: function(world) {
		this.boundingBox._update(world);
		this.boundingSphere._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		if(!this.boundingSphere.isInFrustum(frustumPlanes)) return false;
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,_checkCollision: function(collider) {
		return collider._canDoCollision(this.boundingSphere.centerWorld,this.boundingSphere.radiusWorld,this.boundingBox.minimumWorld,this.boundingBox.maximumWorld);
	}
	,intersectsPoint: function(point) {
		if(this.boundingSphere.centerWorld == null) return false;
		if(!this.boundingSphere.intersectsPoint(point)) return false;
		if(!this.boundingBox.intersectsPoint(point)) return false;
		return true;
	}
	,intersects: function(boundingInfo,precise) {
		if(precise == null) precise = false;
		if(this.boundingSphere.centerWorld == null || boundingInfo.boundingSphere.centerWorld == null) return false;
		if(!com_babylonhx_culling_BoundingSphere.Intersects(this.boundingSphere,boundingInfo.boundingSphere)) return false;
		if(!com_babylonhx_culling_BoundingBox.Intersects(this.boundingBox,boundingInfo.boundingBox)) return false;
		if(precise) return true;
		var box0 = this.boundingBox;
		var box1 = boundingInfo.boundingBox;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[2]),box0,box1)) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingInfo
};
var com_babylonhx_culling_BoundingSphere = $hx_exports.BABYLON.BoundingSphere = function(minimum,maximum) {
	this._tempRadiusVector = new com_babylonhx_math_Vector3(0,0,0);
	var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(minimum,maximum));
	this.center = com_babylonhx_math_Vector3.Lerp(minimum,maximum,0.5);
	this.radius = distance * 0.5;
	this.centerWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingSphere"] = com_babylonhx_culling_BoundingSphere;
com_babylonhx_culling_BoundingSphere.__name__ = ["com","babylonhx","culling","BoundingSphere"];
com_babylonhx_culling_BoundingSphere.Intersects = function(sphere0,sphere1) {
	var x = sphere0.centerWorld.x - sphere1.centerWorld.x;
	var y = sphere0.centerWorld.y - sphere1.centerWorld.y;
	var z = sphere0.centerWorld.z - sphere1.centerWorld.z;
	var distance = Math.sqrt(x * x + y * y + z * z);
	if(sphere0.radiusWorld + sphere1.radiusWorld < distance) return false;
	return true;
};
com_babylonhx_culling_BoundingSphere.prototype = {
	center: null
	,radius: null
	,centerWorld: null
	,radiusWorld: null
	,_tempRadiusVector: null
	,_update: function(world) {
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.center,world,this.centerWorld);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(1.0,1.0,1.0,world,this._tempRadiusVector);
		this.radiusWorld = Math.max(Math.max(Math.abs(this._tempRadiusVector.x),Math.abs(this._tempRadiusVector.y)),Math.abs(this._tempRadiusVector.z)) * this.radius;
	}
	,isInFrustum: function(frustumPlanes) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(frustumPlanes[i].dotCoordinate(this.centerWorld) <= -this.radiusWorld) return false;
		}
		return true;
	}
	,intersectsPoint: function(point) {
		var x = this.centerWorld.x - point.x;
		var y = this.centerWorld.y - point.y;
		var z = this.centerWorld.z - point.z;
		var distance = Math.sqrt(x * x + y * y + z * z);
		if(Math.abs(this.radiusWorld - distance) < 0.001) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingSphere
};
var com_babylonhx_culling_octrees_IOctreeContainer = $hx_exports.BABYLON.IOctreeContainer = function() { };
$hxClasses["com.babylonhx.culling.octrees.IOctreeContainer"] = com_babylonhx_culling_octrees_IOctreeContainer;
com_babylonhx_culling_octrees_IOctreeContainer.__name__ = ["com","babylonhx","culling","octrees","IOctreeContainer"];
com_babylonhx_culling_octrees_IOctreeContainer.prototype = {
	blocks: null
	,__class__: com_babylonhx_culling_octrees_IOctreeContainer
};
var com_babylonhx_culling_octrees_Octree = $hx_exports.BABYLON.Octree = function(creationFunc,maxBlockCapacity,maxDepth) {
	if(maxDepth == null) maxDepth = 2;
	if(maxBlockCapacity == null) maxBlockCapacity = 64;
	this.dynamicContent = [];
	this._maxBlockCapacity = maxBlockCapacity;
	this._selectionContent = new com_babylonhx_tools_SmartArray(1024);
	this._creationFunc = creationFunc;
	this.maxDepth = maxDepth;
};
$hxClasses["com.babylonhx.culling.octrees.Octree"] = com_babylonhx_culling_octrees_Octree;
com_babylonhx_culling_octrees_Octree.__name__ = ["com","babylonhx","culling","octrees","Octree"];
com_babylonhx_culling_octrees_Octree.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_Octree._CreateBlocks = function(worldMin,worldMax,entries,maxBlockCapacity,currentDepth,maxDepth,target,creationFunc) {
	target.blocks = [];
	var blockSize = new com_babylonhx_math_Vector3((worldMax.x - worldMin.x) / 2,(worldMax.y - worldMin.y) / 2,(worldMax.z - worldMin.z) / 2);
	var _g = 0;
	while(_g < 2) {
		var x = _g++;
		var _g1 = 0;
		while(_g1 < 2) {
			var y = _g1++;
			var _g2 = 0;
			while(_g2 < 2) {
				var z = _g2++;
				var localMin = worldMin.add(blockSize.multiplyByFloats(x,y,z));
				var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1,y + 1,z + 1));
				var block = new com_babylonhx_culling_octrees_OctreeBlock(localMin,localMax,maxBlockCapacity,currentDepth + 1,maxDepth,creationFunc);
				block.addEntries(entries);
				target.blocks.push(block);
			}
		}
	}
};
com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes = function(entry,block) {
	if(!entry.get_isBlocked() && entry.getBoundingInfo().boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes = function(entry,block) {
	if(entry._boundingInfo.boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.prototype = {
	blocks: null
	,dynamicContent: null
	,maxDepth: null
	,_maxBlockCapacity: null
	,_selectionContent: null
	,_creationFunc: null
	,update: function(worldMin,worldMax,entries) {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(worldMin,worldMax,entries,this._maxBlockCapacity,0,this.maxDepth,this,this._creationFunc);
	}
	,addMesh: function(entry) {
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.addEntry(entry);
		}
	}
	,select: function(frustumPlanes,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.select(frustumPlanes,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concat(this.dynamicContent); else this._selectionContent.concatWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersects: function(sphereCenter,sphereRadius,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersects(sphereCenter,sphereRadius,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concat(this.dynamicContent); else this._selectionContent.concatWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersectsRay: function(ray) {
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersectsRay(ray,this._selectionContent);
		}
		this._selectionContent.concatWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,__class__: com_babylonhx_culling_octrees_Octree
};
var com_babylonhx_culling_octrees_OctreeBlock = $hx_exports.BABYLON.OctreeBlock = function(minPoint,maxPoint,capacity,depth,maxDepth,creationFunc) {
	this._boundingVectors = [];
	this.entries = [];
	this._capacity = capacity;
	this._depth = depth;
	this._maxDepth = maxDepth;
	this._creationFunc = creationFunc;
	this._minPoint = minPoint;
	this._maxPoint = maxPoint;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z));
	this._boundingVectors.push(new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z));
	this._boundingVectors.push(new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z));
	this._boundingVectors[2].x = maxPoint.x;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z));
	this._boundingVectors[3].y = maxPoint.y;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z));
	this._boundingVectors[4].z = maxPoint.z;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z));
	this._boundingVectors[5].z = minPoint.z;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z));
	this._boundingVectors[6].x = minPoint.x;
	this._boundingVectors.push(new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z));
	this._boundingVectors[7].y = minPoint.y;
};
$hxClasses["com.babylonhx.culling.octrees.OctreeBlock"] = com_babylonhx_culling_octrees_OctreeBlock;
com_babylonhx_culling_octrees_OctreeBlock.__name__ = ["com","babylonhx","culling","octrees","OctreeBlock"];
com_babylonhx_culling_octrees_OctreeBlock.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_OctreeBlock.prototype = {
	entries: null
	,blocks: null
	,_depth: null
	,_maxDepth: null
	,_capacity: null
	,_minPoint: null
	,_maxPoint: null
	,_boundingVectors: null
	,_creationFunc: null
	,capacity: null
	,get_capacity: function() {
		return this._capacity;
	}
	,minPoint: null
	,get_minPoint: function() {
		return this._minPoint;
	}
	,maxPoint: null
	,get_maxPoint: function() {
		return this._maxPoint;
	}
	,addEntry: function(entry) {
		if(this.blocks != null) {
			var _g1 = 0;
			var _g = this.blocks.length;
			while(_g1 < _g) {
				var index = _g1++;
				var block = this.blocks[index];
				block.addEntry(entry);
			}
			return;
		}
		this._creationFunc(entry,this);
		if(this.entries.length > this.get_capacity() && this._depth < this._maxDepth) this.createInnerBlocks();
	}
	,addEntries: function(entries) {
		var _g1 = 0;
		var _g = entries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = entries[index];
			this.addEntry(mesh);
		}
	}
	,select: function(frustumPlanes,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IsInFrustum(this._boundingVectors,frustumPlanes)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.select(frustumPlanes,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concat(this.entries); else selection.concatWithNoDuplicate(this.entries);
		}
	}
	,intersects: function(sphereCenter,sphereRadius,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IntersectsSphere(this._minPoint,this._maxPoint,sphereCenter,sphereRadius)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersects(sphereCenter,sphereRadius,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concat(this.entries); else selection.concatWithNoDuplicate(this.entries);
		}
	}
	,intersectsRay: function(ray,selection) {
		if(ray.intersectsBoxMinMax(this._minPoint,this._maxPoint)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersectsRay(ray,selection);
				}
				return;
			}
			selection.concatWithNoDuplicate(this.entries);
		}
	}
	,createInnerBlocks: function() {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(this._minPoint,this._maxPoint,this.entries,this._capacity,this._depth,this._maxDepth,this,this._creationFunc);
	}
	,__class__: com_babylonhx_culling_octrees_OctreeBlock
	,__properties__: {get_maxPoint:"get_maxPoint",get_minPoint:"get_minPoint",get_capacity:"get_capacity"}
};
var com_babylonhx_layer_Layer = $hx_exports.BABYLON.Layer = function(name,imgUrl,scene,isBackground,color) {
	if(isBackground == null) isBackground = true;
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [];
	this.indices = [];
	this.vertices = [];
	this.name = name;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,false); else this.texture = null;
	this.isBackground = isBackground;
	if(color == null) this.color = new com_babylonhx_math_Color4(1,1,1,1); else this.color = color;
	this._scene = scene;
	this._scene.layers.push(this);
	this.vertices.push(1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexBuffer = scene._engine.createVertexBuffer(this.vertices);
	this.indices.push(0);
	this.indices.push(1);
	this.indices.push(2);
	this.indices.push(0);
	this.indices.push(2);
	this.indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(this.indices);
	this._effect = this._scene._engine.createEffect("layer",["position"],["textureMatrix","color"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.layer.Layer"] = com_babylonhx_layer_Layer;
com_babylonhx_layer_Layer.__name__ = ["com","babylonhx","layer","Layer"];
com_babylonhx_layer_Layer.prototype = {
	name: null
	,texture: null
	,isBackground: null
	,color: null
	,onDispose: null
	,vertices: null
	,indices: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,render: function() {
		if(!this._effect._isReady || this.texture == null || !this.texture.isReady()) return;
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		if(engine._depthCullingState.get_cull() != false) engine._depthCullingState.set_cull(false);
		engine._depthCullingState.set_zOffset(0);
		this._effect.setTexture("textureSampler",this.texture);
		this._effect.setMatrix("textureMatrix",this.texture.getTextureMatrix());
		this._effect.setFloat4("color",this.color.r,this.color.g,this.color.b,this.color.a);
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		switch(2) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 2;
		engine.draw(true,0,6);
		switch(0) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 0;
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.texture != null) {
			this.texture.dispose();
			this.texture = null;
		}
		var index = HxOverrides.indexOf(this._scene.layers,this,0);
		this._scene.layers.splice(index,1);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_layer_Layer
};
var com_babylonhx_lensflare_LensFlare = $hx_exports.BABYLON.LensFlare = function(size,position,color,imgUrl,system) {
	if(color != null) this.color = color; else this.color = new com_babylonhx_math_Color3(1,1,1);
	this.position = position;
	this.size = size;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,system.getScene(),true); else this.texture = null;
	this._system = system;
	this._system.lensFlares.push(this);
};
$hxClasses["com.babylonhx.lensflare.LensFlare"] = com_babylonhx_lensflare_LensFlare;
com_babylonhx_lensflare_LensFlare.__name__ = ["com","babylonhx","lensflare","LensFlare"];
com_babylonhx_lensflare_LensFlare.prototype = {
	size: null
	,color: null
	,texture: null
	,position: null
	,_system: null
	,dispose: function() {
		if(this.texture != null) this.texture.dispose();
		HxOverrides.remove(this._system.lensFlares,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlare
};
var com_babylonhx_lensflare_LensFlareSystem = $hx_exports.BABYLON.LensFlareSystem = function(name,emitter,scene) {
	this._isEnabled = true;
	this.borderLimit = 300;
	this.lensFlares = [];
	this.name = name;
	this._scene = scene;
	this._emitter = emitter;
	scene.lensFlareSystems.push(this);
	this.meshesSelectionPredicate = function(m) {
		return m.get_material() != null && m.isVisible && m.isEnabled() && m.isBlocker && (m.layerMask & scene.activeCamera.layerMask) != 0;
	};
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexStrideSize = 8;
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	this._effect = this._scene._engine.createEffect("lensFlare",["position"],["color","viewportMatrix"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.lensflare.LensFlareSystem"] = com_babylonhx_lensflare_LensFlareSystem;
com_babylonhx_lensflare_LensFlareSystem.__name__ = ["com","babylonhx","lensflare","LensFlareSystem"];
com_babylonhx_lensflare_LensFlareSystem.prototype = {
	name: null
	,lensFlares: null
	,borderLimit: null
	,meshesSelectionPredicate: null
	,_scene: null
	,_emitter: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,_positionX: null
	,_positionY: null
	,_isEnabled: null
	,isEnabled: null
	,get_isEnabled: function() {
		return this._isEnabled;
	}
	,set_isEnabled: function(value) {
		this._isEnabled = value;
		return value;
	}
	,getScene: function() {
		return this._scene;
	}
	,getEmitter: function() {
		return this._emitter;
	}
	,getEmitterPosition: function() {
		if(this._emitter.getAbsolutePosition != null) return this._emitter.getAbsolutePosition(); else return this._emitter.position;
	}
	,computeEffectivePosition: function(globalViewport) {
		var position = this.getEmitterPosition();
		position = com_babylonhx_math_Vector3.Project(position,com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),this._scene._transformMatrix,globalViewport);
		this._positionX = position.x;
		this._positionY = position.y;
		position = com_babylonhx_math_Vector3.TransformCoordinates(this.getEmitterPosition(),this._scene._viewMatrix);
		if(position.z > 0) {
			if(this._positionX > globalViewport.x && this._positionX < globalViewport.x + globalViewport.width) {
				if(this._positionY > globalViewport.y && this._positionY < globalViewport.y + globalViewport.height) return true;
			}
		}
		return false;
	}
	,_isVisible: function() {
		if(!this._isEnabled) return false;
		var emitterPosition = this.getEmitterPosition();
		var direction = emitterPosition.subtract(this._scene.activeCamera.position);
		var distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		direction.normalize();
		var ray = new com_babylonhx_math_Ray(this._scene.activeCamera.position,direction);
		var pickInfo = this._scene.pickWithRay(ray,this.meshesSelectionPredicate,true);
		return !pickInfo.hit || pickInfo.distance > distance;
	}
	,render: function() {
		if(!this._effect._isReady) return false;
		var engine = this._scene._engine;
		var viewport = this._scene.activeCamera.viewport;
		var globalViewport = viewport.toGlobal(engine);
		if(!this.computeEffectivePosition(globalViewport)) return false;
		if(!this._isVisible()) return false;
		var awayX = 0;
		var awayY = 0;
		if(this._positionX < this.borderLimit + globalViewport.x) awayX = this.borderLimit + globalViewport.x - this._positionX; else if(this._positionX > globalViewport.x + globalViewport.width - this.borderLimit) awayX = this._positionX - globalViewport.x - globalViewport.width + this.borderLimit; else awayX = 0;
		if(this._positionY < this.borderLimit + globalViewport.y) awayY = this.borderLimit + globalViewport.y - this._positionY; else if(this._positionY > globalViewport.y + globalViewport.height - this.borderLimit) awayY = this._positionY - globalViewport.y - globalViewport.height + this.borderLimit; else awayY = 0;
		var away;
		if(awayX > awayY) away = awayX; else away = awayY;
		if(away > this.borderLimit) away = this.borderLimit;
		var intensity = 1.0 - away / this.borderLimit;
		if(intensity < 0) return false;
		if(intensity > 1.0) intensity = 1.0;
		var centerX = globalViewport.x + globalViewport.width / 2;
		var centerY = globalViewport.y + globalViewport.height / 2;
		var distX = centerX - this._positionX;
		var distY = centerY - this._positionY;
		engine.enableEffect(this._effect);
		if(engine._depthCullingState.get_cull() != false) engine._depthCullingState.set_cull(false);
		engine._depthCullingState.set_zOffset(0);
		engine._depthCullingState.set_depthTest(false);
		switch(1) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 1;
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		var _g1 = 0;
		var _g = this.lensFlares.length;
		while(_g1 < _g) {
			var index = _g1++;
			var flare = this.lensFlares[index];
			var x = centerX - distX * flare.position;
			var y = centerY - distY * flare.position;
			var cw = flare.size;
			var ch = flare.size * engine.getAspectRatio(this._scene.activeCamera);
			var cx = 2 * (x / globalViewport.width) - 1.0;
			var cy = 1.0 - 2 * (y / globalViewport.height);
			var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2,0,0,0,0,ch / 2,0,0,0,0,1,0,cx,cy,0,1);
			this._effect.setMatrix("viewportMatrix",viewportMatrix);
			this._effect.setTexture("textureSampler",flare.texture);
			this._effect.setFloat4("color",flare.color.r * intensity,flare.color.g * intensity,flare.color.b * intensity,1.0);
			engine.draw(true,0,6);
		}
		engine._depthCullingState.set_depthTest(true);
		switch(0) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 0;
		return true;
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		while(this.lensFlares.length > 0) this.lensFlares[0].dispose();
		HxOverrides.remove(this._scene.lensFlareSystems,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlareSystem
	,__properties__: {get_isEnabled:"get_isEnabled"}
};
var com_babylonhx_lights_Light = $hx_exports.BABYLON.Light = function(name,scene) {
	this._includedOnlyMeshesIds = [];
	this._excludedMeshesIds = [];
	this.excludeWithLayerMask = 0;
	this.excludedMeshes = [];
	this.includedOnlyMeshes = [];
	this.includeOnlyWithLayerMask = 0;
	this.range = Infinity;
	this.intensity = 1.0;
	this.specular = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	this.diffuse = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	com_babylonhx_Node.call(this,name,scene);
	scene.addLight(this);
};
$hxClasses["com.babylonhx.lights.Light"] = com_babylonhx_lights_Light;
com_babylonhx_lights_Light.__name__ = ["com","babylonhx","lights","Light"];
com_babylonhx_lights_Light.__super__ = com_babylonhx_Node;
com_babylonhx_lights_Light.prototype = $extend(com_babylonhx_Node.prototype,{
	diffuse: null
	,specular: null
	,intensity: null
	,range: null
	,includeOnlyWithLayerMask: null
	,includedOnlyMeshes: null
	,excludedMeshes: null
	,excludeWithLayerMask: null
	,_shadowGenerator: null
	,_parentedWorldMatrix: null
	,_excludedMeshesIds: null
	,_includedOnlyMeshesIds: null
	,getShadowGenerator: function() {
		return this._shadowGenerator;
	}
	,getAbsolutePosition: function() {
		return new com_babylonhx_math_Vector3(0,0,0);
	}
	,transferToEffect: function(effect,uniformName0,uniformName1) {
	}
	,_getWorldMatrix: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,canAffectMesh: function(mesh) {
		if(mesh == null) return true;
		if(this.includedOnlyMeshes.length > 0 && HxOverrides.indexOf(this.includedOnlyMeshes,mesh,0) == -1) return false;
		if(this.excludedMeshes.length > 0 && HxOverrides.indexOf(this.excludedMeshes,mesh,0) != -1) return false;
		if(this.includeOnlyWithLayerMask != 0 && this.includeOnlyWithLayerMask != mesh.layerMask) return false;
		if(this.excludeWithLayerMask != 0 && js_Boot.__cast(this.excludeWithLayerMask & mesh.layerMask , Bool)) return false;
		return true;
	}
	,getWorldMatrix: function() {
		this._currentRenderId = this._scene._renderId;
		var worldMatrix = this._getWorldMatrix();
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._parentedWorldMatrix == null) this._parentedWorldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._parentedWorldMatrix);
			this._parentRenderId = this.parent._currentRenderId;
			return this._parentedWorldMatrix;
		}
		return worldMatrix;
	}
	,dispose: function() {
		if(this._shadowGenerator != null) {
			this._shadowGenerator.dispose();
			this._shadowGenerator = null;
		}
		this._scene.removeLight(this);
	}
	,__class__: com_babylonhx_lights_Light
});
var com_babylonhx_lights_IShadowLight = $hx_exports.BABYLON.IShadowLight = function() { };
$hxClasses["com.babylonhx.lights.IShadowLight"] = com_babylonhx_lights_IShadowLight;
com_babylonhx_lights_IShadowLight.__name__ = ["com","babylonhx","lights","IShadowLight"];
com_babylonhx_lights_IShadowLight.prototype = {
	position: null
	,direction: null
	,transformedPosition: null
	,name: null
	,computeTransformedPosition: null
	,getScene: null
	,setShadowProjectionMatrix: null
	,supportsVSM: null
	,needRefreshPerFrame: null
	,_shadowGenerator: null
	,__class__: com_babylonhx_lights_IShadowLight
};
var com_babylonhx_lights_DirectionalLight = $hx_exports.BABYLON.DirectionalLight = function(name,direction,scene) {
	this.shadowOrthoScale = 0.1;
	com_babylonhx_lights_Light.call(this,name,scene);
	this.direction = direction;
	this.position = new com_babylonhx_math_Vector3(direction.x * -1,direction.y * -1,direction.z * -1);
};
$hxClasses["com.babylonhx.lights.DirectionalLight"] = com_babylonhx_lights_DirectionalLight;
com_babylonhx_lights_DirectionalLight.__name__ = ["com","babylonhx","lights","DirectionalLight"];
com_babylonhx_lights_DirectionalLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_DirectionalLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_DirectionalLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	position: null
	,direction: null
	,_transformedDirection: null
	,transformedPosition: null
	,_worldMatrix: null
	,shadowOrthoScale: null
	,getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList,useVSM) {
		var orthoLeft = Infinity;
		var orthoRight = -Infinity;
		var orthoTop = -Infinity;
		var orthoBottom = Infinity;
		var tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
		var activeCamera = this._scene.activeCamera;
		var _g1 = 0;
		var _g = renderList.length;
		while(_g1 < _g) {
			var meshIndex = _g1++;
			var mesh = renderList[meshIndex];
			if(mesh == null) continue;
			var boundingInfo = mesh.getBoundingInfo();
			if(boundingInfo == null) continue;
			var boundingBox = boundingInfo.boundingBox;
			var _g3 = 0;
			var _g2 = boundingBox.vectorsWorld.length;
			while(_g3 < _g2) {
				var index = _g3++;
				com_babylonhx_math_Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index],viewMatrix,tempVector3);
				if(tempVector3.x < orthoLeft) orthoLeft = tempVector3.x;
				if(tempVector3.y < orthoBottom) orthoBottom = tempVector3.y;
				if(tempVector3.x > orthoRight) orthoRight = tempVector3.x;
				if(tempVector3.y > orthoTop) orthoTop = tempVector3.y;
			}
		}
		var xOffset = orthoRight - orthoLeft;
		var yOffset = orthoTop - orthoBottom;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(orthoLeft - xOffset * this.shadowOrthoScale,orthoRight + xOffset * this.shadowOrthoScale,orthoBottom - yOffset * this.shadowOrthoScale,orthoTop + yOffset * this.shadowOrthoScale,-activeCamera.maxZ,activeCamera.maxZ,matrix);
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return true;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,directionUniformName,extra_UNUSED_PARAM) {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,this.parent.getWorldMatrix(),this._transformedDirection);
			effect.setFloat4(directionUniformName,this._transformedDirection.x,this._transformedDirection.y,this._transformedDirection.z,1);
			return;
		}
		effect.setFloat4(directionUniformName,this.direction.x,this.direction.y,this.direction.z,1);
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_DirectionalLight
});
var com_babylonhx_lights_HemisphericLight = $hx_exports.BABYLON.HemisphericLight = function(name,direction,scene) {
	this.groundColor = new com_babylonhx_math_Color3(0.0,0.0,0.0);
	com_babylonhx_lights_Light.call(this,name,scene);
	this.direction = direction;
};
$hxClasses["com.babylonhx.lights.HemisphericLight"] = com_babylonhx_lights_HemisphericLight;
com_babylonhx_lights_HemisphericLight.__name__ = ["com","babylonhx","lights","HemisphericLight"];
com_babylonhx_lights_HemisphericLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_HemisphericLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	groundColor: null
	,direction: null
	,_worldMatrix: null
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(new com_babylonhx_math_Vector3(0,0,0)));
		return this.direction;
	}
	,getShadowGenerator: function() {
		return null;
	}
	,transferToEffect: function(effect,directionUniformName,groundColorUniformName) {
		var normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		effect.setFloat4(directionUniformName,normalizeDirection.x,normalizeDirection.y,normalizeDirection.z,0);
		effect.setColor3(groundColorUniformName,this.groundColor.scale(this.intensity));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_HemisphericLight
});
var com_babylonhx_lights_PointLight = $hx_exports.BABYLON.PointLight = function(name,position,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this.position = position;
};
$hxClasses["com.babylonhx.lights.PointLight"] = com_babylonhx_lights_PointLight;
com_babylonhx_lights_PointLight.__name__ = ["com","babylonhx","lights","PointLight"];
com_babylonhx_lights_PointLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_PointLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	_worldMatrix: null
	,_transformedPosition: null
	,position: null
	,getAbsolutePosition: function() {
		if(this._transformedPosition != null) return this._transformedPosition; else return this.position;
	}
	,transferToEffect: function(effect,positionUniformName,extra_UNUSED_PARAM) {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._transformedPosition == null) this._transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this._transformedPosition);
			effect.setFloat4(positionUniformName,this._transformedPosition.x,this._transformedPosition.y,this._transformedPosition.z,0);
			return;
		}
		effect.setFloat4(positionUniformName,this.position.x,this.position.y,this.position.z,0);
	}
	,getShadowGenerator: function() {
		return null;
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_PointLight
});
var com_babylonhx_lights_SpotLight = $hx_exports.BABYLON.SpotLight = function(name,position,direction,angle,exponent,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this.position = position;
	this.direction = direction;
	this.angle = angle;
	this.exponent = exponent;
};
$hxClasses["com.babylonhx.lights.SpotLight"] = com_babylonhx_lights_SpotLight;
com_babylonhx_lights_SpotLight.__name__ = ["com","babylonhx","lights","SpotLight"];
com_babylonhx_lights_SpotLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_SpotLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_SpotLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	transformedPosition: null
	,_transformedDirection: null
	,_worldMatrix: null
	,position: null
	,direction: null
	,angle: null
	,exponent: null
	,getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList,useVSM) {
		var activeCamera = this._scene.activeCamera;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.angle,1.0,activeCamera.minZ,activeCamera.maxZ,matrix);
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return false;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,positionUniformName,directionUniformName) {
		var normalizeDirection = new com_babylonhx_math_Vector3(0,0,0);
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			this.computeTransformedPosition();
			var parentWorldMatrix = this.parent.getWorldMatrix();
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,parentWorldMatrix,this._transformedDirection);
			effect.setFloat4(positionUniformName,this.transformedPosition.x,this.transformedPosition.y,this.transformedPosition.z,this.exponent);
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this._transformedDirection);
		} else {
			effect.setFloat4(positionUniformName,this.position.x,this.position.y,this.position.z,this.exponent);
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		}
		effect.setFloat4(directionUniformName,normalizeDirection.x,normalizeDirection.y,normalizeDirection.z,Math.cos(this.angle * 0.5));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_SpotLight
});
var com_babylonhx_lights_shadows_ShadowGenerator = $hx_exports.BABYLON.ShadowGenerator = function(mapSize,light) {
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transparencyShadow = false;
	this._darkness = 0;
	this._lightDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._bias = 0.00005;
	this._blurBoxOffset = 0.0;
	this.blurScale = 2;
	this._filter = com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE;
	var _g = this;
	this._light = light;
	this._scene = light.getScene();
	this._mapSize = mapSize;
	light._shadowGenerator = this;
	this._shadowMap = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,this._scene,false);
	this._shadowMap.wrapU = 0;
	this._shadowMap.wrapV = 0;
	this._shadowMap.anisotropicFilteringLevel = 1;
	this._shadowMap.updateSamplingMode(1);
	this._shadowMap.renderParticles = false;
	this._shadowMap.onAfterUnbind = function() {
		if(!_g.get_useBlurVarianceShadowMap()) return;
		if(_g._shadowMap2 == null) {
			_g._shadowMap2 = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,_g._scene,false);
			_g._shadowMap2.wrapU = 0;
			_g._shadowMap2.wrapV = 0;
			_g._shadowMap2.updateSamplingMode(3);
			_g._downSamplePostprocess = new com_babylonhx_postprocess_PassPostProcess("downScale",1.0 / _g.blurScale,null,2,_g._scene._engine);
			_g._downSamplePostprocess.onApply = function(effect) {
				effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"textureSampler",0),_g._shadowMap);
			};
			_g.set_blurBoxOffset(1);
		}
		_g._scene.postProcessManager.directRender([_g._downSamplePostprocess,_g._boxBlurPostprocess],_g._shadowMap2.getInternalTexture());
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene = _g._scene;
		var engine = scene._engine;
		engine.setState(subMesh.getMaterial().backFaceCulling,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,com_babylonhx_materials_Material.TriangleFillMode);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",_g.getTransformMatrix());
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones()) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,com_babylonhx_materials_Material.TriangleFillMode,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		} else _g._shadowMap.resetRefreshCounter();
	};
	this._shadowMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes,transparentSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
		if(_g._transparencyShadow) {
			var _g21 = 0;
			var _g12 = transparentSubMeshes.length;
			while(_g21 < _g12) {
				var index2 = _g21++;
				renderSubMesh(transparentSubMeshes.data[index2]);
			}
		}
	};
	this._shadowMap.onClear = function(engine1) {
		if(_g.get_useBlurVarianceShadowMap() || _g.get_useVarianceShadowMap()) engine1.clear(new com_babylonhx_math_Color4(0,0,0,0),true,true); else engine1.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
};
$hxClasses["com.babylonhx.lights.shadows.ShadowGenerator"] = com_babylonhx_lights_shadows_ShadowGenerator;
com_babylonhx_lights_shadows_ShadowGenerator.__name__ = ["com","babylonhx","lights","shadows","ShadowGenerator"];
com_babylonhx_lights_shadows_ShadowGenerator.prototype = {
	_filter: null
	,blurScale: null
	,_blurBoxOffset: null
	,_bias: null
	,_lightDirection: null
	,get_bias: function() {
		return this._bias;
	}
	,set_bias: function(bias) {
		this._bias = bias;
		return bias;
	}
	,get_blurBoxOffset: function() {
		return this._blurBoxOffset;
	}
	,set_blurBoxOffset: function(value) {
		var _g = this;
		if(this._blurBoxOffset == value) return value;
		this._blurBoxOffset = value;
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
		this._boxBlurPostprocess = new com_babylonhx_postprocess_PostProcess("DepthBoxBlur","depthBoxBlur",["screenSize","boxOffset"],[],1.0 / this.blurScale,null,2,this._scene._engine,false,"#define OFFSET " + value);
		this._boxBlurPostprocess.onApply = function(effect) {
			effect.setFloat2("screenSize",_g._mapSize / _g.blurScale,_g._mapSize / _g.blurScale);
		};
		return value;
	}
	,get_filter: function() {
		return this._filter;
	}
	,set_filter: function(value) {
		if(this._filter == value) return value;
		this._filter = value;
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap()) {
			this._shadowMap.anisotropicFilteringLevel = 16;
			this._shadowMap.updateSamplingMode(3);
		} else {
			this._shadowMap.anisotropicFilteringLevel = 1;
			this._shadowMap.updateSamplingMode(1);
		}
		return value;
	}
	,get_useVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_usePoissonSampling: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING || !this._light.supportsVSM() && (this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP || this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP);
	}
	,set_usePoissonSampling: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_useBlurVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useBlurVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,_light: null
	,_scene: null
	,_shadowMap: null
	,_shadowMap2: null
	,_darkness: null
	,_transparencyShadow: null
	,_effect: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_transformMatrix: null
	,_worldViewProjection: null
	,_cachedPosition: null
	,_cachedDirection: null
	,_cachedDefines: null
	,_currentRenderID: null
	,_downSamplePostprocess: null
	,_boxBlurPostprocess: null
	,_mapSize: null
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap()) defines.push("#define VSM");
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones()) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			defines.push("#define BONES");
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		}
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("shadowMap",attribs,["world","mBones","viewProjection","diffuseMatrix"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getShadowMap: function() {
		return this._shadowMap;
	}
	,getShadowMapForRendering: function() {
		if(this._shadowMap2 != null) return this._shadowMap2;
		return this._shadowMap;
	}
	,getLight: function() {
		return this._light;
	}
	,getTransformMatrix: function() {
		var scene = this._scene;
		if(this._currentRenderID == scene._renderId) return this._transformMatrix;
		this._currentRenderID = scene._renderId;
		var lightPosition = this._light.position;
		com_babylonhx_math_Vector3.NormalizeToRef(this._light.direction,this._lightDirection);
		if(Math.abs(com_babylonhx_math_Vector3.Dot(this._lightDirection,new com_babylonhx_math_Vector3(0,1.0,0))) == 1.0) this._lightDirection.z = 0.0000000000001;
		if(this._light.computeTransformedPosition()) lightPosition = this._light.transformedPosition;
		if(this._light.needRefreshPerFrame() || this._cachedPosition == null || this._cachedDirection == null || !lightPosition.equals(this._cachedPosition) || !this._lightDirection.equals(this._cachedDirection)) {
			this._cachedPosition = new com_babylonhx_math_Vector3(lightPosition.x,lightPosition.y,lightPosition.z);
			this._cachedDirection = this._lightDirection.clone();
			com_babylonhx_math_Matrix.LookAtLHToRef(lightPosition,this._light.position.add(this._lightDirection),new com_babylonhx_math_Vector3(0,1.0,0),this._viewMatrix);
			this._light.setShadowProjectionMatrix(this._projectionMatrix,this._viewMatrix,this.getShadowMap().renderList,false);
			this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
		}
		return this._transformMatrix;
	}
	,getDarkness: function() {
		return this._darkness;
	}
	,setDarkness: function(darkness) {
		if(darkness >= 1.0) this._darkness = 1.0; else if(darkness <= 0.0) this._darkness = 0.0; else this._darkness = darkness;
	}
	,setTransparencyShadow: function(hasShadow) {
		this._transparencyShadow = hasShadow;
	}
	,_packHalf: function(depth) {
		var scale = depth * 255.0;
		var fract = scale - Math.floor(scale);
		return new com_babylonhx_math_Vector2(depth - fract / 255.0,fract);
	}
	,dispose: function() {
		this._shadowMap.dispose();
		if(this._shadowMap2 != null) this._shadowMap2.dispose();
		if(this._downSamplePostprocess != null) this._downSamplePostprocess.dispose();
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
	}
	,__class__: com_babylonhx_lights_shadows_ShadowGenerator
	,__properties__: {set_useBlurVarianceShadowMap:"set_useBlurVarianceShadowMap",get_useBlurVarianceShadowMap:"get_useBlurVarianceShadowMap",set_usePoissonSampling:"set_usePoissonSampling",get_usePoissonSampling:"get_usePoissonSampling",set_useVarianceShadowMap:"set_useVarianceShadowMap",get_useVarianceShadowMap:"get_useVarianceShadowMap",set_filter:"set_filter",get_filter:"get_filter",set_blurBoxOffset:"set_blurBoxOffset",get_blurBoxOffset:"get_blurBoxOffset",set_bias:"set_bias",get_bias:"get_bias"}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var com_babylonhx_materials_Material = $hx_exports.BABYLON.Material = function(name,scene,doNotAdd) {
	if(doNotAdd == null) doNotAdd = false;
	this.zOffset = 0.0;
	this.pointSize = 1.0;
	this._fillMode = com_babylonhx_materials_Material.TriangleFillMode;
	this._wasPreviouslyReady = false;
	this.backFaceCulling = true;
	this.alpha = 1.0;
	this.state = "";
	this.checkReadyOnlyOnce = false;
	this.checkReadyOnEveryCall = true;
	this.id = name;
	this.name = name;
	this._scene = scene;
	if(!doNotAdd) scene.materials.push(this);
};
$hxClasses["com.babylonhx.materials.Material"] = com_babylonhx_materials_Material;
com_babylonhx_materials_Material.__name__ = ["com","babylonhx","materials","Material"];
com_babylonhx_materials_Material.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_Material.prototype = {
	id: null
	,name: null
	,checkReadyOnEveryCall: null
	,checkReadyOnlyOnce: null
	,state: null
	,alpha: null
	,backFaceCulling: null
	,onCompiled: null
	,onError: null
	,onDispose: null
	,onBind: null
	,getRenderTargetTextures: null
	,__smartArrayFlags: null
	,_effect: null
	,_wasPreviouslyReady: null
	,_scene: null
	,_fillMode: null
	,pointSize: null
	,zOffset: null
	,get_wireframe: function() {
		return this._fillMode == com_babylonhx_materials_Material.WireFrameFillMode;
	}
	,set_wireframe: function(value) {
		if(value) this._fillMode = com_babylonhx_materials_Material.WireFrameFillMode; else this._fillMode = com_babylonhx_materials_Material.TriangleFillMode;
		return value;
	}
	,get_pointsCloud: function() {
		return this._fillMode == com_babylonhx_materials_Material.PointFillMode;
	}
	,set_pointsCloud: function(value) {
		if(value) this._fillMode = com_babylonhx_materials_Material.PointFillMode; else this._fillMode = com_babylonhx_materials_Material.TriangleFillMode;
		return value;
	}
	,get_fillMode: function() {
		return this._fillMode;
	}
	,set_fillMode: function(value) {
		this._fillMode = value;
		return value;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		return true;
	}
	,getEffect: function() {
		return this._effect;
	}
	,getScene: function() {
		return this._scene;
	}
	,needAlphaBlending: function() {
		return this.alpha < 1.0;
	}
	,needAlphaTesting: function() {
		return false;
	}
	,getAlphaTestTexture: function() {
		return null;
	}
	,trackCreation: function(onCompiled,onError) {
	}
	,_preBind: function() {
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		engine.setState(this.backFaceCulling,this.zOffset,null);
	}
	,bind: function(world,mesh) {
		this._scene._cachedMaterial = this;
		if(this.onBind != null) this.onBind(this);
	}
	,bindOnlyWorldMatrix: function(world) {
	}
	,unbind: function() {
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		HxOverrides.remove(this._scene.materials,this);
		if(forceDisposeEffect && this._effect != null) {
			this._scene._engine._releaseEffect(this._effect);
			this._effect = null;
		}
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_materials_Material
	,__properties__: {set_fillMode:"set_fillMode",get_fillMode:"get_fillMode",set_pointsCloud:"set_pointsCloud",get_pointsCloud:"get_pointsCloud",set_wireframe:"set_wireframe",get_wireframe:"get_wireframe"}
};
var com_babylonhx_materials_StandardMaterial = $hx_exports.BABYLON.StandardMaterial = function(name,scene) {
	this.maxSimultaneousLights = 4;
	this._renderId = -1;
	this._scaledSpecular = new com_babylonhx_math_Color3();
	this._scaledDiffuse = new com_babylonhx_math_Color3();
	this._globalAmbientColor = new com_babylonhx_math_Color3(0,0,0);
	this._worldViewProjectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._renderTargets = new com_babylonhx_tools_SmartArray(16);
	this._cachedDefines = null;
	this.fogEnabled = true;
	this.useSpecularOverAlpha = true;
	this.useAlphaFromDiffuseTexture = false;
	this.emissiveColor = new com_babylonhx_math_Color3(0,0,0);
	this.specularPower = 64;
	this.specularColor = new com_babylonhx_math_Color3(1,1,1);
	this.diffuseColor = new com_babylonhx_math_Color3(1,1,1);
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.bumpTexture = null;
	this.specularTexture = null;
	this.emissiveTexture = null;
	this.reflectionTexture = null;
	this.opacityTexture = null;
	this.ambientTexture = null;
	this.diffuseTexture = null;
	var _g = this;
	com_babylonhx_materials_Material.call(this,name,scene);
	this.getRenderTargetTextures = function() {
		_g._renderTargets.reset();
		if(_g.reflectionTexture != null && _g.reflectionTexture.isRenderTarget) _g._renderTargets.push(_g.reflectionTexture);
		return _g._renderTargets;
	};
};
$hxClasses["com.babylonhx.materials.StandardMaterial"] = com_babylonhx_materials_StandardMaterial;
com_babylonhx_materials_StandardMaterial.__name__ = ["com","babylonhx","materials","StandardMaterial"];
com_babylonhx_materials_StandardMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_StandardMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	diffuseTexture: null
	,ambientTexture: null
	,opacityTexture: null
	,reflectionTexture: null
	,emissiveTexture: null
	,specularTexture: null
	,bumpTexture: null
	,ambientColor: null
	,diffuseColor: null
	,specularColor: null
	,specularPower: null
	,emissiveColor: null
	,useAlphaFromDiffuseTexture: null
	,useSpecularOverAlpha: null
	,fogEnabled: null
	,diffuseFresnelParameters: null
	,opacityFresnelParameters: null
	,reflectionFresnelParameters: null
	,emissiveFresnelParameters: null
	,_cachedDefines: null
	,_renderTargets: null
	,_worldViewProjectionMatrix: null
	,_globalAmbientColor: null
	,_scaledDiffuse: null
	,_scaledSpecular: null
	,_renderId: null
	,_specularTermEnabled: null
	,maxSimultaneousLights: null
	,needAlphaBlending: function() {
		return this.alpha < 1.0 || this.opacityTexture != null || this._shouldUseAlphaFromDiffuseTexture() || this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled;
	}
	,needAlphaTesting: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha;
	}
	,_shouldUseAlphaFromDiffuseTexture: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha && this.useAlphaFromDiffuseTexture;
	}
	,getAlphaTestTexture: function() {
		return this.diffuseTexture;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		if(this.checkReadyOnlyOnce) {
			if(this._wasPreviouslyReady) return true;
		}
		var scene = this.getScene();
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) return true;
		}
		var engine = scene._engine;
		com_babylonhx_materials_StandardMaterial.defines = [];
		var fallbacks = new com_babylonhx_materials_EffectFallbacks();
		var needNormals = false;
		var needUVs = false;
		if(scene.texturesEnabled) {
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				if(!this.diffuseTexture.isReady()) return false; else {
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define DIFFUSE");
				}
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				if(!this.ambientTexture.isReady()) return false; else {
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define AMBIENT");
				}
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				if(!this.opacityTexture.isReady()) return false; else {
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define OPACITY");
					if(this.opacityTexture.getAlphaFromRGB) com_babylonhx_materials_StandardMaterial.defines.push("#define OPACITYRGB");
				}
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(!this.reflectionTexture.isReady()) return false; else {
					needNormals = true;
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define REFLECTION");
					fallbacks.addFallback(0,"REFLECTION");
				}
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				if(!this.emissiveTexture.isReady()) return false; else {
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define EMISSIVE");
				}
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				if(!this.specularTexture.isReady()) return false; else {
					needUVs = true;
					com_babylonhx_materials_StandardMaterial.defines.push("#define SPECULAR");
					fallbacks.addFallback(0,"SPECULAR");
				}
			}
		}
		if(scene._engine.getCaps().standardDerivatives == true && this.bumpTexture != null && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
			if(!this.bumpTexture.isReady()) return false; else {
				needUVs = true;
				com_babylonhx_materials_StandardMaterial.defines.push("#define BUMP");
				fallbacks.addFallback(0,"BUMP");
			}
		}
		if(this.useSpecularOverAlpha) {
			com_babylonhx_materials_StandardMaterial.defines.push("#define SPECULAROVERALPHA");
			fallbacks.addFallback(0,"SPECULAROVERALPHA");
		}
		if(scene.clipPlane != null) com_babylonhx_materials_StandardMaterial.defines.push("#define CLIPPLANE");
		if(engine._alphaTest) com_babylonhx_materials_StandardMaterial.defines.push("#define ALPHATEST");
		if(this._shouldUseAlphaFromDiffuseTexture()) com_babylonhx_materials_StandardMaterial.defines.push("#define ALPHAFROMDIFFUSE");
		if(this.get_pointsCloud() || scene.forcePointsCloud) com_babylonhx_materials_StandardMaterial.defines.push("#define POINTSIZE");
		if(scene.fogEnabled && mesh != null && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) {
			com_babylonhx_materials_StandardMaterial.defines.push("#define FOG");
			fallbacks.addFallback(1,"FOG");
		}
		var shadowsActivated = false;
		var lightIndex = 0;
		this._specularTermEnabled = false;
		if(scene.lightsEnabled) {
			var _g1 = 0;
			var _g = scene.lights.length;
			while(_g1 < _g) {
				var index = _g1++;
				var light = scene.lights[index];
				if(!light.isEnabled()) continue;
				if(light._excludedMeshesIds.length > 0) {
					var _g3 = 0;
					var _g2 = light._excludedMeshesIds.length;
					while(_g3 < _g2) {
						var excludedIndex = _g3++;
						var excludedMesh = scene.getMeshByID(light._excludedMeshesIds[excludedIndex]);
						if(excludedMesh != null) light.excludedMeshes.push(excludedMesh);
					}
					light._excludedMeshesIds = [];
				}
				if(light._includedOnlyMeshesIds.length > 0) {
					var _g31 = 0;
					var _g21 = light._includedOnlyMeshesIds.length;
					while(_g31 < _g21) {
						var includedOnlyIndex = _g31++;
						var includedOnlyMesh = scene.getMeshByID(light._includedOnlyMeshesIds[includedOnlyIndex]);
						if(includedOnlyMesh != null) light.includedOnlyMeshes.push(includedOnlyMesh);
					}
					light._includedOnlyMeshesIds = [];
				}
				if(!light.canAffectMesh(mesh)) continue;
				needNormals = true;
				com_babylonhx_materials_StandardMaterial.defines.push("#define LIGHT" + lightIndex);
				if(lightIndex > 0) fallbacks.addFallback(lightIndex,"LIGHT" + lightIndex);
				var type = "";
				if(js_Boot.__instanceof(light,com_babylonhx_lights_SpotLight)) type = "#define SPOTLIGHT" + lightIndex; else if(js_Boot.__instanceof(light,com_babylonhx_lights_HemisphericLight)) type = "#define HEMILIGHT" + lightIndex; else type = "#define POINTDIRLIGHT" + lightIndex;
				com_babylonhx_materials_StandardMaterial.defines.push(type);
				if(lightIndex > 0) fallbacks.addFallback(lightIndex,StringTools.replace(type,"#define ",""));
				if(!light.specular.equalsFloats(0,0,0)) {
					if(!this._specularTermEnabled) {
						this._specularTermEnabled = true;
						com_babylonhx_materials_StandardMaterial.defines.push("#define SPECULARTERM");
						fallbacks.addFallback(0,"SPECULARTERM");
					}
				}
				if(scene.shadowsEnabled) {
					var shadowGenerator = light.getShadowGenerator();
					if(mesh != null && mesh.get_receiveShadows() && shadowGenerator != null) {
						com_babylonhx_materials_StandardMaterial.defines.push("#define SHADOW" + lightIndex);
						fallbacks.addFallback(0,"SHADOW" + lightIndex);
						if(!shadowsActivated) {
							com_babylonhx_materials_StandardMaterial.defines.push("#define SHADOWS");
							shadowsActivated = true;
						}
						if(shadowGenerator.get_useVarianceShadowMap() || shadowGenerator.get_useBlurVarianceShadowMap()) {
							com_babylonhx_materials_StandardMaterial.defines.push("#define SHADOWVSM" + lightIndex);
							if(lightIndex > 0) fallbacks.addFallback(0,"SHADOWVSM" + lightIndex);
						}
						if(shadowGenerator.get_usePoissonSampling()) {
							com_babylonhx_materials_StandardMaterial.defines.push("#define SHADOWPCF" + lightIndex);
							if(lightIndex > 0) fallbacks.addFallback(0,"SHADOWPCF" + lightIndex);
						}
					}
				}
				lightIndex++;
				if(lightIndex == this.maxSimultaneousLights) break;
			}
		}
		if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
			if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled || this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled || this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled || this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) {
				var fresnelRank = 1;
				if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) {
					com_babylonhx_materials_StandardMaterial.defines.push("#define DIFFUSEFRESNEL");
					fallbacks.addFallback(fresnelRank,"DIFFUSEFRESNEL");
					fresnelRank++;
				}
				if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) {
					com_babylonhx_materials_StandardMaterial.defines.push("#define OPACITYFRESNEL");
					fallbacks.addFallback(fresnelRank,"OPACITYFRESNEL");
					fresnelRank++;
				}
				if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) {
					com_babylonhx_materials_StandardMaterial.defines.push("#define REFLECTIONFRESNEL");
					fallbacks.addFallback(fresnelRank,"REFLECTIONFRESNEL");
					fresnelRank++;
				}
				if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) {
					com_babylonhx_materials_StandardMaterial.defines.push("#define EMISSIVEFRESNEL");
					fallbacks.addFallback(fresnelRank,"EMISSIVEFRESNEL");
					fresnelRank++;
				}
				needNormals = true;
				com_babylonhx_materials_StandardMaterial.defines.push("#define FRESNEL");
				fallbacks.addFallback(fresnelRank - 1,"FRESNEL");
			}
		}
		var attribs = ["position"];
		if(mesh != null) {
			if(needNormals && mesh.isVerticesDataPresent("normal")) {
				attribs.push("normal");
				com_babylonhx_materials_StandardMaterial.defines.push("#define NORMAL");
			}
			if(needUVs) {
				if(mesh.isVerticesDataPresent("uv")) {
					attribs.push("uv");
					com_babylonhx_materials_StandardMaterial.defines.push("#define UV1");
				}
				if(mesh.isVerticesDataPresent("uv2")) {
					attribs.push("uv2");
					com_babylonhx_materials_StandardMaterial.defines.push("#define UV2");
				}
			}
			if(mesh.useVertexColors && mesh.isVerticesDataPresent("color")) {
				attribs.push("color");
				com_babylonhx_materials_StandardMaterial.defines.push("#define VERTEXCOLOR");
				if(mesh.hasVertexAlpha) com_babylonhx_materials_StandardMaterial.defines.push("#define VERTEXALPHA");
			}
			if(mesh.get_useBones()) {
				attribs.push("matricesIndices");
				attribs.push("matricesWeights");
				com_babylonhx_materials_StandardMaterial.defines.push("#define BONES");
				com_babylonhx_materials_StandardMaterial.defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
				com_babylonhx_materials_StandardMaterial.defines.push("#define BONES4");
				fallbacks.addFallback(0,"BONES4");
			}
			if(useInstances) {
				com_babylonhx_materials_StandardMaterial.defines.push("#define INSTANCES");
				attribs.push("world0");
				attribs.push("world1");
				attribs.push("world2");
				attribs.push("world3");
			}
		}
		var join = com_babylonhx_materials_StandardMaterial.defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			scene._cachedMaterial = null;
			var shaderName = "default";
			if(scene._engine.getCaps().standardDerivatives == false) shaderName = "legacydefault";
			this._effect = scene._engine.createEffect(shaderName,attribs,["world","view","viewProjection","vEyePosition","vLightsType","vAmbientColor","vDiffuseColor","vSpecularColor","vEmissiveColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vDiffuseInfos","vAmbientInfos","vOpacityInfos","vReflectionInfos","vEmissiveInfos","vSpecularInfos","vBumpInfos","mBones","vClipPlane","diffuseMatrix","ambientMatrix","opacityMatrix","reflectionMatrix","emissiveMatrix","specularMatrix","bumpMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","diffuseLeftColor","diffuseRightColor","opacityParts","reflectionLeftColor","reflectionRightColor","emissiveLeftColor","emissiveRightColor"],["diffuseSampler","ambientSampler","opacitySampler","reflectionCubeSampler","reflection2DSampler","emissiveSampler","specularSampler","bumpSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3"],join,fallbacks,this.onCompiled,this.onError);
		}
		if(!this._effect._isReady) return false;
		this._renderId = scene._renderId;
		this._wasPreviouslyReady = true;
		return true;
	}
	,unbind: function() {
		if(this.reflectionTexture != null && this.reflectionTexture.isRenderTarget) this._effect.setTexture("reflection2DSampler",null);
	}
	,bindOnlyWorldMatrix: function(world) {
		this._effect.setMatrix("world",world);
	}
	,bind: function(world,mesh) {
		var scene = this.getScene();
		this.bindOnlyWorldMatrix(world);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		if(mesh != null && mesh.get_useBones()) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		if(scene.getCachedMaterial() != this) {
			if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
				if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) {
					this._effect.setColor4("diffuseLeftColor",this.diffuseFresnelParameters.leftColor,this.diffuseFresnelParameters.power);
					this._effect.setColor4("diffuseRightColor",this.diffuseFresnelParameters.rightColor,this.diffuseFresnelParameters.bias);
				}
				if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) this._effect.setColor4("opacityParts",new com_babylonhx_math_Color3(this.opacityFresnelParameters.leftColor.toLuminance(),this.opacityFresnelParameters.rightColor.toLuminance(),this.opacityFresnelParameters.bias),this.opacityFresnelParameters.power);
				if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) {
					this._effect.setColor4("reflectionLeftColor",this.reflectionFresnelParameters.leftColor,this.reflectionFresnelParameters.power);
					this._effect.setColor4("reflectionRightColor",this.reflectionFresnelParameters.rightColor,this.reflectionFresnelParameters.bias);
				}
				if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) {
					this._effect.setColor4("emissiveLeftColor",this.emissiveFresnelParameters.leftColor,this.emissiveFresnelParameters.power);
					this._effect.setColor4("emissiveRightColor",this.emissiveFresnelParameters.rightColor,this.emissiveFresnelParameters.bias);
				}
			}
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				this._effect.setTexture("diffuseSampler",this.diffuseTexture);
				this._effect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level);
				this._effect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix());
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				this._effect.setTexture("ambientSampler",this.ambientTexture);
				this._effect.setFloat2("vAmbientInfos",this.ambientTexture.coordinatesIndex,this.ambientTexture.level);
				this._effect.setMatrix("ambientMatrix",this.ambientTexture.getTextureMatrix());
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				this._effect.setTexture("opacitySampler",this.opacityTexture);
				this._effect.setFloat2("vOpacityInfos",this.opacityTexture.coordinatesIndex,this.opacityTexture.level);
				this._effect.setMatrix("opacityMatrix",this.opacityTexture.getTextureMatrix());
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(this.reflectionTexture.isCube) this._effect.setTexture("reflectionCubeSampler",this.reflectionTexture); else this._effect.setTexture("reflection2DSampler",this.reflectionTexture);
				this._effect.setMatrix("reflectionMatrix",this.reflectionTexture.getReflectionTextureMatrix());
				this._effect.setFloat3("vReflectionInfos",this.reflectionTexture.coordinatesMode,this.reflectionTexture.level,this.reflectionTexture.isCube?1:0);
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				this._effect.setTexture("emissiveSampler",this.emissiveTexture);
				this._effect.setFloat2("vEmissiveInfos",this.emissiveTexture.coordinatesIndex,this.emissiveTexture.level);
				this._effect.setMatrix("emissiveMatrix",this.emissiveTexture.getTextureMatrix());
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				this._effect.setTexture("specularSampler",this.specularTexture);
				this._effect.setFloat2("vSpecularInfos",this.specularTexture.coordinatesIndex,this.specularTexture.level);
				this._effect.setMatrix("specularMatrix",this.specularTexture.getTextureMatrix());
			}
			if(this.bumpTexture != null && scene._engine.getCaps().standardDerivatives == true && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
				this._effect.setTexture("bumpSampler",this.bumpTexture);
				this._effect.setFloat2("vBumpInfos",this.bumpTexture.coordinatesIndex,1.0 / this.bumpTexture.level);
				this._effect.setMatrix("bumpMatrix",this.bumpTexture.getTextureMatrix());
			}
			if(scene.clipPlane != null) {
				var clipPlane = scene.clipPlane;
				this._effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
			}
			if(this.get_pointsCloud()) this._effect.setFloat("pointSize",this.pointSize);
			scene.ambientColor.multiplyToRef(this.ambientColor,this._globalAmbientColor);
			this._scaledSpecular.r = this.specularColor.r * Math.min(1,Math.max(0,1.0 - this.emissiveColor.r));
			this._scaledSpecular.g = this.specularColor.g * Math.min(1,Math.max(0,1.0 - this.emissiveColor.g));
			this._scaledSpecular.b = this.specularColor.b * Math.min(1,Math.max(0,1.0 - this.emissiveColor.b));
			this._effect.setVector3("vEyePosition",scene.activeCamera.position);
			this._effect.setColor3("vAmbientColor",this._globalAmbientColor);
			if(this._specularTermEnabled) this._effect.setColor4("vSpecularColor",this._scaledSpecular,this.specularPower);
			this._effect.setColor3("vEmissiveColor",this.emissiveColor);
		}
		this._scaledDiffuse.r = this.diffuseColor.r * Math.min(1,Math.max(0,1.0 - this.emissiveColor.r));
		this._scaledDiffuse.g = this.diffuseColor.g * Math.min(1,Math.max(0,1.0 - this.emissiveColor.g));
		this._scaledDiffuse.b = this.diffuseColor.b * Math.min(1,Math.max(0,1.0 - this.emissiveColor.b));
		this._effect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha * mesh.get_visibility());
		if(scene.lightsEnabled) {
			var lightIndex = 0;
			var _g1 = 0;
			var _g = scene.lights.length;
			while(_g1 < _g) {
				var index = _g1++;
				var light = scene.lights[index];
				if(!light.isEnabled()) continue;
				if(!light.canAffectMesh(mesh)) continue;
				if(js_Boot.__instanceof(light,com_babylonhx_lights_PointLight)) light.transferToEffect(this._effect,"vLightData" + lightIndex); else if(js_Boot.__instanceof(light,com_babylonhx_lights_DirectionalLight)) light.transferToEffect(this._effect,"vLightData" + lightIndex); else if(js_Boot.__instanceof(light,com_babylonhx_lights_SpotLight)) light.transferToEffect(this._effect,"vLightData" + lightIndex,"vLightDirection" + lightIndex); else if(js_Boot.__instanceof(light,com_babylonhx_lights_HemisphericLight)) light.transferToEffect(this._effect,"vLightData" + lightIndex,"vLightGround" + lightIndex);
				light.diffuse.scaleToRef(light.intensity,this._scaledDiffuse);
				this._effect.setColor4("vLightDiffuse" + lightIndex,this._scaledDiffuse,light.range);
				if(this._specularTermEnabled) {
					light.specular.scaleToRef(light.intensity,this._scaledSpecular);
					this._effect.setColor3("vLightSpecular" + lightIndex,this._scaledSpecular);
				}
				if(scene.shadowsEnabled) {
					var shadowGenerator = light.getShadowGenerator();
					if(mesh.get_receiveShadows() && shadowGenerator != null) {
						this._effect.setMatrix("lightMatrix" + lightIndex,shadowGenerator.getTransformMatrix());
						this._effect.setTexture("shadowSampler" + lightIndex,shadowGenerator.getShadowMapForRendering());
						this._effect.setFloat3("shadowsInfo" + lightIndex,shadowGenerator.getDarkness(),shadowGenerator.getShadowMap().getSize().width,shadowGenerator.get_bias());
					}
				}
				lightIndex++;
				if(lightIndex == this.maxSimultaneousLights) break;
			}
		}
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE || this.reflectionTexture != null) this._effect.setMatrix("view",scene._viewMatrix);
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE) {
			this._effect.setFloat4("vFogInfos",scene.fogMode,scene.fogStart,scene.fogEnd,scene.fogDensity);
			this._effect.setColor3("vFogColor",scene.fogColor);
		}
		com_babylonhx_materials_Material.prototype.bind.call(this,world,mesh);
	}
	,getAnimatables: function() {
		var results = [];
		if(this.diffuseTexture != null && this.diffuseTexture.animations != null && this.diffuseTexture.animations.length > 0) results.push(this.diffuseTexture);
		if(this.ambientTexture != null && this.ambientTexture.animations != null && this.ambientTexture.animations.length > 0) results.push(this.ambientTexture);
		if(this.opacityTexture != null && this.opacityTexture.animations != null && this.opacityTexture.animations.length > 0) results.push(this.opacityTexture);
		if(this.reflectionTexture != null && this.reflectionTexture.animations != null && this.reflectionTexture.animations.length > 0) results.push(this.reflectionTexture);
		if(this.emissiveTexture != null && this.emissiveTexture.animations != null && this.emissiveTexture.animations.length > 0) results.push(this.emissiveTexture);
		if(this.specularTexture != null && this.specularTexture.animations != null && this.specularTexture.animations.length > 0) results.push(this.specularTexture);
		if(this.bumpTexture != null && this.bumpTexture.animations != null && this.bumpTexture.animations.length > 0) results.push(this.bumpTexture);
		return results;
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		if(this.diffuseTexture != null) this.diffuseTexture.dispose();
		if(this.ambientTexture != null) this.ambientTexture.dispose();
		if(this.opacityTexture != null) this.opacityTexture.dispose();
		if(this.reflectionTexture != null) this.reflectionTexture.dispose();
		if(this.emissiveTexture != null) this.emissiveTexture.dispose();
		if(this.specularTexture != null) this.specularTexture.dispose();
		if(this.bumpTexture != null) this.bumpTexture.dispose();
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,clone: function(name) {
		var newStandardMaterial = new com_babylonhx_materials_StandardMaterial(name,this.getScene());
		newStandardMaterial.checkReadyOnEveryCall = this.checkReadyOnEveryCall;
		newStandardMaterial.alpha = this.alpha;
		newStandardMaterial.set_fillMode(this.get_fillMode());
		newStandardMaterial.backFaceCulling = this.backFaceCulling;
		if(this.diffuseTexture != null) newStandardMaterial.diffuseTexture = this.diffuseTexture.clone();
		if(this.ambientTexture != null) newStandardMaterial.ambientTexture = this.ambientTexture.clone();
		if(this.opacityTexture != null) newStandardMaterial.opacityTexture = this.opacityTexture.clone();
		if(this.reflectionTexture != null) newStandardMaterial.reflectionTexture = this.reflectionTexture.clone();
		if(this.emissiveTexture != null) newStandardMaterial.emissiveTexture = this.emissiveTexture.clone();
		if(this.specularTexture != null) newStandardMaterial.specularTexture = this.specularTexture.clone();
		if(this.bumpTexture != null) newStandardMaterial.bumpTexture = this.bumpTexture.clone();
		newStandardMaterial.ambientColor = this.ambientColor.clone();
		newStandardMaterial.diffuseColor = this.diffuseColor.clone();
		newStandardMaterial.specularColor = this.specularColor.clone();
		newStandardMaterial.specularPower = this.specularPower;
		newStandardMaterial.emissiveColor = this.emissiveColor.clone();
		return newStandardMaterial;
	}
	,__class__: com_babylonhx_materials_StandardMaterial
});
var com_babylonhx_math_Color3 = $hx_exports.BABYLON.Color3 = function(r,g,b) {
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
};
$hxClasses["com.babylonhx.math.Color3"] = com_babylonhx_math_Color3;
com_babylonhx_math_Color3.__name__ = ["com","babylonhx","math","Color3"];
com_babylonhx_math_Color3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color3(array[0],array[1],array[2]);
};
com_babylonhx_math_Color3.FromInt = function(rgb) {
	return new com_babylonhx_math_Color3((rgb >> 16 & 255) / 255.0,(rgb >> 8 & 255) / 255.0,(rgb & 255) / 255.0);
};
com_babylonhx_math_Color3.FromInts = function(r,g,b) {
	return new com_babylonhx_math_Color3(r / 255.0,g / 255.0,b / 255.0);
};
com_babylonhx_math_Color3.Lerp = function(start,end,amount) {
	var r = start.r + (end.r - start.r) * amount;
	var g = start.g + (end.g - start.g) * amount;
	var b = start.b + (end.b - start.b) * amount;
	return new com_babylonhx_math_Color3(r,g,b);
};
com_babylonhx_math_Color3.Red = function() {
	return new com_babylonhx_math_Color3(1,0,0);
};
com_babylonhx_math_Color3.Green = function() {
	return new com_babylonhx_math_Color3(0,1,0);
};
com_babylonhx_math_Color3.Blue = function() {
	return new com_babylonhx_math_Color3(0,0,1);
};
com_babylonhx_math_Color3.Black = function() {
	return new com_babylonhx_math_Color3(0,0,0);
};
com_babylonhx_math_Color3.White = function() {
	return new com_babylonhx_math_Color3(1,1,1);
};
com_babylonhx_math_Color3.Purple = function() {
	return new com_babylonhx_math_Color3(0.5,0,0.5);
};
com_babylonhx_math_Color3.Magenta = function() {
	return new com_babylonhx_math_Color3(1,0,1);
};
com_babylonhx_math_Color3.Yellow = function() {
	return new com_babylonhx_math_Color3(1,1,0);
};
com_babylonhx_math_Color3.Gray = function() {
	return new com_babylonhx_math_Color3(0.5,0.5,0.5);
};
com_babylonhx_math_Color3.prototype = {
	r: null
	,g: null
	,b: null
	,toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		return this;
	}
	,toColor4: function(alpha) {
		if(alpha == null) alpha = 1;
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,alpha);
	}
	,asArray: function() {
		var result = [];
		result[0] = this.r;
		result[1] = this.g;
		result[2] = this.b;
		this;
		return result;
	}
	,toLuminance: function() {
		return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
	}
	,multiply: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r * otherColor.r,this.g * otherColor.g,this.b * otherColor.b);
	}
	,multiplyToRef: function(otherColor,result) {
		result.r = this.r * otherColor.r;
		result.g = this.g * otherColor.g;
		result.b = this.b * otherColor.b;
		return this;
	}
	,equals: function(otherColor) {
		return otherColor != null && this.r == otherColor.r && this.g == otherColor.g && this.b == otherColor.b;
	}
	,equalsFloats: function(r,g,b) {
		return this.r == r && this.g == g && this.b == b;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color3(this.r * scale,this.g * scale,this.b * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		return this;
	}
	,add: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r + otherColor.r,this.g + otherColor.g,this.b + otherColor.b);
	}
	,addToRef: function(otherColor,result) {
		result.r = this.r + otherColor.r;
		result.g = this.g + otherColor.g;
		result.b = this.b + otherColor.b;
		return this;
	}
	,subtract: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r - otherColor.r,this.g - otherColor.g,this.b - otherColor.b);
	}
	,subtractToRef: function(otherColor,result) {
		result.r = this.r - otherColor.r;
		result.g = this.g - otherColor.g;
		result.b = this.b - otherColor.b;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Color3(this.r,this.g,this.b);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		return this;
	}
	,copyFromFloats: function(r,g,b) {
		this.r = r;
		this.g = g;
		this.b = b;
		return this;
	}
	,__class__: com_babylonhx_math_Color3
};
var com_babylonhx_tools_Tags = $hx_exports.BABYLON.Tags = function() { };
$hxClasses["com.babylonhx.tools.Tags"] = com_babylonhx_tools_Tags;
com_babylonhx_tools_Tags.__name__ = ["com","babylonhx","tools","Tags"];
com_babylonhx_tools_Tags.EnableFor = function(obj) {
	if(obj._tags != null) obj._tags = obj._tags; else obj._tags = { };
	obj.hasTags = function() {
		return com_babylonhx_tools_Tags.HasTags(obj);
	};
	obj.addTags = function(tagsString) {
		com_babylonhx_tools_Tags.AddTagsTo(obj,tagsString);
	};
	obj.removeTags = function(tagsString1) {
		com_babylonhx_tools_Tags.RemoveTagsFrom(obj,tagsString1);
	};
};
com_babylonhx_tools_Tags.DisableFor = function(obj) {
	obj._tags = null;
	obj.hasTags = null;
	obj.addTags = null;
	obj.removeTags = null;
	obj.matchesTagsQuery = null;
};
com_babylonhx_tools_Tags.HasTags = function(obj) {
	if(!obj._tags) return false;
	return !com_babylonhx_tools_Tools.IsEmpty(obj._tags);
};
com_babylonhx_tools_Tags.GetTags = function(obj) {
	if(obj._tags == null) return null;
	return obj._tags;
};
com_babylonhx_tools_Tags.AddTagsTo = function(obj,tagsString) {
	if(tagsString == null) tagsString = "";
	if(tagsString == "") return;
	var tags = tagsString.split(" ");
	var _g = 0;
	while(_g < tags.length) {
		var t = tags[_g];
		++_g;
		com_babylonhx_tools_Tags._AddTagTo(obj,t);
	}
};
com_babylonhx_tools_Tags._AddTagTo = function(obj,tag) {
	tag = StringTools.trim(tag);
	if(tag == "" || tag == "true" || tag == "false") return;
	var regex = new EReg("[\\s]","");
	var regex2 = new EReg("^([!]|([|]|[&]){2})","");
	if(regex.match(tag) || regex2.match(tag)) return;
	com_babylonhx_tools_Tags.EnableFor(obj);
};
com_babylonhx_tools_Tags.RemoveTagsFrom = function(obj,tagsString) {
	if(!com_babylonhx_tools_Tags.HasTags(obj)) return;
	var tags = tagsString.split(" ");
	var _g = 0;
	while(_g < tags.length) {
		var t = tags[_g];
		++_g;
		com_babylonhx_tools_Tags._RemoveTagFrom(obj,t);
	}
};
com_babylonhx_tools_Tags._RemoveTagFrom = function(obj,tag) {
	obj._tags.remove(tag);
};
var haxe_Timer = function() { };
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
var com_babylonhx_tools_Tools = $hx_exports.BABYLON.Tools = function() { };
$hxClasses["com.babylonhx.tools.Tools"] = com_babylonhx_tools_Tools;
com_babylonhx_tools_Tools.__name__ = ["com","babylonhx","tools","Tools"];
com_babylonhx_tools_Tools.GetExponantOfTwo = function(value,max) {
	var count = 1;
	do count *= 2; while(count < value);
	if(count > max) count = max;
	return count;
};
com_babylonhx_tools_Tools.GetFilename = function(path) {
	var index = path.lastIndexOf("/");
	if(index < 0) return path;
	return path.substring(index + 1);
};
com_babylonhx_tools_Tools.ToDegrees = function(angle) {
	return angle * 180 / Math.PI;
};
com_babylonhx_tools_Tools.ToRadians = function(angle) {
	return angle * Math.PI / 180;
};
com_babylonhx_tools_Tools.delay = function(f,time_ms) {
	var t = new snow_api_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed = function(positions,indices,indexStart,indexCount) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = indexStart;
	var _g = indexStart + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[indices[index] * 3],positions[indices[index] * 3 + 1],positions[indices[index] * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.ExtractMinAndMax = function(positions,start,count) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = start;
	var _g = start + count;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[index * 3],positions[index * 3 + 1],positions[index * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.MakeArray = function(obj,allowsNullUndefined) {
	if(allowsNullUndefined == null) allowsNullUndefined = false;
	if(allowsNullUndefined != true && obj == null) return null;
	if(Object.prototype.hasOwnProperty.call(obj,"get")) {
		var ret = [];
		var $it0 = (function($this) {
			var $r;
			var this1;
			this1 = js_Boot.__cast(obj , haxe_IMap);
			$r = this1.keys();
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var key = $it0.next();
			ret.push(obj.get(key));
		}
		return ret;
	}
	if((obj instanceof Array) && obj.__enum__ == null) return obj; else return [obj];
};
com_babylonhx_tools_Tools.CleanUrl = function(url) {
	var regex = new EReg("#","mg");
	url = regex.replace(url,"%23");
	return url;
};
com_babylonhx_tools_Tools.LoadFile = function(path,callbackFn,type) {
	if(type == null) type = "";
	if(type == "") {
		if(HxOverrides.indexOf(SnowApp._snow.assets.list,path,0) != -1) {
			if(StringTools.endsWith(path,"bbin")) {
				var callBackFunction;
				if(callbackFn != null) callBackFunction = function(result) {
					callbackFn(result.bytes);
				}; else callBackFunction = function(_) {
				};
				snow_system_assets_AssetBytes.load(SnowApp._host.app.assets,path).then(function(asset) {
					callBackFunction(asset);
				});
			} else {
				var callBackFunction1;
				if(callbackFn != null) callBackFunction1 = function(result1) {
					callbackFn(result1.text);
				}; else callBackFunction1 = function(_1) {
				};
				snow_system_assets_AssetText.load(SnowApp._host.app.assets,path).then(function(asset1) {
					callBackFunction1(asset1);
				});
			}
		} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 313, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
	} else if(HxOverrides.indexOf(SnowApp._snow.assets.list,path,0) != -1) switch(type) {
	case "text":
		var callBackFunction2;
		if(callbackFn != null) callBackFunction2 = function(result2) {
			callbackFn(result2.text);
		}; else callBackFunction2 = function(_2) {
		};
		snow_system_assets_AssetText.load(SnowApp._host.app.assets,path).then(function(asset2) {
			callBackFunction2(asset2);
		});
		break;
	case "bin":
		var callBackFunction3;
		if(callbackFn != null) callBackFunction3 = function(result3) {
			callbackFn(result3.bytes);
		}; else callBackFunction3 = function(_3) {
		};
		snow_system_assets_AssetBytes.load(SnowApp._host.app.assets,path).then(function(asset3) {
			callBackFunction3(asset3);
		});
		break;
	case "img":
		var callBackFunction4;
		if(callbackFn != null) callBackFunction4 = function(img) {
			var i = new com_babylonhx_utils_Image(img.image.pixels,img.image.width,img.image.height);
			callbackFn(i);
		}; else callBackFunction4 = function(_4) {
		};
		snow_system_assets_AssetImage.load(SnowApp._host.app.assets,path).then(function(asset4) {
			callBackFunction4(asset4);
		});
		break;
	} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 353, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
};
com_babylonhx_tools_Tools.LoadImage = function(url,onload,onerror,db) {
	if(HxOverrides.indexOf(SnowApp._host.app.assets.list,url,0) != -1) {
		var callBackFunction = function(img) {
			var i = new com_babylonhx_utils_Image(img.image.pixels,img.image.width,img.image.height);
			onload(i);
		};
		snow_system_assets_AssetImage.load(SnowApp._host.app.assets,url).then(function(asset) {
			callBackFunction(asset);
		});
	} else haxe_Log.trace("Image '" + url + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 517, className : "com.babylonhx.tools.Tools", methodName : "LoadImage"});
};
com_babylonhx_tools_Tools.Clamp = function(value,min,max) {
	if(max == null) max = 1;
	if(min == null) min = 0;
	return Math.min(max,Math.max(min,value));
};
com_babylonhx_tools_Tools.Clamp2 = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
com_babylonhx_tools_Tools.Sign = function(value) {
	if(value == 0) return 0;
	if(value > 0) return 1; else return -1;
};
com_babylonhx_tools_Tools.Format = function(value,decimals) {
	if(decimals == null) decimals = 2;
	value = Math.round(value * Math.pow(10,decimals));
	var str = "" + value;
	var len = str.length;
	if(len <= decimals) {
		while(len < decimals) {
			str = "0" + str;
			len++;
		}
		return (decimals == 0?"":"0.") + str;
	} else return HxOverrides.substr(str,0,str.length - decimals) + (decimals == 0?"":".") + HxOverrides.substr(str,str.length - decimals,null);
};
com_babylonhx_tools_Tools.CheckExtends = function(v,min,max) {
	if(v.x < min.x) min.x = v.x;
	if(v.y < min.y) min.y = v.y;
	if(v.z < min.z) min.z = v.z;
	if(v.x > max.x) max.x = v.x;
	if(v.y > max.y) max.y = v.y;
	if(v.z > max.z) max.z = v.z;
};
com_babylonhx_tools_Tools.WithinEpsilon = function(a,b,epsilon) {
	if(epsilon == null) epsilon = 1.401298E-45;
	var num = a - b;
	return -epsilon <= num && num <= epsilon;
};
com_babylonhx_tools_Tools.DeepCopy = function(source,destination,doNotCopyList,mustCopyList) {
	var sourceFields = Type.getInstanceFields(source);
	var _g = 0;
	while(_g < sourceFields.length) {
		var prop = sourceFields[_g];
		++_g;
		if(prop.charAt(0) == "_" && (mustCopyList == null || HxOverrides.indexOf(mustCopyList,prop,0) == -1)) continue;
		if(doNotCopyList != null && HxOverrides.indexOf(doNotCopyList,prop,0) != -1) continue;
		var sourceValue = Reflect.getProperty(source,prop);
		if(Reflect.isFunction(sourceValue)) continue;
		Reflect.setField(destination,prop,com_babylonhx_tools_Tools.dcopy(sourceValue));
	}
};
com_babylonhx_tools_Tools.dcopy = function(v) {
	if((v instanceof Array) && v.__enum__ == null) {
		var r = Type.createInstance(v == null?null:js_Boot.getClass(v),[]);
		var _g1 = 0;
		var _g = v.length;
		while(_g1 < _g) {
			var ii = _g1++;
			r.push(com_babylonhx_tools_Tools.dcopy(v[ii]));
		}
		return r;
	} else if((v == null?null:js_Boot.getClass(v)) == null) {
		var obj = { };
		var _g2 = 0;
		var _g11 = Reflect.fields(v);
		while(_g2 < _g11.length) {
			var ff = _g11[_g2];
			++_g2;
			Reflect.setField(obj,ff,com_babylonhx_tools_Tools.dcopy(Reflect.field(v,ff)));
		}
		return obj;
	} else {
		var obj1 = Type.createEmptyInstance(v == null?null:js_Boot.getClass(v));
		var _g3 = 0;
		var _g12 = Reflect.fields(v);
		while(_g3 < _g12.length) {
			var ff1 = _g12[_g3];
			++_g3;
			Reflect.setField(obj1,ff1,com_babylonhx_tools_Tools.dcopy(Reflect.field(v,ff1)));
		}
		return obj1;
	}
	return null;
};
com_babylonhx_tools_Tools.deepCopy = function(v) {
	if(!Reflect.isObject(v)) return v; else if((v instanceof Array) && v.__enum__ == null) {
		var r = Type.createInstance(v == null?null:js_Boot.getClass(v),[]);
		var _g1 = 0;
		var _g = v.length;
		while(_g1 < _g) {
			var ii = _g1++;
			r.push(com_babylonhx_tools_Tools.deepCopy(v[ii]));
		}
		return r;
	} else if((v == null?null:js_Boot.getClass(v)) == null) {
		var obj = { };
		var _g2 = 0;
		var _g11 = Reflect.fields(v);
		while(_g2 < _g11.length) {
			var ff = _g11[_g2];
			++_g2;
			Reflect.setField(obj,ff,com_babylonhx_tools_Tools.deepCopy(Reflect.field(v,ff)));
		}
		return obj;
	} else {
		var obj1 = Type.createEmptyInstance(v == null?null:js_Boot.getClass(v));
		var _g3 = 0;
		var _g12 = Reflect.fields(v);
		while(_g3 < _g12.length) {
			var ff1 = _g12[_g3];
			++_g3;
			Reflect.setField(obj1,ff1,com_babylonhx_tools_Tools.deepCopy(Reflect.field(v,ff1)));
		}
		return obj1;
	}
	return null;
};
com_babylonhx_tools_Tools.cloneValue = function(source,destinationObject) {
	if(source == null) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_Mesh)) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_SubMesh)) return (js_Boot.__cast(source , com_babylonhx_mesh_SubMesh)).clone(js_Boot.__cast(destinationObject , com_babylonhx_mesh_AbstractMesh)); else if(Object.prototype.hasOwnProperty.call(source,"clone")) return source.clone();
	return null;
};
com_babylonhx_tools_Tools.IsEmpty = function(obj) {
	if((obj instanceof Array) && obj.__enum__ == null) {
		var _g = 0;
		var _g1;
		_g1 = js_Boot.__cast(obj , Array);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			return false;
		}
	}
	return true;
};
com_babylonhx_tools_Tools.Now = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.getTimer = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.uuid = function() {
	var specialChars_0 = "8";
	var specialChars_1 = "9";
	var specialChars_2 = "A";
	var specialChars_3 = "B";
	var createRandomIdentifier = function(length,radix) {
		if(radix == null) radix = 61;
		var characters = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
		var id = [];
		if(radix > 61) radix = 61; else radix = radix;
		while(length-- > 0) id.push(characters[Math.floor((radix + 1) * Math.random())]);
		return id.join("");
	};
	return createRandomIdentifier(8,15) + "-" + createRandomIdentifier(4,15) + "-4" + createRandomIdentifier(3,15) + "-" + Math.floor(4 * Math.random()) + createRandomIdentifier(3,15) + "-" + createRandomIdentifier(12,15);
};
com_babylonhx_tools_Tools.randomInt = function(from,to) {
	return from + Math.floor((to - from + 1) * Math.random());
};
var com_babylonhx_materials_textures_BaseTexture = $hx_exports.BABYLON.BaseTexture = function(scene) {
	this.anisotropicFilteringLevel = 4;
	this.wrapV = 1;
	this.wrapU = 1;
	this.coordinatesMode = 0;
	this.coordinatesIndex = 0;
	this.animations = [];
	this.isRenderTarget = false;
	this.isCube = false;
	this.level = 1;
	this.getAlphaFromRGB = false;
	this.hasAlpha = false;
	this.delayLoadState = 0;
	this._scene = scene;
	this._scene.textures.push(this);
};
$hxClasses["com.babylonhx.materials.textures.BaseTexture"] = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_BaseTexture.__name__ = ["com","babylonhx","materials","textures","BaseTexture"];
com_babylonhx_materials_textures_BaseTexture.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_materials_textures_BaseTexture.prototype = {
	name: null
	,delayLoadState: null
	,hasAlpha: null
	,getAlphaFromRGB: null
	,level: null
	,isCube: null
	,isRenderTarget: null
	,animations: null
	,onDispose: null
	,coordinatesIndex: null
	,coordinatesMode: null
	,wrapU: null
	,wrapV: null
	,anisotropicFilteringLevel: null
	,_cachedAnisotropicFilteringLevel: null
	,__smartArrayFlags: null
	,_scene: null
	,_texture: null
	,getScene: function() {
		return this._scene;
	}
	,getTextureMatrix: function() {
		return null;
	}
	,getReflectionTextureMatrix: function() {
		return null;
	}
	,getInternalTexture: function() {
		return this._texture;
	}
	,isReady: function() {
		if(this.delayLoadState == 4) return true;
		if(this._texture != null) return this._texture.isReady;
		return false;
	}
	,getSize: function() {
		if(this._texture._width != -1 && this._texture._width != 0) return { width : this._texture._width, height : this._texture._height};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : 0, height : 0};
	}
	,getBaseSize: function() {
		if(!this.isReady()) return { width : 0, height : 0};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : this._texture._baseWidth, height : this._texture._baseHeight};
	}
	,scale: function(ratio) {
	}
	,_removeFromCache: function(url,noMipmap) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				texturesCache.splice(index,1);
				return;
			}
		}
	}
	,_getFromCache: function(url,noMipmap,sampling) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				if(sampling == null || sampling == texturesCacheEntry.samplingMode) {
					texturesCacheEntry.references++;
					return texturesCacheEntry;
				}
			}
		}
		return null;
	}
	,delayLoad: function() {
	}
	,releaseInternalTexture: function() {
		if(this._texture == null) return;
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		this._texture.references--;
		if(this._texture.references == 0) {
			HxOverrides.remove(texturesCache,this._texture);
			this._scene._engine._releaseTexture(this._texture);
			this._texture = null;
		}
	}
	,clone: function() {
		return null;
	}
	,dispose: function() {
		var index = HxOverrides.indexOf(this._scene.textures,this,0);
		if(index >= 0) this._scene.textures.splice(index,1);
		if(this._texture == null) return;
		this.releaseInternalTexture();
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_materials_textures_BaseTexture
};
var com_babylonhx_materials_textures_Texture = $hx_exports.BABYLON.Texture = function(url,scene,noMipmap,invertY,samplingMode,onLoad,onError,buffer,deleteBuffer) {
	if(deleteBuffer == null) deleteBuffer = false;
	if(samplingMode == null) samplingMode = 3;
	if(invertY == null) invertY = true;
	if(noMipmap == null) noMipmap = false;
	this.wAng = 0;
	this.vAng = 0;
	this.uAng = 0;
	this.vScale = 1.0;
	this.uScale = 1.0;
	this.vOffset = 0;
	this.uOffset = 0;
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
	this.name = url;
	this.url = url;
	this._noMipmap = noMipmap;
	this._invertY = invertY;
	this._samplingMode = samplingMode;
	this._buffer = buffer;
	this._deleteBuffer = deleteBuffer;
	if(url == null || StringTools.trim(url) == "") return;
	this._texture = this._getFromCache(url,noMipmap,samplingMode);
	if(this._texture == null) {
		if(!scene.useDelayedTextureLoading) {
			if(url.indexOf(".") != -1) {
				this._texture = scene._engine.createTexture(url,noMipmap,invertY,scene,this._samplingMode,onLoad,onError,this._buffer);
				if(deleteBuffer) this._buffer = null;
			}
		} else this.delayLoadState = 4;
	}
};
$hxClasses["com.babylonhx.materials.textures.Texture"] = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_Texture.__name__ = ["com","babylonhx","materials","textures","Texture"];
com_babylonhx_materials_textures_Texture.CreateFromBase64String = function(data,name,scene,noMipmap,invertY,samplingMode,onLoad,onError) {
	if(samplingMode == null) samplingMode = 3;
	return new com_babylonhx_materials_textures_Texture("data:" + name,scene,noMipmap,invertY,samplingMode,onLoad,onError,data);
};
com_babylonhx_materials_textures_Texture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_Texture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	url: null
	,uOffset: null
	,vOffset: null
	,uScale: null
	,vScale: null
	,uAng: null
	,vAng: null
	,wAng: null
	,_noMipmap: null
	,_invertY: null
	,_rowGenerationMatrix: null
	,_cachedTextureMatrix: null
	,_projectionModeMatrix: null
	,_t0: null
	,_t1: null
	,_t2: null
	,_cachedUOffset: null
	,_cachedVOffset: null
	,_cachedUScale: null
	,_cachedVScale: null
	,_cachedUAng: null
	,_cachedVAng: null
	,_cachedWAng: null
	,_cachedCoordinatesMode: null
	,_samplingMode: null
	,_buffer: null
	,_deleteBuffer: null
	,delayLoad: function() {
		if(this.delayLoadState != 4) return;
		this.delayLoadState = 1;
		this._texture = this._getFromCache(this.url,this._noMipmap,this._samplingMode);
		if(this._texture == null) {
			this._texture = this.getScene().getEngine().createTexture(this.url,this._noMipmap,this._invertY,this.getScene(),this._samplingMode,null,null,this._buffer);
			if(this._deleteBuffer) this._buffer = null;
		}
	}
	,updateSamplingMode: function(samplingMode) {
		if(this._texture == null) return;
		this.getScene().getEngine().updateTextureSamplingMode(samplingMode,this._texture);
	}
	,_prepareRowForTextureGeneration: function(x,y,z,t) {
		x -= this.uOffset + 0.5;
		y -= this.vOffset + 0.5;
		z -= 0.5;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(x,y,z,this._rowGenerationMatrix,t);
		t.x *= this.uScale;
		t.y *= this.vScale;
		t.x += 0.5;
		t.y += 0.5;
		t.z += 0.5;
	}
	,getTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.uAng == this._cachedUAng && this.vAng == this._cachedVAng && this.wAng == this._cachedWAng) return this._cachedTextureMatrix;
		this._cachedUOffset = this.uOffset;
		this._cachedVOffset = this.vOffset;
		this._cachedUScale = this.uScale;
		this._cachedVScale = this.vScale;
		this._cachedUAng = this.uAng;
		this._cachedVAng = this.vAng;
		this._cachedWAng = this.wAng;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._rowGenerationMatrix = new com_babylonhx_math_Matrix();
			this._t0 = new com_babylonhx_math_Vector3(0,0,0);
			this._t1 = new com_babylonhx_math_Vector3(0,0,0);
			this._t2 = new com_babylonhx_math_Vector3(0,0,0);
		}
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.vAng,this.uAng,this.wAng,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._rowGenerationMatrix);
		this._prepareRowForTextureGeneration(0,0,0,this._t0);
		this._prepareRowForTextureGeneration(1.0,0,0,this._t1);
		this._prepareRowForTextureGeneration(0,1.0,0,this._t2);
		this._t1.subtractInPlace(this._t0);
		this._t2.subtractInPlace(this._t0);
		com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		this._cachedTextureMatrix.m[0] = this._t1.x;
		this._cachedTextureMatrix.m[1] = this._t1.y;
		this._cachedTextureMatrix.m[2] = this._t1.z;
		this._cachedTextureMatrix.m[4] = this._t2.x;
		this._cachedTextureMatrix.m[5] = this._t2.y;
		this._cachedTextureMatrix.m[6] = this._t2.z;
		this._cachedTextureMatrix.m[8] = this._t0.x;
		this._cachedTextureMatrix.m[9] = this._t0.y;
		this._cachedTextureMatrix.m[10] = this._t0.z;
		return this._cachedTextureMatrix;
	}
	,getReflectionTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.coordinatesMode == this._cachedCoordinatesMode) return this._cachedTextureMatrix;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._projectionModeMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		}
		this._cachedCoordinatesMode = this.coordinatesMode;
		var _g = this.coordinatesMode;
		switch(_g) {
		case 1:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
			this._cachedTextureMatrix.m[0] = -0.5 * this.uScale;
			this._cachedTextureMatrix.m[5] = -0.5 * this.vScale;
			this._cachedTextureMatrix.m[12] = 0.5 + this.uOffset;
			this._cachedTextureMatrix.m[13] = 0.5 + this.vOffset;
			break;
		case 2:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
			this._cachedTextureMatrix.m[0] = this.uScale;
			this._cachedTextureMatrix.m[5] = this.vScale;
			this._cachedTextureMatrix.m[12] = this.uOffset;
			this._cachedTextureMatrix.m[13] = this.vOffset;
			break;
		case 4:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._projectionModeMatrix);
			this._projectionModeMatrix.m[0] = 0.5;
			this._projectionModeMatrix.m[5] = -0.5;
			this._projectionModeMatrix.m[10] = 0.0;
			this._projectionModeMatrix.m[12] = 0.5;
			this._projectionModeMatrix.m[13] = 0.5;
			this._projectionModeMatrix.m[14] = 1.0;
			this._projectionModeMatrix.m[15] = 1.0;
			this.getScene().getProjectionMatrix().multiplyToRef(this._projectionModeMatrix,this._cachedTextureMatrix);
			break;
		default:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		}
		return this._cachedTextureMatrix;
	}
	,clone: function() {
		var newTexture = new com_babylonhx_materials_textures_Texture(this._texture.url,this.getScene(),this._noMipmap,this._invertY,this._samplingMode);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.wrapU = this.wrapU;
		newTexture.wrapV = this.wrapV;
		newTexture.coordinatesIndex = this.coordinatesIndex;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.uOffset = this.uOffset;
		newTexture.vOffset = this.vOffset;
		newTexture.uScale = this.uScale;
		newTexture.vScale = this.vScale;
		newTexture.uAng = this.uAng;
		newTexture.vAng = this.vAng;
		newTexture.wAng = this.wAng;
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_Texture
});
var com_babylonhx_materials_textures_CubeTexture = $hx_exports.BABYLON.CubeTexture = function(rootUrl,scene,extensions,noMipmap) {
	com_babylonhx_materials_textures_Texture.call(this,rootUrl,scene,noMipmap);
	this.coordinatesMode = 3;
	this.name = rootUrl;
	this.url = rootUrl;
	this._noMipmap = noMipmap;
	this.hasAlpha = false;
	if(extensions == null) extensions = ["_px.jpg","_py.jpg","_pz.jpg","_nx.jpg","_ny.jpg","_nz.jpg"];
	this._extensions = extensions;
	if(this._texture == null) {
		if(!scene.useDelayedTextureLoading) this._texture = scene._engine.createCubeTexture(rootUrl,scene,extensions,noMipmap); else this.delayLoadState = 4;
	}
	this.isCube = true;
	this._textureMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
};
$hxClasses["com.babylonhx.materials.textures.CubeTexture"] = com_babylonhx_materials_textures_CubeTexture;
com_babylonhx_materials_textures_CubeTexture.__name__ = ["com","babylonhx","materials","textures","CubeTexture"];
com_babylonhx_materials_textures_CubeTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_CubeTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	_extensions: null
	,_textureMatrix: null
	,clone: function() {
		var newTexture = new com_babylonhx_materials_textures_CubeTexture(this.url,this.getScene(),this._extensions,this._noMipmap);
		newTexture.level = this.level;
		newTexture.wrapU = this.wrapU;
		newTexture.wrapV = this.wrapV;
		newTexture.coordinatesIndex = this.coordinatesIndex;
		newTexture.coordinatesMode = this.coordinatesMode;
		return newTexture;
	}
	,delayLoad: function() {
		if(this.delayLoadState != 4) return;
		this.delayLoadState = 1;
		this._texture = this._getFromCache(this.url,this._noMipmap);
		if(this._texture == null) this._texture = this.getScene().getEngine().createCubeTexture(this.url,this.getScene(),this._extensions);
	}
	,getReflectionTextureMatrix: function() {
		return this._textureMatrix;
	}
	,__class__: com_babylonhx_materials_textures_CubeTexture
});
var com_babylonhx_math_Matrix = $hx_exports.BABYLON.Matrix = function() {
	var len = null;
	var this1;
	this1 = new Float32Array(16);
	this.m = this1;
};
$hxClasses["com.babylonhx.math.Matrix"] = com_babylonhx_math_Matrix;
com_babylonhx_math_Matrix.__name__ = ["com","babylonhx","math","Matrix"];
com_babylonhx_math_Matrix.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.FromArrayToRef(array,offset,result);
	return result;
};
com_babylonhx_math_Matrix.FromArrayToRef = function(array,offset,result) {
	var _g = 0;
	while(_g < 16) {
		var index = _g++;
		result.m[index] = array[index + offset];
	}
};
com_babylonhx_math_Matrix.FromValuesToRef = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44,result) {
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
};
com_babylonhx_math_Matrix.FromValues = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
	return result;
};
com_babylonhx_math_Matrix.Compose = function(scale,rotation,translation) {
	var result = com_babylonhx_math_Matrix.FromValues(scale.x,0,0,0,0,scale.y,0,0,0,0,scale.z,0,0,0,0,1);
	var rotationMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	rotation.toRotationMatrix(rotationMatrix);
	result = result.multiply(rotationMatrix);
	result.m[12] = translation.x;
	result.m[13] = translation.y;
	result.m[14] = translation.z;
	return result;
};
com_babylonhx_math_Matrix.Identity = function() {
	return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
};
com_babylonhx_math_Matrix.IdentityToRef = function(result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,result);
};
com_babylonhx_math_Matrix.Zero = function() {
	return com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
};
com_babylonhx_math_Matrix.RotationX = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationXToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.Invert = function(source) {
	var result = new com_babylonhx_math_Matrix();
	source.invertToRef(result);
	return result;
};
com_babylonhx_math_Matrix.RotationXToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[0] = 1.0;
	result.m[15] = 1.0;
	result.m[5] = c;
	result.m[10] = c;
	result.m[9] = -s;
	result.m[6] = s;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationY = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationYToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationYToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[5] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[2] = -s;
	result.m[8] = s;
	result.m[10] = c;
	result.m[1] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationZ = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationZToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationZToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[10] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[1] = s;
	result.m[4] = -s;
	result.m[5] = c;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationAxis = function(axis,angle) {
	var s = Math.sin(-angle);
	var c = Math.cos(-angle);
	var c1 = 1 - c;
	axis.normalize();
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = axis.x * axis.x * c1 + c;
	result.m[1] = axis.x * axis.y * c1 - axis.z * s;
	result.m[2] = axis.x * axis.z * c1 + axis.y * s;
	result.m[3] = 0.0;
	result.m[4] = axis.y * axis.x * c1 + axis.z * s;
	result.m[5] = axis.y * axis.y * c1 + c;
	result.m[6] = axis.y * axis.z * c1 - axis.x * s;
	result.m[7] = 0.0;
	result.m[8] = axis.z * axis.x * c1 - axis.y * s;
	result.m[9] = axis.z * axis.y * c1 + axis.x * s;
	result.m[10] = axis.z * axis.z * c1 + c;
	result.m[11] = 0.0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
};
com_babylonhx_math_Matrix.Scaling = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.ScalingToRef = function(x,y,z,result) {
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.Translation = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	com_babylonhx_math_Matrix.TranslationToRef(x,y,z,result);
	return result;
};
com_babylonhx_math_Matrix.TranslationToRef = function(x,y,z,result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,x,y,z,1.0,result);
};
com_babylonhx_math_Matrix.LookAtLH = function(eye,target,up) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.LookAtLHToRef(eye,target,up,result);
	return result;
};
com_babylonhx_math_Matrix.LookAtLHToRef = function(eye,target,up,result) {
	target.subtractToRef(eye,com_babylonhx_math_Matrix._zAxis);
	com_babylonhx_math_Matrix._zAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(up,com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis);
	com_babylonhx_math_Matrix._xAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis,com_babylonhx_math_Matrix._yAxis);
	com_babylonhx_math_Matrix._yAxis.normalize();
	var ex = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._xAxis,eye);
	var ey = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._yAxis,eye);
	var ez = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._zAxis,eye);
	com_babylonhx_math_Matrix.FromValuesToRef(com_babylonhx_math_Matrix._xAxis.x,com_babylonhx_math_Matrix._yAxis.x,com_babylonhx_math_Matrix._zAxis.x,0,com_babylonhx_math_Matrix._xAxis.y,com_babylonhx_math_Matrix._yAxis.y,com_babylonhx_math_Matrix._zAxis.y,0,com_babylonhx_math_Matrix._xAxis.z,com_babylonhx_math_Matrix._yAxis.z,com_babylonhx_math_Matrix._zAxis.z,0,ex,ey,ez,1,result);
	return;
};
com_babylonhx_math_Matrix.OrthoLH = function(width,height,znear,zfar) {
	var hw = 2.0 / width;
	var hh = 2.0 / height;
	var id = 1.0 / (zfar - znear);
	var nid = znear / (znear - zfar);
	return com_babylonhx_math_Matrix.FromValues(hw,0,0,0,0,hh,0,0,0,0,id,0,0,0,nid,1);
};
com_babylonhx_math_Matrix.OrthoOffCenterLH = function(left,right,bottom,top,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(left,right,bottom,top,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.OrthoOffCenterLHToRef = function(left,right,bottom,top,znear,zfar,result) {
	result.m[0] = 2.0 / (right - left);
	var val;
	var val1 = result.m[3] = 0;
	val = result.m[2] = val1;
	result.m[1] = val;
	result.m[5] = 2.0 / (top - bottom);
	var val2;
	var val3 = result.m[7] = 0;
	val2 = result.m[6] = val3;
	result.m[4] = val2;
	result.m[10] = -1. / (znear - zfar);
	var val4;
	var val5 = result.m[11] = 0;
	val4 = result.m[9] = val5;
	result.m[8] = val4;
	result.m[12] = (left + right) / (left - right);
	result.m[13] = (top + bottom) / (bottom - top);
	result.m[14] = znear / (znear - zfar);
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.PerspectiveLH = function(width,height,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	matrix.m[0] = 2.0 * znear / width;
	var val;
	var val1 = matrix.m[3] = 0.0;
	val = matrix.m[2] = val1;
	matrix.m[1] = val;
	matrix.m[5] = 2.0 * znear / height;
	var val2;
	var val3 = matrix.m[7] = 0.0;
	val2 = matrix.m[6] = val3;
	matrix.m[4] = val2;
	matrix.m[10] = -zfar / (znear - zfar);
	var val4 = matrix.m[9] = 0.0;
	matrix.m[8] = val4;
	matrix.m[11] = 1.0;
	var val5;
	var val6 = matrix.m[15] = 0.0;
	val5 = matrix.m[13] = val6;
	matrix.m[12] = val5;
	matrix.m[14] = znear * zfar / (znear - zfar);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLH = function(fov,aspect,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.PerspectiveFovLHToRef(fov,aspect,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLHToRef = function(fov,aspect,znear,zfar,result,fovMode) {
	var tan = 1.0 / Math.tan(fov * 0.5);
	var v_fixed = fovMode == null || fovMode == 0;
	var h_fixed = fovMode == 1;
	if(v_fixed) result.m[0] = tan / aspect; else if(h_fixed) result.m[0] = tan;
	var val;
	var val1 = result.m[3] = 0.0;
	val = result.m[2] = val1;
	result.m[1] = val;
	if(v_fixed) result.m[5] = tan; else if(h_fixed) result.m[5] = tan * aspect;
	var val2;
	var val3 = result.m[7] = 0.0;
	val2 = result.m[6] = val3;
	result.m[4] = val2;
	var val4 = result.m[9] = 0.0;
	result.m[8] = val4;
	result.m[10] = -zfar / (znear - zfar);
	result.m[11] = 1.0;
	var val5;
	var val6 = result.m[15] = 0.0;
	val5 = result.m[13] = val6;
	result.m[12] = val5;
	result.m[14] = znear * zfar / (znear - zfar);
};
com_babylonhx_math_Matrix.GetFinalMatrix = function(viewport,world,view,projection,zmin,zmax) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,zmax - zmin,0,cx + cw / 2.0,ch / 2.0 + cy,zmin,1);
	return world.multiply(view).multiply(projection).multiply(viewportMatrix);
};
com_babylonhx_math_Matrix.Transpose = function(matrix) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = matrix.m[0];
	result.m[1] = matrix.m[4];
	result.m[2] = matrix.m[8];
	result.m[3] = matrix.m[12];
	result.m[4] = matrix.m[1];
	result.m[5] = matrix.m[5];
	result.m[6] = matrix.m[9];
	result.m[7] = matrix.m[13];
	result.m[8] = matrix.m[2];
	result.m[9] = matrix.m[6];
	result.m[10] = matrix.m[10];
	result.m[11] = matrix.m[14];
	result.m[12] = matrix.m[3];
	result.m[13] = matrix.m[7];
	result.m[14] = matrix.m[11];
	result.m[15] = matrix.m[15];
	return result;
};
com_babylonhx_math_Matrix.Reflection = function(plane) {
	var matrix = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.ReflectionToRef(plane,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.ReflectionToRef = function(plane,result) {
	plane.normalize();
	var x = plane.normal.x;
	var y = plane.normal.y;
	var z = plane.normal.z;
	var temp = -2 * x;
	var temp2 = -2 * y;
	var temp3 = -2 * z;
	result.m[0] = temp * x + 1;
	result.m[1] = temp2 * x;
	result.m[2] = temp3 * x;
	result.m[3] = 0.0;
	result.m[4] = temp * y;
	result.m[5] = temp2 * y + 1;
	result.m[6] = temp3 * y;
	result.m[7] = 0.0;
	result.m[8] = temp * z;
	result.m[9] = temp2 * z;
	result.m[10] = temp3 * z + 1;
	result.m[11] = 0.0;
	result.m[12] = temp * plane.d;
	result.m[13] = temp2 * plane.d;
	result.m[14] = temp3 * plane.d;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.prototype = {
	m: null
	,toString: function() {
		return snow_api_buffers__$Float32Array_Float32Array_$Impl_$.toString(this.m) + "";
	}
	,isIdentity: function() {
		if(this.m[0] != 1.0 || this.m[5] != 1.0 || this.m[10] != 1.0 || this.m[15] != 1.0) return false;
		if(this.m[1] != 0.0 || this.m[2] != 0.0 || this.m[3] != 0.0 || this.m[4] != 0.0 || this.m[6] != 0.0 || this.m[7] != 0.0 || this.m[8] != 0.0 || this.m[9] != 0.0 || this.m[11] != 0.0 || this.m[12] != 0.0 || this.m[13] != 0.0 || this.m[14] != 0.0) return false;
		return true;
	}
	,determinant: function() {
		var temp1 = this.m[10] * this.m[15] - this.m[11] * this.m[14];
		var temp2 = this.m[9] * this.m[15] - this.m[11] * this.m[13];
		var temp3 = this.m[9] * this.m[14] - this.m[10] * this.m[13];
		var temp4 = this.m[8] * this.m[15] - this.m[11] * this.m[12];
		var temp5 = this.m[8] * this.m[14] - this.m[10] * this.m[12];
		var temp6 = this.m[8] * this.m[13] - this.m[9] * this.m[12];
		return this.m[0] * (this.m[5] * temp1 - this.m[6] * temp2 + this.m[7] * temp3) - this.m[1] * (this.m[4] * temp1 - this.m[6] * temp4 + this.m[7] * temp5) + this.m[2] * (this.m[4] * temp2 - this.m[5] * temp4 + this.m[7] * temp6) - this.m[3] * (this.m[4] * temp3 - this.m[5] * temp5 + this.m[6] * temp6);
	}
	,toArray: function() {
		return this.m;
	}
	,asArray: function() {
		return this.toArray();
	}
	,invert: function() {
		this.invertToRef(this);
		return this;
	}
	,invertToRef: function(other) {
		var l1 = this.m[0];
		var l2 = this.m[1];
		var l3 = this.m[2];
		var l4 = this.m[3];
		var l5 = this.m[4];
		var l6 = this.m[5];
		var l7 = this.m[6];
		var l8 = this.m[7];
		var l9 = this.m[8];
		var l10 = this.m[9];
		var l11 = this.m[10];
		var l12 = this.m[11];
		var l13 = this.m[12];
		var l14 = this.m[13];
		var l15 = this.m[14];
		var l16 = this.m[15];
		var l17 = l11 * l16 - l12 * l15;
		var l18 = l10 * l16 - l12 * l14;
		var l19 = l10 * l15 - l11 * l14;
		var l20 = l9 * l16 - l12 * l13;
		var l21 = l9 * l15 - l11 * l13;
		var l22 = l9 * l14 - l10 * l13;
		var l23 = l6 * l17 - l7 * l18 + l8 * l19;
		var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
		var l25 = l5 * l18 - l6 * l20 + l8 * l22;
		var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
		var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
		var l28 = l7 * l16 - l8 * l15;
		var l29 = l6 * l16 - l8 * l14;
		var l30 = l6 * l15 - l7 * l14;
		var l31 = l5 * l16 - l8 * l13;
		var l32 = l5 * l15 - l7 * l13;
		var l33 = l5 * l14 - l6 * l13;
		var l34 = l7 * l12 - l8 * l11;
		var l35 = l6 * l12 - l8 * l10;
		var l36 = l6 * l11 - l7 * l10;
		var l37 = l5 * l12 - l8 * l9;
		var l38 = l5 * l11 - l7 * l9;
		var l39 = l5 * l10 - l6 * l9;
		other.m[0] = l23 * l27;
		other.m[4] = l24 * l27;
		other.m[8] = l25 * l27;
		other.m[12] = l26 * l27;
		other.m[1] = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
		other.m[5] = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
		other.m[9] = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
		other.m[13] = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
		other.m[2] = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
		other.m[6] = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
		other.m[10] = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
		other.m[14] = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
		other.m[3] = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
		other.m[7] = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
		other.m[11] = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
		other.m[15] = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
	}
	,setTranslation: function(vector3) {
		this.m[12] = vector3.x;
		this.m[13] = vector3.y;
		this.m[14] = vector3.z;
	}
	,multiply: function(other) {
		var result = new com_babylonhx_math_Matrix();
		this.multiplyToRef(other,result);
		return result;
	}
	,copyFrom: function(other) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			this.m[index] = other.m[index];
		}
	}
	,copyToArray: function(array,offset) {
		if(offset == null) offset = 0;
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			array[offset + index] = this.m[index];
		}
	}
	,multiplyToRef: function(other,result) {
		this.multiplyToArray(other,result.m,0);
	}
	,multiplyToArray: function(other,result,offset) {
		result[offset] = this.m[0] * other.m[0] + this.m[1] * other.m[4] + this.m[2] * other.m[8] + this.m[3] * other.m[12];
		result[offset + 1] = this.m[0] * other.m[1] + this.m[1] * other.m[5] + this.m[2] * other.m[9] + this.m[3] * other.m[13];
		result[offset + 2] = this.m[0] * other.m[2] + this.m[1] * other.m[6] + this.m[2] * other.m[10] + this.m[3] * other.m[14];
		result[offset + 3] = this.m[0] * other.m[3] + this.m[1] * other.m[7] + this.m[2] * other.m[11] + this.m[3] * other.m[15];
		result[offset + 4] = this.m[4] * other.m[0] + this.m[5] * other.m[4] + this.m[6] * other.m[8] + this.m[7] * other.m[12];
		result[offset + 5] = this.m[4] * other.m[1] + this.m[5] * other.m[5] + this.m[6] * other.m[9] + this.m[7] * other.m[13];
		result[offset + 6] = this.m[4] * other.m[2] + this.m[5] * other.m[6] + this.m[6] * other.m[10] + this.m[7] * other.m[14];
		result[offset + 7] = this.m[4] * other.m[3] + this.m[5] * other.m[7] + this.m[6] * other.m[11] + this.m[7] * other.m[15];
		result[offset + 8] = this.m[8] * other.m[0] + this.m[9] * other.m[4] + this.m[10] * other.m[8] + this.m[11] * other.m[12];
		result[offset + 9] = this.m[8] * other.m[1] + this.m[9] * other.m[5] + this.m[10] * other.m[9] + this.m[11] * other.m[13];
		result[offset + 10] = this.m[8] * other.m[2] + this.m[9] * other.m[6] + this.m[10] * other.m[10] + this.m[11] * other.m[14];
		result[offset + 11] = this.m[8] * other.m[3] + this.m[9] * other.m[7] + this.m[10] * other.m[11] + this.m[11] * other.m[15];
		result[offset + 12] = this.m[12] * other.m[0] + this.m[13] * other.m[4] + this.m[14] * other.m[8] + this.m[15] * other.m[12];
		result[offset + 13] = this.m[12] * other.m[1] + this.m[13] * other.m[5] + this.m[14] * other.m[9] + this.m[15] * other.m[13];
		result[offset + 14] = this.m[12] * other.m[2] + this.m[13] * other.m[6] + this.m[14] * other.m[10] + this.m[15] * other.m[14];
		result[offset + 15] = this.m[12] * other.m[3] + this.m[13] * other.m[7] + this.m[14] * other.m[11] + this.m[15] * other.m[15];
	}
	,equals: function(value) {
		return value != null && (this.m[0] == value.m[0] && this.m[1] == value.m[1] && this.m[2] == value.m[2] && this.m[3] == value.m[3] && this.m[4] == value.m[4] && this.m[5] == value.m[5] && this.m[6] == value.m[6] && this.m[7] == value.m[7] && this.m[8] == value.m[8] && this.m[9] == value.m[9] && this.m[10] == value.m[10] && this.m[11] == value.m[11] && this.m[12] == value.m[12] && this.m[13] == value.m[13] && this.m[14] == value.m[14] && this.m[15] == value.m[15]);
	}
	,clone: function() {
		return com_babylonhx_math_Matrix.FromValues(this.m[0],this.m[1],this.m[2],this.m[3],this.m[4],this.m[5],this.m[6],this.m[7],this.m[8],this.m[9],this.m[10],this.m[11],this.m[12],this.m[13],this.m[14],this.m[15]);
	}
	,decompose: function(scale,rotation,translation) {
		translation.x = this.m[12];
		translation.y = this.m[13];
		translation.z = this.m[14];
		var xs;
		if(com_babylonhx_tools_Tools.Sign(this.m[0] * this.m[1] * this.m[2] * this.m[3]) < 0) xs = -1; else xs = 1;
		var ys;
		if(com_babylonhx_tools_Tools.Sign(this.m[4] * this.m[5] * this.m[6] * this.m[7]) < 0) ys = -1; else ys = 1;
		var zs;
		if(com_babylonhx_tools_Tools.Sign(this.m[8] * this.m[9] * this.m[10] * this.m[11]) < 0) zs = -1; else zs = 1;
		scale.x = xs * Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1] + this.m[2] * this.m[2]);
		scale.y = ys * Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5] + this.m[6] * this.m[6]);
		scale.z = zs * Math.sqrt(this.m[8] * this.m[8] + this.m[9] * this.m[9] + this.m[10] * this.m[10]);
		if(scale.x == 0 || scale.y == 0 || scale.z == 0) {
			rotation.x = 0;
			rotation.y = 0;
			rotation.z = 0;
			rotation.w = 1;
			return false;
		}
		var rotationMatrix = com_babylonhx_math_Matrix.FromValues(this.m[0] / scale.x,this.m[1] / scale.x,this.m[2] / scale.x,0,this.m[4] / scale.y,this.m[5] / scale.y,this.m[6] / scale.y,0,this.m[8] / scale.z,this.m[9] / scale.z,this.m[10] / scale.z,0,0,0,0,1);
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(rotationMatrix,rotation);
		rotation;
		return true;
	}
	,__class__: com_babylonhx_math_Matrix
};
var com_babylonhx_materials_textures_RenderTargetTexture = $hx_exports.BABYLON.RenderTargetTexture = function(name,size,scene,generateMipMaps,doNotChangeAspectRatio,type) {
	if(type == null) type = 0;
	if(doNotChangeAspectRatio == null) doNotChangeAspectRatio = true;
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	this.renderSprites = false;
	this.renderParticles = true;
	this.renderList = [];
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	this.coordinatesMode = 4;
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this._doNotChangeAspectRatio = doNotChangeAspectRatio;
	this._texture = scene._engine.createRenderTargetTexture(size,{ generateMipMaps : generateMipMaps, type : type});
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(scene);
};
$hxClasses["com.babylonhx.materials.textures.RenderTargetTexture"] = com_babylonhx_materials_textures_RenderTargetTexture;
com_babylonhx_materials_textures_RenderTargetTexture.__name__ = ["com","babylonhx","materials","textures","RenderTargetTexture"];
com_babylonhx_materials_textures_RenderTargetTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_RenderTargetTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	renderList: null
	,renderParticles: null
	,renderSprites: null
	,onBeforeRender: null
	,onAfterRender: null
	,onAfterUnbind: null
	,onClear: null
	,activeCamera: null
	,customRenderFunction: null
	,_size: null
	,_generateMipMaps: null
	,_renderingManager: null
	,_waitingRenderList: null
	,_doNotChangeAspectRatio: null
	,_currentRefreshId: null
	,_refreshRate: null
	,resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this.resetRefreshCounter();
		return value;
	}
	,_shouldRender: function() {
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,isReady: function() {
		if(!this.getScene().renderTargetsEnabled) return false;
		return com_babylonhx_materials_textures_Texture.prototype.isReady.call(this);
	}
	,getRenderSize: function() {
		return this._size;
	}
	,get_canRescale: function() {
		return true;
	}
	,scale: function(ratio) {
		var newSize = this._size * ratio;
		this.resize(newSize,this._generateMipMaps);
	}
	,resize: function(size,generateMipMaps) {
		this.releaseInternalTexture();
		this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(this._waitingRenderList != null) {
			this.renderList = [];
			var _g1 = 0;
			var _g = this._waitingRenderList.length;
			while(_g1 < _g) {
				var index = _g1++;
				var id = this._waitingRenderList[index];
				this.renderList.push(scene.getMeshByID(id));
			}
			this._waitingRenderList = null;
		}
		if(this.renderList != null && this.renderList.length == 0) return;
		if(!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) engine.bindFramebuffer(this._texture);
		this._renderingManager.reset();
		var currentRenderList;
		if(this.renderList != null) currentRenderList = this.renderList; else currentRenderList = scene._activeMeshes.data;
		var _g11 = 0;
		var _g2 = currentRenderList.length;
		while(_g11 < _g2) {
			var meshIndex = _g11++;
			var mesh = currentRenderList[meshIndex];
			if(mesh != null) {
				if(!mesh.isReady()) {
					this.resetRefreshCounter();
					continue;
				}
				if(mesh.isEnabled() && mesh.isVisible && mesh.subMeshes != null && (mesh.layerMask & scene.activeCamera.layerMask) != 0) {
					mesh._activate(scene._renderId);
					var _g3 = 0;
					var _g21 = mesh.subMeshes.length;
					while(_g3 < _g21) {
						var subIndex = _g3++;
						var subMesh = mesh.subMeshes[subIndex];
						scene._activeIndices += subMesh.indexCount;
						this._renderingManager.dispatch(subMesh);
					}
				}
			}
		}
		if(this.onBeforeRender != null) this.onBeforeRender();
		if(this.onClear != null) this.onClear(engine); else engine.clear(scene.clearColor,true,true);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		this._renderingManager.render(this.customRenderFunction,currentRenderList,this.renderParticles,this.renderSprites);
		if(useCameraPostProcess) scene.postProcessManager._finalizeFrame(false,this._texture);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		if(this.onAfterRender != null) this.onAfterRender();
		engine.unBindFramebuffer(this._texture);
		if(this.onAfterUnbind != null) this.onAfterUnbind();
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_RenderTargetTexture(this.name,textureSize.width,this.getScene(),this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.renderList = this.renderList.slice(0);
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_RenderTargetTexture
	,__properties__: {get_canRescale:"get_canRescale",set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_materials_textures_MirrorTexture = $hx_exports.BABYLON.MirrorTexture = function(name,size,scene,generateMipMaps) {
	this._mirrorMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.mirrorPlane = new com_babylonhx_math_Plane(0,1,0,1);
	var _g = this;
	com_babylonhx_materials_textures_RenderTargetTexture.call(this,name,size,scene,generateMipMaps,true);
	this.onBeforeRender = function() {
		com_babylonhx_math_Matrix.ReflectionToRef(_g.mirrorPlane,_g._mirrorMatrix);
		_g._savedViewMatrix = scene._viewMatrix;
		_g._mirrorMatrix.multiplyToRef(_g._savedViewMatrix,_g._transformMatrix);
		scene._viewMatrix = _g._transformMatrix;
		scene._projectionMatrix = scene._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
		scene.clipPlane = _g.mirrorPlane;
		scene._engine.cullBackFaces = false;
	};
	this.onAfterRender = function() {
		scene._viewMatrix = _g._savedViewMatrix;
		scene._projectionMatrix = scene._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
		scene._engine.cullBackFaces = true;
		scene.clipPlane = null;
	};
};
$hxClasses["com.babylonhx.materials.textures.MirrorTexture"] = com_babylonhx_materials_textures_MirrorTexture;
com_babylonhx_materials_textures_MirrorTexture.__name__ = ["com","babylonhx","materials","textures","MirrorTexture"];
com_babylonhx_materials_textures_MirrorTexture.__super__ = com_babylonhx_materials_textures_RenderTargetTexture;
com_babylonhx_materials_textures_MirrorTexture.prototype = $extend(com_babylonhx_materials_textures_RenderTargetTexture.prototype,{
	mirrorPlane: null
	,_transformMatrix: null
	,_mirrorMatrix: null
	,_savedViewMatrix: null
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_MirrorTexture(this.name,textureSize.width,this.getScene(),this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.mirrorPlane = this.mirrorPlane.clone();
		newTexture.renderList = this.renderList.slice(0);
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_MirrorTexture
});
var com_babylonhx_rendering_RenderingManager = $hx_exports.BABYLON.RenderingManager = function(scene) {
	this._renderingGroups = [];
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.RenderingManager"] = com_babylonhx_rendering_RenderingManager;
com_babylonhx_rendering_RenderingManager.__name__ = ["com","babylonhx","rendering","RenderingManager"];
com_babylonhx_rendering_RenderingManager.prototype = {
	_scene: null
	,_renderingGroups: null
	,_depthBufferAlreadyCleaned: null
	,_renderParticles: function(index,activeMeshes) {
		if(this._scene._activeParticleSystems.length == 0) return;
		var beforeParticlesDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var _g1 = 0;
		var _g = this._scene._activeParticleSystems.length;
		while(_g1 < _g) {
			var particleIndex = _g1++;
			var particleSystem = this._scene._activeParticleSystems.data[particleIndex];
			if(particleSystem.renderingGroupId != index) continue;
			this._clearDepthBuffer();
			if(particleSystem.emitter.position == null || activeMeshes == null || (function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(activeMeshes,x,0);
				return $r;
			}(this)) != -1) this._scene._activeParticles += particleSystem.render();
		}
		this._scene._particlesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeParticlesDate;
	}
	,_renderSprites: function(index) {
		if(!this._scene.spritesEnabled || this._scene.spriteManagers.length == 0) return;
		var beforeSpritessDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var _g1 = 0;
		var _g = this._scene.spriteManagers.length;
		while(_g1 < _g) {
			var id = _g1++;
			var spriteManager = this._scene.spriteManagers[id];
			if(spriteManager.renderingGroupId == index) {
				this._clearDepthBuffer();
				spriteManager.render();
			}
		}
		this._scene._spritesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeSpritessDate;
	}
	,_clearDepthBuffer: function() {
		if(this._depthBufferAlreadyCleaned) return;
		this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
		this._depthBufferAlreadyCleaned = true;
	}
	,render: function(customRenderFunction,activeMeshes,renderParticles,renderSprites) {
		var index = 0;
		while(index < com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS) {
			this._depthBufferAlreadyCleaned = false;
			var renderingGroup = this._renderingGroups[index];
			var needToStepBack = false;
			if(renderingGroup != null) {
				this._clearDepthBuffer();
				if(!renderingGroup.render(customRenderFunction)) {
					this._renderingGroups.splice(index,1);
					needToStepBack = true;
				}
			}
			if(renderSprites) this._renderSprites(index);
			if(renderParticles) this._renderParticles(index,activeMeshes);
			if(needToStepBack) index--;
			++index;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._renderingGroups;
		while(_g < _g1.length) {
			var rg = _g1[_g];
			++_g;
			if(rg != null) rg.prepare();
		}
	}
	,dispatch: function(subMesh) {
		var mesh = subMesh._mesh;
		var renderingGroupId = mesh.renderingGroupId;
		if(this._renderingGroups[renderingGroupId] == null) this._renderingGroups[renderingGroupId] = new com_babylonhx_rendering_RenderingGroup(renderingGroupId,this._scene);
		this._renderingGroups[renderingGroupId].dispatch(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingManager
};
var com_babylonhx_math_Plane = $hx_exports.BABYLON.Plane = function(a,b,c,d) {
	this.normal = new com_babylonhx_math_Vector3(a,b,c);
	this.d = d;
};
$hxClasses["com.babylonhx.math.Plane"] = com_babylonhx_math_Plane;
com_babylonhx_math_Plane.__name__ = ["com","babylonhx","math","Plane"];
com_babylonhx_math_Plane.FromArray = function(array) {
	return new com_babylonhx_math_Plane(array[0],array[1],array[2],array[3]);
};
com_babylonhx_math_Plane.FromPoints = function(point1,point2,point3) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	result.copyFromPoints(point1,point2,point3);
	return result;
};
com_babylonhx_math_Plane.FromPositionAndNormal = function(origin,normal) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	normal.normalize();
	result.normal = normal;
	result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return result;
};
com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal = function(origin,normal,point) {
	var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return point.x * normal.x + point.y * normal.y + point.z * normal.z + d;
};
com_babylonhx_math_Plane.prototype = {
	normal: null
	,d: null
	,asArray: function() {
		return [this.normal.x,this.normal.y,this.normal.z,this.d];
	}
	,clone: function() {
		return new com_babylonhx_math_Plane(this.normal.x,this.normal.y,this.normal.z,this.d);
	}
	,normalize: function() {
		var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);
		var magnitude = 0.0;
		if(norm != 0) magnitude = 1.0 / norm;
		this.normal.x *= magnitude;
		this.normal.y *= magnitude;
		this.normal.z *= magnitude;
		this.d *= magnitude;
	}
	,transform: function(transformation) {
		com_babylonhx_math_Plane.transposedMatrix = com_babylonhx_math_Matrix.Transpose(transformation);
		var x = this.normal.x;
		var y = this.normal.y;
		var z = this.normal.z;
		var d = this.d;
		var normalX = x * com_babylonhx_math_Plane.transposedMatrix.m[0] + y * com_babylonhx_math_Plane.transposedMatrix.m[1] + z * com_babylonhx_math_Plane.transposedMatrix.m[2] + d * com_babylonhx_math_Plane.transposedMatrix.m[3];
		var normalY = x * com_babylonhx_math_Plane.transposedMatrix.m[4] + y * com_babylonhx_math_Plane.transposedMatrix.m[5] + z * com_babylonhx_math_Plane.transposedMatrix.m[6] + d * com_babylonhx_math_Plane.transposedMatrix.m[7];
		var normalZ = x * com_babylonhx_math_Plane.transposedMatrix.m[8] + y * com_babylonhx_math_Plane.transposedMatrix.m[9] + z * com_babylonhx_math_Plane.transposedMatrix.m[10] + d * com_babylonhx_math_Plane.transposedMatrix.m[11];
		var finalD = x * com_babylonhx_math_Plane.transposedMatrix.m[12] + y * com_babylonhx_math_Plane.transposedMatrix.m[13] + z * com_babylonhx_math_Plane.transposedMatrix.m[14] + d * com_babylonhx_math_Plane.transposedMatrix.m[15];
		return new com_babylonhx_math_Plane(normalX,normalY,normalZ,finalD);
	}
	,dotCoordinate: function(point) {
		return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;
	}
	,copyFromPoints: function(point1,point2,point3) {
		var x1 = point2.x - point1.x;
		var y1 = point2.y - point1.y;
		var z1 = point2.z - point1.z;
		var x2 = point3.x - point1.x;
		var y2 = point3.y - point1.y;
		var z2 = point3.z - point1.z;
		var yz = y1 * z2 - z1 * y2;
		var xz = z1 * x2 - x1 * z2;
		var xy = x1 * y2 - y1 * x2;
		var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
		var invPyth;
		if(pyth != 0) invPyth = 1.0 / pyth; else invPyth = 0;
		this.normal.x = yz * invPyth;
		this.normal.y = xz * invPyth;
		this.normal.z = xy * invPyth;
		this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);
	}
	,isFrontFacingTo: function(direction,epsilon) {
		var dot = com_babylonhx_math_Vector3.Dot(this.normal,direction);
		return dot <= epsilon;
	}
	,signedDistanceTo: function(point) {
		return com_babylonhx_math_Vector3.Dot(point,this.normal) + this.d;
	}
	,__class__: com_babylonhx_math_Plane
};
var com_babylonhx_materials_FresnelParameters = $hx_exports.BABYLON.FresnelParameters = function() {
	this.power = 1;
	this.bias = 0;
	this.rightColor = new com_babylonhx_math_Color3(0,0,0);
	this.leftColor = new com_babylonhx_math_Color3(1,1,1);
	this.isEnabled = true;
};
$hxClasses["com.babylonhx.materials.FresnelParameters"] = com_babylonhx_materials_FresnelParameters;
com_babylonhx_materials_FresnelParameters.__name__ = ["com","babylonhx","materials","FresnelParameters"];
com_babylonhx_materials_FresnelParameters.prototype = {
	isEnabled: null
	,leftColor: null
	,rightColor: null
	,bias: null
	,power: null
	,__class__: com_babylonhx_materials_FresnelParameters
};
var com_babylonhx_materials_MultiMaterial = $hx_exports.BABYLON.MultiMaterial = function(name,scene) {
	this.subMaterials = [];
	com_babylonhx_materials_Material.call(this,name,scene,true);
	scene.multiMaterials.push(this);
};
$hxClasses["com.babylonhx.materials.MultiMaterial"] = com_babylonhx_materials_MultiMaterial;
com_babylonhx_materials_MultiMaterial.__name__ = ["com","babylonhx","materials","MultiMaterial"];
com_babylonhx_materials_MultiMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_MultiMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	subMaterials: null
	,getSubMaterial: function(index) {
		if(index < 0 || index >= this.subMaterials.length) return this.getScene().defaultMaterial;
		return this.subMaterials[index];
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			if(subMaterial != null) {
				if(!this.subMaterials[index].isReady(mesh)) return false;
			}
		}
		return true;
	}
	,clone: function(name) {
		var newMultiMaterial = new com_babylonhx_materials_MultiMaterial(name,this.getScene());
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			newMultiMaterial.subMaterials.push(subMaterial);
		}
		return newMultiMaterial;
	}
	,__class__: com_babylonhx_materials_MultiMaterial
});
var com_babylonhx_mesh_AbstractMesh = $hx_exports.BABYLON.AbstractMesh = function(name,scene) {
	this._isWorldMatrixFrozen = false;
	this._onAfterWorldMatrixUpdate = [];
	this._intersectionsInProgress = [];
	this._renderId = 0;
	this._isDisposed = false;
	this._pivotMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = false;
	this._collisionsScalingMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._collisionsTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._absolutePosition = new com_babylonhx_math_Vector3(0,0,0);
	this._rotateYByPI = com_babylonhx_math_Matrix.RotationY(Math.PI);
	this._worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localWorld = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScalingRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localBillboard = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localTranslation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._newPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._collider = new com_babylonhx_collisions_Collider();
	this.ellipsoidOffset = new com_babylonhx_math_Vector3(0,0,0);
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	this._checkCollisions = false;
	this._physicRestitution = 0;
	this._physicsFriction = 0;
	this._physicsMass = 0;
	this._physicImpostor = 0;
	this.alwaysSelectAsActiveMesh = false;
	this.layerMask = 268435455;
	this.useOctreeForCollisions = true;
	this.useOctreeForPicking = true;
	this.useOctreeForRenderingSelection = true;
	this.applyFog = true;
	this.useVertexColors = true;
	this.hasVertexAlpha = false;
	this.overlayAlpha = 0.5;
	this.overlayColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOverlay = false;
	this.outlineWidth = 0.02;
	this.outlineColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOutline = false;
	this._receiveShadows = false;
	this.renderingGroupId = 0;
	this.isBlocker = false;
	this.onDispose = null;
	this.showSubMeshesBoundingBox = false;
	this.showBoundingBox = false;
	this._isPickable = true;
	this.isVisible = true;
	this.infiniteDistance = false;
	this.alphaIndex = Infinity;
	this._visibility = 1.0;
	this.billboardMode = com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE;
	this.scaling = new com_babylonhx_math_Vector3(1,1,1);
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	this.definedFacingForward = true;
	com_babylonhx_Node.call(this,name,scene);
	scene.addMesh(this);
};
$hxClasses["com.babylonhx.mesh.AbstractMesh"] = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_AbstractMesh.__name__ = ["com","babylonhx","mesh","AbstractMesh"];
com_babylonhx_mesh_AbstractMesh.__interfaces__ = [com_babylonhx_IDisposable];
com_babylonhx_mesh_AbstractMesh.__super__ = com_babylonhx_Node;
com_babylonhx_mesh_AbstractMesh.prototype = $extend(com_babylonhx_Node.prototype,{
	definedFacingForward: null
	,position: null
	,rotation: null
	,rotationQuaternion: null
	,scaling: null
	,billboardMode: null
	,_visibility: null
	,get_visibility: function() {
		return this._visibility;
	}
	,set_visibility: function(val) {
		this._visibility = val;
		return val;
	}
	,alphaIndex: null
	,infiniteDistance: null
	,isVisible: null
	,_isPickable: null
	,get_isPickable: function() {
		return this._isPickable;
	}
	,set_isPickable: function(val) {
		this._isPickable = val;
		return val;
	}
	,showBoundingBox: null
	,showSubMeshesBoundingBox: null
	,onDispose: null
	,isBlocker: null
	,_skeleton: null
	,get_skeleton: function() {
		return this._skeleton;
	}
	,set_skeleton: function(val) {
		this._skeleton = val;
		return val;
	}
	,renderingGroupId: null
	,_material: null
	,get_material: function() {
		return this._material;
	}
	,set_material: function(val) {
		this._material = val;
		return val;
	}
	,_receiveShadows: null
	,get_receiveShadows: function() {
		return this._receiveShadows;
	}
	,set_receiveShadows: function(val) {
		this._receiveShadows = val;
		return val;
	}
	,actionManager: null
	,renderOutline: null
	,outlineColor: null
	,outlineWidth: null
	,renderOverlay: null
	,overlayColor: null
	,overlayAlpha: null
	,hasVertexAlpha: null
	,useVertexColors: null
	,applyFog: null
	,useOctreeForRenderingSelection: null
	,useOctreeForPicking: null
	,useOctreeForCollisions: null
	,layerMask: null
	,alwaysSelectAsActiveMesh: null
	,_physicImpostor: null
	,_physicsMass: null
	,_physicsFriction: null
	,_physicRestitution: null
	,_checkCollisions: null
	,ellipsoid: null
	,ellipsoidOffset: null
	,_collider: null
	,_oldPositionForCollisions: null
	,_diffPositionForCollisions: null
	,_newPositionForCollisions: null
	,onCollide: null
	,_meshToBoneReferal: null
	,_localScaling: null
	,_localRotation: null
	,_localTranslation: null
	,_localBillboard: null
	,_localPivotScaling: null
	,_localPivotScalingRotation: null
	,_localMeshReferalTransform: null
	,_localWorld: null
	,_worldMatrix: null
	,_rotateYByPI: null
	,_absolutePosition: null
	,_collisionsTransformMatrix: null
	,_collisionsScalingMatrix: null
	,_savedMaterial: null
	,_positions: null
	,get_positions: function() {
		return this._positions;
	}
	,set_positions: function(val) {
		this._positions = val;
		return val;
	}
	,get_useBones: function() {
		return this.get_skeleton() != null && this._scene.skeletonsEnabled && this.isVerticesDataPresent("matricesIndices") && this.isVerticesDataPresent("matricesWeights");
	}
	,_isDirty: null
	,_masterMesh: null
	,_boundingInfo: null
	,_pivotMatrix: null
	,_isDisposed: null
	,_renderId: null
	,subMeshes: null
	,_submeshesOctree: null
	,_intersectionsInProgress: null
	,_onAfterWorldMatrixUpdate: null
	,_isWorldMatrixFrozen: null
	,_waitingActions: null
	,_isBlocked: null
	,get_isBlocked: function() {
		return false;
	}
	,getLOD: function(camera,boundingSphere) {
		return this;
	}
	,getTotalVertices: function() {
		return 0;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,isVerticesDataPresent: function(kind) {
		return false;
	}
	,getBoundingInfo: function() {
		if(this._masterMesh != null) return this._masterMesh.getBoundingInfo();
		if(this._boundingInfo == null) {
			if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
			this._boundingInfo._update(this.get_worldMatrixFromCache());
			this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
		}
		return this._boundingInfo;
	}
	,_preActivate: function() {
	}
	,_activate: function(renderId) {
		this._renderId = renderId;
	}
	,getWorldMatrix: function() {
		if(this._masterMesh != null) return this._masterMesh.getWorldMatrix();
		if(this._currentRenderId != this._scene._renderId) this.computeWorldMatrix();
		return this._worldMatrix;
	}
	,get_worldMatrixFromCache: function() {
		return this._worldMatrix;
	}
	,get_absolutePosition: function() {
		return this._absolutePosition;
	}
	,freezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
		this._isWorldMatrixFrozen = true;
	}
	,unfreezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
	}
	,get_isWorldMatrixFrozen: function() {
		return this._isWorldMatrixFrozen;
	}
	,rotate: function(axis,amount,space) {
		if(this.rotationQuaternion == null) {
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
			this.rotation = new com_babylonhx_math_Vector3(0,0,0);
		}
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(rotationQuaternion);
		} else {
			if(this.parent != null) {
				var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
				invertParentWorldMatrix.invert();
				axis = com_babylonhx_math_Vector3.TransformNormal(axis,invertParentWorldMatrix);
			}
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(this.rotationQuaternion);
		}
	}
	,translate: function(axis,distance,space) {
		var displacementVector = new com_babylonhx_math_Vector3(axis.x * distance,axis.y * distance,axis.z * distance);
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);
			this.computeWorldMatrix();
			this.position = com_babylonhx_math_Vector3.TransformNormal(tempV3,this._localWorld);
		} else this.setAbsolutePosition(((function($this) {
			var $r;
			$this.computeWorldMatrix();
			$r = $this._absolutePosition;
			return $r;
		}(this))).add(displacementVector));
	}
	,getAbsolutePosition: function() {
		this.computeWorldMatrix();
		return this._absolutePosition;
	}
	,setAbsolutePosition: function(absolutePosition) {
		if(absolutePosition == null) return;
		var absolutePositionX = 0;
		var absolutePositionY = 0;
		var absolutePositionZ = 0;
		if((absolutePosition instanceof Array) && absolutePosition.__enum__ == null) {
			if(absolutePosition.length < 3) return;
			absolutePositionX = absolutePosition[0];
			absolutePositionY = absolutePosition[1];
			absolutePositionZ = absolutePosition[2];
		} else {
			absolutePositionX = absolutePosition.x;
			absolutePositionY = absolutePosition.y;
			absolutePositionZ = absolutePosition.z;
		}
		if(this.parent != null) {
			var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
			invertParentWorldMatrix.invert();
			var worldPosition = new com_babylonhx_math_Vector3(absolutePositionX,absolutePositionY,absolutePositionZ);
			this.position = com_babylonhx_math_Vector3.TransformCoordinates(worldPosition,invertParentWorldMatrix);
		} else {
			this.position.x = absolutePositionX;
			this.position.y = absolutePositionY;
			this.position.z = absolutePositionZ;
		}
	}
	,movePOV: function(amountRight,amountUp,amountForward) {
		this.position.addInPlace(this.calcMovePOV(amountRight,amountUp,amountForward));
	}
	,calcMovePOV: function(amountRight,amountUp,amountForward) {
		var rotMatrix = new com_babylonhx_math_Matrix();
		var rotQuaternion;
		if(this.rotationQuaternion != null) rotQuaternion = this.rotationQuaternion; else rotQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
		rotQuaternion.toRotationMatrix(rotMatrix);
		var translationDelta = new com_babylonhx_math_Vector3(0,0,0);
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = -1; else defForwardMult = 1;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult,amountUp,amountForward * defForwardMult,rotMatrix,translationDelta);
		return translationDelta;
	}
	,rotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		this.rotation.addInPlace(this.calcRotatePOV(flipBack,twirlClockwise,tiltRight));
	}
	,calcRotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = 1; else defForwardMult = -1;
		return new com_babylonhx_math_Vector3(flipBack * defForwardMult,twirlClockwise,tiltRight * defForwardMult);
	}
	,setPivotMatrix: function(matrix) {
		this._pivotMatrix = matrix;
		this._cache.pivotMatrixUpdated = true;
	}
	,getPivotMatrix: function() {
		return this._pivotMatrix;
	}
	,_isSynchronized: function() {
		if(this._isDirty) return false;
		if(this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) return false;
		if(this._cache.pivotMatrixUpdated) return false;
		if(this.infiniteDistance) return false;
		if(!this._cache.position.equals(this.position)) return false;
		if(this.rotationQuaternion != null) {
			if(!this._cache.rotationQuaternion.equals(this.rotationQuaternion)) return false;
		} else if(!this._cache.rotation.equals(this.rotation)) return false;
		if(!this._cache.scaling.equals(this.scaling)) return false;
		return true;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.localMatrixUpdated = false;
		this._cache.position = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.scaling = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotation = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,0);
	}
	,markAsDirty: function(property) {
		if(property == "rotation") this.rotationQuaternion = null;
		this._currentRenderId = Infinity;
		this._isDirty = true;
	}
	,_updateBoundingInfo: function() {
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_updateSubMeshesBoundingInfo: function(matrix) {
		if(this.subMeshes == null) return;
		var _g = 0;
		var _g1 = this.subMeshes;
		while(_g < _g1.length) {
			var subMesh = _g1[_g];
			++_g;
			if(subMesh._boundingInfo == null) subMesh.refreshBoundingInfo();
			subMesh._boundingInfo._update(matrix);
		}
	}
	,computeWorldMatrix: function(force) {
		if(force == null) force = false;
		if(this._isWorldMatrixFrozen) return this._worldMatrix;
		if(!force && (this._currentRenderId == this._scene._renderId || this.isSynchronized(true))) return this._worldMatrix;
		this._cache.position.copyFrom(this.position);
		this._cache.scaling.copyFrom(this.scaling);
		this._cache.pivotMatrixUpdated = false;
		this._currentRenderId = this._scene._renderId;
		this._isDirty = false;
		com_babylonhx_math_Matrix.ScalingToRef(this.scaling.x,this.scaling.y,this.scaling.z,this._localScaling);
		if(this.rotationQuaternion != null) {
			this.rotationQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);
		} else {
			com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
			com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotation.copyFrom(this.rotation);
		}
		if(this.infiniteDistance && this.parent == null) {
			var camera = this._scene.activeCamera;
			if(camera != null) {
				var cameraWorldMatrix = camera.getWorldMatrix();
				var cameraGlobalPosition = new com_babylonhx_math_Vector3(cameraWorldMatrix.m[12],cameraWorldMatrix.m[13],cameraWorldMatrix.m[14]);
				com_babylonhx_math_Matrix.TranslationToRef(this.position.x + cameraGlobalPosition.x,this.position.y + cameraGlobalPosition.y,this.position.z + cameraGlobalPosition.z,this._localTranslation);
			}
		} else com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._localTranslation);
		this._pivotMatrix.multiplyToRef(this._localScaling,this._localPivotScaling);
		this._localPivotScaling.multiplyToRef(this._localRotation,this._localPivotScalingRotation);
		if(this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE && this._scene.activeCamera != null) {
			var localPosition = this.position.clone();
			var zero = this._scene.activeCamera.get_globalPosition().clone();
			if(this.parent != null && Object.prototype.hasOwnProperty.call(this.parent,"position")) {
				localPosition.addInPlace(Reflect.field(this.parent,"position"));
				com_babylonhx_math_Matrix.TranslationToRef(localPosition.x,localPosition.y,localPosition.z,this._localTranslation);
			}
			if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) zero = this._scene.activeCamera.position; else {
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X) != 0) zero.x = localPosition.x + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y) != 0) zero.y = localPosition.y + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z) != 0) zero.z = localPosition.z + 0.001;
			}
			com_babylonhx_math_Matrix.LookAtLHToRef(localPosition,zero,new com_babylonhx_math_Vector3(0,1.0,0),this._localBillboard);
			var val;
			var val1 = this._localBillboard.m[14] = 0;
			val = this._localBillboard.m[13] = val1;
			this._localBillboard.m[12] = val;
			this._localBillboard.invert();
			this._localPivotScalingRotation.multiplyToRef(this._localBillboard,this._localWorld);
			this._rotateYByPI.multiplyToRef(this._localWorld,this._localPivotScalingRotation);
		}
		this._localPivotScalingRotation.multiplyToRef(this._localTranslation,this._localWorld);
		if(this.parent != null && this.parent.getWorldMatrix() != null && this.billboardMode == com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) {
			this._parentRenderId = this.parent._currentRenderId;
			if(this._meshToBoneReferal != null) {
				if(this._localMeshReferalTransform == null) this._localMeshReferalTransform = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
				this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._localMeshReferalTransform);
				this._localMeshReferalTransform.multiplyToRef(this._meshToBoneReferal.getWorldMatrix(),this._worldMatrix);
			} else this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._worldMatrix);
		} else this._worldMatrix.copyFrom(this._localWorld);
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
		this._absolutePosition.copyFromFloats(this._worldMatrix.m[12],this._worldMatrix.m[13],this._worldMatrix.m[14]);
		var _g = 0;
		var _g1 = this._onAfterWorldMatrixUpdate;
		while(_g < _g1.length) {
			var callbackIndex = _g1[_g];
			++_g;
			callbackIndex(this);
		}
		return this._worldMatrix;
	}
	,registerAfterWorldMatrixUpdate: function(func) {
		this._onAfterWorldMatrixUpdate.push(func);
	}
	,unregisterAfterWorldMatrixUpdate: function(func) {
		var index = HxOverrides.indexOf(this._onAfterWorldMatrixUpdate,func,0);
		if(index > -1) this._onAfterWorldMatrixUpdate.splice(index,1);
	}
	,setPositionWithLocalVector: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformNormal(vector3,this._localWorld);
	}
	,getPositionExpressedInLocalSpace: function() {
		this.computeWorldMatrix();
		var invLocalWorldMatrix = this._localWorld.clone();
		invLocalWorldMatrix.invert();
		return com_babylonhx_math_Vector3.TransformNormal(this.position,invLocalWorldMatrix);
	}
	,locallyTranslate: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformCoordinates(vector3,this._localWorld);
	}
	,lookAt: function(targetPoint,yawCor,pitchCor,rollCor) {
		if(rollCor == null) rollCor = 0;
		if(pitchCor == null) pitchCor = 0;
		if(yawCor == null) yawCor = 0;
		var dv = targetPoint.subtract(this.position);
		var yaw = -Math.atan2(dv.z,dv.x) - Math.PI / 2;
		var len = Math.sqrt(dv.x * dv.x + dv.z * dv.z);
		var pitch = Math.atan2(dv.y,len);
		this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(yaw + yawCor,pitch + pitchCor,rollCor);
	}
	,attachToBone: function(bone,affectedMesh) {
		this._meshToBoneReferal = affectedMesh;
		this.parent = bone;
	}
	,detachFromBone: function() {
		this._meshToBoneReferal = null;
		this.parent = null;
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,isCompletelyInFrustum: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		var transformMatrix = camera.getViewMatrix().multiply(camera.getProjectionMatrix(false));
		if(!this._boundingInfo.isCompletelyInFrustum(com_babylonhx_math_Frustum.GetPlanes(transformMatrix))) return false;
		return true;
	}
	,intersectsMesh: function(mesh,precise) {
		if(precise == null) precise = false;
		if(this._boundingInfo == null || mesh._boundingInfo == null) return false;
		return this._boundingInfo.intersects(mesh._boundingInfo,precise);
	}
	,intersectsPoint: function(point) {
		if(this._boundingInfo == null) return false;
		return this._boundingInfo.intersectsPoint(point);
	}
	,setPhysicsState: function(impostor,options) {
		var physicsEngine = this._scene._physicsEngine;
		if(physicsEngine == null) return null;
		if(impostor != null) impostor = impostor; else impostor = 0;
		if(Object.prototype.hasOwnProperty.call(impostor,"impostor")) {
			options = impostor;
			impostor = impostor.impostor;
		}
		if(impostor == 0) {
			physicsEngine._unregisterMesh(this);
			return null;
		}
		if(options == null) {
			options.mass = 0;
			options.friction = 0.2;
			options.restitution = 0.2;
		} else {
			if(options.mass == null) options.mass = 0;
			if(options.friction == null) options.friction = 0.2;
			if(options.restitution == null) options.restitution = 0.2;
		}
		this._physicImpostor = impostor;
		this._physicsMass = options.mass;
		this._physicsFriction = options.friction;
		this._physicRestitution = options.restitution;
		return physicsEngine._registerMesh(this,impostor,options);
	}
	,getPhysicsImpostor: function() {
		return this._physicImpostor;
	}
	,getPhysicsMass: function() {
		return this._physicsMass;
	}
	,getPhysicsFriction: function() {
		return this._physicsFriction;
	}
	,getPhysicsRestitution: function() {
		return this._physicRestitution;
	}
	,getPositionInCameraSpace: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return com_babylonhx_math_Vector3.TransformCoordinates(this.get_absolutePosition(),camera.getViewMatrix());
	}
	,getDistanceToCamera: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return this.get_absolutePosition().subtract(camera.position).length();
	}
	,applyImpulse: function(force,contactPoint) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._applyImpulse(this,force,contactPoint);
	}
	,setPhysicsLinkWith: function(otherMesh,pivot1,pivot2,options) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._createLink(this,otherMesh,pivot1,pivot2,options);
	}
	,updatePhysicsBodyPosition: function() {
		if(this._physicImpostor != 0) this._scene._physicsEngine._updateBodyPosition(this);
	}
	,get_checkCollisions: function() {
		return this._checkCollisions;
	}
	,set_checkCollisions: function(collisionEnabled) {
		this._checkCollisions = collisionEnabled;
		if(this._scene.get_workerCollisions()) this._scene.collisionCoordinator.onMeshUpdated(this);
		return collisionEnabled;
	}
	,moveWithCollisions: function(velocity) {
		var globalPosition;
		this.computeWorldMatrix();
		globalPosition = this._absolutePosition;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPositionForCollisions);
		this._oldPositionForCollisions.addInPlace(this.ellipsoidOffset);
		this._collider.radius = this.ellipsoid;
		this._scene.collisionCoordinator.getNewPosition(this._oldPositionForCollisions,velocity,this._collider,3,this,$bind(this,this._onCollisionPositionChange),this.uniqueId);
	}
	,_onCollisionPositionChange: function(collisionId,newPosition,collidedMesh) {
		if(this._scene.get_workerCollisions()) newPosition.multiplyInPlace(this._collider.radius);
		newPosition.subtractToRef(this._oldPositionForCollisions,this._diffPositionForCollisions);
		if(this._diffPositionForCollisions.length() > com_babylonhx_Engine.CollisionsEpsilon) this.position.addInPlace(this._diffPositionForCollisions);
		if(this.onCollide != null && collidedMesh != null) this.onCollide(collidedMesh);
	}
	,createOrUpdateSubmeshesOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._submeshesOctree == null) this._submeshesOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes,maxCapacity,maxDepth);
		this.computeWorldMatrix(true);
		var bbox = this.getBoundingInfo().boundingBox;
		this._submeshesOctree.update(bbox.minimumWorld,bbox.maximumWorld,this.subMeshes);
		return this._submeshesOctree;
	}
	,_collideForSubMesh: function(subMesh,transformMatrix,collider) {
		this._generatePointsArray();
		if(subMesh._lastColliderWorldVertices == null || !subMesh._lastColliderTransformMatrix.equals(transformMatrix)) {
			subMesh._lastColliderTransformMatrix = com_babylonhx_math_Matrix.FromValues(transformMatrix.m[0],transformMatrix.m[1],transformMatrix.m[2],transformMatrix.m[3],transformMatrix.m[4],transformMatrix.m[5],transformMatrix.m[6],transformMatrix.m[7],transformMatrix.m[8],transformMatrix.m[9],transformMatrix.m[10],transformMatrix.m[11],transformMatrix.m[12],transformMatrix.m[13],transformMatrix.m[14],transformMatrix.m[15]);
			subMesh._lastColliderWorldVertices = [];
			subMesh._trianglePlanes = [];
			var start = subMesh.verticesStart;
			var end = subMesh.verticesStart + subMesh.verticesCount;
			var _g = start;
			while(_g < end) {
				var i = _g++;
				subMesh._lastColliderWorldVertices.push(com_babylonhx_math_Vector3.TransformCoordinates(this._positions[i],transformMatrix));
			}
		}
		collider._collide(subMesh,subMesh._lastColliderWorldVertices,this.getIndices(),subMesh.indexStart,subMesh.indexStart + subMesh.indexCount,subMesh.verticesStart);
		if(collider.collisionFound) collider.collidedMesh = this;
	}
	,_processCollisionsForSubMeshes: function(collider,transformMatrix) {
		var subMeshes;
		var len = 0;
		if(this._submeshesOctree != null && this.useOctreeForCollisions) {
			var radius = collider.velocityWorldLength + Math.max(Math.max(collider.radius.x,collider.radius.y),collider.radius.z);
			var intersections = this._submeshesOctree.intersects(collider.basePointWorld,radius,null);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !subMesh._boundingInfo._checkCollision(collider)) continue;
			this._collideForSubMesh(subMesh,transformMatrix,collider);
		}
	}
	,_checkCollision: function(collider) {
		if(!this._boundingInfo._checkCollision(collider)) return;
		com_babylonhx_math_Matrix.ScalingToRef(1.0 / collider.radius.x,1.0 / collider.radius.y,1.0 / collider.radius.z,this._collisionsScalingMatrix);
		this.get_worldMatrixFromCache().multiplyToRef(this._collisionsScalingMatrix,this._collisionsTransformMatrix);
		this._processCollisionsForSubMeshes(collider,this._collisionsTransformMatrix);
	}
	,_generatePointsArray: function() {
		return false;
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = new com_babylonhx_collisions_PickingInfo();
		if(this.subMeshes == null || this._boundingInfo == null || !ray.intersectsSphere(this._boundingInfo.boundingSphere) || !ray.intersectsBox(this._boundingInfo.boundingBox)) return pickingInfo;
		if(!this._generatePointsArray()) return pickingInfo;
		var intersectInfo = null;
		var subMeshes;
		var len;
		if(this._submeshesOctree != null && this.useOctreeForPicking) {
			var worldRay = com_babylonhx_math_Ray.Transform(ray,this.getWorldMatrix());
			var intersections = this._submeshesOctree.intersectsRay(worldRay);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !ray.intersectsBox(subMesh._boundingInfo.boundingBox)) continue;
			var currentIntersectInfo = subMesh.intersects(ray,this._positions,this.getIndices(),fastCheck);
			if(currentIntersectInfo != null) {
				if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
					intersectInfo = currentIntersectInfo;
					if(fastCheck) break;
				}
			}
		}
		if(intersectInfo != null) {
			var world = this.getWorldMatrix();
			var worldOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,world);
			var direction = ray.direction.clone();
			direction = direction.scale(intersectInfo.distance);
			var worldDirection = com_babylonhx_math_Vector3.TransformNormal(direction,world);
			var pickedPoint = new com_babylonhx_math_Vector3(worldOrigin.x + worldDirection.x,worldOrigin.y + worldDirection.y,worldOrigin.z + worldDirection.z);
			pickingInfo.hit = true;
			pickingInfo.distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(worldOrigin,pickedPoint));
			pickingInfo.pickedPoint = pickedPoint;
			pickingInfo.pickedMesh = this;
			pickingInfo.bu = intersectInfo.bu;
			pickingInfo.bv = intersectInfo.bv;
			pickingInfo.faceId = intersectInfo.faceId;
			pickingInfo.subMeshId = intersectInfo.subMeshId;
			return pickingInfo;
		}
		return pickingInfo;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return null;
	}
	,releaseSubMeshes: function() {
		if(this.subMeshes != null) while(this.subMeshes.length > 0) this.subMeshes[0].dispose(); else this.subMeshes = [];
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._physicImpostor != 0) this.setPhysicsState(0);
		var _g1 = 0;
		var _g = this._intersectionsInProgress.length;
		while(_g1 < _g) {
			var index = _g1++;
			var other = this._intersectionsInProgress[index];
			var pos = HxOverrides.indexOf(other._intersectionsInProgress,this,0);
			other._intersectionsInProgress.splice(pos,1);
		}
		this._intersectionsInProgress = [];
		this.releaseSubMeshes();
		this._scene.removeMesh(this);
		if(!doNotRecurse) {
			var index1 = 0;
			while(index1 < this._scene.particleSystems.length) {
				if(this._scene.particleSystems[index1].emitter == this) {
					this._scene.particleSystems[index1].dispose(null);
					index1--;
				}
				++index1;
			}
			var objects = this._scene.meshes.slice(0);
			var _g11 = 0;
			var _g2 = objects.length;
			while(_g11 < _g2) {
				var index2 = _g11++;
				if(objects[index2].parent == this) objects[index2].dispose();
			}
		} else {
			var _g12 = 0;
			var _g3 = this._scene.meshes.length;
			while(_g12 < _g3) {
				var index3 = _g12++;
				var obj = this._scene.meshes[index3];
				if(obj.parent == this) {
					obj.parent = null;
					obj.computeWorldMatrix(true);
				}
			}
		}
		this._onAfterWorldMatrixUpdate = [];
		this._isDisposed = true;
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_mesh_AbstractMesh
	,__properties__: {set_checkCollisions:"set_checkCollisions",get_checkCollisions:"get_checkCollisions",get_isWorldMatrixFrozen:"get_isWorldMatrixFrozen",get_absolutePosition:"get_absolutePosition",get_worldMatrixFromCache:"get_worldMatrixFromCache",get_isBlocked:"get_isBlocked",get_useBones:"get_useBones",set_positions:"set_positions",get_positions:"get_positions",set_receiveShadows:"set_receiveShadows",get_receiveShadows:"get_receiveShadows",set_material:"set_material",get_material:"get_material",set_skeleton:"set_skeleton",get_skeleton:"get_skeleton",set_isPickable:"set_isPickable",get_isPickable:"get_isPickable",set_visibility:"set_visibility",get_visibility:"get_visibility"}
});
var com_babylonhx_mesh_IGetSetVerticesData = $hx_exports.BABYLON.IGetSetVerticesData = function() { };
$hxClasses["com.babylonhx.mesh.IGetSetVerticesData"] = com_babylonhx_mesh_IGetSetVerticesData;
com_babylonhx_mesh_IGetSetVerticesData.__name__ = ["com","babylonhx","mesh","IGetSetVerticesData"];
com_babylonhx_mesh_IGetSetVerticesData.prototype = {
	isVerticesDataPresent: null
	,getVerticesData: null
	,getIndices: null
	,setVerticesData: null
	,updateVerticesData: null
	,setIndices: null
	,__class__: com_babylonhx_mesh_IGetSetVerticesData
};
var com_babylonhx_mesh_VertexData = $hx_exports.BABYLON.VertexData = function() {
};
$hxClasses["com.babylonhx.mesh.VertexData"] = com_babylonhx_mesh_VertexData;
com_babylonhx_mesh_VertexData.__name__ = ["com","babylonhx","mesh","VertexData"];
com_babylonhx_mesh_VertexData.ExtractFromMesh = function(mesh,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(mesh,copyWhenShared);
};
com_babylonhx_mesh_VertexData.ExtractFromGeometry = function(geometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(geometry,copyWhenShared);
};
com_babylonhx_mesh_VertexData._ExtractFrom = function(meshOrGeometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	var result = new com_babylonhx_mesh_VertexData();
	if(meshOrGeometry.isVerticesDataPresent("position")) result.positions = meshOrGeometry.getVerticesData("position",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("normal")) result.normals = meshOrGeometry.getVerticesData("normal",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv")) result.uvs = meshOrGeometry.getVerticesData("uv",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv2")) result.uv2s = meshOrGeometry.getVerticesData("uv2",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv3")) result.uv3s = meshOrGeometry.getVerticesData("uv3",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv4")) result.uv4s = meshOrGeometry.getVerticesData("uv4",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv5")) result.uv5s = meshOrGeometry.getVerticesData("uv5",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv6")) result.uv6s = meshOrGeometry.getVerticesData("uv6",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("color")) result.colors = meshOrGeometry.getVerticesData("color",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesIndices")) result.matricesIndices = meshOrGeometry.getVerticesData("matricesIndices",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesWeights")) result.matricesWeights = meshOrGeometry.getVerticesData("matricesWeights",copyWhenShared);
	result.indices = meshOrGeometry.getIndices(copyWhenShared);
	return result;
};
com_babylonhx_mesh_VertexData.CreateRibbon = function(pathArray,closeArray,closePath,offset,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(closePath == null) closePath = false;
	if(closeArray == null) closeArray = false;
	var defaultOffset = Math.floor(pathArray[0].length / 2);
	if(offset != null) offset = offset; else offset = defaultOffset;
	if(offset > defaultOffset) offset = defaultOffset; else offset = Math.floor(offset);
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var us = [];
	var vs = [];
	var uTotalDistance = [];
	var vTotalDistance = [];
	var minlg = 0;
	var vectlg = 0;
	var dist = 0;
	var lg = [];
	var idx = [];
	var p = 0;
	var i = 0;
	var j = 0;
	if(pathArray.length < 2) {
		var ar1 = [];
		var ar2 = [];
		var _g1 = 0;
		var _g = pathArray[0].length - offset;
		while(_g1 < _g) {
			var i1 = _g1++;
			ar1.push(pathArray[0][i1]);
			ar2.push(pathArray[0][i1 + offset]);
		}
		pathArray = [ar1,ar2];
	}
	var idc = 0;
	minlg = pathArray[0].length;
	var _g11 = 0;
	var _g2 = pathArray.length;
	while(_g11 < _g2) {
		var p1 = _g11++;
		uTotalDistance[p1] = 0;
		us[p1] = [0];
		var path = pathArray[p1];
		var l = path.length;
		if(minlg < l) minlg = minlg; else minlg = l;
		lg[p1] = l;
		idx[p1] = idc;
		var j1 = 0;
		while(j1 < l) {
			positions.push(path[j1].x);
			positions.push(path[j1].y);
			positions.push(path[j1].z);
			if(j1 > 0) {
				vectlg = path[j1].subtract(path[j1 - 1]).length();
				dist = vectlg + uTotalDistance[p1];
				us[p1].push(dist);
				uTotalDistance[p1] = dist;
			}
			j1++;
		}
		if(closePath) {
			vectlg = path[0].subtract(path[j1 - 1]).length();
			dist = vectlg + uTotalDistance[p1];
			uTotalDistance[p1] = dist;
		}
		idc += l;
	}
	var _g3 = 0;
	while(_g3 < minlg) {
		var i2 = _g3++;
		vTotalDistance[i2] = 0;
		vs[i2] = [0];
		var path1 = [];
		var path2 = [];
		var _g21 = 0;
		var _g12 = pathArray.length - 1;
		while(_g21 < _g12) {
			var p2 = _g21++;
			path1 = pathArray[p2];
			path2 = pathArray[p2 + 1];
			vectlg = path2[i2].subtract(path1[i2]).length();
			dist = vectlg + vTotalDistance[i2];
			vs[i2].push(dist);
			vTotalDistance[i2] = dist;
		}
		if(closeArray) {
			path1 = pathArray[p];
			path2 = pathArray[0];
			vectlg = path2[i2].subtract(path1[i2]).length();
			dist = vectlg + vTotalDistance[i2];
			vTotalDistance[i2] = dist;
		}
	}
	var u = 0;
	var v = 0;
	var _g13 = 0;
	var _g4 = pathArray.length;
	while(_g13 < _g4) {
		var p3 = _g13++;
		var _g22 = 0;
		while(_g22 < minlg) {
			var i3 = _g22++;
			u = us[p3][i3] / uTotalDistance[p3];
			v = vs[i3][p3] / vTotalDistance[i3];
			uvs.push(u);
			uvs.push(v);
		}
	}
	p = 0;
	var pi = 0;
	var l1 = lg[p] - 1;
	var l2 = lg[p + 1] - 1;
	var min;
	if(l1 < l2) min = l1; else min = l2;
	var shft = idx[1] - idx[0];
	var path1nb;
	if(closeArray) path1nb = lg.length; else path1nb = lg.length - 1;
	var t1 = 0;
	var t2 = 0;
	var t3 = 0;
	var t4 = 0;
	while(pi <= min && p < path1nb) {
		t1 = pi;
		t2 = pi + shft;
		t3 = pi + 1;
		t4 = pi + shft + 1;
		indices.push(pi);
		indices.push(pi + shft);
		indices.push(pi + 1);
		indices.push(pi + shft + 1);
		indices.push(pi + 1);
		indices.push(pi + shft);
		pi += 1;
		if(pi == min) {
			if(closePath) {
				indices.push(pi);
				indices.push(pi + shft);
				indices.push(idx[p]);
				indices.push(idx[p] + shft);
				indices.push(idx[p]);
				indices.push(pi + shft);
				t3 = idx[p];
				t4 = idx[p] + shft;
			}
			p++;
			if(p == lg.length - 1) {
				shft = idx[0] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[0] - 1;
			} else {
				shft = idx[p + 1] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[p + 1] - 1;
			}
			pi = idx[p];
			if(l1 < l2) min = l1 + pi; else min = l2 + pi;
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateBox = function(size,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(size == null) size = 1.0;
	var normalsSource = [new com_babylonhx_math_Vector3(0,0,1),new com_babylonhx_math_Vector3(0,0,-1),new com_babylonhx_math_Vector3(1,0,0),new com_babylonhx_math_Vector3(-1,0,0),new com_babylonhx_math_Vector3(0,1,0),new com_babylonhx_math_Vector3(0,-1,0)];
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = normalsSource.length;
	while(_g1 < _g) {
		var index = _g1++;
		var normal = normalsSource[index];
		var side1 = new com_babylonhx_math_Vector3(normal.y,normal.z,normal.x);
		var side2 = com_babylonhx_math_Vector3.Cross(normal,side1);
		var verticesLength = positions.length / 3 | 0;
		indices.push(verticesLength);
		indices.push(verticesLength + 1);
		indices.push(verticesLength + 2);
		indices.push(verticesLength);
		indices.push(verticesLength + 2);
		indices.push(verticesLength + 3);
		var vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).subtract(side2).scale(size / 2);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(1.0);
		vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).add(side2).scale(size / 2);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(1.0);
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).add(side2).scale(size / 2);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(0.0);
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).subtract(side2).scale(size / 2);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(0.0);
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateSphere = function(segments,diameter,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(diameter == null) diameter = 1;
	if(segments == null) segments = 32;
	var radius = diameter / 2;
	var totalZRotationSteps = 2 + segments;
	var totalYRotationSteps = 2 * totalZRotationSteps;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = totalZRotationSteps + 1;
	while(_g1 < _g) {
		var zRotationStep = _g1++;
		var normalizedZ = zRotationStep / totalZRotationSteps;
		var angleZ = normalizedZ * Math.PI;
		var _g3 = 0;
		var _g2 = totalYRotationSteps + 1;
		while(_g3 < _g2) {
			var yRotationStep = _g3++;
			var normalizedY = yRotationStep / totalYRotationSteps;
			var angleY = normalizedY * Math.PI * 2;
			var rotationZ = com_babylonhx_math_Matrix.RotationZ(-angleZ);
			var rotationY = com_babylonhx_math_Matrix.RotationY(angleY);
			var afterRotZ = com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(0,1.0,0),rotationZ);
			var complete = com_babylonhx_math_Vector3.TransformCoordinates(afterRotZ,rotationY);
			var vertex = new com_babylonhx_math_Vector3(complete.x * radius,complete.y * radius,complete.z * radius);
			var normal = com_babylonhx_math_Vector3.Normalize(vertex);
			positions.push(vertex.x);
			positions.push(vertex.y);
			positions.push(vertex.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(normalizedZ);
			uvs.push(normalizedY);
		}
		if(zRotationStep > 0) {
			var verticesCount = positions.length / 3;
			var firstIndex = verticesCount - 2 * (totalYRotationSteps + 1) | 0;
			while(firstIndex + totalYRotationSteps + 2 < verticesCount) {
				indices.push(firstIndex);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 2);
				firstIndex++;
			}
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateCylinder = function(height,diameterTop,diameterBottom,tessellation,subdivisions,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(subdivisions == null) subdivisions = 1;
	if(tessellation == null) tessellation = 16;
	if(diameterBottom == null) diameterBottom = 1;
	if(diameterTop == null) diameterTop = 0.5;
	if(height == null) height = 1;
	var radiusTop = diameterTop / 2;
	var radiusBottom = diameterBottom / 2;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	if(subdivisions < 1) subdivisions = 1; else subdivisions = subdivisions;
	var getCircleVector = function(i) {
		var angle = i * 2.0 * Math.PI / tessellation;
		var dx = Math.cos(angle);
		var dz = Math.sin(angle);
		return new com_babylonhx_math_Vector3(dx,0,dz);
	};
	var createCylinderCap = function(isTop) {
		var radius;
		if(isTop) radius = radiusTop; else radius = radiusBottom;
		if(radius == 0) return;
		var vbase = positions.length / 3 | 0;
		var offset = new com_babylonhx_math_Vector3(0,height / 2,0);
		var textureScale = new com_babylonhx_math_Vector2(0.5,0.5);
		if(!isTop) {
			offset.x *= -1;
			offset.y *= -1;
			offset.z *= -1;
			offset;
			textureScale.x = -textureScale.x;
		}
		var _g = 0;
		while(_g < tessellation) {
			var i1 = _g++;
			var circleVector = getCircleVector(i1);
			var position = new com_babylonhx_math_Vector3(circleVector.x * radius,circleVector.y * radius,circleVector.z * radius).add(offset);
			var textureCoordinate = new com_babylonhx_math_Vector2(circleVector.x * textureScale.x + 0.5,circleVector.z * textureScale.y + 0.5);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			uvs.push(textureCoordinate.x);
			uvs.push(textureCoordinate.y);
		}
		var _g1 = 0;
		var _g2 = tessellation - 2;
		while(_g1 < _g2) {
			var i2 = _g1++;
			if(!isTop) {
				indices.push(vbase);
				indices.push(vbase + (i2 + 2) % tessellation);
				indices.push(vbase + (i2 + 1) % tessellation);
			} else {
				indices.push(vbase);
				indices.push(vbase + (i2 + 1) % tessellation);
				indices.push(vbase + (i2 + 2) % tessellation);
			}
		}
	};
	var base = new com_babylonhx_math_Vector3(0,-1,0).scale(height / 2);
	var offset1 = new com_babylonhx_math_Vector3(0,1,0).scale(height / subdivisions);
	var stride = tessellation + 1;
	var _g11 = 0;
	var _g3 = tessellation + 1;
	while(_g11 < _g3) {
		var i3 = _g11++;
		var circleVector1 = getCircleVector(i3);
		var textureCoordinate1 = new com_babylonhx_math_Vector2(i3 / tessellation,0);
		var position1 = null;
		var radius1 = radiusBottom;
		var _g31 = 0;
		var _g21 = subdivisions + 1;
		while(_g31 < _g21) {
			var s = _g31++;
			position1 = new com_babylonhx_math_Vector3(circleVector1.x * radius1,circleVector1.y * radius1,circleVector1.z * radius1);
			position1.addInPlace(base.add(new com_babylonhx_math_Vector3(offset1.x * s,offset1.y * s,offset1.z * s)));
			textureCoordinate1.y += 1 / subdivisions;
			radius1 += (radiusTop - radiusBottom) / subdivisions;
			positions.push(position1.x);
			positions.push(position1.y);
			positions.push(position1.z);
			uvs.push(textureCoordinate1.x);
			uvs.push(textureCoordinate1.y);
		}
	}
	subdivisions += 1;
	var _g12 = 0;
	var _g4 = subdivisions - 1;
	while(_g12 < _g4) {
		var s1 = _g12++;
		var _g32 = 0;
		var _g22 = tessellation + 1;
		while(_g32 < _g22) {
			var i4 = _g32++;
			indices.push(i4 * subdivisions + s1);
			indices.push((i4 * subdivisions + (s1 + subdivisions)) % (stride * subdivisions));
			indices.push(i4 * subdivisions + (s1 + 1));
			indices.push(i4 * subdivisions + (s1 + 1));
			indices.push((i4 * subdivisions + (s1 + subdivisions)) % (stride * subdivisions));
			indices.push((i4 * subdivisions + (s1 + subdivisions + 1)) % (stride * subdivisions));
		}
	}
	createCylinderCap(true);
	createCylinderCap(false);
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorus = function(diameter,thickness,tessellation,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(tessellation == null) tessellation = 16;
	if(thickness == null) thickness = 0.5;
	if(diameter == null) diameter = 1;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var stride = tessellation + 1;
	var _g1 = 0;
	var _g = tessellation + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var u = i / tessellation;
		var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;
		var transform = com_babylonhx_math_Matrix.Translation(diameter / 2.0,0,0).multiply(com_babylonhx_math_Matrix.RotationY(outerAngle));
		var _g3 = 0;
		var _g2 = tessellation + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 1 - j / tessellation;
			var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;
			var dx = Math.cos(innerAngle);
			var dy = Math.sin(innerAngle);
			var normal = new com_babylonhx_math_Vector3(dx,dy,0);
			var position = normal.scale(thickness / 2);
			var textureCoordinate = new com_babylonhx_math_Vector2(u,v);
			position = com_babylonhx_math_Vector3.TransformCoordinates(position,transform);
			normal = com_babylonhx_math_Vector3.TransformNormal(normal,transform);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(textureCoordinate.x);
			uvs.push(textureCoordinate.y);
			var nextI = (i + 1) % stride;
			var nextJ = (j + 1) % stride;
			indices.push(i * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + nextJ);
			indices.push(nextI * stride + j);
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateLines = function(points) {
	var indices = [];
	var positions = [];
	var _g1 = 0;
	var _g = points.length;
	while(_g1 < _g) {
		var index = _g1++;
		positions.push(points[index].x);
		positions.push(points[index].y);
		positions.push(points[index].z);
		if(index > 0) {
			indices.push(index - 1);
			indices.push(index);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGround = function(width,height,subdivisions) {
	if(subdivisions == null) subdivisions = 1;
	if(height == null) height = 1;
	if(width == null) width = 1;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var normal = new com_babylonhx_math_Vector3(0,1.0,0);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTiledGround = function(xmin,zmin,xmax,zmax,subdivisions,precision) {
	if(subdivisions == null) subdivisions = { w : 1, h : 1};
	if(precision == null) precision = { w : 1, h : 1};
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	if(subdivisions.w < 1) subdivisions.h = 1; else subdivisions.h = subdivisions.h;
	if(subdivisions.w < 1) subdivisions.w = 1; else subdivisions.w = subdivisions.w;
	if(precision.w < 1) precision.w = 1; else precision.w = precision.w;
	if(precision.h < 1) precision.h = 1; else precision.h = precision.h;
	var tileSize_w = (xmax - xmin) / subdivisions.w;
	var tileSize_h = (zmax - zmin) / subdivisions.h;
	var applyTile = function(xTileMin,zTileMin,xTileMax,zTileMax) {
		var base = positions.length / 3;
		var rowLength = precision.w + 1;
		var _g1 = 0;
		var _g = precision.h;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = precision.w;
			while(_g3 < _g2) {
				var col = _g3++;
				var square_0 = base + col + row * rowLength | 0;
				var square_1 = base + (col + 1) + row * rowLength | 0;
				var square_2 = base + (col + 1) + (row + 1) * rowLength | 0;
				var square_3 = base + col + (row + 1) * rowLength | 0;
				indices.push(square_1);
				indices.push(square_2);
				indices.push(square_3);
				indices.push(square_0);
				indices.push(square_1);
				indices.push(square_3);
			}
		}
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,1.0,0);
		var _g11 = 0;
		var _g4 = precision.h + 1;
		while(_g11 < _g4) {
			var row1 = _g11++;
			position.z = row1 * (zTileMax - zTileMin) / precision.h + zTileMin;
			var _g31 = 0;
			var _g21 = precision.w + 1;
			while(_g31 < _g21) {
				var col1 = _g31++;
				position.x = col1 * (xTileMax - xTileMin) / precision.w + xTileMin;
				position.y = 0;
				positions.push(position.x);
				positions.push(position.y);
				positions.push(position.z);
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
				uvs.push(col1 / precision.w);
				uvs.push(row1 / precision.h);
			}
		}
	};
	var _g12 = 0;
	var _g5 = subdivisions.h;
	while(_g12 < _g5) {
		var tileRow = _g12++;
		var _g32 = 0;
		var _g22 = subdivisions.w;
		while(_g32 < _g22) {
			var tileCol = _g32++;
			applyTile(xmin + tileCol * tileSize_w,zmin + tileRow * tileSize_h,xmin + (tileCol + 1) * tileSize_w,zmin + (tileRow + 1) * tileSize_h);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap = function(width,height,subdivisions,minHeight,maxHeight,buffer,bufferWidth,bufferHeight) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var heightMapX = (position.x + width / 2) / width * (bufferWidth - 1) | 0;
			var heightMapY = (1.0 - (position.z + height / 2) / height) * (bufferHeight - 1) | 0;
			var pos = (heightMapX + heightMapY * bufferWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			position.y = minHeight + (maxHeight - minHeight) * gradient;
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(0);
			normals.push(0);
			normals.push(0);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreatePlane = function(size,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(size == null) size = 1;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var halfSize = size / 2.0;
	positions.push(-halfSize);
	positions.push(-halfSize);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(0.0);
	positions.push(halfSize);
	positions.push(-halfSize);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(0.0);
	positions.push(halfSize);
	positions.push(halfSize);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(1.0);
	positions.push(-halfSize);
	positions.push(halfSize);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(1.0);
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateDisc = function(radius,tessellation,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	positions.push(0);
	positions.push(0);
	positions.push(0);
	uvs.push(0.5);
	uvs.push(0.5);
	var step = Math.PI * 2 / tessellation;
	var a = 0.0;
	while(a < Math.PI * 2) {
		var x = Math.cos(a);
		var y = Math.sin(a);
		var u = (x + 1) / 2;
		var v = (1 - y) / 2;
		positions.push(radius * x);
		positions.push(radius * y);
		positions.push(0);
		uvs.push(u);
		uvs.push(v);
		a += step;
	}
	positions.push(positions[3]);
	positions.push(positions[4]);
	positions.push(positions[5]);
	uvs.push(uvs[2]);
	uvs.push(uvs[3]);
	var vertexNb = positions.length / 3 | 0;
	var _g1 = 1;
	var _g = vertexNb - 1;
	while(_g1 < _g) {
		var i = _g1++;
		indices.push(i + 1);
		indices.push(0);
		indices.push(i);
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorusKnot = function(radius,tube,radialSegments,tubularSegments,p,q,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(q == null) q = 3;
	if(p == null) p = 2;
	if(tubularSegments == null) tubularSegments = 32;
	if(radialSegments == null) radialSegments = 32;
	if(tube == null) tube = 0.5;
	if(radius == null) radius = 2;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var getPos = function(angle) {
		var cu = Math.cos(angle);
		var su = Math.sin(angle);
		var quOverP = q / p * angle;
		var cs = Math.cos(quOverP);
		var tx = radius * (2 + cs) * 0.5 * cu;
		var ty = radius * (2 + cs) * su * 0.5;
		var tz = radius * Math.sin(quOverP) * 0.5;
		return new com_babylonhx_math_Vector3(tx,ty,tz);
	};
	var _g1 = 0;
	var _g = radialSegments + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var modI = i % radialSegments;
		var u = modI / radialSegments * 2 * p * Math.PI;
		var p1 = getPos(u);
		var p2 = getPos(u + 0.01);
		var tang = new com_babylonhx_math_Vector3(p2.x - p1.x,p2.y - p1.y,p2.z - p1.z);
		var n = new com_babylonhx_math_Vector3(p2.x + p1.x,p2.y + p1.y,p2.z + p1.z);
		var bitan = com_babylonhx_math_Vector3.Cross(tang,n);
		n = com_babylonhx_math_Vector3.Cross(bitan,tang);
		bitan.normalize();
		n.normalize();
		var _g2 = 0;
		while(_g2 < tubularSegments) {
			var j = _g2++;
			var modJ = j % tubularSegments;
			var v = modJ / tubularSegments * 2 * Math.PI;
			var cx = -tube * Math.cos(v);
			var cy = tube * Math.sin(v);
			positions.push(p1.x + cx * n.x + cy * bitan.x);
			positions.push(p1.y + cx * n.y + cy * bitan.y);
			positions.push(p1.z + cx * n.z + cy * bitan.z);
			uvs.push(i / radialSegments);
			uvs.push(j / tubularSegments);
		}
	}
	var _g3 = 0;
	while(_g3 < radialSegments) {
		var i1 = _g3++;
		var _g11 = 0;
		while(_g11 < tubularSegments) {
			var j1 = _g11++;
			var jNext = (j1 + 1) % tubularSegments;
			var a = i1 * tubularSegments + j1;
			var b = (i1 + 1) * tubularSegments + j1;
			var c = (i1 + 1) * tubularSegments + jNext;
			var d = i1 * tubularSegments + jNext;
			indices.push(d);
			indices.push(b);
			indices.push(a);
			indices.push(d);
			indices.push(c);
			indices.push(b);
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.ComputeNormals = function(positions,indices,normals) {
	var index = 0;
	var p1 = new com_babylonhx_math_Vector3(0,0,0);
	var p2 = new com_babylonhx_math_Vector3(0,0,0);
	var p3 = new com_babylonhx_math_Vector3(0,0,0);
	var p1p2 = new com_babylonhx_math_Vector3(0,0,0);
	var p3p2 = new com_babylonhx_math_Vector3(0,0,0);
	var faceNormal = new com_babylonhx_math_Vector3(0,0,0);
	var vertexNormali1 = new com_babylonhx_math_Vector3(0,0,0);
	var vertexNormali2 = new com_babylonhx_math_Vector3(0,0,0);
	var vertexNormali3 = new com_babylonhx_math_Vector3(0,0,0);
	var nbFaces = indices.length / 3 | 0;
	var _g = 0;
	while(_g < nbFaces) {
		var index1 = _g++;
		var i1 = indices[index1 * 3];
		var i2 = indices[index1 * 3 + 1];
		var i3 = indices[index1 * 3 + 2];
		p1.x = positions[i1 * 3];
		p1.y = positions[i1 * 3 + 1];
		p1.z = positions[i1 * 3 + 2];
		p2.x = positions[i2 * 3];
		p2.y = positions[i2 * 3 + 1];
		p2.z = positions[i2 * 3 + 2];
		p3.x = positions[i3 * 3];
		p3.y = positions[i3 * 3 + 1];
		p3.z = positions[i3 * 3 + 2];
		p1p2.x = p1.x - p2.x;
		p1p2.y = p1.y - p2.y;
		p1p2.z = p1.z - p2.z;
		p3p2.x = p3.x - p2.x;
		p3p2.y = p3.y - p2.y;
		p3p2.z = p3.z - p2.z;
		faceNormal.x = p1p2.y * p3p2.z - p1p2.z * p3p2.y;
		faceNormal.y = p1p2.z * p3p2.x - p1p2.x * p3p2.z;
		faceNormal.z = p1p2.x * p3p2.y - p1p2.y * p3p2.x;
		faceNormal.normalize();
		normals[i1 * 3] = normals[i1 * 3] || 0.0;
		normals[i1 * 3 + 1] = normals[i1 * 3 + 1] || 0.0;
		normals[i1 * 3 + 2] = normals[i1 * 3 + 2] || 0.0;
		normals[i2 * 3] = normals[i2 * 3] || 0.0;
		normals[i2 * 3 + 1] = normals[i2 * 3 + 1] || 0.0;
		normals[i2 * 3 + 2] = normals[i2 * 3 + 2] || 0.0;
		normals[i3 * 3] = normals[i3 * 3] || 0.0;
		normals[i3 * 3 + 1] = normals[i3 * 3 + 1] || 0.0;
		normals[i3 * 3 + 2] = normals[i3 * 3 + 2] || 0.0;
		vertexNormali1.x = normals[i1 * 3];
		vertexNormali1.y = normals[i1 * 3 + 1];
		vertexNormali1.z = normals[i1 * 3 + 2];
		vertexNormali2.x = normals[i2 * 3];
		vertexNormali2.y = normals[i2 * 3 + 1];
		vertexNormali2.z = normals[i2 * 3 + 2];
		vertexNormali3.x = normals[i3 * 3];
		vertexNormali3.y = normals[i3 * 3 + 1];
		vertexNormali3.z = normals[i3 * 3 + 2];
		vertexNormali1.x += faceNormal.x;
		vertexNormali1.y += faceNormal.y;
		vertexNormali1.z += faceNormal.z;
		vertexNormali1 = vertexNormali1;
		vertexNormali2.x += faceNormal.x;
		vertexNormali2.y += faceNormal.y;
		vertexNormali2.z += faceNormal.z;
		vertexNormali2 = vertexNormali2;
		vertexNormali3.x += faceNormal.x;
		vertexNormali3.y += faceNormal.y;
		vertexNormali3.z += faceNormal.z;
		vertexNormali3 = vertexNormali3;
		normals[i1 * 3] = vertexNormali1.x;
		normals[i1 * 3 + 1] = vertexNormali1.y;
		normals[i1 * 3 + 2] = vertexNormali1.z;
		normals[i2 * 3] = vertexNormali2.x;
		normals[i2 * 3 + 1] = vertexNormali2.y;
		normals[i2 * 3 + 2] = vertexNormali2.z;
		normals[i3 * 3] = vertexNormali3.x;
		normals[i3 * 3 + 1] = vertexNormali3.y;
		normals[i3 * 3 + 2] = vertexNormali3.z;
	}
	var len = normals.length / 3 | 0;
	var _g1 = 0;
	while(_g1 < len) {
		var index2 = _g1++;
		vertexNormali1.x = normals[index2 * 3];
		vertexNormali1.y = normals[index2 * 3 + 1];
		vertexNormali1.z = normals[index2 * 3 + 2];
		vertexNormali1.normalize();
		normals[index2 * 3] = vertexNormali1.x;
		normals[index2 * 3 + 1] = vertexNormali1.y;
		normals[index2 * 3 + 2] = vertexNormali1.z;
	}
};
com_babylonhx_mesh_VertexData._ComputeSides = function(sideOrientation,positions,indices,normals,uvs) {
	if(sideOrientation == null) sideOrientation = 0;
	var li = indices.length;
	var ln = normals.length;
	switch(sideOrientation) {
	case 0:
		break;
	case 1:
		var tmp = 0;
		var i = 0;
		while(i < li) {
			tmp = indices[i];
			indices[i] = indices[i + 2];
			indices[i + 2] = tmp;
			i += 3;
		}
		var _g = 0;
		while(_g < ln) {
			var n = _g++;
			normals[n] = -normals[n];
		}
		break;
	case 2:
		var lp = positions.length;
		var l = lp / 3 | 0;
		var _g1 = 0;
		while(_g1 < lp) {
			var p = _g1++;
			positions[lp + p] = positions[p];
		}
		var i1 = 0;
		while(i1 < li) {
			indices[i1 + li] = indices[i1 + 2] + l;
			indices[i1 + 1 + li] = indices[i1 + 1] + l;
			indices[i1 + 2 + li] = indices[i1] + l;
			i1 += 3;
		}
		var _g2 = 0;
		while(_g2 < ln) {
			var n1 = _g2++;
			normals[ln + n1] = -normals[n1];
		}
		var lu = uvs.length;
		var _g3 = 0;
		while(_g3 < lu) {
			var u = _g3++;
			uvs[u + lu] = uvs[u];
		}
		break;
	}
};
com_babylonhx_mesh_VertexData.prototype = {
	positions: null
	,normals: null
	,uvs: null
	,uv2s: null
	,uv3s: null
	,uv4s: null
	,uv5s: null
	,uv6s: null
	,colors: null
	,matricesIndices: null
	,matricesWeights: null
	,indices: null
	,set: function(data,kind) {
		switch(kind) {
		case "position":
			this.positions = data;
			break;
		case "normal":
			this.normals = data;
			break;
		case "uv":
			this.uvs = data;
			break;
		case "uv2":
			this.uv2s = data;
			break;
		case "uv3":
			this.uv3s = data;
			break;
		case "uv4":
			this.uv4s = data;
			break;
		case "uv5":
			this.uv5s = data;
			break;
		case "uv6":
			this.uv6s = data;
			break;
		case "color":
			this.colors = data;
			break;
		case "matricesIndices":
			this.matricesIndices = data;
			break;
		case "matricesWeights":
			this.matricesWeights = data;
			break;
		default:
		}
	}
	,applyToMesh: function(mesh,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(mesh,updatable);
	}
	,applyToGeometry: function(geometry,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(geometry,updatable);
	}
	,updateMesh: function(mesh,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(mesh);
	}
	,updateGeometry: function(geometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(geometry);
	}
	,_applyTo: function(meshOrGeometry,updatable) {
		if(updatable == null) updatable = false;
		if(this.positions != null) meshOrGeometry.setVerticesData("position",this.positions,updatable);
		if(this.normals != null) meshOrGeometry.setVerticesData("normal",this.normals,updatable);
		if(this.uvs != null) meshOrGeometry.setVerticesData("uv",this.uvs,updatable);
		if(this.uv2s != null) meshOrGeometry.setVerticesData("uv2",this.uv2s,updatable);
		if(this.uv3s != null) meshOrGeometry.setVerticesData("uv3",this.uv3s,updatable);
		if(this.uv4s != null) meshOrGeometry.setVerticesData("uv4",this.uv4s,updatable);
		if(this.uv5s != null) meshOrGeometry.setVerticesData("uv5",this.uv5s,updatable);
		if(this.uv6s != null) meshOrGeometry.setVerticesData("uv6",this.uv6s,updatable);
		if(this.colors != null) meshOrGeometry.setVerticesData("color",this.colors,updatable);
		if(this.matricesIndices != null) meshOrGeometry.setVerticesData("matricesIndices",this.matricesIndices,updatable);
		if(this.matricesWeights != null) meshOrGeometry.setVerticesData("matricesWeights",this.matricesWeights,updatable);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,_update: function(meshOrGeometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(this.positions != null) meshOrGeometry.updateVerticesData("position",this.positions,updateExtends,makeItUnique);
		if(this.normals != null) meshOrGeometry.updateVerticesData("normal",this.normals,updateExtends,makeItUnique);
		if(this.uvs != null) meshOrGeometry.updateVerticesData("uv",this.uvs,updateExtends,makeItUnique);
		if(this.uv2s != null) meshOrGeometry.updateVerticesData("uv2",this.uv2s,updateExtends,makeItUnique);
		if(this.uv3s != null) meshOrGeometry.updateVerticesData("uv3",this.uv3s,updateExtends,makeItUnique);
		if(this.uv4s != null) meshOrGeometry.updateVerticesData("uv4",this.uv4s,updateExtends,makeItUnique);
		if(this.uv5s != null) meshOrGeometry.updateVerticesData("uv5",this.uv5s,updateExtends,makeItUnique);
		if(this.uv6s != null) meshOrGeometry.updateVerticesData("uv6",this.uv6s,updateExtends,makeItUnique);
		if(this.colors != null) meshOrGeometry.updateVerticesData("color",this.colors,updateExtends,makeItUnique);
		if(this.matricesIndices != null) meshOrGeometry.updateVerticesData("matricesIndices",this.matricesIndices,updateExtends,makeItUnique);
		if(this.matricesWeights != null) meshOrGeometry.updateVerticesData("matricesWeights",this.matricesWeights,updateExtends,makeItUnique);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,transform: function(matrix) {
		if(this.positions != null) {
			var position = new com_babylonhx_math_Vector3(0,0,0);
			var index = 0;
			while(index < this.positions.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.positions,index,position);
				com_babylonhx_math_Vector3.TransformCoordinatesToRef(position,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.positions[index] = com_babylonhx_mesh_VertexData.transformed.x;
				this.positions[index + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.positions[index + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index += 3;
			}
		}
		if(this.normals != null) {
			var normal = new com_babylonhx_math_Vector3(0,0,0);
			var index1 = 0;
			while(index1 < this.normals.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.normals,index1,normal);
				com_babylonhx_math_Vector3.TransformNormalToRef(normal,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.normals[index1] = com_babylonhx_mesh_VertexData.transformed.x;
				this.normals[index1 + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.normals[index1 + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index1 += 3;
			}
		}
	}
	,merge: function(other) {
		if(other.indices != null) {
			if(this.indices == null) this.indices = [];
			var offset;
			offset = (this.positions == null?this.positions.length / 3:0) | 0;
			var _g1 = 0;
			var _g = other.indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.indices.push(other.indices[index] + offset);
			}
		}
		if(other.positions != null) {
			if(this.positions == null) this.positions = [];
			var _g11 = 0;
			var _g2 = other.positions.length;
			while(_g11 < _g2) {
				var index1 = _g11++;
				this.positions.push(other.positions[index1]);
			}
		}
		if(other.normals != null) {
			if(this.normals == null) this.normals = [];
			var _g12 = 0;
			var _g3 = other.normals.length;
			while(_g12 < _g3) {
				var index2 = _g12++;
				this.normals.push(other.normals[index2]);
			}
		}
		if(other.uvs != null) {
			if(this.uvs == null) this.uvs = [];
			var _g13 = 0;
			var _g4 = other.uvs.length;
			while(_g13 < _g4) {
				var index3 = _g13++;
				this.uvs.push(other.uvs[index3]);
			}
		}
		if(other.uv2s != null) {
			if(this.uv2s == null) this.uv2s = [];
			var _g14 = 0;
			var _g5 = other.uv2s.length;
			while(_g14 < _g5) {
				var index4 = _g14++;
				this.uv2s.push(other.uv2s[index4]);
			}
		}
		if(other.uv3s != null) {
			if(this.uv3s == null) this.uv3s = [];
			var _g15 = 0;
			var _g6 = other.uv3s.length;
			while(_g15 < _g6) {
				var index5 = _g15++;
				this.uv3s.push(other.uv3s[index5]);
			}
		}
		if(other.uv4s != null) {
			if(this.uv4s == null) this.uv4s = [];
			var _g16 = 0;
			var _g7 = other.uv4s.length;
			while(_g16 < _g7) {
				var index6 = _g16++;
				this.uv4s.push(other.uv4s[index6]);
			}
		}
		if(other.uv5s != null) {
			if(this.uv5s == null) this.uv5s = [];
			var _g17 = 0;
			var _g8 = other.uv5s.length;
			while(_g17 < _g8) {
				var index7 = _g17++;
				this.uv5s.push(other.uv5s[index7]);
			}
		}
		if(other.uv6s != null) {
			if(this.uv6s == null) this.uv6s = [];
			var _g18 = 0;
			var _g9 = other.uv6s.length;
			while(_g18 < _g9) {
				var index8 = _g18++;
				this.uv6s.push(other.uv6s[index8]);
			}
		}
		if(other.matricesIndices != null) {
			if(this.matricesIndices == null) this.matricesIndices = [];
			var _g19 = 0;
			var _g10 = other.matricesIndices.length;
			while(_g19 < _g10) {
				var index9 = _g19++;
				this.matricesIndices.push(other.matricesIndices[index9]);
			}
		}
		if(other.matricesWeights != null) {
			if(this.matricesWeights == null) this.matricesWeights = [];
			var _g110 = 0;
			var _g20 = other.matricesWeights.length;
			while(_g110 < _g20) {
				var index10 = _g110++;
				this.matricesWeights.push(other.matricesWeights[index10]);
			}
		}
		if(other.colors != null) {
			if(this.colors == null) this.colors = [];
			var _g111 = 0;
			var _g21 = other.colors.length;
			while(_g111 < _g21) {
				var index11 = _g111++;
				this.colors.push(other.colors[index11]);
			}
		}
	}
	,__class__: com_babylonhx_mesh_VertexData
};
var com_babylonhx_mesh_Mesh = $hx_exports.BABYLON.Mesh = function(name,scene,parent,source,doNotCloneChildren) {
	if(doNotCloneChildren == null) doNotCloneChildren = false;
	this.cap = 0;
	this._areNormalsFrozen = false;
	this._sideOrientation = 0;
	this._preActivateId = -1;
	this._instancesBufferSize = 2048;
	this._batchCache = new com_babylonhx_mesh__$InstancesBatch();
	this._renderIdForInstances = [];
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._LODLevels = [];
	this.instances = [];
	this.delayLoadState = 0;
	com_babylonhx_mesh_AbstractMesh.call(this,name,scene);
	if(source != null) {
		if(source._geometry != null) source._geometry.applyToMesh(this);
		com_babylonhx_mesh_Mesh._deepCopy(source,this);
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = scene.meshes[index];
				if(mesh.parent == source) {
					var newChild = mesh.clone(name + "." + mesh.name,this,doNotCloneChildren);
				}
			}
		}
		var _g11 = 0;
		var _g2 = scene.particleSystems.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var system = scene.particleSystems[index1];
			if(system.emitter == source) system.clone(system.name,this);
		}
		this.computeWorldMatrix(true);
	}
	if(parent != null) this.parent = parent;
};
$hxClasses["com.babylonhx.mesh.Mesh"] = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_Mesh.__name__ = ["com","babylonhx","mesh","Mesh"];
com_babylonhx_mesh_Mesh.__interfaces__ = [com_babylonhx_animations_IAnimatable,com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Mesh._deepCopy = function(source,dest) {
	dest.__smartArrayFlags = source.__smartArrayFlags.slice();
	dest._LODLevels = source._LODLevels.slice();
	dest._absolutePosition = source._absolutePosition.clone();
	dest._batchCache = source._batchCache;
	dest._boundingInfo = source._boundingInfo;
	dest._cache = source._cache;
	dest._checkCollisions = source._checkCollisions;
	dest._childrenFlag = source._childrenFlag;
	dest._collider = source._collider;
	dest.instances = source.instances.slice();
	dest._collisionsScalingMatrix = source._collisionsScalingMatrix.clone();
	dest._collisionsTransformMatrix = source._collisionsTransformMatrix.clone();
	dest._diffPositionForCollisions = source._diffPositionForCollisions.clone();
	dest._geometry = source._geometry;
	dest._instancesBufferSize = source._instancesBufferSize;
	dest._intersectionsInProgress = source._intersectionsInProgress.slice();
	dest._isBlocked = source._isBlocked;
	dest._isDirty = source._isDirty;
	dest._isDisposed = source._isDisposed;
	dest._isEnabled = source._isEnabled;
	dest._isPickable = source._isPickable;
	dest._isReady = source._isReady;
	dest._localBillboard = source._localBillboard.clone();
	dest._localPivotScaling = source._localPivotScaling.clone();
	dest._localRotation = source._localRotation.clone();
	dest._localScaling = source._localScaling.clone();
	dest._localTranslation = source._localTranslation.clone();
	dest._localWorld = source._localWorld;
	dest._masterMesh = source._masterMesh;
	dest._material = source._material;
	dest._newPositionForCollisions = source._newPositionForCollisions.clone();
	dest._oldPositionForCollisions = source._oldPositionForCollisions.clone();
	dest._onAfterRenderCallbacks = source._onAfterRenderCallbacks;
	dest._onAfterWorldMatrixUpdate = source._onAfterWorldMatrixUpdate;
	dest._onBeforeRenderCallbacks = source._onBeforeRenderCallbacks;
	dest._parentRenderId = source._parentRenderId;
	dest._physicImpostor = source._physicImpostor;
	dest._physicRestitution = source._physicRestitution;
	dest._physicsFriction = source._physicsFriction;
	dest._physicsMass = source._physicsMass;
	dest._pivotMatrix = source._pivotMatrix.clone();
	if(source._positions != null) dest._positions = source._positions.slice();
	dest._preActivateId = source._preActivateId;
	dest._receiveShadows = source._receiveShadows;
	dest._renderId = source._renderId;
	dest._renderIdForInstances = source._renderIdForInstances.slice();
	dest._rotateYByPI = source._rotateYByPI.clone();
	dest._savedMaterial = source._savedMaterial;
	dest._scene = source._scene;
	dest._shouldGenerateFlatShading = source._shouldGenerateFlatShading;
	dest._submeshesOctree = source._submeshesOctree;
	dest._visibility = source._visibility;
	dest._visibleInstances = source._visibleInstances;
	dest._waitingActions = source._waitingActions;
	dest._waitingParentId = source._waitingParentId;
	dest._worldMatricesInstancesBuffer = source._worldMatricesInstancesBuffer;
	dest._worldMatrix = source._worldMatrix.clone();
	dest.definedFacingForward = source.definedFacingForward;
	dest.position = source.position.clone();
	dest.rotation = source.rotation.clone();
	if(source.rotationQuaternion != null) dest.rotationQuaternion = source.rotationQuaternion.clone();
	dest.scaling = source.scaling.clone();
	dest.billboardMode = source.billboardMode;
	dest.alphaIndex = source.alphaIndex;
	dest.infiniteDistance = source.infiniteDistance;
	dest.isVisible = source.isVisible;
	dest.showBoundingBox = source.showBoundingBox;
	dest.showSubMeshesBoundingBox = source.showSubMeshesBoundingBox;
	dest.onDispose = source.onDispose;
	dest.isBlocker = source.isBlocker;
	dest.renderingGroupId = source.renderingGroupId;
	dest.actionManager = source.actionManager;
	dest.renderOutline = source.renderOutline;
	dest.outlineColor = source.outlineColor.clone();
	dest.outlineWidth = source.outlineWidth;
	dest.renderOverlay = source.renderOverlay;
	dest.overlayColor = source.overlayColor.clone();
	dest.overlayAlpha = source.overlayAlpha;
	dest.hasVertexAlpha = source.hasVertexAlpha;
	dest.useVertexColors = source.useVertexColors;
	dest.applyFog = source.applyFog;
	dest.useOctreeForRenderingSelection = source.useOctreeForRenderingSelection;
	dest.useOctreeForPicking = source.useOctreeForPicking;
	dest.useOctreeForCollisions = source.useOctreeForCollisions;
	dest.layerMask = source.layerMask;
	dest.ellipsoid = source.ellipsoid.clone();
	dest.ellipsoidOffset = source.ellipsoidOffset.clone();
};
com_babylonhx_mesh_Mesh.CreateRibbon = function(name,pathArray,closeArray,closePath,offset,scene,updatable,sideOrientation,ribbonInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(closePath == null) closePath = false;
	if(closeArray == null) closeArray = false;
	if(ribbonInstance != null) {
		var positionFunction = function(positions) {
			var minlg = pathArray[0].length;
			var i = 0;
			var ns;
			if(ribbonInstance._sideOrientation == 2) ns = 2; else ns = 1;
			var _g1 = 1;
			var _g = ns + 1;
			while(_g1 < _g) {
				var si = _g1++;
				var _g3 = 0;
				var _g2 = pathArray.length;
				while(_g3 < _g2) {
					var p = _g3++;
					var path = pathArray[p];
					var l = path.length;
					if(minlg < l) minlg = minlg; else minlg = l;
					var j = 0;
					while(j < minlg) {
						positions[i] = path[j].x;
						positions[i + 1] = path[j].y;
						positions[i + 2] = path[j].z;
						j++;
						i += 3;
					}
				}
			}
		};
		var computeNormals = !ribbonInstance._areNormalsFrozen;
		ribbonInstance.updateMeshPositions(positionFunction,computeNormals);
		return ribbonInstance;
	} else {
		var ribbon = new com_babylonhx_mesh_Mesh(name,scene);
		ribbon._sideOrientation = sideOrientation;
		sideOrientation;
		var vertexData = com_babylonhx_mesh_VertexData.CreateRibbon(pathArray,closeArray,closePath,offset,sideOrientation);
		vertexData.applyToMesh(ribbon,updatable);
		return ribbon;
	}
};
com_babylonhx_mesh_Mesh.CreateDisc = function(name,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var disc = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateDisc(radius,tessellation,sideOrientation);
	vertexData.applyToMesh(disc,updatable);
	return disc;
};
com_babylonhx_mesh_Mesh.CreateBox = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var box = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateBox(size,sideOrientation);
	vertexData.applyToMesh(box,updatable);
	return box;
};
com_babylonhx_mesh_Mesh.CreateSphere = function(name,segments,diameter,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var sphere = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateSphere(segments,diameter,sideOrientation);
	vertexData.applyToMesh(sphere,updatable);
	return sphere;
};
com_babylonhx_mesh_Mesh.CreateCylinder = function(name,height,diameterTop,diameterBottom,tessellation,subdivisions,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var cylinder = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateCylinder(height,diameterTop,diameterBottom,tessellation,subdivisions,sideOrientation);
	vertexData.applyToMesh(cylinder,updatable);
	return cylinder;
};
com_babylonhx_mesh_Mesh.CreateTorus = function(name,diameter,thickness,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var torus = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorus(diameter,thickness,tessellation,sideOrientation);
	vertexData.applyToMesh(torus,updatable);
	return torus;
};
com_babylonhx_mesh_Mesh.CreateTorusKnot = function(name,radius,tube,radialSegments,tubularSegments,p,q,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var torusKnot = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorusKnot(radius,tube,radialSegments,tubularSegments,p,q,sideOrientation);
	vertexData.applyToMesh(torusKnot,updatable);
	return torusKnot;
};
com_babylonhx_mesh_Mesh.CreateLines = function(name,points,scene,updatable,linesInstance) {
	if(updatable == null) updatable = false;
	if(linesInstance != null) {
		var positionsOfLines = function(points1) {
			var positionFunction = function(positions) {
				var i = 0;
				var _g1 = 0;
				var _g = points1.length;
				while(_g1 < _g) {
					var p = _g1++;
					positions[i] = points1[p].x;
					positions[i + 1] = points1[p].y;
					positions[i + 2] = points1[p].z;
					i += 3;
				}
			};
			return positionFunction;
		};
		var positionFunction1 = positionsOfLines(points);
		linesInstance.updateMeshPositions(positionFunction1,false);
		return linesInstance;
	}
	var lines = new com_babylonhx_mesh_LinesMesh(name,scene,updatable);
	var vertexData = com_babylonhx_mesh_VertexData.CreateLines(points);
	vertexData.applyToMesh(lines,updatable);
	return lines;
};
com_babylonhx_mesh_Mesh.ExtrudeShape = function(name,shape,path,scale,rotation,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var extruded = com_babylonhx_mesh_Mesh._ExtrudeShapeGeneric(name,shape,path,scale,rotation,null,null,false,false,cap,false,scene,updatable,sideOrientation,extrudedInstance);
	return extruded;
};
com_babylonhx_mesh_Mesh.ExtrudeShapeCustom = function(name,shape,path,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(ribbonClosePath == null) ribbonClosePath = false;
	if(ribbonCloseArray == null) ribbonCloseArray = false;
	var extrudedCustom = com_babylonhx_mesh_Mesh._ExtrudeShapeGeneric(name,shape,path,null,null,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,true,scene,updatable,sideOrientation,extrudedInstance);
	return extrudedCustom;
};
com_babylonhx_mesh_Mesh._ExtrudeShapeGeneric = function(name,shape,curve,scale,rotation,scaleFunction,rotateFunction,rbCA,rbCP,cap,custom,scene,updtbl,side,instance) {
	var extrusionPathArray = function(shape1,curve1,path3D,shapePaths,scale1,rotation1,scaleFunction1,rotateFunction1,cap1,custom1) {
		if(custom1 == null) custom1 = false;
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var binormals = path3D.getBinormals();
		var distances = path3D.getDistances();
		var angle = 0;
		var returnScale = function(i,distance) {
			return scale1;
		};
		var returnRotation = function(i1,distance1) {
			return rotation1;
		};
		var rotate;
		if(rotateFunction1 != null) rotate = rotateFunction1; else rotate = returnRotation;
		var scl;
		if(scaleFunction1 != null) scl = scaleFunction1; else scl = returnScale;
		var index = 0;
		var _g12 = 0;
		var _g3 = curve1.length;
		while(_g12 < _g3) {
			var i4 = _g12++;
			var shapePath1 = [];
			var angleStep = rotate(i4,distances[i4]);
			var scaleRatio = scl(i4,distances[i4]);
			var _g31 = 0;
			var _g21 = shape1.length;
			while(_g31 < _g21) {
				var p = _g31++;
				var rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i4],angle);
				var planed = tangents[i4].scale(shape1[p].z).add(normals[i4].scale(shape1[p].x)).add(binormals[i4].scale(shape1[p].y));
				var rotated = com_babylonhx_math_Vector3.TransformCoordinates(planed,rotationMatrix).scaleInPlace(scaleRatio).add(curve1[i4]);
				shapePath1.push(rotated);
			}
			shapePaths[index] = shapePath1;
			angle += angleStep;
			index++;
		}
		var capPath = function(shapePath) {
			var pointCap = [];
			var barycenter = new com_babylonhx_math_Vector3(0,0,0);
			var _g1 = 0;
			var _g = shapePath.length;
			while(_g1 < _g) {
				var i2 = _g1++;
				barycenter.addInPlace(shapePath[i2]);
			}
			barycenter.scaleInPlace(1 / shapePath.length);
			var _g11 = 0;
			var _g2 = shapePath.length;
			while(_g11 < _g2) {
				var i3 = _g11++;
				pointCap.push(barycenter);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			shapePaths.unshift(capPath(shapePaths[0]));
			break;
		case 2:
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		case 3:
			shapePaths.unshift(capPath(shapePaths[0]));
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		default:
		}
		return shapePaths;
	};
	if(instance != null) {
		var path3D2 = instance.path3D.update(curve);
		var pathArray1 = extrusionPathArray(shape,curve,instance.path3D,instance.pathArray,scale,rotation,scaleFunction,rotateFunction,instance.cap,custom);
		instance = com_babylonhx_mesh_Mesh.CreateRibbon(null,pathArray1,null,null,null,null,null,null,instance);
		return instance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(curve);
	var newShapePaths = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = extrusionPathArray(shape,curve,path3D1,newShapePaths,scale,rotation,scaleFunction,rotateFunction,cap,custom);
	var extrudedGeneric = com_babylonhx_mesh_Mesh.CreateRibbon(name,pathArray,rbCA,rbCP,0,scene,updtbl,side);
	extrudedGeneric.pathArray = pathArray;
	extrudedGeneric.path3D = path3D1;
	extrudedGeneric.cap = cap;
	return extrudedGeneric;
};
com_babylonhx_mesh_Mesh.CreateLathe = function(name,shape,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(tessellation == null) tessellation = 0;
	if(radius == null) radius = 1;
	if(tessellation > 0) tessellation = tessellation; else tessellation = radius * 60 | 0;
	var pi2 = Math.PI * 2;
	var Y = com_babylonhx_math_Axis.Y;
	var shapeLathe = [];
	var i = 0;
	while(shape[i].x == 0) i++;
	var pt = shape[i];
	var _g1 = 0;
	var _g = shape.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		shapeLathe.push(shape[i1].subtract(pt));
	}
	var step = pi2 / tessellation;
	var rotated = null;
	var path = [];
	var _g2 = 0;
	while(_g2 < tessellation) {
		var i2 = _g2++;
		rotated = new com_babylonhx_math_Vector3(Math.cos(i2 * step) * radius,0,Math.sin(i2 * step) * radius);
		path.push(rotated);
	}
	path.push(path[0]);
	var scaleFunction = function(dummy1,dummy2) {
		if(dummy2 == null) dummy2 = 0;
		if(dummy1 == null) dummy1 = 0;
		return 1;
	};
	var rotateFunction = function(dummy11,dummy21) {
		if(dummy21 == null) dummy21 = 0;
		if(dummy11 == null) dummy11 = 0;
		return 0;
	};
	var lathe = com_babylonhx_mesh_Mesh.ExtrudeShapeCustom(name,shapeLathe,path,scaleFunction,rotateFunction,true,false,0,scene,updatable,sideOrientation);
	return lathe;
};
com_babylonhx_mesh_Mesh.CreatePlane = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var plane = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreatePlane(size,sideOrientation);
	vertexData.applyToMesh(plane,updatable);
	return plane;
};
com_babylonhx_mesh_Mesh.CreateGround = function(name,width,height,subdivisions,scene,updatable) {
	if(updatable == null) updatable = false;
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground._setReady(false);
	ground.set_subdivisions(subdivisions);
	var vertexData = com_babylonhx_mesh_VertexData.CreateGround(width,height,subdivisions);
	vertexData.applyToMesh(ground,updatable);
	ground._setReady(true);
	return ground;
};
com_babylonhx_mesh_Mesh.CreateTiledGround = function(name,xmin,zmin,xmax,zmax,subdivisions,precision,scene,updatable) {
	if(updatable == null) updatable = false;
	var tiledGround = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTiledGround(xmin,zmin,xmax,zmax,subdivisions,precision);
	vertexData.applyToMesh(tiledGround,updatable);
	return tiledGround;
};
com_babylonhx_mesh_Mesh.CreateGroundFromHeightMap = function(name,url,width,height,subdivisions,minHeight,maxHeight,scene,updatable,onReady) {
	if(updatable == null) updatable = false;
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground.set_subdivisions(subdivisions);
	ground._setReady(false);
	var onload = function(img) {
		var vertexData = com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap(width,height,subdivisions,minHeight,maxHeight,img.data,img.width,img.height);
		vertexData.applyToMesh(ground,updatable);
		ground._setReady(true);
		if(onReady != null) onReady(ground);
	};
	com_babylonhx_tools_Tools.LoadImage(url,onload);
	return ground;
};
com_babylonhx_mesh_Mesh.CreateTube = function(name,path,radius,tessellation,radiusFunction,cap,scene,updatable,sideOrientation,tubeInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var tubePathArray = function(path1,path3D,circlePaths,radius1,tessellation1,radiusFunction1,cap1) {
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var distances = path3D.getDistances();
		var pi2 = Math.PI * 2;
		var step = pi2 / tessellation1;
		var returnRadius = function(i,distance) {
			return radius1;
		};
		var radiusFunctionFinal;
		if(radiusFunction1 != null) radiusFunctionFinal = radiusFunction1; else radiusFunctionFinal = returnRadius;
		var circlePath = [];
		var rad = 0;
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var rotated = new com_babylonhx_math_Vector3(0,0,0);
		var rotationMatrix;
		var index = 0;
		var _g1 = 0;
		var _g2 = path1.length;
		while(_g1 < _g2) {
			var i2 = _g1++;
			rad = radiusFunctionFinal(i2,distances[i2]);
			circlePath = [];
			normal = normals[i2];
			var ang = 0.0;
			var _g21 = 0;
			while(_g21 < tessellation1) {
				var t = _g21++;
				rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i2],step * t);
				rotated = com_babylonhx_math_Vector3.TransformCoordinates(normal,rotationMatrix).scaleInPlace(rad).add(path1[i2]);
				circlePath.push(rotated);
			}
			circlePath.push(circlePath[0]);
			circlePaths[index] = circlePath;
			index++;
		}
		var capPath = function(nbPoints,pathIndex) {
			var pointCap = [];
			var _g = 0;
			while(_g < nbPoints) {
				var i1 = _g++;
				pointCap.push(path1[pathIndex]);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			break;
		case 2:
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		case 3:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		default:
		}
		return circlePaths;
	};
	if(tubeInstance != null) {
		var path3D2 = tubeInstance.path3D.update(path);
		var pathArray1 = tubePathArray(path,path3D2,tubeInstance.pathArray,radius,tubeInstance.tessellation,radiusFunction,tubeInstance.cap);
		tubeInstance = com_babylonhx_mesh_Mesh.CreateRibbon(null,pathArray1,null,null,null,null,null,null,tubeInstance);
		return tubeInstance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(path);
	var newPathArray = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = tubePathArray(path,path3D1,newPathArray,radius,tessellation,radiusFunction,cap);
	var tube = com_babylonhx_mesh_Mesh.CreateRibbon(name,pathArray,false,true,0,scene,updatable,sideOrientation);
	tube.pathArray = pathArray;
	tube.path3D = path3D1;
	tube.tessellation = tessellation;
	tube.cap = cap;
	return tube;
};
com_babylonhx_mesh_Mesh.CreateDecal = function(name,sourceMesh,position,normal,size,angle) {
	if(angle == null) angle = 0;
	com_babylonhx_mesh_Mesh.CreateDecal_indices = sourceMesh.getIndices();
	com_babylonhx_mesh_Mesh.CreateDecal_positions = sourceMesh.getVerticesData("position");
	com_babylonhx_mesh_Mesh.CreateDecal_normals = sourceMesh.getVerticesData("normal");
	if(normal == null) {
		var camera = sourceMesh._scene.activeCamera;
		com_babylonhx_mesh_Mesh.CreateDecal_cameraWorldTarget = com_babylonhx_math_Vector3.TransformCoordinates(com_babylonhx_mesh_Mesh.CreateDecal_target,camera.getWorldMatrix());
		normal = camera.get_globalPosition().subtract(com_babylonhx_mesh_Mesh.CreateDecal_cameraWorldTarget);
	}
	var yaw = -Math.atan2(normal.z,normal.x) - Math.PI / 2;
	var len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);
	var pitch = Math.atan2(normal.y,len);
	com_babylonhx_mesh_Mesh.decalWorldMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle).multiply(com_babylonhx_math_Matrix.Translation(position.x,position.y,position.z));
	com_babylonhx_mesh_Mesh.inverseDecalWorldMatrix = com_babylonhx_math_Matrix.Invert(com_babylonhx_mesh_Mesh.decalWorldMatrix);
	com_babylonhx_mesh_Mesh.CreateDecal_meshWorldMatrix = sourceMesh.getWorldMatrix();
	com_babylonhx_mesh_Mesh.CreateDecal_transformMatrix = com_babylonhx_mesh_Mesh.CreateDecal_meshWorldMatrix.multiply(com_babylonhx_mesh_Mesh.inverseDecalWorldMatrix);
	com_babylonhx_mesh_Mesh.CreateDecal_vertexData.indices = [];
	com_babylonhx_mesh_Mesh.CreateDecal_vertexData.positions = [];
	com_babylonhx_mesh_Mesh.CreateDecal_vertexData.normals = [];
	com_babylonhx_mesh_Mesh.CreateDecal_vertexData.uvs = [];
	var currentCreateDecal_vertexDataIndex = 0;
	var extractDecalVector3 = function(indexId) {
		var vertexId = com_babylonhx_mesh_Mesh.CreateDecal_indices[indexId];
		var result = new com_babylonhx_math_PositionNormalVertex();
		result.position = new com_babylonhx_math_Vector3(com_babylonhx_mesh_Mesh.CreateDecal_positions[vertexId * 3],com_babylonhx_mesh_Mesh.CreateDecal_positions[vertexId * 3 + 1],com_babylonhx_mesh_Mesh.CreateDecal_positions[vertexId * 3 + 2]);
		result.position = com_babylonhx_math_Vector3.TransformCoordinates(result.position,com_babylonhx_mesh_Mesh.CreateDecal_transformMatrix);
		result.normal = new com_babylonhx_math_Vector3(com_babylonhx_mesh_Mesh.CreateDecal_normals[vertexId * 3],com_babylonhx_mesh_Mesh.CreateDecal_normals[vertexId * 3 + 1],com_babylonhx_mesh_Mesh.CreateDecal_normals[vertexId * 3 + 2]);
		return result;
	};
	var clip = function(vertices,axis) {
		if(vertices.length == 0) return vertices;
		var clipSize = 0.5 * Math.abs(size.x * axis.x + size.y * axis.y + size.z * axis.z);
		var clipVertices = function(v0,v1) {
			var clipFactor = com_babylonhx_math_Vector3.GetClipFactor(v0.position,v1.position,axis,clipSize);
			return new com_babylonhx_math_PositionNormalVertex(com_babylonhx_math_Vector3.Lerp(v0.position,v1.position,clipFactor),com_babylonhx_math_Vector3.Lerp(v0.normal,v1.normal,clipFactor));
		};
		var result1 = [];
		var v1Out = false;
		var v2Out = false;
		var v3Out = false;
		var total = 0;
		var nV1 = null;
		var nV2 = null;
		var nV3 = null;
		var nV4 = null;
		var d1 = 0.0;
		var d2 = 0.0;
		var d3 = 0.0;
		var index = 0;
		while(index < vertices.length) {
			d1 = com_babylonhx_math_Vector3.Dot(vertices[index].position,axis) - clipSize;
			d2 = com_babylonhx_math_Vector3.Dot(vertices[index + 1].position,axis) - clipSize;
			d3 = com_babylonhx_math_Vector3.Dot(vertices[index + 2].position,axis) - clipSize;
			v1Out = d1 > 0;
			v2Out = d2 > 0;
			v3Out = d3 > 0;
			total = (v1Out?1:0) + (v2Out?1:0) + (v3Out?1:0);
			switch(total) {
			case 0:
				result1.push(vertices[index]);
				result1.push(vertices[index + 1]);
				result1.push(vertices[index + 2]);
				break;
			case 1:
				if(v1Out) {
					nV1 = vertices[index + 1];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index],nV1);
					nV4 = clipVertices(vertices[index],nV2);
				}
				if(v2Out) {
					nV1 = vertices[index];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index + 1],nV1);
					nV4 = clipVertices(vertices[index + 1],nV2);
					result1.push(nV3);
					result1.push(nV2.clone());
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3.clone());
					result1.push(nV4);
				} else {
					if(v3Out) {
						nV1 = vertices[index];
						nV2 = vertices[index + 1];
						nV3 = clipVertices(vertices[index + 2],nV1);
						nV4 = clipVertices(vertices[index + 2],nV2);
					}
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3);
					result1.push(nV4);
					result1.push(nV3.clone());
					result1.push(nV2.clone());
				}
				break;
			case 2:
				if(!v1Out) {
					nV1 = vertices[index].clone();
					nV2 = clipVertices(nV1,vertices[index + 1]);
					nV3 = clipVertices(nV1,vertices[index + 2]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v2Out) {
					nV1 = vertices[index + 1].clone();
					nV2 = clipVertices(nV1,vertices[index + 2]);
					nV3 = clipVertices(nV1,vertices[index]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v3Out) {
					nV1 = vertices[index + 2].clone();
					nV2 = clipVertices(nV1,vertices[index]);
					nV3 = clipVertices(nV1,vertices[index + 1]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				break;
			case 3:
				break;
			}
			index += 3;
		}
		return result1;
	};
	var faceVertices = [];
	var index1 = 0;
	while(index1 < com_babylonhx_mesh_Mesh.CreateDecal_indices.length) {
		faceVertices = [];
		faceVertices.push(extractDecalVector3(index1));
		faceVertices.push(extractDecalVector3(index1 + 1));
		faceVertices.push(extractDecalVector3(index1 + 2));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(-1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,-1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,1));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,-1));
		if(faceVertices.length == 0) {
			index1 += 3;
			continue;
		}
		var localRotationMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle);
		var vertex = null;
		var _g1 = 0;
		var _g = faceVertices.length;
		while(_g1 < _g) {
			var vIndex = _g1++;
			vertex = faceVertices[vIndex];
			com_babylonhx_mesh_Mesh.CreateDecal_vertexData.indices.push(currentCreateDecal_vertexDataIndex);
			vertex.position.toArray(com_babylonhx_mesh_Mesh.CreateDecal_vertexData.positions,currentCreateDecal_vertexDataIndex * 3);
			vertex.normal.toArray(com_babylonhx_mesh_Mesh.CreateDecal_vertexData.normals,currentCreateDecal_vertexDataIndex * 3);
			com_babylonhx_mesh_Mesh.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.x / size.x);
			com_babylonhx_mesh_Mesh.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.y / size.y);
			currentCreateDecal_vertexDataIndex++;
		}
		index1 += 3;
	}
	var decal = new com_babylonhx_mesh_Mesh(name,sourceMesh._scene);
	com_babylonhx_mesh_Mesh.CreateDecal_vertexData.applyToMesh(decal);
	decal.position = new com_babylonhx_math_Vector3(position.x,position.y,position.z);
	decal.rotation = new com_babylonhx_math_Vector3(pitch,yaw,angle);
	return decal;
};
com_babylonhx_mesh_Mesh.MinMax = function(meshes) {
	var minVector = null;
	var maxVector = null;
	var _g = 0;
	while(_g < meshes.length) {
		var i = meshes[_g];
		++_g;
		var mesh = i;
		var boundingBox = mesh.getBoundingInfo().boundingBox;
		if(minVector == null) {
			minVector = boundingBox.minimumWorld;
			maxVector = boundingBox.maximumWorld;
			continue;
		}
		minVector.MinimizeInPlace(boundingBox.minimumWorld);
		maxVector.MaximizeInPlace(boundingBox.maximumWorld);
	}
	return { minimum : minVector, maximum : maxVector};
};
com_babylonhx_mesh_Mesh.Center = function(meshesOrMinMaxVector) {
	var minMaxVector;
	if(meshesOrMinMaxVector.min != null) minMaxVector = meshesOrMinMaxVector; else minMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshesOrMinMaxVector);
	return com_babylonhx_math_Vector3.Center(minMaxVector.minimum,minMaxVector.maximum);
};
com_babylonhx_mesh_Mesh.MergeMeshes = function(meshes,disposeSource,allow32BitsIndices,meshSubclass) {
	if(allow32BitsIndices == null) allow32BitsIndices = false;
	if(disposeSource == null) disposeSource = true;
	if(!allow32BitsIndices) {
		var totalVertices = 0;
		var _g1 = 0;
		var _g = meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(meshes[index] != null) {
				totalVertices += meshes[index].getTotalVertices();
				if(totalVertices > 65536) {
					haxe_Log.trace("Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices",{ fileName : "Mesh.hx", lineNumber : 2001, className : "com.babylonhx.mesh.Mesh", methodName : "MergeMeshes"});
					return null;
				}
			}
		}
	}
	var vertexData = null;
	var otherVertexData = null;
	var source = null;
	var _g11 = 0;
	var _g2 = meshes.length;
	while(_g11 < _g2) {
		var index1 = _g11++;
		if(meshes[index1] != null) {
			meshes[index1].computeWorldMatrix(true);
			otherVertexData = com_babylonhx_mesh_VertexData.ExtractFromMesh(meshes[index1],true);
			otherVertexData.transform(meshes[index1].getWorldMatrix());
			if(vertexData != null) vertexData.merge(otherVertexData); else {
				vertexData = otherVertexData;
				source = meshes[index1];
			}
		}
	}
	if(meshSubclass == null) meshSubclass = new com_babylonhx_mesh_Mesh(source.name + "_merged",source._scene);
	vertexData.applyToMesh(meshSubclass);
	meshSubclass.set_material(source.get_material());
	meshSubclass.set_checkCollisions(source.get_checkCollisions());
	if(disposeSource) {
		var _g12 = 0;
		var _g3 = meshes.length;
		while(_g12 < _g3) {
			var index2 = _g12++;
			if(meshes[index2] != null) meshes[index2].dispose();
		}
	}
	return meshSubclass;
};
com_babylonhx_mesh_Mesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_Mesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	delayLoadState: null
	,instances: null
	,delayLoadingFile: null
	,_binaryInfo: null
	,_LODLevels: null
	,onLODLevelSelection: null
	,_geometry: null
	,_onBeforeRenderCallbacks: null
	,_onAfterRenderCallbacks: null
	,_delayInfo: null
	,_delayLoadingFunction: null
	,_visibleInstances: null
	,_renderIdForInstances: null
	,_batchCache: null
	,_worldMatricesInstancesBuffer: null
	,_worldMatricesInstancesArray: null
	,_instancesBufferSize: null
	,_shouldGenerateFlatShading: null
	,_preActivateId: null
	,_sideOrientation: null
	,_areNormalsFrozen: null
	,cap: null
	,rigidBody: null
	,path3D: null
	,pathArray: null
	,tessellation: null
	,get_hasLODLevels: function() {
		return this._LODLevels.length > 0;
	}
	,_sortLODLevels: function() {
		this._LODLevels.sort(function(a,b) {
			if(a.distance < b.distance) return 1;
			if(a.distance > b.distance) return -1;
			return 0;
		});
	}
	,addLODLevel: function(distance,mesh) {
		if(mesh != null && mesh._masterMesh != null) {
			haxe_Log.trace("You cannot use a mesh as LOD level twice",{ fileName : "Mesh.hx", lineNumber : 254, className : "com.babylonhx.mesh.Mesh", methodName : "addLODLevel"});
			return this;
		}
		var level = new com_babylonhx_mesh_MeshLODLevel(distance,mesh);
		this._LODLevels.push(level);
		if(mesh != null) mesh._masterMesh = this;
		this._sortLODLevels();
		return this;
	}
	,getLODLevelAtDistance: function(distance) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance == distance) return level.mesh;
		}
		return null;
	}
	,removeLODLevel: function(mesh) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._LODLevels[index].mesh == mesh) {
				this._LODLevels.splice(index,1);
				if(mesh != null) mesh._masterMesh = null;
			}
		}
		this._sortLODLevels();
		return this;
	}
	,getLOD: function(camera,boundingSphere) {
		if(this._LODLevels == null || this._LODLevels.length == 0) return this;
		var distanceToCamera = (boundingSphere != null?boundingSphere:this.getBoundingInfo().boundingSphere).centerWorld.subtract(camera.position).length();
		if(this._LODLevels[this._LODLevels.length - 1].distance > distanceToCamera) {
			if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this._LODLevels[this._LODLevels.length - 1].mesh);
			return this;
		}
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance < distanceToCamera) {
				if(level.mesh != null) {
					level.mesh._preActivate();
					level.mesh._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
				}
				if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,level.mesh);
				return level.mesh;
			}
		}
		if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this);
		return this;
	}
	,getTotalVertices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalVertices();
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return null;
		return this._geometry.getVerticesData(kind,copyWhenShared);
	}
	,getVertexBuffer: function(kind) {
		if(this._geometry == null) return null;
		return this._geometry.getVertexBuffer(kind);
	}
	,isVerticesDataPresent: function(kind) {
		if(this._geometry == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._geometry.isVerticesDataPresent(kind);
	}
	,getVerticesDataKinds: function() {
		if(this._geometry == null) {
			var result = [];
			if(this._delayInfo != null) {
				var _g = 0;
				var _g1 = this._delayInfo;
				while(_g < _g1.length) {
					var kind = _g1[_g];
					++_g;
					result.push(kind);
				}
			}
			return result;
		}
		return this._geometry.getVerticesDataKinds();
	}
	,getTotalIndices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalIndices();
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return [];
		return this._geometry.getIndices(copyWhenShared);
	}
	,get_isBlocked: function() {
		return this._masterMesh != null;
	}
	,isReady: function() {
		if(this.delayLoadState == 2) return false;
		return com_babylonhx_mesh_AbstractMesh.prototype.isReady.call(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,get_sideOrientation: function() {
		return this._sideOrientation;
	}
	,get_areNormalsFrozen: function() {
		return this._areNormalsFrozen;
	}
	,set_sideOrientation: function(value) {
		this._sideOrientation = value;
		return value;
	}
	,freezeNormals: function() {
		this._areNormalsFrozen = true;
	}
	,unfreezeNormals: function() {
		this._areNormalsFrozen = false;
	}
	,_preActivate: function() {
		var sceneRenderId = this._scene._renderId;
		if(this._preActivateId == sceneRenderId) return;
		this._preActivateId = sceneRenderId;
		this._visibleInstances = null;
	}
	,_registerInstanceForRenderId: function(instance,renderId) {
		if(this._visibleInstances == null) this._visibleInstances = new com_babylonhx_mesh__$VisibleInstances(renderId,this._renderId);
		if(!this._visibleInstances.map.h.hasOwnProperty(renderId)) this._visibleInstances.map.h[renderId] = [];
		this._visibleInstances.map.h[renderId].push(instance);
	}
	,refreshBoundingInfo: function() {
		var data = this.getVerticesData("position");
		if(data != null) {
			var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this.getTotalVertices());
			this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
		}
		if(this.subMeshes != null) {
			var _g1 = 0;
			var _g = this.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.subMeshes[index].refreshBoundingInfo();
			}
		}
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_createGlobalSubMesh: function() {
		var totalVertices = this.getTotalVertices();
		if(totalVertices == 0 || this.getIndices() == null) return null;
		this.releaseSubMeshes();
		return new com_babylonhx_mesh_SubMesh(0,0,totalVertices,0,this.getTotalIndices(),this);
	}
	,subdivide: function(count) {
		if(count < 1) return;
		var totalIndices = this.getTotalIndices();
		var subdivisionSize = totalIndices / count | 0;
		var offset = 0;
		while(subdivisionSize % 3 != 0) subdivisionSize++;
		this.releaseSubMeshes();
		var _g = 0;
		while(_g < count) {
			var index = _g++;
			if(offset >= totalIndices) break;
			com_babylonhx_mesh_SubMesh.CreateFromIndices(0,offset,Std["int"](Math.min(subdivisionSize,totalIndices - offset)),this);
			offset += subdivisionSize;
		}
		this.synchronizeInstances();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.set(data,kind);
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,updatable,this);
		} else this._geometry.setVerticesData(kind,data,updatable,stride);
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesData(kind,data,updateExtends); else {
			this.makeGeometryUnique();
			this.updateVerticesData(kind,data,updateExtends,false);
		}
	}
	,updateVerticesDataDirectly: function(kind,data,offset,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(offset == null) offset = 0;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesDataDirectly(kind,data,offset); else {
			this.makeGeometryUnique();
			this.updateVerticesDataDirectly(kind,data,offset,false);
		}
	}
	,updateMeshPositions: function(positionFunction,computeNormals) {
		if(computeNormals == null) computeNormals = true;
		var positions = this.getVerticesData("position");
		positionFunction(positions);
		this.updateVerticesData("position",positions,false,false);
		if(computeNormals) {
			var indices = this.getIndices();
			var normals = this.getVerticesData("normal");
			com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
			this.updateVerticesData("normal",normals,false,false);
		}
	}
	,makeGeometryUnique: function() {
		if(this._geometry == null) return;
		var geometry = this._geometry.copy(com_babylonhx_mesh_Geometry.RandomId());
		geometry.applyToMesh(this);
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.indices = indices;
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,false,this);
		} else this._geometry.setIndices(indices);
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexBufferToBind = null;
		switch(fillMode) {
		case 2:
			indexBufferToBind = null;
			break;
		case 1:
			indexBufferToBind = subMesh.getLinesIndexBuffer(this.getIndices(),engine);
			break;
		case 0:
			indexBufferToBind = this._geometry.getIndexBuffer();
			break;
		default:
			indexBufferToBind = this._geometry.getIndexBuffer();
		}
		engine.bindMultiBuffers(this._geometry.getVertexBuffers(),indexBufferToBind,effect);
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		switch(fillMode) {
		case 2:
			engine.drawPointClouds(subMesh.verticesStart,subMesh.verticesCount,instancesCount);
			break;
		case 1:
			engine.draw(false,0,subMesh.linesIndexCount,instancesCount);
			break;
		default:
			engine.draw(true,subMesh.indexStart,subMesh.indexCount,instancesCount);
		}
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		var index = HxOverrides.indexOf(this._onBeforeRenderCallbacks,func,0);
		if(index > -1) this._onBeforeRenderCallbacks.splice(index,1);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		var index = HxOverrides.indexOf(this._onAfterRenderCallbacks,func,0);
		if(index > -1) this._onAfterRenderCallbacks.splice(index,1);
	}
	,_getInstancesRenderList: function(subMeshId) {
		var scene = this._scene;
		this._batchCache.mustReturn = false;
		this._batchCache.renderSelf[subMeshId] = this.isEnabled() && this.isVisible;
		this._batchCache.visibleInstances[subMeshId] = null;
		if(this._visibleInstances != null) {
			var currentRenderId = scene._renderId;
			this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[currentRenderId];
			var selfRenderId = this._renderId;
			if(this._batchCache.visibleInstances[subMeshId] == null && this._visibleInstances.defaultRenderId > 0) {
				this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[this._visibleInstances.defaultRenderId];
				currentRenderId = Math.max(this._visibleInstances.defaultRenderId,currentRenderId);
				selfRenderId = Math.max(this._visibleInstances.selfDefaultRenderId,currentRenderId);
			}
			if(this._batchCache.visibleInstances[subMeshId] != null && this._batchCache.visibleInstances[subMeshId].length > 0) {
				if(this._renderIdForInstances[subMeshId] == currentRenderId) {
					this._batchCache.mustReturn = true;
					return this._batchCache;
				}
				if(currentRenderId != selfRenderId) this._batchCache.renderSelf[subMeshId] = false;
			}
			this._renderIdForInstances[subMeshId] = currentRenderId;
		}
		return this._batchCache;
	}
	,_renderWithInstances: function(subMesh,fillMode,batch,effect,engine) {
		var visibleInstances = batch.visibleInstances[subMesh._id];
		var matricesCount = visibleInstances.length + 1;
		var bufferSize = matricesCount * 16 * 4;
		while(this._instancesBufferSize < bufferSize) this._instancesBufferSize *= 2;
		if(this._worldMatricesInstancesBuffer == null || this._worldMatricesInstancesBuffer.capacity < this._instancesBufferSize) {
			if(this._worldMatricesInstancesBuffer != null) engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = engine.createInstancesBuffer(this._instancesBufferSize);
			var elements = this._instancesBufferSize / 4 | 0;
			var len = null;
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._worldMatricesInstancesArray = this1;
		}
		var offset = 0;
		var instancesCount = 0;
		var world = this.getWorldMatrix();
		if(batch.renderSelf[subMesh._id]) {
			world.copyToArray(this._worldMatricesInstancesArray,offset);
			offset += 16;
			instancesCount++;
		}
		if(visibleInstances != null) {
			var _g1 = 0;
			var _g = visibleInstances.length;
			while(_g1 < _g) {
				var instanceIndex = _g1++;
				var instance = visibleInstances[instanceIndex];
				instance.getWorldMatrix().copyToArray(this._worldMatricesInstancesArray,offset);
				offset += 16;
				instancesCount++;
			}
		}
		var offsetLocation0 = effect.getAttributeLocationByName("world0");
		var offsetLocation1 = effect.getAttributeLocationByName("world1");
		var offsetLocation2 = effect.getAttributeLocationByName("world2");
		var offsetLocation3 = effect.getAttributeLocationByName("world3");
		var offsetLocations = [offsetLocation0,offsetLocation1,offsetLocation2,offsetLocation3];
		engine.updateAndBindInstancesBuffer(this._worldMatricesInstancesBuffer,this._worldMatricesInstancesArray,offsetLocations);
		this._draw(subMesh,fillMode,instancesCount);
		engine.unBindInstancesBuffer(this._worldMatricesInstancesBuffer,offsetLocations);
	}
	,_processRendering: function(subMesh,effect,fillMode,batch,hardwareInstancedRendering,onBeforeDraw) {
		var scene = this._scene;
		var engine = scene._engine;
		if(hardwareInstancedRendering) this._renderWithInstances(subMesh,fillMode,batch,effect,engine); else {
			if(batch.renderSelf[subMesh._id]) {
				if(onBeforeDraw != null) onBeforeDraw(false,this.getWorldMatrix());
				this._draw(subMesh,fillMode);
			}
			if(batch.visibleInstances[subMesh._id] != null) {
				var _g1 = 0;
				var _g = batch.visibleInstances[subMesh._id].length;
				while(_g1 < _g) {
					var instanceIndex = _g1++;
					var instance = batch.visibleInstances[subMesh._id][instanceIndex];
					var world = instance.getWorldMatrix();
					if(onBeforeDraw != null) onBeforeDraw(true,world);
					this._draw(subMesh,fillMode);
				}
			}
		}
	}
	,render: function(subMesh) {
		var scene = this._scene;
		var batch = this._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var _g1 = 0;
		var _g = this._onBeforeRenderCallbacks.length;
		while(_g1 < _g) {
			var callbackIndex = _g1++;
			this._onBeforeRenderCallbacks[callbackIndex](this);
		}
		var engine = scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null && (batch.visibleInstances.length > subMesh._id && batch.visibleInstances[subMesh._id] != null);
		var effectiveMaterial = subMesh.getMaterial();
		if(effectiveMaterial == null || !effectiveMaterial.isReady(this,hardwareInstancedRendering)) return;
		var savedDepthWrite = engine._depthCullingState.get_depthMask();
		if(this.renderOutline) {
			engine._depthCullingState.set_depthMask(false);
			scene._outlineRenderer.render(subMesh,batch);
			engine._depthCullingState.set_depthMask(savedDepthWrite);
		}
		effectiveMaterial._preBind();
		var effect = effectiveMaterial.getEffect();
		var fillMode;
		if(scene.forcePointsCloud) fillMode = com_babylonhx_materials_Material.PointFillMode; else if(scene.forceWireframe) fillMode = com_babylonhx_materials_Material.WireFrameFillMode; else fillMode = effectiveMaterial.get_fillMode();
		this._bind(subMesh,effect,fillMode);
		var world = this.getWorldMatrix();
		effectiveMaterial.bind(world,this);
		this._processRendering(subMesh,effect,fillMode,batch,hardwareInstancedRendering,function(isInstance,world1) {
			if(isInstance) effectiveMaterial.bindOnlyWorldMatrix(world1);
		});
		effectiveMaterial.unbind();
		if(this.renderOutline && savedDepthWrite) {
			engine._depthCullingState.set_depthMask(true);
			snow_modules_opengl_web_GL.colorMask(false,false,false,false);
			scene._outlineRenderer.render(subMesh,batch);
			snow_modules_opengl_web_GL.colorMask(true,true,true,true);
		}
		if(this.renderOverlay) {
			var currentMode = engine._alphaMode;
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
			scene._outlineRenderer.render(subMesh,batch,true);
			switch(currentMode) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = currentMode;
		}
		var _g11 = 0;
		var _g2 = this._onAfterRenderCallbacks.length;
		while(_g11 < _g2) {
			var callbackIndex1 = _g11++;
			this._onAfterRenderCallbacks[callbackIndex1](this);
		}
	}
	,getEmittedParticleSystems: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if(particleSystem.emitter == this) results.push(particleSystem);
		}
		return results;
	}
	,getHierarchyEmittedParticleSystems: function() {
		var results = [];
		var descendants = this.getDescendants();
		descendants.push(this);
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if((function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(descendants,x,0);
				return $r;
			}(this)) != -1) results.push(particleSystem);
		}
		return results;
	}
	,getChildren: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this._scene.meshes[index];
			if(mesh.parent == this) results.push(mesh);
		}
		return results;
	}
	,_checkDelayState: function() {
		var that = this;
		var scene = this._scene;
		if(this._geometry != null) this._geometry.load(scene); else if(that.delayLoadState == 4) {
			that.delayLoadState = 2;
			scene._addPendingData(that);
			var getBinaryData = this.delayLoadingFile.indexOf(".babylonbinarymeshdata") != -1;
		}
	}
	,isInFrustum: function(frustumPlanes) {
		if(this.delayLoadState == 2) return false;
		if(!com_babylonhx_mesh_AbstractMesh.prototype.isInFrustum.call(this,frustumPlanes)) return false;
		this._checkDelayState();
		return true;
	}
	,setMaterialByID: function(id) {
		var materials = this._scene.materials;
		var _g1 = 0;
		var _g = materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(materials[index].id == id) {
				this.set_material(materials[index]);
				return;
			}
		}
		var multiMaterials = this._scene.multiMaterials;
		var _g11 = 0;
		var _g2 = multiMaterials.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			if(multiMaterials[index1].id == id) {
				this.set_material(multiMaterials[index1]);
				return;
			}
		}
	}
	,getAnimatables: function() {
		var results = [];
		if(this.get_material() != null) results.push(this.get_material());
		if(this.get_skeleton() != null) results.push(this.get_skeleton());
		return results;
	}
	,bakeTransformIntoVertices: function(transform) {
		if(!this.isVerticesDataPresent("position")) return;
		this._positions = null;
		var data = this.getVerticesData("position");
		var temp = [];
		var index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("position",temp,this.getVertexBuffer("position").isUpdatable());
		if(!this.isVerticesDataPresent("normal")) return;
		data = this.getVerticesData("normal");
		temp = [];
		index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformNormal(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).normalize().toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("normal",temp,this.getVertexBuffer("normal").isUpdatable());
		if(transform.m[0] * transform.m[5] * transform.m[10] < 0) this.flipFaces();
	}
	,bakeCurrentTransformIntoVertices: function() {
		this.bakeTransformIntoVertices(this.computeWorldMatrix(true));
		this.scaling.copyFromFloats(1,1,1);
		this.position.copyFromFloats(0,0,0);
		this.rotation.copyFromFloats(0,0,0);
		if(this.rotationQuaternion != null) this.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
		this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,_resetPointsArrayCache: function() {
		this._positions = null;
	}
	,_generatePointsArray: function() {
		if(this._positions != null) return true;
		this._positions = [];
		var data = this.getVerticesData("position");
		if(data == null) return false;
		var index = 0;
		while(index < data.length) {
			this._positions.push(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]));
			index += 3;
		}
		return true;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return new com_babylonhx_mesh_Mesh(name,this._scene,newParent,this,doNotCloneChildren);
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._geometry != null) this._geometry.releaseForMesh(this,true);
		if(this._worldMatricesInstancesBuffer != null) {
			this._scene._engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = null;
		}
		while(this.instances.length > 0) this.instances[0].dispose();
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,applyDisplacementMap: function(url,minHeight,maxHeight,onSuccess,invert) {
		if(invert == null) invert = false;
		var _g = this;
		var scene = this._scene;
		var onload = function(img) {
			_g.applyDisplacementMapFromBuffer(img.data,img.width,img.height,minHeight,maxHeight,invert);
			if(onSuccess != null) onSuccess(_g);
		};
		com_babylonhx_tools_Tools.LoadImage(url,onload);
	}
	,applyDisplacementMapFromBuffer: function(buffer,heightMapWidth,heightMapHeight,minHeight,maxHeight,invert) {
		if(invert == null) invert = false;
		if(!this.isVerticesDataPresent("position") || !this.isVerticesDataPresent("normal") || !this.isVerticesDataPresent("uv")) {
			haxe_Log.trace("Cannot call applyDisplacementMap:Given mesh is not complete. Position, Normal or UV are missing",{ fileName : "Mesh.hx", lineNumber : 1095, className : "com.babylonhx.mesh.Mesh", methodName : "applyDisplacementMapFromBuffer"});
			return;
		}
		var positions = this.getVerticesData("position");
		var normals = this.getVerticesData("normal");
		var uvs = this.getVerticesData("uv");
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var uv = new com_babylonhx_math_Vector2(0,0);
		var index = 0;
		while(index < positions.length) {
			position.x = positions[index];
			position.y = positions[index + 1];
			position.z = positions[index + 2];
			normal.x = normals[index];
			normal.y = normals[index + 1];
			normal.z = normals[index + 2];
			com_babylonhx_math_Vector2.FromArrayToRef(uvs,index / 3 * 2 | 0,uv);
			var u = Std["int"](Math.abs(uv.x) * heightMapWidth % heightMapWidth);
			var v = Std["int"](Math.abs(uv.y) * heightMapHeight % heightMapHeight);
			var pos = (u + v * heightMapWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			normal.normalize();
			normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);
			if(invert) {
				normal.x *= -1;
				normal.y *= -1;
				normal.z *= -1;
				normal;
			}
			position = new com_babylonhx_math_Vector3(position.x + normal.x,position.y + normal.y,position.z + normal.z);
			positions[index] = position.x;
			positions[index + 1] = position.y;
			positions[index + 2] = position.z;
			index += 3;
		}
		com_babylonhx_mesh_VertexData.ComputeNormals(positions,this.getIndices(),normals);
		this.updateVerticesData("position",positions);
		this.updateVerticesData("normal",normals);
	}
	,convertToFlatShadedMesh: function() {
		var kinds = this.getVerticesDataKinds();
		var vbs = new haxe_ds_StringMap();
		var data = new haxe_ds_StringMap();
		var newdata = new haxe_ds_StringMap();
		var updatableNormals = false;
		var kindIndex = 0;
		while(kindIndex < kinds.length) {
			var kind = kinds[kindIndex];
			var vertexBuffer = this.getVertexBuffer(kind);
			if(kind == "normal") {
				updatableNormals = vertexBuffer._updatable;
				kinds.splice(kindIndex,1);
				kindIndex--;
				continue;
			}
			{
				if(__map_reserved[kind] != null) vbs.setReserved(kind,vertexBuffer); else vbs.h[kind] = vertexBuffer;
				vertexBuffer;
			}
			var v = (__map_reserved[kind] != null?vbs.getReserved(kind):vbs.h[kind]).getData();
			if(__map_reserved[kind] != null) data.setReserved(kind,v); else data.h[kind] = v;
			v;
			var v1 = [];
			if(__map_reserved[kind] != null) newdata.setReserved(kind,v1); else newdata.h[kind] = v1;
			v1;
			kindIndex++;
		}
		var previousSubmeshes = this.subMeshes.slice(0);
		var indices = this.getIndices();
		var totalIndices = this.getTotalIndices();
		var _g = 0;
		while(_g < totalIndices) {
			var index1 = _g++;
			var vertexIndex = indices[index1];
			var _g2 = 0;
			var _g1 = kinds.length;
			while(_g2 < _g1) {
				var kindIndex1 = _g2++;
				var kind1 = kinds[kindIndex1];
				var stride = (__map_reserved[kind1] != null?vbs.getReserved(kind1):vbs.h[kind1]).getStrideSize();
				var _g3 = 0;
				while(_g3 < stride) {
					var offset = _g3++;
					(__map_reserved[kind1] != null?newdata.getReserved(kind1):newdata.h[kind1]).push((__map_reserved[kind1] != null?data.getReserved(kind1):data.h[kind1])[vertexIndex * stride + offset]);
				}
			}
		}
		var normals = [];
		var positions;
		positions = __map_reserved.position != null?newdata.getReserved("position"):newdata.h["position"];
		var index = 0;
		while(index < totalIndices) {
			indices[index] = index;
			indices[index + 1] = index + 1;
			indices[index + 2] = index + 2;
			var p1 = com_babylonhx_math_Vector3.FromArray(positions,index * 3);
			var p2 = com_babylonhx_math_Vector3.FromArray(positions,(index + 1) * 3);
			var p3 = com_babylonhx_math_Vector3.FromArray(positions,(index + 2) * 3);
			var p1p2 = new com_babylonhx_math_Vector3(p1.x - p2.x,p1.y - p2.y,p1.z - p2.z);
			var p3p2 = new com_babylonhx_math_Vector3(p3.x - p2.x,p3.y - p2.y,p3.z - p2.z);
			var normal = com_babylonhx_math_Vector3.Normalize(com_babylonhx_math_Vector3.Cross(p1p2,p3p2));
			var _g4 = 0;
			while(_g4 < 3) {
				var localIndex = _g4++;
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
			}
			index += 3;
		}
		this.setIndices(indices);
		this.setVerticesData("normal",normals,updatableNormals);
		var _g11 = 0;
		var _g5 = kinds.length;
		while(_g11 < _g5) {
			var kindIndex2 = _g11++;
			var kind2 = kinds[kindIndex2];
			this.setVerticesData(kind2,__map_reserved[kind2] != null?newdata.getReserved(kind2):newdata.h[kind2],(__map_reserved[kind2] != null?vbs.getReserved(kind2):vbs.h[kind2]).isUpdatable());
		}
		this.releaseSubMeshes();
		var _g12 = 0;
		var _g6 = previousSubmeshes.length;
		while(_g12 < _g6) {
			var submeshIndex = _g12++;
			var previousOne = previousSubmeshes[submeshIndex];
			var subMesh = new com_babylonhx_mesh_SubMesh(previousOne.materialIndex,previousOne.indexStart,previousOne.indexCount,previousOne.indexStart,previousOne.indexCount,this);
		}
		this.synchronizeInstances();
	}
	,flipFaces: function(flipNormals) {
		if(flipNormals == null) flipNormals = false;
		var vertex_data = com_babylonhx_mesh_VertexData.ExtractFromMesh(this);
		if(flipNormals && this.isVerticesDataPresent("normal")) {
			var _g1 = 0;
			var _g = vertex_data.normals.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				vertex_data.normals[i1] *= -1;
			}
		}
		var temp = 0;
		var i = 0;
		while(i < vertex_data.indices.length) {
			temp = vertex_data.indices[i + 1];
			vertex_data.indices[i + 1] = vertex_data.indices[i + 2];
			vertex_data.indices[i + 2] = temp;
			i += 3;
		}
		vertex_data.applyToMesh(this);
	}
	,createInstance: function(name) {
		return new com_babylonhx_mesh_InstancedMesh(name,this);
	}
	,synchronizeInstances: function() {
		var _g1 = 0;
		var _g = this.instances.length;
		while(_g1 < _g) {
			var instanceIndex = _g1++;
			var instance = this.instances[instanceIndex];
			instance._syncSubMeshes();
		}
	}
	,simplify: function(settings,parallelProcessing,simplificationType,successCallback) {
		if(simplificationType == null) simplificationType = 0;
		if(parallelProcessing == null) parallelProcessing = true;
		this._scene.simplificationQueue.addTask(new com_babylonhx_mesh_simplification_SimplificationTask(settings,simplificationType,this,successCallback,parallelProcessing));
	}
	,optimizeIndices: function(successCallback) {
		var _g = this;
		var indices = this.getIndices();
		var positions = this.getVerticesData("position");
		var vectorPositions = [];
		var pos = 0;
		while(pos < positions.length) {
			vectorPositions.push(new com_babylonhx_math_Vector3(positions[pos],positions[pos + 1],positions[pos + 2]));
			pos += 3;
		}
		var dupes = [];
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(vectorPositions.length,40,function(iteration) {
			var realPos = vectorPositions.length - 1 - iteration;
			var testedPosition = vectorPositions[realPos];
			var _g1 = 0;
			while(_g1 < realPos) {
				var j = _g1++;
				var againstPosition = vectorPositions[j];
				if(againstPosition != null && testedPosition.x == againstPosition.x && testedPosition.y == againstPosition.y && testedPosition.z == againstPosition.z) {
					dupes[realPos] = j;
					break;
				}
			}
		},function() {
			var _g11 = 0;
			var _g2 = indices.length;
			while(_g11 < _g2) {
				var i = _g11++;
				indices[i] = dupes[indices[i]];
			}
			var originalSubMeshes = _g.subMeshes.slice(0);
			_g.setIndices(indices);
			_g.subMeshes = originalSubMeshes;
			if(successCallback != null) successCallback(_g);
		});
	}
	,__class__: com_babylonhx_mesh_Mesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_hasLODLevels:"get_hasLODLevels",get_areNormalsFrozen:"get_areNormalsFrozen",set_sideOrientation:"set_sideOrientation",get_sideOrientation:"get_sideOrientation"})
});
var com_babylonhx_mesh_SubMesh = $hx_exports.BABYLON.SubMesh = function(materialIndex,verticesStart,verticesCount,indexStart,indexCount,mesh,renderingMesh,createBoundingBox) {
	if(createBoundingBox == null) createBoundingBox = true;
	this._renderId = 0;
	this.materialIndex = materialIndex;
	this.verticesStart = verticesStart;
	this.verticesCount = verticesCount;
	this.indexStart = indexStart;
	this.indexCount = indexCount;
	this._mesh = mesh;
	if(renderingMesh != null) this._renderingMesh = renderingMesh; else this._renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	mesh.subMeshes.push(this);
	this._id = mesh.subMeshes.length - 1;
	if(createBoundingBox) {
		this.refreshBoundingInfo();
		mesh.computeWorldMatrix(true);
	}
};
$hxClasses["com.babylonhx.mesh.SubMesh"] = com_babylonhx_mesh_SubMesh;
com_babylonhx_mesh_SubMesh.__name__ = ["com","babylonhx","mesh","SubMesh"];
com_babylonhx_mesh_SubMesh.CreateFromIndices = function(materialIndex,startIndex,indexCount,mesh,renderingMesh) {
	var minVertexIndex = Infinity;
	var maxVertexIndex = -Infinity;
	if(renderingMesh != null) renderingMesh = renderingMesh; else renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	var indices = renderingMesh.getIndices();
	var _g1 = startIndex;
	var _g = startIndex + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var vertexIndex = indices[index];
		if(vertexIndex < minVertexIndex) minVertexIndex = vertexIndex;
		if(vertexIndex > maxVertexIndex) maxVertexIndex = vertexIndex;
	}
	return new com_babylonhx_mesh_SubMesh(materialIndex,minVertexIndex | 0,maxVertexIndex - minVertexIndex + 1 | 0,startIndex,indexCount,mesh,renderingMesh);
};
com_babylonhx_mesh_SubMesh.prototype = {
	linesIndexCount: null
	,_mesh: null
	,_renderingMesh: null
	,_boundingInfo: null
	,_linesIndexBuffer: null
	,_lastColliderWorldVertices: null
	,_trianglePlanes: null
	,_lastColliderTransformMatrix: null
	,__smartArrayFlags: null
	,_renderId: null
	,_alphaIndex: null
	,_distanceToCamera: null
	,_id: null
	,materialIndex: null
	,verticesStart: null
	,verticesCount: null
	,indexStart: null
	,indexCount: null
	,getBoundingInfo: function() {
		return this._boundingInfo;
	}
	,getMesh: function() {
		return this._mesh;
	}
	,getRenderingMesh: function() {
		return this._renderingMesh;
	}
	,getMaterial: function() {
		var rootMaterial = this._renderingMesh.get_material();
		if(rootMaterial != null && js_Boot.__instanceof(rootMaterial,com_babylonhx_materials_MultiMaterial)) {
			var multiMaterial = rootMaterial;
			return multiMaterial.getSubMaterial(this.materialIndex);
		}
		if(rootMaterial == null) return this._mesh._scene.defaultMaterial;
		return rootMaterial;
	}
	,refreshBoundingInfo: function() {
		var data = this._renderingMesh.getVerticesData("position");
		if(data == null) {
			this._boundingInfo = this._mesh._boundingInfo;
			return;
		}
		var indices = this._renderingMesh.getIndices();
		var extend = { minimum : -1, maximum : -1};
		if(this.indexStart == 0 && this.indexCount == indices.length) extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,this.verticesStart,this.verticesCount); else extend = com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed(data,indices,this.indexStart,this.indexCount);
		this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
	}
	,_checkCollision: function(collider) {
		return this._boundingInfo._checkCollision(collider);
	}
	,updateBoundingInfo: function(world) {
		if(this._boundingInfo == null) this.refreshBoundingInfo();
		this._boundingInfo._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,render: function() {
		this._renderingMesh.render(this);
	}
	,getLinesIndexBuffer: function(indices,engine) {
		if(this._linesIndexBuffer == null) {
			var linesIndices = [];
			var index = this.indexStart;
			while(index < this.indexStart + this.indexCount) {
				linesIndices.push(indices[index]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index]);
				index += 3;
			}
			this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);
			this.linesIndexCount = linesIndices.length;
		}
		return this._linesIndexBuffer;
	}
	,canIntersects: function(ray) {
		return ray.intersectsBox(this._boundingInfo.boundingBox);
	}
	,intersects: function(ray,positions,indices,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var intersectInfo = null;
		var index = this.indexStart;
		while(index < this.indexStart + this.indexCount) {
			var p0 = positions[indices[index]];
			var p1 = positions[indices[index + 1]];
			var p2 = positions[indices[index + 2]];
			var currentIntersectInfo = ray.intersectsTriangle(p0,p1,p2);
			if(currentIntersectInfo != null) {
				if(currentIntersectInfo.distance < 0) continue;
				if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
					intersectInfo = currentIntersectInfo;
					intersectInfo.faceId = index / 3 | 0;
					if(fastCheck) break;
				}
			}
			index += 3;
		}
		return intersectInfo;
	}
	,clone: function(newMesh,newRenderingMesh) {
		var result = new com_babylonhx_mesh_SubMesh(this.materialIndex,this.verticesStart,this.verticesCount,this.indexStart,this.indexCount,newMesh,newRenderingMesh,false);
		result._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._boundingInfo.minimum,this._boundingInfo.maximum);
		return result;
	}
	,dispose: function() {
		if(this._linesIndexBuffer != null) {
			this._mesh._scene._engine._releaseBuffer(this._linesIndexBuffer);
			this._linesIndexBuffer = null;
		}
		HxOverrides.remove(this._mesh.subMeshes,this);
	}
	,__class__: com_babylonhx_mesh_SubMesh
};
var com_babylonhx_physics_PhysicsBodyCreationOptions = $hx_exports.BABYLON.PhysicsBodyCreationOptions = function(mass,friction,restitution,name) {
	if(name == null) name = "";
	this.name = "";
	if(name != "") this.name = name; else this.name = com_babylonhx_tools_Tools.uuid();
	this.mass = mass;
	this.friction = friction;
	this.restitution = restitution;
};
$hxClasses["com.babylonhx.physics.PhysicsBodyCreationOptions"] = com_babylonhx_physics_PhysicsBodyCreationOptions;
com_babylonhx_physics_PhysicsBodyCreationOptions.__name__ = ["com","babylonhx","physics","PhysicsBodyCreationOptions"];
com_babylonhx_physics_PhysicsBodyCreationOptions.prototype = {
	name: null
	,mass: null
	,friction: null
	,restitution: null
	,__class__: com_babylonhx_physics_PhysicsBodyCreationOptions
};
var com_babylonhx_particles_ParticleSystem = $hx_exports.BABYLON.ParticleSystem = function(name,capacity,scene,customEffect) {
	this._actualFrame = 0;
	this._stopped = false;
	this._started = false;
	this._alive = true;
	this._currentRenderId = -1;
	this._scaledGravity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._colorDiff = new com_babylonhx_math_Color4(0,0,0,0);
	this._scaledColorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this._newPartsExcess = 0;
	this._stockParticles = [];
	this._vertexStrideSize = 44;
	this._vertexDeclaration = [3,4,4];
	this.particles = [];
	this.textureMask = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.colorDead = new com_babylonhx_math_Color4(0,0,0,1.0);
	this.color2 = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.color1 = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.maxEmitBox = new com_babylonhx_math_Vector3(0.5,0.5,0.5);
	this.minEmitBox = new com_babylonhx_math_Vector3(-0.5,-0.5,-0.5);
	this.direction2 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.direction1 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.gravity = new com_babylonhx_math_Vector3(0,0,0);
	this.forceDepthWrite = false;
	this.blendMode = com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE;
	this.maxAngularSpeed = 0;
	this.minAngularSpeed = 0;
	this.maxSize = 1;
	this.minSize = 1;
	this.maxLifeTime = 1;
	this.minLifeTime = 1;
	this.maxEmitPower = 1;
	this.minEmitPower = 1;
	this.disposeOnStop = false;
	this.targetStopDuration = 0;
	this.updateSpeed = 0.01;
	this.manualEmitCount = -1;
	this.emitRate = 10;
	this.emitter = null;
	this.renderingGroupId = 0;
	var _g = this;
	this.name = name;
	this.id = name;
	this._capacity = capacity;
	this._scene = scene;
	this._customEffect = customEffect;
	scene.particleSystems.push(this);
	this._vertexBuffer = scene._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g1 = 0;
	while(_g1 < capacity) {
		var count = _g1++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	this._vertices = [];
	this.startDirectionFunction = function(emitPower,worldMatrix,directionToUpdate) {
		var randX = _g.randomNumber(_g.direction1.x,_g.direction2.x);
		var randY = _g.randomNumber(_g.direction1.y,_g.direction2.y);
		var randZ = _g.randomNumber(_g.direction1.z,_g.direction2.z);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(randX * emitPower,randY * emitPower,randZ * emitPower,worldMatrix,directionToUpdate);
	};
	this.startPositionFunction = function(worldMatrix1,positionToUpdate) {
		var randX1 = _g.randomNumber(_g.minEmitBox.x,_g.maxEmitBox.x);
		var randY1 = _g.randomNumber(_g.minEmitBox.y,_g.maxEmitBox.y);
		var randZ1 = _g.randomNumber(_g.minEmitBox.z,_g.maxEmitBox.z);
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(randX1,randY1,randZ1,worldMatrix1,positionToUpdate);
	};
	this.updateFunction = function(particles) {
		var index1 = 0;
		while(index1 < particles.length) {
			var particle = particles[index1];
			particle.age += _g._scaledUpdateSpeed;
			if(particle.age >= particle.lifeTime) {
				particles.splice(index1,1);
				_g._stockParticles.push(particle);
			} else {
				particle.colorStep.scaleToRef(_g._scaledUpdateSpeed,_g._scaledColorStep);
				particle.color.addInPlace(_g._scaledColorStep);
				if(particle.color.a < 0) particle.color.a = 0;
				particle.angle += particle.angularSpeed * _g._scaledUpdateSpeed;
				particle.direction.scaleToRef(_g._scaledUpdateSpeed,_g._scaledDirection);
				particle.position.addInPlace(_g._scaledDirection);
				_g.gravity.scaleToRef(_g._scaledUpdateSpeed,_g._scaledGravity);
				particle.direction.addInPlace(_g._scaledGravity);
				index1++;
			}
		}
	};
};
$hxClasses["com.babylonhx.particles.ParticleSystem"] = com_babylonhx_particles_ParticleSystem;
com_babylonhx_particles_ParticleSystem.__name__ = ["com","babylonhx","particles","ParticleSystem"];
com_babylonhx_particles_ParticleSystem.__interfaces__ = [com_babylonhx_ISmartArrayCompatible,com_babylonhx_IDisposable];
com_babylonhx_particles_ParticleSystem.prototype = {
	name: null
	,id: null
	,renderingGroupId: null
	,emitter: null
	,emitRate: null
	,manualEmitCount: null
	,updateSpeed: null
	,targetStopDuration: null
	,disposeOnStop: null
	,__smartArrayFlags: null
	,minEmitPower: null
	,maxEmitPower: null
	,minLifeTime: null
	,maxLifeTime: null
	,minSize: null
	,maxSize: null
	,minAngularSpeed: null
	,maxAngularSpeed: null
	,particleTexture: null
	,onDispose: null
	,updateFunction: null
	,blendMode: null
	,forceDepthWrite: null
	,gravity: null
	,direction1: null
	,direction2: null
	,minEmitBox: null
	,maxEmitBox: null
	,color1: null
	,color2: null
	,colorDead: null
	,textureMask: null
	,startDirectionFunction: null
	,startPositionFunction: null
	,particles: null
	,particle: null
	,_capacity: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_stockParticles: null
	,_newPartsExcess: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_vertices: null
	,_effect: null
	,_customEffect: null
	,_cachedDefines: null
	,_scaledColorStep: null
	,_colorDiff: null
	,_scaledDirection: null
	,_scaledGravity: null
	,_currentRenderId: null
	,_alive: null
	,_started: null
	,_stopped: null
	,_actualFrame: null
	,_scaledUpdateSpeed: null
	,getCapacity: function() {
		return this._capacity;
	}
	,isAlive: function() {
		return this._alive;
	}
	,isStarted: function() {
		return this._started;
	}
	,start: function() {
		this._started = true;
		this._stopped = false;
		this._actualFrame = 0;
	}
	,stop: function() {
		this._stopped = true;
	}
	,_appendParticleVertex: function(index,particle,offsetX,offsetY) {
		var offset = index * 11;
		this._vertices[offset] = particle.position.x;
		this._vertices[offset + 1] = particle.position.y;
		this._vertices[offset + 2] = particle.position.z;
		this._vertices[offset + 3] = particle.color.r;
		this._vertices[offset + 4] = particle.color.g;
		this._vertices[offset + 5] = particle.color.b;
		this._vertices[offset + 6] = particle.color.a;
		this._vertices[offset + 7] = particle.angle;
		this._vertices[offset + 8] = particle.size;
		this._vertices[offset + 9] = offsetX;
		this._vertices[offset + 10] = offsetY;
	}
	,_update: function(newParticles) {
		this._alive = this.particles.length > 0;
		this.updateFunction(this.particles);
		var worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		if(this.emitter.position != null) worldMatrix = this.emitter.getWorldMatrix(); else worldMatrix = com_babylonhx_math_Matrix.Translation(this.emitter.x,this.emitter.y,this.emitter.z);
		var _g = 0;
		while(_g < newParticles) {
			var index = _g++;
			if(this.particles.length == this._capacity) break;
			if(this._stockParticles.length != 0) {
				this.particle = this._stockParticles.pop();
				this.particle.age = 0;
			} else this.particle = new com_babylonhx_particles_Particle();
			this.particles.push(this.particle);
			var emitPower = this.randomNumber(this.minEmitPower,this.maxEmitPower);
			this.startDirectionFunction(emitPower,worldMatrix,this.particle.direction);
			this.particle.lifeTime = this.randomNumber(this.minLifeTime,this.maxLifeTime);
			this.particle.size = this.randomNumber(this.minSize,this.maxSize);
			this.particle.angularSpeed = this.randomNumber(this.minAngularSpeed,this.maxAngularSpeed);
			this.startPositionFunction(worldMatrix,this.particle.position);
			var step = this.randomNumber(0,1.0);
			com_babylonhx_math_Color4.LerpToRef(this.color1,this.color2,step,this.particle.color);
			this.colorDead.subtractToRef(this.particle.color,this._colorDiff);
			this._colorDiff.scaleToRef(1.0 / this.particle.lifeTime,this.particle.colorStep);
		}
	}
	,_getEffect: function() {
		if(this._customEffect != null) return this._customEffect;
		var defines = [];
		if(this._scene.clipPlane != null) defines.push("#define CLIPPLANE");
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("particles",["position","color","options"],["invView","view","projection","vClipPlane","textureMask"],["diffuseSampler"],join);
		}
		return this._effect;
	}
	,animate: function() {
		if(!this._started) return;
		var effect = this._getEffect();
		if(this.emitter == null || !effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return;
		if(this._currentRenderId == this._scene._renderId) return;
		this._currentRenderId = this._scene._renderId;
		this._scaledUpdateSpeed = this.updateSpeed * this._scene._animationRatio;
		var emitCout = 0;
		if(this.manualEmitCount > -1) {
			emitCout = this.manualEmitCount;
			this.manualEmitCount = 0;
		} else emitCout = this.emitRate;
		var newParticles = emitCout * this._scaledUpdateSpeed | 0;
		this._newPartsExcess += emitCout * this._scaledUpdateSpeed - newParticles;
		if(this._newPartsExcess > 1.0) {
			newParticles += this._newPartsExcess;
			this._newPartsExcess -= this._newPartsExcess;
		}
		this._alive = false;
		if(!this._stopped) {
			this._actualFrame += this._scaledUpdateSpeed;
			if(this.targetStopDuration != 0 && this._actualFrame >= this.targetStopDuration) this.stop();
		} else newParticles = 0;
		this._update(newParticles);
		if(this._stopped) {
			if(!this._alive) {
				this._started = false;
				if(this.disposeOnStop) this._scene._toBeDisposed.push(this);
			}
		}
		var offset = 0;
		var _g1 = 0;
		var _g = this.particles.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particle = this.particles[index];
			this._appendParticleVertex(offset++,particle,0,0);
			this._appendParticleVertex(offset++,particle,1,0);
			this._appendParticleVertex(offset++,particle,1,1);
			this._appendParticleVertex(offset++,particle,0,1);
		}
		var engine = this._scene._engine;
		engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
	}
	,render: function() {
		var effect = this._getEffect();
		if(this.emitter == null || !effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return 0;
		var engine = this._scene._engine;
		engine.enableEffect(effect);
		if(engine._depthCullingState.get_cull() != false) engine._depthCullingState.set_cull(false);
		engine._depthCullingState.set_zOffset(0);
		var viewMatrix = this._scene._viewMatrix;
		effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"diffuseSampler",0),this.particleTexture);
		effect._engine.setMatrix(effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,"view",0)],viewMatrix);
		effect;
		effect._engine.setMatrix(effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,"projection",0)],this._scene._projectionMatrix);
		effect;
		effect.setFloat4("textureMask",this.textureMask.r,this.textureMask.g,this.textureMask.b,this.textureMask.a);
		if(this._scene.clipPlane != null) {
			var clipPlane = this._scene.clipPlane;
			var invView = com_babylonhx_math_Matrix.FromValues(viewMatrix.m[0],viewMatrix.m[1],viewMatrix.m[2],viewMatrix.m[3],viewMatrix.m[4],viewMatrix.m[5],viewMatrix.m[6],viewMatrix.m[7],viewMatrix.m[8],viewMatrix.m[9],viewMatrix.m[10],viewMatrix.m[11],viewMatrix.m[12],viewMatrix.m[13],viewMatrix.m[14],viewMatrix.m[15]);
			invView.invert();
			effect._engine.setMatrix(effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,"invView",0)],invView);
			effect;
			effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
		if(this.blendMode == com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE) {
			switch(1) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 1;
		} else {
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
		}
		if(this.forceDepthWrite) engine._depthCullingState.set_depthMask(true);
		engine.draw(true,0,this.particles.length * 6);
		switch(0) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 0;
		return this.particles.length;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.particleTexture != null) {
			this.particleTexture.dispose();
			this.particleTexture = null;
		}
		HxOverrides.remove(this._scene.particleSystems,this);
		if(this.onDispose != null) this.onDispose();
	}
	,clone: function(name,newEmitter) {
		var result = new com_babylonhx_particles_ParticleSystem(name,this._capacity,this._scene);
		com_babylonhx_tools_Tools.DeepCopy(this,result,["particles"],["_vertexDeclaration","_vertexStrideSize"]);
		if(newEmitter == null) newEmitter = this.emitter;
		result.emitter = newEmitter;
		if(this.particleTexture != null) result.particleTexture = new com_babylonhx_materials_textures_Texture(this.particleTexture.url,this._scene);
		result.start();
		return result;
	}
	,randomNumber: function(min,max) {
		if(min == max) return min;
		var random = Math.random();
		return random * (max - min) + min;
	}
	,__class__: com_babylonhx_particles_ParticleSystem
};
var com_babylonhx_math_Color4 = $hx_exports.BABYLON.Color4 = function(r,g,b,a) {
	if(a == null) a = 1.0;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["com.babylonhx.math.Color4"] = com_babylonhx_math_Color4;
com_babylonhx_math_Color4.__name__ = ["com","babylonhx","math","Color4"];
com_babylonhx_math_Color4.Lerp = function(left,right,amount) {
	var result = new com_babylonhx_math_Color4(0,0,0,0);
	com_babylonhx_math_Color4.LerpToRef(left,right,amount,result);
	return result;
};
com_babylonhx_math_Color4.LerpToRef = function(left,right,amount,result) {
	result.r = left.r + (right.r - left.r) * amount;
	result.g = left.g + (right.g - left.g) * amount;
	result.b = left.b + (right.b - left.b) * amount;
	result.a = left.a + (right.a - left.a) * amount;
	return result;
};
com_babylonhx_math_Color4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Color4.FromInts = function(r,g,b,a) {
	return new com_babylonhx_math_Color4(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
};
com_babylonhx_math_Color4.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,addInPlace: function(right) {
		this.r += right.r;
		this.g += right.g;
		this.b += right.b;
		this.a += right.a;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		array[index + 3] = this.a;
		return this;
	}
	,add: function(right) {
		return new com_babylonhx_math_Color4(this.r + right.r,this.g + right.g,this.b + right.b,this.a + right.a);
	}
	,subtract: function(right) {
		return new com_babylonhx_math_Color4(this.r - right.r,this.g - right.g,this.b - right.b,this.a - right.a);
	}
	,subtractToRef: function(right,result) {
		result.r = this.r - right.r;
		result.g = this.g - right.g;
		result.b = this.b - right.b;
		result.a = this.a - right.a;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color4(this.r * scale,this.g * scale,this.b * scale,this.a * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		result.a = this.a * scale;
		return this;
	}
	,toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + " A:" + this.a + "}";
	}
	,clone: function() {
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,this.a);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		this.a = source.a;
		return this;
	}
	,__class__: com_babylonhx_math_Color4
};
var com_babylonhx_mesh_Geometry = $hx_exports.BABYLON.Geometry = function(id,scene,vertexData,updatable,mesh) {
	if(updatable == null) updatable = false;
	this._delayInfo = [];
	this._isDisposed = false;
	this._indices = [];
	this._totalVertices = 0;
	this.delayLoadState = 0;
	this.id = id;
	this._engine = scene._engine;
	this._meshes = [];
	this._scene = scene;
	if(vertexData != null) this.setAllVerticesData(vertexData,updatable); else {
		this._totalVertices = 0;
		this._indices = [];
	}
	if(mesh != null) this.applyToMesh(mesh);
};
$hxClasses["com.babylonhx.mesh.Geometry"] = com_babylonhx_mesh_Geometry;
com_babylonhx_mesh_Geometry.__name__ = ["com","babylonhx","mesh","Geometry"];
com_babylonhx_mesh_Geometry.__interfaces__ = [com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Geometry.ExtractFromMesh = function(mesh,id) {
	var geometry = mesh._geometry;
	if(geometry == null) return null;
	return geometry.copy(id);
};
com_babylonhx_mesh_Geometry.RandomId = function(size) {
	if(size == null) size = 32;
	var nchars = com_babylonhx_mesh_Geometry.UID_CHARS.length;
	var uid = new StringBuf();
	var _g = 0;
	while(_g < size) {
		var i = _g++;
		uid.add(com_babylonhx_mesh_Geometry.UID_CHARS.charAt(Std["int"](Math.random() * nchars)));
	}
	return uid.b;
};
com_babylonhx_mesh_Geometry.prototype = {
	id: null
	,delayLoadState: null
	,delayLoadingFile: null
	,onGeometryUpdated: null
	,_scene: null
	,_engine: null
	,_meshes: null
	,_totalVertices: null
	,_indices: null
	,_vertexBuffers: null
	,_isDisposed: null
	,_delayInfo: null
	,_indexBuffer: null
	,_boundingInfo: null
	,_delayLoadingFunction: null
	,getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._engine;
	}
	,isReady: function() {
		return this.delayLoadState == 1 || this.delayLoadState == 0;
	}
	,setAllVerticesData: function(vertexData,updatable) {
		if(updatable == null) updatable = false;
		vertexData.applyToGeometry(this,updatable);
		this.notifyUpdate();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._vertexBuffers != null) this._vertexBuffers = this._vertexBuffers; else this._vertexBuffers = new haxe_ds_StringMap();
		if(this._vertexBuffers.exists(kind)) this._vertexBuffers.get(kind).dispose();
		var value = new com_babylonhx_mesh_VertexBuffer(this._engine,data,kind,updatable,this._meshes.length == 0,stride);
		this._vertexBuffers.set(kind,value);
		if(kind == "position") {
			stride = this._vertexBuffers.get(kind).getStrideSize();
			this._totalVertices = data.length / stride;
			var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
				mesh._createGlobalSubMesh();
				mesh.computeWorldMatrix(true);
			}
		}
		this.notifyUpdate();
	}
	,updateVerticesDataDirectly: function(kind,data,offset) {
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) {
			if(vertexBuffer._buffer != null) {
				if(vertexBuffer._updatable) {
					vertexBuffer._engine.updateDynamicVertexBuffer(vertexBuffer._buffer,data,offset);
					vertexBuffer._data = null;
				}
			}
			this.notifyUpdate();
		}
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return;
		vertexBuffer.create(data);
		if(kind == "position") {
			var extend = null;
			var stride = vertexBuffer._strideSize;
			this._totalVertices = data.length / stride;
			if(updateExtends) extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				if(updateExtends) {
					mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
					var _g2 = 0;
					var _g1 = mesh.subMeshes.length;
					while(_g2 < _g1) {
						var subIndex = _g2++;
						var subMesh = mesh.subMeshes[subIndex];
						subMesh.refreshBoundingInfo();
					}
				}
			}
		}
		this.notifyUpdate();
	}
	,getTotalVertices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._totalVertices;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return null;
		var orig = vertexBuffer._data;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getVertexBuffer: function(kind) {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers.get(kind);
	}
	,getVertexBuffers: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers;
	}
	,isVerticesDataPresent: function(kind) {
		if(this._vertexBuffers == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._vertexBuffers.get(kind) != null;
	}
	,getVerticesDataKinds: function() {
		var result = [];
		if(this._vertexBuffers == null && this._delayInfo != null) {
			var _g = 0;
			var _g1 = this._delayInfo;
			while(_g < _g1.length) {
				var kind = _g1[_g];
				++_g;
				result.push(kind);
			}
		} else {
			var $it0 = this._vertexBuffers.keys();
			while( $it0.hasNext() ) {
				var kind1 = $it0.next();
				result.push(kind1);
			}
		}
		return result;
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indices = indices;
		if(this._meshes.length != 0 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(totalVertices != -1) this._totalVertices = totalVertices;
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			meshes[index]._createGlobalSubMesh();
		}
		this.notifyUpdate();
	}
	,getTotalIndices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._indices.length;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		var orig = this._indices;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getIndexBuffer: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._indexBuffer;
	}
	,releaseForMesh: function(mesh,shouldDispose) {
		if(shouldDispose == null) shouldDispose = false;
		var meshes = this._meshes;
		var index = HxOverrides.indexOf(meshes,mesh,0);
		if(index == -1) return;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._vertexBuffers.get(key).dispose();
		}
		if(this._indexBuffer != null && this._engine._releaseBuffer(this._indexBuffer)) this._indexBuffer = null;
		meshes.splice(index,1);
		mesh._geometry = null;
		if(meshes.length == 0 && shouldDispose) this.dispose();
	}
	,applyToMesh: function(mesh) {
		if(mesh._geometry == this) return;
		var previousGeometry = mesh._geometry;
		if(previousGeometry != null) previousGeometry.releaseForMesh(mesh);
		var meshes = this._meshes;
		mesh._geometry = this;
		this._scene.pushGeometry(this);
		meshes.push(mesh);
		if(this.delayLoadState == 1 || this.delayLoadState == 0) this._applyToMesh(mesh); else mesh._boundingInfo = this._boundingInfo;
	}
	,_applyToMesh: function(mesh) {
		var numOfMeshes = this._meshes.length;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			if(numOfMeshes == 1) this._vertexBuffers.get(kind).create();
			this._vertexBuffers.get(kind)._buffer.references = numOfMeshes;
			if(kind == "position") {
				mesh._positions = null;
				var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(this._vertexBuffers.get(kind).getData(),0,this._totalVertices);
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
				mesh._createGlobalSubMesh();
				if(mesh._boundingInfo == null) mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(mesh.get_absolutePosition(),mesh.get_absolutePosition()); else mesh._boundingInfo = mesh._boundingInfo;
				mesh._boundingInfo._update(mesh.get_worldMatrixFromCache());
				mesh._updateSubMeshesBoundingInfo(mesh.get_worldMatrixFromCache());
			}
		}
		if(numOfMeshes == 1 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(this._indexBuffer != null) this._indexBuffer.references = numOfMeshes;
	}
	,notifyUpdate: function(kind) {
		if(this.onGeometryUpdated != null) this.onGeometryUpdated(this,kind);
	}
	,load: function(scene,onLoaded) {
		if(this.delayLoadState == 2) return;
		if(this.delayLoadState == 1 || this.delayLoadState == 0) {
			if(onLoaded != null) onLoaded();
			return;
		}
		this.delayLoadState = 2;
		scene._addPendingData(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,dispose: function() {
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			this.releaseForMesh(meshes[index]);
		}
		this._meshes = [];
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			this._vertexBuffers.get(kind).dispose();
		}
		this._vertexBuffers = new haxe_ds_StringMap();
		this._totalVertices = 0;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indexBuffer = null;
		this._indices = [];
		this.delayLoadState = 0;
		this.delayLoadingFile = null;
		this._delayLoadingFunction = null;
		this._delayInfo = [];
		this._boundingInfo = null;
		this._scene.removeGeometry(this);
		this._isDisposed = true;
	}
	,copy: function(id) {
		var vertexData = new com_babylonhx_mesh_VertexData();
		vertexData.indices = [];
		var indices = this.getIndices();
		var _g1 = 0;
		var _g = indices.length;
		while(_g1 < _g) {
			var index = _g1++;
			vertexData.indices.push(indices[index]);
		}
		var updatable = false;
		var stopChecking = false;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			vertexData.set((function($this) {
				var $r;
				var _this = $this.getVerticesData(kind);
				$r = _this.slice();
				return $r;
			}(this)),kind);
			if(!stopChecking) {
				updatable = this.getVertexBuffer(kind).isUpdatable();
				stopChecking = !updatable;
			}
		}
		var geometry = new com_babylonhx_mesh_Geometry(id,this._scene,vertexData,updatable,null);
		geometry.delayLoadState = this.delayLoadState;
		geometry.delayLoadingFile = this.delayLoadingFile;
		geometry._delayLoadingFunction = this._delayLoadingFunction;
		var _g2 = 0;
		var _g11 = this._delayInfo;
		while(_g2 < _g11.length) {
			var kind1 = _g11[_g2];
			++_g2;
			if(geometry._delayInfo != null) geometry._delayInfo = geometry._delayInfo; else geometry._delayInfo = [];
			geometry._delayInfo.push(kind1);
		}
		var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(this.getVerticesData("position"),0,this.getTotalVertices());
		geometry._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
		return geometry;
	}
	,__class__: com_babylonhx_mesh_Geometry
};
var com_babylonhx_mesh_primitives__$Primitive = $hx_exports.BABYLON._Primitive = function(id,scene,vertexData,canBeRegenerated,mesh) {
	if(canBeRegenerated == null) canBeRegenerated = false;
	this._beingRegenerated = true;
	this._canBeRegenerated = canBeRegenerated;
	com_babylonhx_mesh_Geometry.call(this,id,scene,vertexData,false,mesh);
	this._beingRegenerated = false;
};
$hxClasses["com.babylonhx.mesh.primitives._Primitive"] = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives__$Primitive.__name__ = ["com","babylonhx","mesh","primitives","_Primitive"];
com_babylonhx_mesh_primitives__$Primitive.__super__ = com_babylonhx_mesh_Geometry;
com_babylonhx_mesh_primitives__$Primitive.prototype = $extend(com_babylonhx_mesh_Geometry.prototype,{
	_beingRegenerated: null
	,_canBeRegenerated: null
	,canBeRegenerated: function() {
		return this._canBeRegenerated;
	}
	,regenerate: function() {
		if(!this._canBeRegenerated) return;
		this._beingRegenerated = true;
		this.setAllVerticesData(this._regenerateVertexData(),false);
		this._beingRegenerated = false;
	}
	,asNewGeometry: function(id) {
		return com_babylonhx_mesh_Geometry.prototype.copy.call(this,id);
	}
	,setAllVerticesData: function(vertexData,updatable) {
		if(updatable == null) updatable = false;
		if(!this._beingRegenerated) return;
		com_babylonhx_mesh_Geometry.prototype.setAllVerticesData.call(this,vertexData,false);
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(!this._beingRegenerated) return;
		com_babylonhx_mesh_Geometry.prototype.setVerticesData.call(this,kind,data,false,stride);
	}
	,_regenerateVertexData: function() {
		throw new js__$Boot_HaxeError("Abstract method");
	}
	,copy: function(id) {
		throw new js__$Boot_HaxeError("Must be overriden in sub-classes.");
	}
	,__class__: com_babylonhx_mesh_primitives__$Primitive
});
var com_babylonhx_mesh_primitives_Box = $hx_exports.BABYLON.Box = function(id,scene,size,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.size = size;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Box"] = com_babylonhx_mesh_primitives_Box;
com_babylonhx_mesh_primitives_Box.__name__ = ["com","babylonhx","mesh","primitives","Box"];
com_babylonhx_mesh_primitives_Box.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Box.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	size: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateBox(this.size,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Box(id,this._scene,this.size,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Box
});
var com_babylonhx_mesh_primitives_Sphere = $hx_exports.BABYLON.Sphere = function(id,scene,segments,diameter,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.segments = segments;
	this.diameter = diameter;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Sphere"] = com_babylonhx_mesh_primitives_Sphere;
com_babylonhx_mesh_primitives_Sphere.__name__ = ["com","babylonhx","mesh","primitives","Sphere"];
com_babylonhx_mesh_primitives_Sphere.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Sphere.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	segments: null
	,diameter: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateSphere(this.segments,this.diameter,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Sphere(id,this._scene,this.segments,this.diameter,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Sphere
});
var com_babylonhx_mesh_primitives_Cylinder = $hx_exports.BABYLON.Cylinder = function(id,scene,height,diameterTop,diameterBottom,tessellation,subdivisions,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	if(subdivisions == null) subdivisions = 1;
	this.height = height;
	this.diameterTop = diameterTop;
	this.diameterBottom = diameterBottom;
	this.tessellation = tessellation;
	this.subdivisions = subdivisions;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Cylinder"] = com_babylonhx_mesh_primitives_Cylinder;
com_babylonhx_mesh_primitives_Cylinder.__name__ = ["com","babylonhx","mesh","primitives","Cylinder"];
com_babylonhx_mesh_primitives_Cylinder.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Cylinder.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	height: null
	,diameterTop: null
	,diameterBottom: null
	,tessellation: null
	,subdivisions: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateCylinder(this.height,this.diameterTop,this.diameterBottom,this.tessellation,this.subdivisions,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Cylinder(id,this._scene,this.height,this.diameterTop,this.diameterBottom,this.tessellation,this.subdivisions,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Cylinder
});
var com_babylonhx_mesh_primitives_Torus = $hx_exports.BABYLON.Torus = function(id,scene,diameter,thickness,tessellation,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.diameter = diameter;
	this.thickness = thickness;
	this.tessellation = tessellation;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Torus"] = com_babylonhx_mesh_primitives_Torus;
com_babylonhx_mesh_primitives_Torus.__name__ = ["com","babylonhx","mesh","primitives","Torus"];
com_babylonhx_mesh_primitives_Torus.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Torus.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	diameter: null
	,thickness: null
	,tessellation: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateTorus(this.diameter,this.thickness,this.tessellation,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Torus(id,this._scene,this.diameter,this.thickness,this.tessellation,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Torus
});
var com_babylonhx_mesh_primitives_Ground = $hx_exports.BABYLON.Ground = function(id,scene,width,height,subdivisions,canBeRegenerated,mesh) {
	this.width = width;
	this.height = height;
	this.subdivisions = subdivisions;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Ground"] = com_babylonhx_mesh_primitives_Ground;
com_babylonhx_mesh_primitives_Ground.__name__ = ["com","babylonhx","mesh","primitives","Ground"];
com_babylonhx_mesh_primitives_Ground.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Ground.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	width: null
	,height: null
	,subdivisions: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateGround(this.width,this.height,this.subdivisions);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Ground(id,this._scene,this.width,this.height,this.subdivisions,this.canBeRegenerated(),null);
	}
	,__class__: com_babylonhx_mesh_primitives_Ground
});
var com_babylonhx_mesh_primitives_Plane = $hx_exports.BABYLON.Plane = function(id,scene,size,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.size = size;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Plane"] = com_babylonhx_mesh_primitives_Plane;
com_babylonhx_mesh_primitives_Plane.__name__ = ["com","babylonhx","mesh","primitives","Plane"];
com_babylonhx_mesh_primitives_Plane.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Plane.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	size: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreatePlane(this.size,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Plane(id,this._scene,this.size,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Plane
});
var com_babylonhx_mesh_primitives_TorusKnot = $hx_exports.BABYLON.TorusKnot = function(id,scene,radius,tube,radialSegments,tubularSegments,p,q,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.radius = radius;
	this.tube = tube;
	this.side = side;
	this.radialSegments = radialSegments;
	this.tubularSegments = tubularSegments;
	this.p = p;
	this.q = q;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.TorusKnot"] = com_babylonhx_mesh_primitives_TorusKnot;
com_babylonhx_mesh_primitives_TorusKnot.__name__ = ["com","babylonhx","mesh","primitives","TorusKnot"];
com_babylonhx_mesh_primitives_TorusKnot.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_TorusKnot.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	radius: null
	,tube: null
	,side: null
	,radialSegments: null
	,tubularSegments: null
	,p: null
	,q: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateTorusKnot(this.radius,this.tube,this.radialSegments,this.tubularSegments,this.p,this.q,this.side);
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_TorusKnot(id,this._scene,this.radius,this.tube,this.radialSegments,this.tubularSegments,this.p,this.q,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_TorusKnot
});
var com_babylonhx_postprocess_PostProcess = $hx_exports.BABYLON.PostProcess = function(name,fragmentUrl,parameters,samplers,ratio,camera,samplingMode,engine,reusable,defines,textureType) {
	if(textureType == null) textureType = 0;
	if(defines == null) defines = "";
	if(reusable == null) reusable = false;
	if(samplingMode == null) samplingMode = 1;
	this._currentRenderTextureInd = 0;
	this._textures = new com_babylonhx_tools_SmartArray(2);
	this._reusable = false;
	this.height = -1;
	this.width = -1;
	if(camera != null) {
		this._camera = camera;
		this._scene = camera._scene;
		camera.attachPostProcess(this);
		this._engine = this._scene._engine;
	} else this._engine = engine;
	this.name = name;
	this._renderRatio = ratio;
	this.renderTargetSamplingMode = samplingMode;
	this._reusable = reusable;
	this._textureType = textureType;
	if(samplers != null) samplers = samplers; else samplers = [];
	samplers.push("textureSampler");
	this._effect = this._engine.createEffect({ vertex : "postprocess", fragment : fragmentUrl},["position"],parameters != null?parameters:[],samplers,defines);
};
$hxClasses["com.babylonhx.postprocess.PostProcess"] = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PostProcess.__name__ = ["com","babylonhx","postprocess","PostProcess"];
com_babylonhx_postprocess_PostProcess.prototype = {
	name: null
	,onApply: null
	,onBeforeRender: null
	,onAfterRender: null
	,onSizeChanged: null
	,onActivate: null
	,width: null
	,height: null
	,renderTargetSamplingMode: null
	,clearColor: null
	,_camera: null
	,_scene: null
	,_engine: null
	,_renderRatio: null
	,_reusable: null
	,_textureType: null
	,_textures: null
	,_currentRenderTextureInd: null
	,_effect: null
	,isReusable: function() {
		return this._reusable;
	}
	,activate: function(camera,sourceTexture) {
		if(camera != null) camera = camera; else camera = this._camera;
		var scene = camera._scene;
		var maxSize = camera._scene._engine.getCaps().maxTextureSize;
		var desiredWidth;
		desiredWidth = (sourceTexture != null?sourceTexture._width:this._engine.getRenderWidth()) * this._renderRatio;
		var desiredHeight;
		desiredHeight = (sourceTexture != null?sourceTexture._height:this._engine.getRenderHeight()) * this._renderRatio;
		if(this._renderRatio.width != null) desiredWidth = this._renderRatio.width; else desiredWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredWidth | 0,maxSize);
		if(this._renderRatio.height != null) desiredHeight = this._renderRatio.height; else desiredHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredHeight | 0,maxSize);
		if(this.width != desiredWidth || this.height != desiredHeight) {
			if(this._textures.length > 0) {
				var _g1 = 0;
				var _g = this._textures.length;
				while(_g1 < _g) {
					var i = _g1++;
					this._engine._releaseTexture(this._textures.data[i]);
				}
				this._textures.reset();
			}
			this.width = desiredWidth;
			this.height = desiredHeight;
			this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this._reusable) this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this.onSizeChanged != null) this.onSizeChanged();
		}
		this._engine.bindFramebuffer(this._textures.data[this._currentRenderTextureInd]);
		if(this.onActivate != null) this.onActivate(camera);
		if(this.clearColor != null) this._engine.clear(this.clearColor,true,true); else this._engine.clear(scene.clearColor,scene.autoClear || scene.forceWireframe,true);
		if(this._reusable) this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;
	}
	,apply: function() {
		if(!this._effect._isReady) return null;
		this._engine.enableEffect(this._effect);
		this._engine.setState(false,null,null);
		this._engine.setAlphaMode(0);
		this._engine._depthCullingState.set_depthTest(false);
		this._engine._depthCullingState.set_depthMask(false);
		if(this._textures.length > 0) this._effect._bindTexture("textureSampler",this._textures.data[this._currentRenderTextureInd]);
		if(this.onApply != null) this.onApply(this._effect);
		return this._effect;
	}
	,dispose: function(camera) {
		if(camera != null) camera = camera; else camera = this._camera;
		if(this._textures.length > 0) {
			var _g1 = 0;
			var _g = this._textures.length;
			while(_g1 < _g) {
				var i = _g1++;
				this._engine._releaseTexture(this._textures.data[i]);
			}
			this._textures.reset();
		}
		if(camera == null) return;
		camera.detachPostProcess(this);
		var index = HxOverrides.indexOf(camera._postProcesses,this,0);
		if(index == camera._postProcessesTakenIndices[0] && camera._postProcessesTakenIndices.length > 0) this._camera._postProcesses[camera._postProcessesTakenIndices[0]].width = -1;
	}
	,__class__: com_babylonhx_postprocess_PostProcess
};
var com_babylonhx_postprocess_PassPostProcess = $hx_exports.BABYLON.PassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"pass",null,null,ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.PassPostProcess"] = com_babylonhx_postprocess_PassPostProcess;
com_babylonhx_postprocess_PassPostProcess.__name__ = ["com","babylonhx","postprocess","PassPostProcess"];
com_babylonhx_postprocess_PassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_PassPostProcess
});
var com_babylonhx_postprocess_AnaglyphPostProcess = $hx_exports.BABYLON.AnaglyphPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"anaglyph",null,["leftSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.AnaglyphPostProcess"] = com_babylonhx_postprocess_AnaglyphPostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.__name__ = ["com","babylonhx","postprocess","AnaglyphPostProcess"];
com_babylonhx_postprocess_AnaglyphPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_AnaglyphPostProcess
});
var com_babylonhx_math_Vector4 = $hx_exports.BABYLON.Vector4 = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Vector4"] = com_babylonhx_math_Vector4;
com_babylonhx_math_Vector4.__name__ = ["com","babylonhx","math","Vector4"];
com_babylonhx_math_Vector4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Vector4.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatsToRef = function(x,y,z,w,result) {
	result.x = x;
	result.y = y;
	result.z = z;
	result.w = w;
};
com_babylonhx_math_Vector4.Zero = function() {
	return new com_babylonhx_math_Vector4(0,0,0,0);
};
com_babylonhx_math_Vector4.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector4(0,0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector4.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
};
com_babylonhx_math_Vector4.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	if(right.w < min.w) min.w = right.w;
	min;
	return min;
};
com_babylonhx_math_Vector4.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	if(right.w > max.w) max.w = right.w;
	max;
	return max;
};
com_babylonhx_math_Vector4.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector4.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector4.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	var w = value1.w - value2.w;
	return x * x + y * y + z * z + w * w;
};
com_babylonhx_math_Vector4.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector4(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z,value1.w + value2.w);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center.w *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "W:" + this.w + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		result[3] = this.w;
		this;
		return result;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
		array[index + 3] = this.w;
		return this;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		this.w += otherVector.w;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z,this.w + otherVector.w);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
		result.w = this.w + otherVector.w;
		return this;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		this.w -= otherVector.w;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z,this.w - otherVector.w);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
		result.w = this.w - otherVector.w;
		return this;
	}
	,subtractFromFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x - x,this.y - y,this.z - z,this.w - w);
	}
	,subtractFromFloatsToRef: function(x,y,z,w,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
		result.w = this.w - w;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector4(-this.x,-this.y,-this.z,-this.w);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		this.w *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector4(this.x * scale,this.y * scale,this.z * scale,this.w * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
		result.w = this.w * scale;
		return this;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z && this.w == otherVector.w;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.w,otherVector.w,epsilon);
	}
	,equalsToFloats: function(x,y,z,w) {
		return this.x == x && this.y == y && this.z == z && this.w == w;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
		this.w *= otherVector.w;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z,this.w * otherVector.w);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
		result.w = this.w * otherVector.w;
		return this;
	}
	,multiplyByFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x * x,this.y * y,this.z * z,this.w * w);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z,this.w / otherVector.w);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
		result.w = this.w / otherVector.w;
		return this;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
		if(other.w < this.w) this.w = other.w;
		return this;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
		if(other.w > this.w) this.w = other.w;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		this.w *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
		this.w = source.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,__class__: com_babylonhx_math_Vector4
};
var com_babylonhx_loading_plugins_BabylonFileLoader = $hx_exports.BABYLON.BabylonFileLoader = function() { };
$hxClasses["com.babylonhx.loading.plugins.BabylonFileLoader"] = com_babylonhx_loading_plugins_BabylonFileLoader;
com_babylonhx_loading_plugins_BabylonFileLoader.__name__ = ["com","babylonhx","loading","plugins","BabylonFileLoader"];
com_babylonhx_loading_plugins_BabylonFileLoader.__properties__ = {get_plugin:"get_plugin"}
com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin = function() {
	return com_babylonhx_loading_plugins_BabylonFileLoader._plugin;
};
com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4 = function(colors,count) {
	if(colors.length == count * 3) {
		var colors4 = [];
		var index = 0;
		while(index < colors.length) {
			var newIndex = index / 3 * 4 | 0;
			colors4[newIndex] = colors[index];
			colors4[newIndex + 1] = colors[index + 1];
			colors4[newIndex + 2] = colors[index + 2];
			colors4[newIndex + 3] = 1.0;
			index += 3;
		}
		return colors4;
	}
	return colors;
};
com_babylonhx_loading_plugins_BabylonFileLoader.loadCubeTexture = function(rootUrl,parsedTexture,scene) {
	var texture = new com_babylonhx_materials_textures_CubeTexture(rootUrl + Std.string(parsedTexture.name),scene);
	texture.name = parsedTexture.name;
	texture.hasAlpha = parsedTexture.hasAlpha;
	texture.level = parsedTexture.level;
	texture.coordinatesMode = parsedTexture.coordinatesMode;
	return texture;
};
com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture = function(rootUrl,parsedTexture,scene) {
	if(parsedTexture.name != null && parsedTexture.isRenderTarget == true) return null;
	if(parsedTexture.isCube != null && parsedTexture.isCube == true) return com_babylonhx_loading_plugins_BabylonFileLoader.loadCubeTexture(rootUrl,parsedTexture,scene);
	var texture = null;
	if(parsedTexture.mirrorPlane != null) {
		texture = new com_babylonhx_materials_textures_MirrorTexture(parsedTexture.name,parsedTexture.renderTargetSize,scene,true);
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_MirrorTexture))._waitingRenderList = parsedTexture.renderList;
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_MirrorTexture)).mirrorPlane = com_babylonhx_math_Plane.FromArray(parsedTexture.mirrorPlane);
	} else if(parsedTexture.isRenderTarget) {
		texture = new com_babylonhx_materials_textures_RenderTargetTexture(parsedTexture.name,parsedTexture.renderTargetSize,scene,true);
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_RenderTargetTexture))._waitingRenderList = parsedTexture.renderList;
	} else texture = new com_babylonhx_materials_textures_Texture(rootUrl + Std.string(parsedTexture.name),scene);
	texture.name = parsedTexture.name;
	texture.hasAlpha = parsedTexture.hasAlpha;
	texture.getAlphaFromRGB = parsedTexture.getAlphaFromRGB;
	texture.level = parsedTexture.level;
	texture.coordinatesIndex = parsedTexture.coordinatesIndex;
	texture.coordinatesMode = parsedTexture.coordinatesMode;
	texture.uOffset = parsedTexture.uOffset;
	texture.vOffset = parsedTexture.vOffset;
	texture.uScale = parsedTexture.uScale;
	texture.vScale = parsedTexture.vScale;
	texture.uAng = parsedTexture.uAng;
	texture.vAng = parsedTexture.vAng;
	texture.wAng = parsedTexture.wAng;
	texture.wrapU = parsedTexture.wrapU;
	texture.wrapV = parsedTexture.wrapV;
	if(parsedTexture.animations != null) {
		var _g1 = 0;
		var _g = parsedTexture.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedTexture.animations[animationIndex];
			texture.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	return texture;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton = function(parsedSkeleton,scene) {
	var skeleton = new com_babylonhx_bones_Skeleton(parsedSkeleton.name,parsedSkeleton.id,scene);
	try {
		var _g1 = 0;
		var _g = parsedSkeleton.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var parsedBone = parsedSkeleton.bones[index];
			var parentBone = null;
			if(parsedBone.parentBoneIndex > -1) parentBone = skeleton.bones[parsedBone.parentBoneIndex];
			var bone = new com_babylonhx_bones_Bone(parsedBone.name,skeleton,parentBone,com_babylonhx_math_Matrix.FromArray(parsedBone.matrix,null));
			if(parsedBone.animation != null) bone.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedBone.animation));
		}
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		haxe_Log.trace(err,{ fileName : "BabylonFileLoader.hx", lineNumber : 504, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "parseSkeleton"});
	}
	return skeleton;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters = function(parsedFresnelParameters) {
	var fresnelParameters = new com_babylonhx_materials_FresnelParameters();
	fresnelParameters.isEnabled = parsedFresnelParameters.isEnabled;
	fresnelParameters.leftColor = com_babylonhx_math_Color3.FromArray(parsedFresnelParameters.leftColor,null);
	fresnelParameters.rightColor = com_babylonhx_math_Color3.FromArray(parsedFresnelParameters.rightColor,null);
	fresnelParameters.bias = parsedFresnelParameters.bias;
	if(parsedFresnelParameters.power != null) fresnelParameters.power = parsedFresnelParameters.power; else fresnelParameters.power = 1.0;
	return fresnelParameters;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial = function(parsedMaterial,scene,rootUrl) {
	var material = new com_babylonhx_materials_StandardMaterial(parsedMaterial.name,scene);
	material.ambientColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.ambient,null);
	material.diffuseColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.diffuse,null);
	material.specularColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.specular,null);
	material.specularPower = parsedMaterial.specularPower;
	material.emissiveColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.emissive,null);
	material.alpha = parsedMaterial.alpha;
	material.id = parsedMaterial.id;
	com_babylonhx_tools_Tags.AddTagsTo(material,parsedMaterial.tags);
	material.backFaceCulling = parsedMaterial.backFaceCulling;
	material.set_wireframe(parsedMaterial.wireframe);
	if(parsedMaterial.diffuseTexture != null) material.diffuseTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.diffuseTexture,scene);
	if(parsedMaterial.diffuseFresnelParameters != null) material.diffuseFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.diffuseFresnelParameters);
	if(parsedMaterial.ambientTexture != null) material.ambientTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.ambientTexture,scene);
	if(parsedMaterial.opacityTexture != null) material.opacityTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.opacityTexture,scene);
	if(parsedMaterial.opacityFresnelParameters != null) material.opacityFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.opacityFresnelParameters);
	if(parsedMaterial.reflectionTexture != null) material.reflectionTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.reflectionTexture,scene);
	if(parsedMaterial.reflectionFresnelParameters != null) material.reflectionFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.reflectionFresnelParameters);
	if(parsedMaterial.emissiveTexture != null) material.emissiveTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.emissiveTexture,scene);
	if(parsedMaterial.emissiveFresnelParameters != null) material.emissiveFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.emissiveFresnelParameters);
	if(parsedMaterial.specularTexture != null) material.specularTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.specularTexture,scene);
	if(parsedMaterial.bumpTexture != null) material.bumpTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.bumpTexture,scene);
	return material;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById = function(id,parsedData,scene,rootUrl) {
	var _g1 = 0;
	var _g = parsedData.materials.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedMaterial = parsedData.materials[index];
		if(parsedMaterial.id == id) return com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial(parsedMaterial,scene,rootUrl);
	}
	return null;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial = function(parsedMultiMaterial,scene) {
	var multiMaterial = new com_babylonhx_materials_MultiMaterial(parsedMultiMaterial.name,scene);
	multiMaterial.id = parsedMultiMaterial.id;
	com_babylonhx_tools_Tags.AddTagsTo(multiMaterial,parsedMultiMaterial.tags);
	var _g1 = 0;
	var _g = parsedMultiMaterial.materials.length;
	while(_g1 < _g) {
		var matIndex = _g1++;
		var subMatId = parsedMultiMaterial.materials[matIndex];
		if(subMatId != null) multiMaterial.subMaterials.push(scene.getMaterialByID(subMatId)); else multiMaterial.subMaterials.push(null);
	}
	return multiMaterial;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseLensFlareSystem = function(parsedLensFlareSystem,scene,rootUrl) {
	var emitter = scene.getLastEntryByID(parsedLensFlareSystem.emitterId);
	var lensFlareSystem = new com_babylonhx_lensflare_LensFlareSystem("lensFlareSystem#" + Std.string(parsedLensFlareSystem.emitterId),emitter,scene);
	lensFlareSystem.borderLimit = parsedLensFlareSystem.borderLimit;
	var _g1 = 0;
	var _g = parsedLensFlareSystem.flares.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedFlare = parsedLensFlareSystem.flares[index];
		var flare = new com_babylonhx_lensflare_LensFlare(parsedFlare.size,parsedFlare.position,com_babylonhx_math_Color3.FromArray(parsedFlare.color,null),rootUrl + parsedFlare.textureName,lensFlareSystem);
	}
	return lensFlareSystem;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem = function(parsedParticleSystem,scene,rootUrl) {
	var emitter = scene.getLastMeshByID(parsedParticleSystem.emitterId);
	var particleSystem = new com_babylonhx_particles_ParticleSystem("particles#" + emitter.name,parsedParticleSystem.capacity,scene);
	if(parsedParticleSystem.textureName != null && parsedParticleSystem.textureName != "") {
		particleSystem.particleTexture = new com_babylonhx_materials_textures_Texture(rootUrl + Std.string(parsedParticleSystem.textureName),scene);
		particleSystem.particleTexture.name = parsedParticleSystem.textureName;
	}
	particleSystem.minAngularSpeed = parsedParticleSystem.minAngularSpeed;
	particleSystem.maxAngularSpeed = parsedParticleSystem.maxAngularSpeed;
	particleSystem.minSize = parsedParticleSystem.minSize;
	particleSystem.maxSize = parsedParticleSystem.maxSize;
	particleSystem.minLifeTime = parsedParticleSystem.minLifeTime;
	particleSystem.maxLifeTime = parsedParticleSystem.maxLifeTime;
	particleSystem.emitter = emitter;
	particleSystem.emitRate = parsedParticleSystem.emitRate;
	particleSystem.minEmitBox = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.minEmitBox,null);
	particleSystem.maxEmitBox = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.maxEmitBox,null);
	particleSystem.gravity = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.gravity,null);
	particleSystem.direction1 = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.direction1,null);
	particleSystem.direction2 = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.direction2,null);
	particleSystem.color1 = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.color1);
	particleSystem.color2 = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.color2);
	particleSystem.colorDead = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.colorDead);
	particleSystem.updateSpeed = parsedParticleSystem.updateSpeed;
	particleSystem.targetStopDuration = parsedParticleSystem.targetStopFrame;
	particleSystem.textureMask = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.textureMask);
	particleSystem.blendMode = parsedParticleSystem.blendMode;
	particleSystem.start();
	return particleSystem;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseShadowGenerator = function(parsedShadowGenerator,scene) {
	var light = scene.getLightByID(parsedShadowGenerator.lightId);
	var shadowGenerator = new com_babylonhx_lights_shadows_ShadowGenerator(parsedShadowGenerator.mapSize,light);
	var _g1 = 0;
	var _g = parsedShadowGenerator.renderList.length;
	while(_g1 < _g) {
		var meshIndex = _g1++;
		var mesh = scene.getMeshByID(parsedShadowGenerator.renderList[meshIndex]);
		shadowGenerator.getShadowMap().renderList.push(mesh);
	}
	if(parsedShadowGenerator.usePoissonSampling != null) shadowGenerator.set_usePoissonSampling(true); else if(parsedShadowGenerator.useVarianceShadowMap != null) shadowGenerator.set_useVarianceShadowMap(true); else if(parsedShadowGenerator.useBlurVarianceShadowMap != null) {
		shadowGenerator.set_useBlurVarianceShadowMap(true);
		if(parsedShadowGenerator.blurScale != null) shadowGenerator.blurScale = parsedShadowGenerator.blurScale;
		if(parsedShadowGenerator.blurBoxOffset != null) shadowGenerator.set_blurBoxOffset(parsedShadowGenerator.blurBoxOffset);
	}
	if(parsedShadowGenerator.bias != null) shadowGenerator.set_bias(parsedShadowGenerator.bias);
	return shadowGenerator;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation = function(parsedAnimation) {
	var animation = new com_babylonhx_animations_Animation(parsedAnimation.name,parsedAnimation.property,parsedAnimation.framePerSecond,parsedAnimation.dataType,parsedAnimation.loopBehavior);
	var dataType = parsedAnimation.dataType;
	var keys = [];
	var _g1 = 0;
	var _g = parsedAnimation.keys.length;
	while(_g1 < _g) {
		var index = _g1++;
		var key = parsedAnimation.keys[index];
		var data = null;
		switch(dataType) {
		case 0:
			data = key.values[0];
			break;
		case 2:
			data = com_babylonhx_math_Quaternion.FromArray(key.values,null);
			break;
		case 3:
			data = com_babylonhx_math_Matrix.FromArray(key.values,null);
			break;
		case 1:
			data = com_babylonhx_math_Vector3.FromArray(key.values,null);
			break;
		default:
			data = com_babylonhx_math_Vector3.FromArray(key.values,null);
		}
		keys.push({ frame : key.frame, value : data});
	}
	animation.setKeys(keys);
	return animation;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseLight = function(parsedLight,scene) {
	var light = null;
	var _g = parsedLight.type;
	switch(_g) {
	case 0:
		light = new com_babylonhx_lights_PointLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.position,null),scene);
		break;
	case 1:
		light = new com_babylonhx_lights_DirectionalLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),scene);
		(js_Boot.__cast(light , com_babylonhx_lights_DirectionalLight)).position = com_babylonhx_math_Vector3.FromArray(parsedLight.position,null);
		break;
	case 2:
		light = new com_babylonhx_lights_SpotLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.position,null),com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),parsedLight.angle,parsedLight.exponent,scene);
		break;
	case 3:
		light = new com_babylonhx_lights_HemisphericLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),scene);
		(js_Boot.__cast(light , com_babylonhx_lights_HemisphericLight)).groundColor = com_babylonhx_math_Color3.FromArray(parsedLight.groundColor,null);
		break;
	}
	light.id = parsedLight.id;
	if(parsedLight.tags != null) com_babylonhx_tools_Tags.AddTagsTo(light,parsedLight.tags);
	if(parsedLight.intensity != null) light.intensity = parsedLight.intensity;
	if(parsedLight.range != null) light.range = parsedLight.range;
	light.diffuse = com_babylonhx_math_Color3.FromArray(parsedLight.diffuse,null);
	light.specular = com_babylonhx_math_Color3.FromArray(parsedLight.specular,null);
	if(parsedLight.excludedMeshesIds != null && parsedLight.excludedMeshesIds.length > 0) light._excludedMeshesIds = parsedLight.excludedMeshesIds;
	if(parsedLight.parentId != null) light._waitingParentId = parsedLight.parentId;
	if(parsedLight.includedOnlyMeshesIds != null && parsedLight.includedOnlyMeshesIds.length > 0) light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;
	if(parsedLight.animations != null) {
		var _g1 = 0;
		var _g2 = parsedLight.animations.length;
		while(_g1 < _g2) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedLight.animations[animationIndex];
			light.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedLight.autoAnimate != null) scene.beginAnimation(light,parsedLight.autoAnimateFrom,parsedLight.autoAnimateTo,parsedLight.autoAnimateLoop,1.0);
	return light;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseCamera = function(parsedCamera,scene) {
	var camera = null;
	var position = com_babylonhx_math_Vector3.FromArray(parsedCamera.position,null);
	var lockedTargetMesh;
	if(parsedCamera.lockedTargetId != null) lockedTargetMesh = scene.getLastMeshByID(parsedCamera.lockedTargetId); else lockedTargetMesh = null;
	if(parsedCamera.type == "AnaglyphArcRotateCamera" || parsedCamera.type == "ArcRotateCamera") {
		var alpha = parsedCamera.alpha;
		var beta = parsedCamera.beta;
		var radius = parsedCamera.radius;
		if(parsedCamera.type == "AnaglyphArcRotateCamera") {
			var eye_space = parsedCamera.eye_space;
			camera = new com_babylonhx_cameras_AnaglyphArcRotateCamera(parsedCamera.name,alpha,beta,radius,lockedTargetMesh,eye_space,scene);
		} else camera = new com_babylonhx_cameras_ArcRotateCamera(parsedCamera.name,alpha,beta,radius,lockedTargetMesh,scene);
	} else if(parsedCamera.type == "AnaglyphFreeCamera") {
		var eye_space1 = parsedCamera.eye_space;
		camera = new com_babylonhx_cameras_AnaglyphFreeCamera(parsedCamera.name,position,eye_space1,scene);
	} else if(parsedCamera.type == "DeviceOrientationCamera") {
	} else if(parsedCamera.type == "FollowCamera") {
		camera = new com_babylonhx_cameras_FollowCamera(parsedCamera.name,position,scene);
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).heightOffset = parsedCamera.heightOffset;
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).radius = parsedCamera.radius;
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).rotationOffset = parsedCamera.rotationOffset;
		if(lockedTargetMesh != null) (js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).target = lockedTargetMesh;
	} else camera = new com_babylonhx_cameras_FreeCamera(parsedCamera.name,position,scene);
	if(lockedTargetMesh != null && js_Boot.__instanceof(camera,com_babylonhx_cameras_FreeCamera)) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).lockedTarget = lockedTargetMesh;
	camera.id = parsedCamera.id;
	com_babylonhx_tools_Tags.AddTagsTo(camera,parsedCamera.tags);
	if(parsedCamera.parentId != null) camera._waitingParentId = parsedCamera.parentId;
	if(parsedCamera.target != null) {
		if(js_Boot.__instanceof(camera,com_babylonhx_cameras_FreeCamera)) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).setTarget(com_babylonhx_math_Vector3.FromArray(parsedCamera.target,null)); else (js_Boot.__cast(camera , com_babylonhx_cameras_ArcRotateCamera)).target = com_babylonhx_math_Vector3.FromArray(parsedCamera.target,null);
	} else (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).rotation = com_babylonhx_math_Vector3.FromArray(parsedCamera.rotation,null);
	camera.fov = parsedCamera.fov;
	camera.minZ = parsedCamera.minZ;
	camera.maxZ = parsedCamera.maxZ;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).speed = parsedCamera.speed;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).inertia = parsedCamera.inertia;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).checkCollisions = parsedCamera.checkCollisions;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).applyGravity = parsedCamera.applyGravity;
	if(parsedCamera.ellipsoid != null) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).ellipsoid = com_babylonhx_math_Vector3.FromArray(parsedCamera.ellipsoid,null);
	if(parsedCamera.animations != null) {
		var _g1 = 0;
		var _g = parsedCamera.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedCamera.animations[animationIndex];
			camera.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedCamera.autoAnimate != null) scene.beginAnimation(camera,parsedCamera.autoAnimateFrom,parsedCamera.autoAnimateTo,parsedCamera.autoAnimateLoop,1.0);
	if(parsedCamera.layerMask != null) camera.layerMask = Std["int"](Math.abs(Std["int"](parsedCamera.layerMask))); else camera.layerMask = -1;
	return camera;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry = function(parsedGeometry,scene) {
	var id = parsedGeometry.id;
	return scene.getGeometryByID(id);
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseBox = function(parsedBox,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedBox,scene) != null) return null;
	var box = new com_babylonhx_mesh_primitives_Box(parsedBox.id,scene,parsedBox.size,parsedBox.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(box,parsedBox.tags);
	scene.pushGeometry(box,true);
	return box;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseSphere = function(parsedSphere,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedSphere,scene) == null) return null;
	var sphere = new com_babylonhx_mesh_primitives_Sphere(parsedSphere.id,scene,parsedSphere.segments,parsedSphere.diameter,parsedSphere.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(sphere,parsedSphere.tags);
	scene.pushGeometry(sphere,true);
	return sphere;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseCylinder = function(parsedCylinder,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedCylinder,scene) == null) return null;
	var cylinder = new com_babylonhx_mesh_primitives_Cylinder(parsedCylinder.id,scene,parsedCylinder.height,parsedCylinder.diameterTop,parsedCylinder.diameterBottom,parsedCylinder.tessellation,parsedCylinder.subdivisions,parsedCylinder.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(cylinder,parsedCylinder.tags);
	scene.pushGeometry(cylinder,true);
	return cylinder;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseTorus = function(parsedTorus,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedTorus,scene) == null) return null;
	var torus = new com_babylonhx_mesh_primitives_Torus(parsedTorus.id,scene,parsedTorus.diameter,parsedTorus.thickness,parsedTorus.tessellation,parsedTorus.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(torus,parsedTorus.tags);
	scene.pushGeometry(torus,true);
	return torus;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseGround = function(parsedGround,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedGround,scene) == null) return null;
	var ground = new com_babylonhx_mesh_primitives_Ground(parsedGround.id,scene,parsedGround.width,parsedGround.height,parsedGround.subdivisions,parsedGround.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(ground,parsedGround.tags);
	scene.pushGeometry(ground,true);
	return ground;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parsePlane = function(parsedPlane,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedPlane,scene) == null) return null;
	var plane = new com_babylonhx_mesh_primitives_Plane(parsedPlane.id,scene,parsedPlane.size,parsedPlane.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(plane,parsedPlane.tags);
	scene.pushGeometry(plane,true);
	return plane;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseTorusKnot = function(parsedTorusKnot,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedTorusKnot,scene) == null) return null;
	var torusKnot = new com_babylonhx_mesh_primitives_TorusKnot(parsedTorusKnot.id,scene,parsedTorusKnot.radius,parsedTorusKnot.tube,parsedTorusKnot.radialSegments,parsedTorusKnot.tubularSegments,parsedTorusKnot.p,parsedTorusKnot.q,parsedTorusKnot.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(torusKnot,parsedTorusKnot.tags);
	scene.pushGeometry(torusKnot,true);
	return torusKnot;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseVertexData = function(parsedVertexData,scene,rootUrl) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedVertexData,scene) == null) return null;
	var geometry = new com_babylonhx_mesh_Geometry(parsedVertexData.id,scene);
	com_babylonhx_tools_Tags.AddTagsTo(geometry,parsedVertexData.tags);
	if(parsedVertexData.delayLoadingFile != null && parsedVertexData.delayLoadingFile != "") {
		geometry.delayLoadState = 4;
		geometry.delayLoadingFile = rootUrl + Std.string(parsedVertexData.delayLoadingFile);
		geometry._boundingInfo = new com_babylonhx_culling_BoundingInfo(com_babylonhx_math_Vector3.FromArray(parsedVertexData.boundingBoxMinimum,null),com_babylonhx_math_Vector3.FromArray(parsedVertexData.boundingBoxMaximum,null));
		geometry._delayInfo = [];
		if(parsedVertexData.hasUVs) geometry._delayInfo.push("uv");
		if(parsedVertexData.hasUVs2) geometry._delayInfo.push("uv2");
		if(parsedVertexData.hasUVs3) geometry._delayInfo.push("uv3");
		if(parsedVertexData.hasUVs4) geometry._delayInfo.push("uv4");
		if(parsedVertexData.hasUVs5) geometry._delayInfo.push("uv5");
		if(parsedVertexData.hasUVs6) geometry._delayInfo.push("uv6");
		if(parsedVertexData.hasColors) geometry._delayInfo.push("color");
		if(parsedVertexData.hasMatricesIndices) geometry._delayInfo.push("matricesIndices");
		if(parsedVertexData.hasMatricesWeights) geometry._delayInfo.push("matricesWeights");
		geometry._delayLoadingFunction = com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData;
	} else com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData(parsedVertexData,geometry);
	scene.pushGeometry(geometry,true);
	return geometry;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh = function(parsedMesh,scene,rootUrl) {
	var mesh = new com_babylonhx_mesh_Mesh(parsedMesh.name,scene);
	mesh.id = parsedMesh.id;
	com_babylonhx_tools_Tags.AddTagsTo(mesh,parsedMesh.tags);
	mesh.position = com_babylonhx_math_Vector3.FromArray(parsedMesh.position,null);
	if(parsedMesh.rotationQuaternion != null) mesh.rotationQuaternion = com_babylonhx_math_Quaternion.FromArray(parsedMesh.rotationQuaternion,null); else if(parsedMesh.rotation != null) mesh.rotation = com_babylonhx_math_Vector3.FromArray(parsedMesh.rotation,null);
	mesh.scaling = com_babylonhx_math_Vector3.FromArray(parsedMesh.scaling,null);
	if(parsedMesh.localMatrix != null) mesh.setPivotMatrix(com_babylonhx_math_Matrix.FromArray(parsedMesh.localMatrix,null)); else if(parsedMesh.pivotMatrix != null) mesh.setPivotMatrix(com_babylonhx_math_Matrix.FromArray(parsedMesh.pivotMatrix,null));
	mesh.setEnabled(parsedMesh.isEnabled);
	mesh.isVisible = parsedMesh.isVisible;
	mesh.infiniteDistance = parsedMesh.infiniteDistance;
	mesh.showBoundingBox = parsedMesh.showBoundingBox;
	mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;
	if(parsedMesh.applyFog != null && parsedMesh.applyFog) mesh.applyFog = parsedMesh.applyFog;
	if(parsedMesh.pickable != null) mesh.set_isPickable(parsedMesh.pickable);
	if(parsedMesh.alphaIndex != null) mesh.alphaIndex = parsedMesh.alphaIndex;
	mesh.set_receiveShadows(parsedMesh.receiveShadows);
	mesh.billboardMode = parsedMesh.billboardMode;
	if(parsedMesh.visibility != null) mesh.set_visibility(parsedMesh.visibility);
	mesh.set_checkCollisions(parsedMesh.checkCollisions);
	mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;
	if(parsedMesh.parentId != null) mesh._waitingParentId = parsedMesh.parentId;
	if(parsedMesh.actions != null) mesh._waitingActions = parsedMesh.actions;
	mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;
	if(parsedMesh.delayLoadingFile != null && parsedMesh.delayLoadingFile == true) {
		mesh.delayLoadState = 4;
		mesh.delayLoadingFile = rootUrl + Std.string(parsedMesh.delayLoadingFile);
		mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(com_babylonhx_math_Vector3.FromArray(parsedMesh.boundingBoxMinimum,null),com_babylonhx_math_Vector3.FromArray(parsedMesh.boundingBoxMaximum,null));
		if(parsedMesh._binaryInfo != null) mesh._binaryInfo = parsedMesh._binaryInfo;
		mesh._delayInfo = [];
		if(parsedMesh.hasUVs) mesh._delayInfo.push("uv");
		if(parsedMesh.hasUVs2) mesh._delayInfo.push("uv2");
		if(parsedMesh.hasColors) mesh._delayInfo.push("color");
		if(parsedMesh.hasMatricesIndices) mesh._delayInfo.push("matricesIndices");
		if(parsedMesh.hasMatricesWeights) mesh._delayInfo.push("matricesWeights");
		mesh._delayLoadingFunction = com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry;
		if(com_babylonhx_loading_SceneLoader.get_ForceFullSceneLoadingForIncremental()) mesh._checkDelayState();
	} else com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry(parsedMesh,mesh);
	if(parsedMesh.materialId != null) mesh.setMaterialByID(parsedMesh.materialId); else mesh.set_material(null);
	if(parsedMesh.skeletonId > -1) mesh.set_skeleton(scene.getLastSkeletonByID(parsedMesh.skeletonId));
	if(parsedMesh.physicsImpostor != null) {
		if(!(scene._physicsEngine != null)) scene.enablePhysics();
		var physicsOptions = new com_babylonhx_physics_PhysicsBodyCreationOptions();
		physicsOptions.mass = parsedMesh.physicsMass;
		physicsOptions.friction = parsedMesh.physicsFriction;
		physicsOptions.restitution = parsedMesh.physicsRestitution;
		mesh.setPhysicsState(parsedMesh.physicsImpostor,physicsOptions);
	}
	if(parsedMesh.animations != null) {
		var _g1 = 0;
		var _g = parsedMesh.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedMesh.animations[animationIndex];
			mesh.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedMesh.autoAnimate != null) scene.beginAnimation(mesh,parsedMesh.autoAnimateFrom,parsedMesh.autoAnimateTo,parsedMesh.autoAnimateLoop,1.0);
	if(parsedMesh.layerMask != null) mesh.layerMask = Std["int"](Math.abs(parsedMesh.layerMask)); else mesh.layerMask = -1;
	if(parsedMesh.instances != null) {
		var _g11 = 0;
		var _g2 = parsedMesh.instances.length;
		while(_g11 < _g2) {
			var index = _g11++;
			var parsedInstance = parsedMesh.instances[index];
			var instance = mesh.createInstance(parsedInstance.name);
			com_babylonhx_tools_Tags.AddTagsTo(instance,parsedInstance.tags);
			instance.position = com_babylonhx_math_Vector3.FromArray(parsedInstance.position,null);
			if(parsedInstance.rotationQuaternion != null) instance.rotationQuaternion = com_babylonhx_math_Quaternion.FromArray(parsedInstance.rotationQuaternion,null); else if(parsedInstance.rotation != null) instance.rotation = com_babylonhx_math_Vector3.FromArray(parsedInstance.rotation,null);
			instance.scaling = com_babylonhx_math_Vector3.FromArray(parsedInstance.scaling,null);
			instance.set_checkCollisions(mesh.get_checkCollisions());
			if(parsedMesh.animations != null) {
				var _g3 = 0;
				var _g21 = parsedMesh.animations.length;
				while(_g3 < _g21) {
					var animationIndex1 = _g3++;
					var parsedAnimation1 = parsedMesh.animations[animationIndex1];
					instance.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation1));
				}
			}
		}
	}
	return mesh;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseActions = function(parsedActions,object,scene) {
	var actionManager = new com_babylonhx_actions_ActionManager(scene);
	if(object == null) scene.actionManager = actionManager; else object.actionManager = actionManager;
	var instanciate = function(name,params) {
		var newInstance = null;
		switch(name) {
		case "InterpolateValueAction":
			newInstance = Type.createInstance(com_babylonhx_actions_InterpolateValueAction,params);
			break;
		case "PlayAnimationAction":
			newInstance = Type.createInstance(com_babylonhx_actions_PlayAnimationAction,params);
			break;
		case "PlaySoundAction":
			break;
		}
		return newInstance;
	};
	var parseParameter = function(name1,value,target,propertyPath) {
		if(propertyPath == null) {
			var floatValue = parseFloat(value);
			if(value == "true" || value == "false") return value == "true"; else if(isNaN(floatValue)) return value; else return floatValue;
		}
		var effectiveTarget = propertyPath.split(".");
		var values = value.split(",");
		var _g1 = 0;
		var _g = effectiveTarget.length;
		while(_g1 < _g) {
			var i = _g1++;
			target = Reflect.field(target,effectiveTarget[i]);
		}
		if(typeof(target) == "boolean") return values[0] == "true";
		if(typeof(target) == "string") return values[0];
		var split = [];
		var _g11 = 0;
		var _g2 = values.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			split.push(parseFloat(values[i1]));
		}
		if(js_Boot.__instanceof(target,com_babylonhx_math_Vector3)) return new com_babylonhx_math_Vector3(split[0],split[1],split[2]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Vector4)) return new com_babylonhx_math_Vector4(split[0],split[1],split[2],split[3]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Color3)) return new com_babylonhx_math_Color3(split[0],split[1],split[2]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Color4)) return com_babylonhx_math_Color4.FromArray(split);
		return parseFloat(values[0]);
	};
	var traverse;
	var traverse1 = null;
	traverse1 = function(parsedAction,trigger,condition,action,combineArray) {
		if(parsedAction.detached != null && parsedAction.detached == true) return;
		var parameters = [];
		var target1 = null;
		var propertyPath1 = "";
		var combine = parsedAction.combine != null && parsedAction.combine.length > 0;
		if(parsedAction.type == 2) parameters.push(actionManager); else parameters.push(trigger);
		if(combine) {
			var actions = [];
			var _g12 = 0;
			var _g3 = parsedAction.combine.length;
			while(_g12 < _g3) {
				var j = _g12++;
				traverse1(parsedAction.combine[j],com_babylonhx_actions_ActionManager.NothingTrigger,condition,action,actions);
			}
			parameters.push(actions);
		} else {
			var _g13 = 0;
			var _g4 = parsedAction.properties.length;
			while(_g13 < _g4) {
				var i2 = _g13++;
				var value1 = parsedAction.properties[i2].value;
				var name2 = parsedAction.properties[i2].name;
				var targetType = parsedAction.properties[i2].targetType;
				if(name2 == "target") {
					if(targetType != null && targetType == "SceneProperties") value1 = target1 = scene; else value1 = target1 = scene.getNodeByName(value1);
				} else if(name2 == "parent") value1 = scene.getNodeByName(value1); else if(name2 == "sound") continue; else if(name2 != "propertyPath") {
					if(parsedAction.type == 2 && name2 == "operator") value1 = Reflect.field(com_babylonhx_actions_ValueCondition,value1); else value1 = parseParameter(name2,value1,target1,name2 == "value"?propertyPath1:null);
				} else propertyPath1 = value1;
				parameters.push(value1);
			}
		}
		if(combineArray == null) parameters.push(condition); else parameters.push(null);
		if(parsedAction.name == "InterpolateValueAction") {
			var param = parameters[parameters.length - 2];
			parameters[parameters.length - 1] = param;
			parameters[parameters.length - 2] = condition;
		}
		var newAction = instanciate(parsedAction.name,parameters);
		if(newAction != null) {
			if(js_Boot.__instanceof(newAction,com_babylonhx_actions_Condition)) {
				condition = newAction;
				newAction = action;
			} else {
				condition = null;
				if(action != null) action.then(newAction); else actionManager.registerAction(newAction);
			}
		}
		var _g14 = 0;
		var _g5 = parsedAction.children.length;
		while(_g14 < _g5) {
			var i3 = _g14++;
			traverse1(parsedAction.children[i3],trigger,condition,newAction);
		}
	};
	traverse = traverse1;
	var _g15 = 0;
	var _g6 = parsedActions.children.length;
	while(_g15 < _g6) {
		var i4 = _g15++;
		var triggerParams;
		var trigger1 = parsedActions.children[i4];
		if(trigger1.properties.length > 0) {
			var param1 = (js_Boot.__cast(trigger1.properties , Array))[0].value;
			var value2;
			if((js_Boot.__cast(trigger1.properties , Array))[0].targetType == null) value2 = param1; else value2 = scene.getMeshByName(param1);
			triggerParams = { trigger : Reflect.field(com_babylonhx_actions_ActionManager,trigger1.name), parameter : value2};
		} else triggerParams = Reflect.field(com_babylonhx_actions_ActionManager,trigger1.name);
		var _g31 = 0;
		var _g21 = trigger1.children.length;
		while(_g31 < _g21) {
			var j1 = _g31++;
			if(!trigger1.detached) traverse((js_Boot.__cast(trigger1.children , Array))[j1],triggerParams,null,null);
		}
	}
};
com_babylonhx_loading_plugins_BabylonFileLoader.isDescendantOf = function(mesh,_names,hierarchyIds) {
	var names;
	if((_names instanceof Array) && _names.__enum__ == null) names = _names; else names = [_names];
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		if(mesh.name == name) {
			hierarchyIds.push(mesh.id);
			return true;
		}
	}
	if(mesh.parentId != null && (function($this) {
		var $r;
		var x = mesh.parentId;
		$r = HxOverrides.indexOf(hierarchyIds,x,0);
		return $r;
	}(this)) != -1) {
		hierarchyIds.push(mesh.id);
		return true;
	}
	return false;
};
com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData = function(parsedVertexData,geometry) {
	var vertexData = new com_babylonhx_mesh_VertexData();
	var positions = parsedVertexData.positions;
	if(positions != null) vertexData.set(positions,"position");
	var normals = parsedVertexData.normals;
	if(normals != null) vertexData.set(normals,"normal");
	var uvs = parsedVertexData.uvs;
	if(uvs != null) vertexData.set(uvs,"uv");
	var uv2s = parsedVertexData.uv2s;
	if(uv2s != null) vertexData.set(uv2s,"uv2");
	var uv3s = parsedVertexData.uv3s;
	if(uv3s != null) vertexData.set(uv3s,"uv3");
	var uv4s = parsedVertexData.uv4s;
	if(uv4s != null) vertexData.set(uv4s,"uv4");
	var uv5s = parsedVertexData.uv5s;
	if(uv5s != null) vertexData.set(uv5s,"uv5");
	var uv6s = parsedVertexData.uv6s;
	if(uv6s != null) vertexData.set(uv6s,"uv6");
	var colors = parsedVertexData.colors;
	if(colors != null) vertexData.set(com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4(colors,positions.length / 3 | 0),"color");
	var matricesIndices = parsedVertexData.matricesIndices;
	if(matricesIndices != null) vertexData.set(matricesIndices,"matricesIndices");
	var matricesWeights = parsedVertexData.matricesWeights;
	if(matricesWeights != null) vertexData.set(matricesWeights,"matricesWeights");
	var indices = parsedVertexData.indices;
	if(indices != null) vertexData.indices = indices;
	geometry.setAllVerticesData(vertexData,parsedVertexData.updatable);
};
com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry = function(parsedGeometry,mesh) {
	var scene = mesh._scene;
	var geometryId = parsedGeometry.geometryId;
	if(geometryId != null) {
		var geometry = scene.getGeometryByID(geometryId);
		if(geometry != null) geometry.applyToMesh(mesh);
	} else if(parsedGeometry.positions != null && parsedGeometry.normals != null && parsedGeometry.indices != null) {
		mesh.setVerticesData("position",parsedGeometry.positions,false);
		mesh.setVerticesData("normal",parsedGeometry.normals,false);
		if(parsedGeometry.uvs != null) mesh.setVerticesData("uv",parsedGeometry.uvs,false);
		if(parsedGeometry.uvs2 != null) mesh.setVerticesData("uv2",parsedGeometry.uvs2,false);
		if(parsedGeometry.colors != null) mesh.setVerticesData("color",com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4(parsedGeometry.colors,parsedGeometry.positions.length / 3 | 0),false);
		if(parsedGeometry.matricesIndices != null) {
			if(!parsedGeometry.matricesIndices._isExpanded) {
				var floatIndices = [];
				var _g1 = 0;
				var _g = parsedGeometry.matricesIndices.length;
				while(_g1 < _g) {
					var i = _g1++;
					var matricesIndex = parsedGeometry.matricesIndices[i];
					floatIndices.push(matricesIndex & 255);
					floatIndices.push((matricesIndex & 65280) >> 8);
					floatIndices.push((matricesIndex & 16711680) >> 16);
					floatIndices.push(matricesIndex >> 24);
				}
				mesh.setVerticesData("matricesIndices",floatIndices,false);
			} else {
				parsedGeometry.matricesIndices._isExpanded = null;
				mesh.setVerticesData("matricesIndices",parsedGeometry.matricesIndices,false);
			}
		}
		if(parsedGeometry.matricesWeights != null) mesh.setVerticesData("matricesWeights",parsedGeometry.matricesWeights,false);
		mesh.setIndices(parsedGeometry.indices);
		if(parsedGeometry.subMeshes != null) {
			mesh.subMeshes = [];
			var _g11 = 0;
			var _g2 = parsedGeometry.subMeshes.length;
			while(_g11 < _g2) {
				var subIndex = _g11++;
				var parsedSubMesh = parsedGeometry.subMeshes[subIndex];
				var subMesh = new com_babylonhx_mesh_SubMesh(parsedSubMesh.materialIndex,parsedSubMesh.verticesStart,parsedSubMesh.verticesCount,parsedSubMesh.indexStart,parsedSubMesh.indexCount,mesh);
			}
		}
	}
	if(mesh._shouldGenerateFlatShading) {
		mesh.convertToFlatShadedMesh();
		mesh._shouldGenerateFlatShading = false;
	}
	mesh.computeWorldMatrix(true);
	if(scene._selectionOctree != null) scene._selectionOctree.addMesh(mesh);
};
var com_babylonhx_loading_SceneLoader = $hx_exports.BABYLON.SceneLoader = function() { };
$hxClasses["com.babylonhx.loading.SceneLoader"] = com_babylonhx_loading_SceneLoader;
com_babylonhx_loading_SceneLoader.__name__ = ["com","babylonhx","loading","SceneLoader"];
com_babylonhx_loading_SceneLoader.__properties__ = {set_ShowLoadingScreen:"set_ShowLoadingScreen",get_ShowLoadingScreen:"get_ShowLoadingScreen",set_ForceFullSceneLoadingForIncremental:"set_ForceFullSceneLoadingForIncremental",get_ForceFullSceneLoadingForIncremental:"get_ForceFullSceneLoadingForIncremental"}
com_babylonhx_loading_SceneLoader.get_ForceFullSceneLoadingForIncremental = function() {
	return com_babylonhx_loading_SceneLoader._ForceFullSceneLoadingForIncremental;
};
com_babylonhx_loading_SceneLoader.set_ForceFullSceneLoadingForIncremental = function(val) {
	com_babylonhx_loading_SceneLoader._ForceFullSceneLoadingForIncremental = val;
	return val;
};
com_babylonhx_loading_SceneLoader.get_ShowLoadingScreen = function() {
	return com_babylonhx_loading_SceneLoader._ShowLoadingScreen;
};
com_babylonhx_loading_SceneLoader.set_ShowLoadingScreen = function(val) {
	com_babylonhx_loading_SceneLoader._ShowLoadingScreen = val;
	return val;
};
com_babylonhx_loading_SceneLoader._getPluginForFilename = function(sceneFilename) {
	var dotPosition = sceneFilename.lastIndexOf(".");
	var queryStringPosition = sceneFilename.indexOf("?");
	if(queryStringPosition == -1) queryStringPosition = sceneFilename.length;
	var extension = sceneFilename.substring(dotPosition,queryStringPosition).toLowerCase();
	var _g1 = 0;
	var _g = com_babylonhx_loading_SceneLoader._registeredPlugins.length;
	while(_g1 < _g) {
		var index = _g1++;
		var plugin = com_babylonhx_loading_SceneLoader._registeredPlugins[index];
		if(plugin.extensions.indexOf(extension) != -1) return plugin;
	}
	return com_babylonhx_loading_SceneLoader._registeredPlugins[com_babylonhx_loading_SceneLoader._registeredPlugins.length - 1];
};
com_babylonhx_loading_SceneLoader.RegisterPlugin = function(plugin) {
	plugin.extensions = plugin.extensions.toLowerCase();
	com_babylonhx_loading_SceneLoader._registeredPlugins.push(plugin);
};
com_babylonhx_loading_SceneLoader.ImportMesh = function(meshesNames,rootUrl,sceneFilename,scene,onsuccess,progressCallBack,onerror) {
	var manifestChecked = function() {
		var plugin = com_babylonhx_loading_SceneLoader._getPluginForFilename(sceneFilename);
		if(plugin == null) {
			var dotPosition = sceneFilename.lastIndexOf(".");
			var queryStringPosition = sceneFilename.indexOf("?");
			var extension = sceneFilename.substring(dotPosition,queryStringPosition).toLowerCase();
			haxe_Log.trace("Error: " + "No plugin loaded for '" + extension + "' file type !",{ fileName : "SceneLoader.hx", lineNumber : 78, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
			throw new js__$Boot_HaxeError("No plugin loaded for '" + extension + "' file type !");
		}
		var importMeshFromData = function(data) {
			var meshes = [];
			var particleSystems = [];
			var skeletons = [];
			try {
				if(!plugin.importMesh(meshesNames,scene,data,rootUrl,meshes,particleSystems,skeletons)) {
					if(onerror != null) onerror(scene,"unable to load the scene");
					return;
				}
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace(e,{ fileName : "SceneLoader.hx", lineNumber : 96, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
				if(onerror != null) onerror(scene,e);
				return;
			}
			if(onsuccess != null) {
				scene.importedMeshesFiles.push(rootUrl + sceneFilename);
				onsuccess(meshes,particleSystems,skeletons);
			}
		};
		if(HxOverrides.substr(sceneFilename,0,5) == "data:") {
			importMeshFromData(HxOverrides.substr(sceneFilename,5,null));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile(rootUrl + sceneFilename,function(data1) {
			var meshes1 = [];
			var particleSystems1 = [];
			var skeletons1 = [];
			try {
				if(!plugin.importMesh(meshesNames,scene,data1,rootUrl,meshes1,particleSystems1,skeletons1)) {
					if(onerror != null) onerror(scene,"unable to load the scene");
					return;
				}
			} catch( e1 ) {
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				haxe_Log.trace(e1,{ fileName : "SceneLoader.hx", lineNumber : 130, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
				if(onerror != null) onerror(scene,e1);
				return;
			}
			if(onsuccess != null) {
				scene.importedMeshesFiles.push(rootUrl + sceneFilename);
				onsuccess(meshes1,particleSystems1,skeletons1);
			}
		});
	};
	manifestChecked();
};
com_babylonhx_loading_SceneLoader.Load = function(rootUrl,sceneFilename,engine,onsuccess,progressCallBack,onerror) {
	com_babylonhx_loading_SceneLoader.Append(rootUrl,sceneFilename,new com_babylonhx_Scene(engine),onsuccess,progressCallBack,onerror);
};
com_babylonhx_loading_SceneLoader.Append = function(rootUrl,sceneFilename,scene,onsuccess,progressCallBack,onerror) {
	var plugin = com_babylonhx_loading_SceneLoader._getPluginForFilename(sceneFilename.name != null?sceneFilename.name:sceneFilename);
	var loadSceneFromData = function(data) {
		if(!plugin.load(scene,data,rootUrl)) {
			if(onerror != null) onerror(scene);
			return;
		}
		if(onsuccess != null) onsuccess(scene);
	};
	com_babylonhx_tools_Tools.LoadFile(rootUrl + Std.string(sceneFilename),loadSceneFromData);
	if(sceneFilename.substr(0,5) == "data:") {
		loadSceneFromData(sceneFilename.substr(5));
		return;
	}
};
var com_babylonhx_materials_Effect = $hx_exports.BABYLON.Effect = function(baseName,attributesNames,uniformsNames,samplers,engine,defines,fallbacks,onCompiled,onError) {
	this._compilationError = "";
	this._isReady = false;
	var _g = this;
	this._engine = engine;
	this.name = baseName;
	this.defines = defines;
	this._uniformsNames = uniformsNames.concat(samplers);
	this._samplers = samplers;
	this._attributesNames = attributesNames;
	this.onError = onError;
	this.onCompiled = onCompiled;
	var vertex;
	if(Object.prototype.hasOwnProperty.call(baseName,"vertex")) vertex = baseName.vertex; else vertex = baseName;
	var fragment;
	if(Object.prototype.hasOwnProperty.call(baseName,"fragment")) fragment = baseName.fragment; else fragment = baseName;
	var vertexShaderUrl = "";
	if(vertex.charAt(0) == ".") vertexShaderUrl = vertex; else vertexShaderUrl = com_babylonhx_Engine.ShadersRepository + vertex;
	var fragmentShaderUrl = "";
	if(fragment.charAt(0) == ".") fragmentShaderUrl = fragment; else fragmentShaderUrl = com_babylonhx_Engine.ShadersRepository + fragment;
	var _vertexCode = "";
	var prepareEffect = function(_fragmentCode) {
		_g._prepareEffect(_vertexCode,_fragmentCode,attributesNames,defines,fallbacks);
		_g._valueCache = new haxe_ds_StringMap();
	};
	var getFragmentCode = function() {
		var _fragmentCode1 = "";
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + ".fragment")) {
			_fragmentCode1 = com_babylonhx_materials_ShadersStore.Shaders.get(fragment + ".fragment");
			prepareEffect(_fragmentCode1);
		} else com_babylonhx_tools_Tools.LoadFile(fragmentShaderUrl + ".fragment.fx",function(content) {
			_fragmentCode1 = content;
			prepareEffect(_fragmentCode1);
		},"text");
	};
	if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + ".vertex")) {
		_vertexCode = com_babylonhx_materials_ShadersStore.Shaders.get(vertex + ".vertex");
		getFragmentCode();
	} else com_babylonhx_tools_Tools.LoadFile(vertexShaderUrl + ".vertex.fx",function(content1) {
		_vertexCode = content1;
		getFragmentCode();
	},"text");
};
$hxClasses["com.babylonhx.materials.Effect"] = com_babylonhx_materials_Effect;
com_babylonhx_materials_Effect.__name__ = ["com","babylonhx","materials","Effect"];
com_babylonhx_materials_Effect.prototype = {
	name: null
	,defines: null
	,onCompiled: null
	,onError: null
	,onBind: null
	,_engine: null
	,_uniformsNames: null
	,_samplers: null
	,_isReady: null
	,_compilationError: null
	,_attributesNames: null
	,_attributes: null
	,_uniforms: null
	,_key: null
	,_program: null
	,_valueCache: null
	,isReady: function() {
		return this._isReady;
	}
	,getProgram: function() {
		return this._program;
	}
	,getAttributesNames: function() {
		return this._attributesNames;
	}
	,getAttributeLocation: function(index) {
		return this._attributes[index];
	}
	,getAttributeLocationByName: function(name) {
		var index = HxOverrides.indexOf(this._attributesNames,name,0);
		return this._attributes[index];
	}
	,getAttributesCount: function() {
		return this._attributes.length;
	}
	,getUniformIndex: function(uniformName) {
		return HxOverrides.indexOf(this._uniformsNames,uniformName,0);
	}
	,getUniform: function(uniformName) {
		return this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)];
	}
	,getSamplers: function() {
		return this._samplers;
	}
	,getCompilationError: function() {
		return this._compilationError;
	}
	,_loadVertexShader: function(vertex,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + "VertexShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(vertex + "VertexShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("assets/shaders/" + vertex + ".vertex.fx",callbackFn,"text");
	}
	,_loadFragmentShader: function(fragment,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + "PixelShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(fragment + "PixelShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("assets/shaders/" + fragment + ".fragment.fx",callbackFn,"text");
	}
	,_prepareEffect: function(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks) {
		try {
			var engine = this._engine;
			if(!engine.getCaps().highPrecisionShaderSupported) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
			}
			this._program = engine.createShaderProgram(vertexSourceCode,fragmentSourceCode,defines);
			this._uniforms = engine.getUniforms(this._program,this._uniformsNames);
			this._attributes = engine.getAttributes(this._program,attributesNames);
			var index = 0;
			while(index < this._samplers.length) {
				var sampler = this._uniforms[HxOverrides.indexOf(this._uniformsNames,this._samplers[index],0)];
				if(sampler == null) {
					this._samplers.splice(index,1);
					index--;
				}
				index++;
			}
			engine.bindSamplers(this);
			this._isReady = true;
			if(this.onCompiled != null) this.onCompiled(this);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "Effect.hx", lineNumber : 213, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
			if(e.message.indexOf("highp") != -1) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
				return;
			}
			if(fallbacks != null && fallbacks.get_isMoreFallbacks()) {
				defines = fallbacks.reduce(defines);
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
			} else {
				haxe_Log.trace("Unable to compile effect: " + Std.string(this.name),{ fileName : "Effect.hx", lineNumber : 230, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Defines: " + defines,{ fileName : "Effect.hx", lineNumber : 231, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Error: " + Std.string(e),{ fileName : "Effect.hx", lineNumber : 232, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				this._compilationError = e;
				if(this.onError != null) this.onError(this,this._compilationError);
			}
		}
	}
	,_bindTexture: function(channel,texture) {
		this._engine._bindTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTexture: function(channel,texture) {
		this._engine.setTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		this._engine.setTextureFromPostProcess(HxOverrides.indexOf(this._samplers,channel,0),postProcess);
	}
	,_cacheFloat2: function(uniformName,x,y) {
		if(!this._valueCache.exists(uniformName)) {
			var v = [x,y];
			this._valueCache.set(uniformName,v);
			v;
		} else {
			this._valueCache.get(uniformName)[0] = x;
			this._valueCache.get(uniformName)[1] = y;
		}
	}
	,_cacheFloat3: function(uniformName,x,y,z) {
		if(!this._valueCache.exists(uniformName)) {
			var v = [x,y,z];
			this._valueCache.set(uniformName,v);
			v;
		} else {
			this._valueCache.get(uniformName)[0] = x;
			this._valueCache.get(uniformName)[1] = y;
			this._valueCache.get(uniformName)[2] = z;
		}
	}
	,_cacheFloat4: function(uniformName,x,y,z,w) {
		if(!this._valueCache.exists(uniformName)) {
			var v = [x,y,z,w];
			this._valueCache.set(uniformName,v);
			v;
		} else {
			this._valueCache.get(uniformName)[0] = x;
			this._valueCache.get(uniformName)[1] = y;
			this._valueCache.get(uniformName)[2] = z;
			this._valueCache.get(uniformName)[3] = w;
		}
	}
	,setArray: function(uniformName,array) {
		this._engine.setArray(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],array);
		return this;
	}
	,setArray2: function(uniformName,array) {
		this._engine.setArray2(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],array);
		return this;
	}
	,setArray3: function(uniformName,array) {
		this._engine.setArray3(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],array);
		return this;
	}
	,setArray4: function(uniformName,array) {
		this._engine.setArray4(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],array);
		return this;
	}
	,setMatrices: function(uniformName,matrices) {
		this._engine.setMatrices(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],matrices);
		return this;
	}
	,setMatrix: function(uniformName,matrix) {
		this._engine.setMatrix(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],matrix);
		return this;
	}
	,setFloat: function(uniformName,value) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == value)) {
			this._valueCache.set(uniformName,[value]);
			this._engine.setFloat(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],value);
		}
		return this;
	}
	,setBool: function(uniformName,bool) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == (bool?1.0:0.0))) {
			var v;
			if(bool) v = [1.0]; else v = [0.0];
			this._valueCache.set(uniformName,v);
			v;
			this._engine.setBool(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],bool);
		}
		return this;
	}
	,setVector2: function(uniformName,vector2) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == vector2.x && this._valueCache.get(uniformName)[1] == vector2.y)) {
			this._cacheFloat2(uniformName,vector2.x,vector2.y);
			this._engine.setFloat2(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],vector2.x,vector2.y);
		}
		return this;
	}
	,setFloat2: function(uniformName,x,y) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == x && this._valueCache.get(uniformName)[1] == y)) {
			this._cacheFloat2(uniformName,x,y);
			this._engine.setFloat2(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],x,y);
		}
		return this;
	}
	,setVector3: function(uniformName,vector3) {
		if(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == vector3.x && this._valueCache.get(uniformName)[1] == vector3.y && this._valueCache.get(uniformName)[2] == vector3.z) return this;
		this._cacheFloat3(uniformName,vector3.x,vector3.y,vector3.z);
		this._engine.setFloat3(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],vector3.x,vector3.y,vector3.z);
		return this;
	}
	,setFloat3: function(uniformName,x,y,z) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == x && this._valueCache.get(uniformName)[1] == y && this._valueCache.get(uniformName)[2] == z)) {
			this._cacheFloat3(uniformName,x,y,z);
			this._engine.setFloat3(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],x,y,z);
		}
		return this;
	}
	,setFloat4: function(uniformName,x,y,z,w) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == x && this._valueCache.get(uniformName)[1] == y && this._valueCache.get(uniformName)[2] == z && this._valueCache.get(uniformName)[3] == w)) {
			this._cacheFloat4(uniformName,x,y,z,w);
			this._engine.setFloat4(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],x,y,z,w);
		}
		return this;
	}
	,setColor3: function(uniformName,color3) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == color3.r && this._valueCache.get(uniformName)[1] == color3.g && this._valueCache.get(uniformName)[2] == color3.b)) {
			this._cacheFloat3(uniformName,color3.r,color3.g,color3.b);
			this._engine.setColor3(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],color3);
		}
		return this;
	}
	,setColor4: function(uniformName,color3,alpha) {
		if(!(this._valueCache.exists(uniformName) && this._valueCache.get(uniformName)[0] == color3.r && this._valueCache.get(uniformName)[1] == color3.g && this._valueCache.get(uniformName)[2] == color3.b && this._valueCache.get(uniformName)[3] == alpha)) {
			this._cacheFloat4(uniformName,color3.r,color3.g,color3.b,alpha);
			this._engine.setColor4(this._uniforms[HxOverrides.indexOf(this._uniformsNames,uniformName,0)],color3,alpha);
		}
		return this;
	}
	,__class__: com_babylonhx_materials_Effect
};
var com_babylonhx_materials_EffectFallbacks = $hx_exports.BABYLON.EffectFallbacks = function() {
	this._maxRank = -1;
	this._currentRank = 32;
	this._defines = [];
};
$hxClasses["com.babylonhx.materials.EffectFallbacks"] = com_babylonhx_materials_EffectFallbacks;
com_babylonhx_materials_EffectFallbacks.__name__ = ["com","babylonhx","materials","EffectFallbacks"];
com_babylonhx_materials_EffectFallbacks.prototype = {
	_defines: null
	,_currentRank: null
	,_maxRank: null
	,addFallback: function(rank,define) {
		if(this._defines[rank] == null) {
			if(rank < this._currentRank) this._currentRank = rank;
			if(rank > this._maxRank) this._maxRank = rank;
			this._defines[rank] = [];
		}
		this._defines[rank].push(define);
	}
	,reduce: function(currentDefines) {
		var currentFallbacks = this._defines[this._currentRank];
		var _g1 = 0;
		var _g = currentFallbacks.length;
		while(_g1 < _g) {
			var index = _g1++;
			currentDefines = StringTools.replace(currentDefines,"#define " + currentFallbacks[index],"");
		}
		this._currentRank++;
		return currentDefines;
	}
	,get_isMoreFallbacks: function() {
		return this._currentRank <= this._maxRank;
	}
	,__class__: com_babylonhx_materials_EffectFallbacks
	,__properties__: {get_isMoreFallbacks:"get_isMoreFallbacks"}
};
var com_babylonhx_materials_ShaderMaterial = $hx_exports.BABYLON.ShaderMaterial = function(name,scene,shaderPath,options) {
	this._cachedWorldViewMatrix = new com_babylonhx_math_Matrix();
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	com_babylonhx_materials_Material.call(this,name,scene);
	this._shaderPath = shaderPath;
	if(options.needAlphaBlending != null) options.needAlphaBlending = options.needAlphaBlending; else options.needAlphaBlending = false;
	if(options.needAlphaTesting != null) options.needAlphaTesting = options.needAlphaTesting; else options.needAlphaTesting = false;
	if(options.attributes != null) options.attributes = options.attributes; else options.attributes = ["position","normal","uv"];
	if(options.uniforms != null) options.uniforms = options.uniforms; else options.uniforms = ["worldViewProjection"];
	if(options.samplers != null) options.samplers = options.samplers; else options.samplers = [];
	this._options = options;
};
$hxClasses["com.babylonhx.materials.ShaderMaterial"] = com_babylonhx_materials_ShaderMaterial;
com_babylonhx_materials_ShaderMaterial.__name__ = ["com","babylonhx","materials","ShaderMaterial"];
com_babylonhx_materials_ShaderMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_ShaderMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	_shaderPath: null
	,_options: null
	,_textures: null
	,_floats: null
	,_floatsArrays: null
	,_colors3: null
	,_colors4: null
	,_vectors2: null
	,_vectors3: null
	,_matrices: null
	,_cachedWorldViewMatrix: null
	,_renderId: null
	,needAlphaBlending: function() {
		return this._options.needAlphaBlending;
	}
	,needAlphaTesting: function() {
		return this._options.needAlphaTesting;
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._options.uniforms,uniformName,0) == -1) this._options.uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._options.samplers,name,0) == -1) this._options.samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) return true;
		}
		var defines = [];
		var fallbacks = new com_babylonhx_materials_EffectFallbacks();
		if(useInstances) defines.push("#define INSTANCES");
		if(mesh != null && mesh.get_useBones()) {
			defines.push("#define BONES");
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
			defines.push("#define BONES4");
			fallbacks.addFallback(0,"BONES4");
		}
		if(engine._alphaTest) defines.push("#define ALPHATEST");
		var previousEffect = this._effect;
		var join = defines.join("\n");
		this._effect = engine.createEffect(this._shaderPath,this._options.attributes,this._options.uniforms,this._options.samplers,join,fallbacks,this.onCompiled,this.onError);
		if(!this._effect._isReady) return false;
		if(previousEffect != this._effect) scene._cachedMaterial = null;
		this._renderId = scene._renderId;
		return true;
	}
	,bindOnlyWorldMatrix: function(world) {
		var scene = this.getScene();
		if(HxOverrides.indexOf(this._options.uniforms,"world",0) != -1) this._effect.setMatrix("world",world);
		if(HxOverrides.indexOf(this._options.uniforms,"worldView",0) != -1) {
			world.multiplyToRef(scene._viewMatrix,this._cachedWorldViewMatrix);
			this._effect.setMatrix("worldView",this._cachedWorldViewMatrix);
		}
		if(HxOverrides.indexOf(this._options.uniforms,"worldViewProjection",0) != -1) this._effect.setMatrix("worldViewProjection",world.multiply(scene._transformMatrix));
	}
	,bind: function(world,mesh) {
		this.bindOnlyWorldMatrix(world);
		if(this.getScene().getCachedMaterial() != this) {
			if(HxOverrides.indexOf(this._options.uniforms,"view",0) != -1) this._effect.setMatrix("view",this.getScene().getViewMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"projection",0) != -1) this._effect.setMatrix("projection",this.getScene().getProjectionMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"viewProjection",0) != -1) this._effect.setMatrix("viewProjection",this.getScene().getTransformMatrix());
			if(mesh != null && mesh.get_useBones()) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			var $it0 = this._textures.keys();
			while( $it0.hasNext() ) {
				var name = $it0.next();
				this._effect.setTexture(name,this._textures.get(name));
			}
			var $it1 = this._floats.keys();
			while( $it1.hasNext() ) {
				var name1 = $it1.next();
				this._effect.setFloat(name1,this._floats.get(name1));
			}
			var $it2 = this._floatsArrays.keys();
			while( $it2.hasNext() ) {
				var name2 = $it2.next();
				this._effect.setArray(name2,this._floatsArrays.get(name2));
			}
			var $it3 = this._colors3.keys();
			while( $it3.hasNext() ) {
				var name3 = $it3.next();
				this._effect.setColor3(name3,this._colors3.get(name3));
			}
			var $it4 = this._colors4.keys();
			while( $it4.hasNext() ) {
				var name4 = $it4.next();
				var color = this._colors4.get(name4);
				this._effect.setFloat4(name4,color.r,color.g,color.b,color.a);
			}
			var $it5 = this._vectors2.keys();
			while( $it5.hasNext() ) {
				var name5 = $it5.next();
				this._effect.setVector2(name5,this._vectors2.get(name5));
			}
			var $it6 = this._vectors3.keys();
			while( $it6.hasNext() ) {
				var name6 = $it6.next();
				this._effect.setVector3(name6,this._vectors3.get(name6));
			}
			var $it7 = this._matrices.keys();
			while( $it7.hasNext() ) {
				var name7 = $it7.next();
				this._effect.setMatrix(name7,this._matrices.get(name7));
			}
		}
		com_babylonhx_materials_Material.prototype.bind.call(this,world,null);
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			this._textures.get(name).dispose();
		}
		this._textures = null;
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,__class__: com_babylonhx_materials_ShaderMaterial
});
var com_babylonhx_materials_ShadersStore = $hx_exports.BABYLON.ShadersStore = function() { };
$hxClasses["com.babylonhx.materials.ShadersStore"] = com_babylonhx_materials_ShadersStore;
com_babylonhx_materials_ShadersStore.__name__ = ["com","babylonhx","materials","ShadersStore"];
var com_babylonhx_materials_textures_VideoTexture = $hx_exports.BABYLON.VideoTexture = function(scene) {
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
};
$hxClasses["com.babylonhx.materials.textures.VideoTexture"] = com_babylonhx_materials_textures_VideoTexture;
com_babylonhx_materials_textures_VideoTexture.__name__ = ["com","babylonhx","materials","textures","VideoTexture"];
com_babylonhx_materials_textures_VideoTexture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_VideoTexture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	__class__: com_babylonhx_materials_textures_VideoTexture
});
var com_babylonhx_materials_textures_WebGLTexture = $hx_exports.BABYLON.WebGLTexture = function(url,data) {
	this.noMipmap = true;
	this.url = url;
	this.data = data;
	this.generateMipMaps = false;
	this.isCube = false;
	this.samplingMode = 3;
	this._size = null;
	this._width = 1;
	this._height = 1;
	this._baseHeight = 1;
	this._baseWidth = 1;
	this._cachedWrapU = -1;
	this._cachedWrapV = -1;
	this._framebuffer = null;
	this._depthBuffer = null;
	this._cachedCoordinatesMode = -1;
	this._isDisabled = false;
	this.isReady = false;
	this.noMipmap = false;
	this.references = 0;
};
$hxClasses["com.babylonhx.materials.textures.WebGLTexture"] = com_babylonhx_materials_textures_WebGLTexture;
com_babylonhx_materials_textures_WebGLTexture.__name__ = ["com","babylonhx","materials","textures","WebGLTexture"];
com_babylonhx_materials_textures_WebGLTexture.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_textures_WebGLTexture.prototype = {
	data: null
	,_framebuffer: null
	,_depthBuffer: null
	,generateMipMaps: null
	,isCube: null
	,isReady: null
	,noMipmap: null
	,references: null
	,url: null
	,samplingMode: null
	,_size: null
	,_baseHeight: null
	,_baseWidth: null
	,_cachedWrapU: null
	,_cachedWrapV: null
	,_width: null
	,_height: null
	,_cachedCoordinatesMode: null
	,_isDisabled: null
	,__smartArrayFlags: null
	,__class__: com_babylonhx_materials_textures_WebGLTexture
};
var com_babylonhx_materials_textures_procedurals_ProceduralTexture = $hx_exports.BABYLON.ProceduralTexture = function(name,size,fragment,scene,fallbackTexture,generateMipMaps) {
	if(generateMipMaps == null) generateMipMaps = true;
	this._fallbackTextureUsed = false;
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	this._samplers = [];
	this._uniforms = [];
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	scene._proceduralTextures.push(this);
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this.setFragment(fragment);
	this._fallbackTexture = fallbackTexture;
	this._texture = scene._engine.createRenderTargetTexture(size,generateMipMaps);
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
};
$hxClasses["com.babylonhx.materials.textures.procedurals.ProceduralTexture"] = com_babylonhx_materials_textures_procedurals_ProceduralTexture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__name__ = ["com","babylonhx","materials","textures","procedurals","ProceduralTexture"];
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	_size: null
	,_generateMipMaps: null
	,_doNotChangeAspectRatio: null
	,_currentRefreshId: null
	,_refreshRate: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_uniforms: null
	,_samplers: null
	,_fragment: null
	,_textures: null
	,_floats: null
	,_floatsArrays: null
	,_colors3: null
	,_colors4: null
	,_vectors2: null
	,_vectors3: null
	,_matrices: null
	,_fallbackTexture: null
	,_fallbackTextureUsed: null
	,reset: function() {
		if(this._effect == null) return;
		var engine = this.getScene().getEngine();
		engine._releaseEffect(this._effect);
	}
	,isReady: function() {
		var _g = this;
		var engine = this.getScene().getEngine();
		var shaders = null;
		if(this._fragment == null) return false;
		if(this._fallbackTextureUsed) return true;
		if(this._fragment.fragmentElement != null) shaders = { vertex : "procedural", fragmentElement : this._fragment.fragmentElement}; else shaders = { vertex : "procedural", fragment : this._fragment};
		this._effect = engine.createEffect(shaders,["position"],this._uniforms,this._samplers,"",null,null,function(effect,msg) {
			_g.releaseInternalTexture();
			if(_g._fallbackTexture != null) {
				_g._texture = _g._fallbackTexture._texture;
				_g._texture.references++;
			}
			_g._fallbackTextureUsed = true;
		});
		return this._effect._isReady;
	}
	,resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,setFragment: function(fragment) {
		this._fragment = fragment;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this.resetRefreshCounter();
		return value;
	}
	,_shouldRender: function() {
		if(!this.isReady() || this._texture == null) return false;
		if(this._fallbackTextureUsed) return false;
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,getRenderSize: function() {
		return this._size;
	}
	,resize: function(size,generateMipMaps) {
		if(this._fallbackTextureUsed) return;
		this.releaseInternalTexture();
		this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._uniforms,uniformName,0) == -1) this._uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._samplers,name,0) == -1) this._samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		engine.bindFramebuffer(this._texture);
		engine.clear(scene.clearColor,true,true);
		engine.enableEffect(this._effect);
		if(engine._depthCullingState.get_cull() != false) engine._depthCullingState.set_cull(false);
		engine._depthCullingState.set_zOffset(0);
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._effect.setTexture(key,this._textures.get(key));
		}
		var $it1 = this._floats.keys();
		while( $it1.hasNext() ) {
			var key1 = $it1.next();
			this._effect.setFloat(key1,this._floats.get(key1));
		}
		var $it2 = this._floatsArrays.keys();
		while( $it2.hasNext() ) {
			var key2 = $it2.next();
			this._effect.setArray(key2,this._floatsArrays.get(key2));
		}
		var $it3 = this._colors3.keys();
		while( $it3.hasNext() ) {
			var key3 = $it3.next();
			this._effect.setColor3(key3,this._colors3.get(key3));
		}
		var $it4 = this._colors4.keys();
		while( $it4.hasNext() ) {
			var key4 = $it4.next();
			var color = this._colors4.get(key4);
			this._effect.setFloat4(key4,color.r,color.g,color.b,color.a);
		}
		var $it5 = this._vectors2.keys();
		while( $it5.hasNext() ) {
			var key5 = $it5.next();
			this._effect.setVector2(key5,this._vectors2.get(key5));
		}
		var $it6 = this._vectors3.keys();
		while( $it6.hasNext() ) {
			var key6 = $it6.next();
			this._effect.setVector3(key6,this._vectors3.get(key6));
		}
		var $it7 = this._matrices.keys();
		while( $it7.hasNext() ) {
			var key7 = $it7.next();
			this._effect.setMatrix(key7,this._matrices.get(key7));
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		engine.draw(true,0,6);
		engine.unBindFramebuffer(this._texture);
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_procedurals_ProceduralTexture(this.name,textureSize.width,this._fragment,this.getScene(),this._fallbackTexture,this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		return newTexture;
	}
	,dispose: function() {
		var index;
		var _this = this.getScene()._proceduralTextures;
		index = HxOverrides.indexOf(_this,this,0);
		if(index >= 0) this.getScene()._proceduralTextures.splice(index,1);
		com_babylonhx_materials_textures_Texture.prototype.dispose.call(this);
	}
	,__class__: com_babylonhx_materials_textures_procedurals_ProceduralTexture
	,__properties__: {set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_math_Axis = $hx_exports.BABYLON.Axis = function() { };
$hxClasses["com.babylonhx.math.Axis"] = com_babylonhx_math_Axis;
com_babylonhx_math_Axis.__name__ = ["com","babylonhx","math","Axis"];
var com_babylonhx_math_Frustum = $hx_exports.BABYLON.Frustum = function() { };
$hxClasses["com.babylonhx.math.Frustum"] = com_babylonhx_math_Frustum;
com_babylonhx_math_Frustum.__name__ = ["com","babylonhx","math","Frustum"];
com_babylonhx_math_Frustum.GetPlanes = function(transform) {
	var frustumPlanes = [];
	var _g = 0;
	while(_g < 6) {
		var index = _g++;
		frustumPlanes.push(new com_babylonhx_math_Plane(0,0,0,0));
	}
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[10] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
	return frustumPlanes;
};
com_babylonhx_math_Frustum.GetPlanesToRef = function(transform,frustumPlanes) {
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[10] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
};
var com_babylonhx_math_Path3D = $hx_exports.BABYLON.Path3D = function(path,firstNormal) {
	this._binormals = [];
	this._normals = [];
	this._tangents = [];
	this._distances = [];
	this._curve = [];
	var _g1 = 0;
	var _g = path.length;
	while(_g1 < _g) {
		var p = _g1++;
		this._curve[p] = path[p].clone();
	}
	this._compute(firstNormal);
};
$hxClasses["com.babylonhx.math.Path3D"] = com_babylonhx_math_Path3D;
com_babylonhx_math_Path3D.__name__ = ["com","babylonhx","math","Path3D"];
com_babylonhx_math_Path3D.prototype = {
	path: null
	,_curve: null
	,_distances: null
	,_tangents: null
	,_normals: null
	,_binormals: null
	,getCurve: function() {
		return this._curve;
	}
	,getTangents: function() {
		return this._tangents;
	}
	,getNormals: function() {
		return this._normals;
	}
	,getBinormals: function() {
		return this._binormals;
	}
	,getDistances: function() {
		return this._distances;
	}
	,update: function(path,firstNormal) {
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var p = _g1++;
			this._curve[p].x = path[p].x;
			this._curve[p].y = path[p].y;
			this._curve[p].z = path[p].z;
		}
		this._compute(firstNormal);
		return this;
	}
	,_compute: function(firstNormal) {
		var l = this._curve.length;
		this._tangents[0] = this._getFirstNonNullVector(0);
		this._tangents[0].normalize();
		this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);
		this._tangents[l - 1].normalize();
		var tg0 = this._tangents[0];
		var pp0 = this._normalVector(this._curve[0],tg0,firstNormal);
		this._normals[0] = pp0;
		this._normals[0].normalize();
		this._binormals[0] = com_babylonhx_math_Vector3.Cross(tg0,this._normals[0]);
		this._binormals[0].normalize();
		this._distances[0] = 0;
		var prev = new com_babylonhx_math_Vector3(0,0,0);
		var cur = new com_babylonhx_math_Vector3(0,0,0);
		var curTang = new com_babylonhx_math_Vector3(0,0,0);
		var prevNorm = new com_babylonhx_math_Vector3(0,0,0);
		var prevBinor = new com_babylonhx_math_Vector3(0,0,0);
		var _g = 1;
		while(_g < l) {
			var i = _g++;
			prev = this._getLastNonNullVector(i);
			if(i < l - 1) {
				cur = this._getFirstNonNullVector(i);
				this._tangents[i] = new com_babylonhx_math_Vector3(prev.x + cur.x,prev.y + cur.y,prev.z + cur.z);
				this._tangents[i].normalize();
			}
			this._distances[i] = this._distances[i - 1] + Math.sqrt(prev.x * prev.x + prev.y * prev.y + prev.z * prev.z);
			curTang = this._tangents[i];
			prevNorm = this._normals[i - 1];
			prevBinor = this._binormals[i - 1];
			this._normals[i] = com_babylonhx_math_Vector3.Cross(prevBinor,curTang);
			this._normals[i].normalize();
			this._binormals[i] = com_babylonhx_math_Vector3.Cross(curTang,this._normals[i]);
			this._binormals[i].normalize();
		}
	}
	,_getFirstNonNullVector: function(index) {
		var i = 1;
		var nNVector = this._curve[index + i].subtract(this._curve[index]);
		while(Math.sqrt(nNVector.x * nNVector.x + nNVector.y * nNVector.y + nNVector.z * nNVector.z) == 0 && index + i + 1 < this._curve.length) {
			i++;
			nNVector = this._curve[index + i].subtract(this._curve[index]);
		}
		return nNVector;
	}
	,_getLastNonNullVector: function(index) {
		var i = 1;
		var nLVector = this._curve[index].subtract(this._curve[index - i]);
		while(Math.sqrt(nLVector.x * nLVector.x + nLVector.y * nLVector.y + nLVector.z * nLVector.z) == 0 && index > i + 1) {
			i++;
			nLVector = this._curve[index].subtract(this._curve[index - i]);
		}
		return nLVector;
	}
	,_normalVector: function(v0,vt,va) {
		var normal0 = new com_babylonhx_math_Vector3(0,0,0);
		if(va == null) {
			var point = new com_babylonhx_math_Vector3(0,0,0);
			if(vt.y != 1) point = new com_babylonhx_math_Vector3(0,-1,0); else if(vt.x != 1) point = new com_babylonhx_math_Vector3(1,0,0); else if(vt.z != 1) point = new com_babylonhx_math_Vector3(0,0,1);
			normal0 = com_babylonhx_math_Vector3.Cross(vt,point);
		} else {
			normal0 = com_babylonhx_math_Vector3.Cross(vt,va);
			normal0.x = normal0.y * vt.z - normal0.z * vt.y;
			normal0.y = normal0.z * vt.x - normal0.x * vt.z;
			normal0.z = normal0.x * vt.y - normal0.y * vt.x;
		}
		normal0.normalize();
		return normal0;
	}
	,__class__: com_babylonhx_math_Path3D
};
var com_babylonhx_math_PositionNormalVertex = function(position,normal) {
	if(position != null) this.position = position; else this.position = new com_babylonhx_math_Vector3(0,0,0);
	if(normal != null) this.normal = normal; else this.normal = new com_babylonhx_math_Vector3(0,1.0,0);
};
$hxClasses["com.babylonhx.math.PositionNormalVertex"] = com_babylonhx_math_PositionNormalVertex;
com_babylonhx_math_PositionNormalVertex.__name__ = ["com","babylonhx","math","PositionNormalVertex"];
com_babylonhx_math_PositionNormalVertex.prototype = {
	position: null
	,normal: null
	,clone: function() {
		return new com_babylonhx_math_PositionNormalVertex(this.position.clone(),this.normal.clone());
	}
	,__class__: com_babylonhx_math_PositionNormalVertex
};
var com_babylonhx_math_Ray = $hx_exports.BABYLON.Ray = function(origin,direction,length) {
	this.origin = origin;
	this.direction = direction;
	if(length != null) this.length = length; else {
		this.length = Infinity;
	}
};
$hxClasses["com.babylonhx.math.Ray"] = com_babylonhx_math_Ray;
com_babylonhx_math_Ray.__name__ = ["com","babylonhx","math","Ray"];
com_babylonhx_math_Ray.CreateNew = function(x,y,viewportWidth,viewportHeight,world,view,projection) {
	var start = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,0),viewportWidth,viewportHeight,world,view,projection);
	var end = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,1),viewportWidth,viewportHeight,world,view,projection);
	var direction = new com_babylonhx_math_Vector3(end.x - start.x,end.y - start.y,end.z - start.z);
	direction.normalize();
	return new com_babylonhx_math_Ray(start,direction);
};
com_babylonhx_math_Ray.CreateNewFromTo = function(origin,end,world) {
	if(world == null) world = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	var direction = new com_babylonhx_math_Vector3(end.x - origin.x,end.y - origin.y,end.z - origin.z);
	var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
	direction.normalize();
	return com_babylonhx_math_Ray.Transform(new com_babylonhx_math_Ray(origin,direction,length),world);
};
com_babylonhx_math_Ray.Transform = function(ray,matrix) {
	var newOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,matrix);
	var newDirection = com_babylonhx_math_Vector3.TransformNormal(ray.direction,matrix);
	return new com_babylonhx_math_Ray(newOrigin,newDirection);
};
com_babylonhx_math_Ray.prototype = {
	origin: null
	,direction: null
	,length: null
	,_edge1: null
	,_edge2: null
	,_pvec: null
	,_tvec: null
	,_qvec: null
	,intersectsBoxMinMax: function(minimum,maximum) {
		var d = 0.0;
		var maxValue = Infinity;
		if(Math.abs(this.direction.x) < 0.0000001) {
			if(this.origin.x < minimum.x || this.origin.x > maximum.x) return false;
		} else {
			var inv = 1.0 / this.direction.x;
			var min = (minimum.x - this.origin.x) * inv;
			var max = (maximum.x - this.origin.x) * inv;
			if(max == -Infinity) max = Infinity;
			if(min > max) {
				var temp = min;
				min = max;
				max = temp;
			}
			d = Math.max(min,d);
			maxValue = Math.min(max,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.y) < 0.0000001) {
			if(this.origin.y < minimum.y || this.origin.y > maximum.y) return false;
		} else {
			var inv1 = 1.0 / this.direction.y;
			var min1 = (minimum.y - this.origin.y) * inv1;
			var max1 = (maximum.y - this.origin.y) * inv1;
			if(max1 == -Infinity) max1 = Infinity;
			if(min1 > max1) {
				var temp1 = min1;
				min1 = max1;
				max1 = temp1;
			}
			d = Math.max(min1,d);
			maxValue = Math.min(max1,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.z) < 0.0000001) {
			if(this.origin.z < minimum.z || this.origin.z > maximum.z) return false;
		} else {
			var inv2 = 1.0 / this.direction.z;
			var min2 = (minimum.z - this.origin.z) * inv2;
			var max2 = (maximum.z - this.origin.z) * inv2;
			if(max2 == -Infinity) max2 = Infinity;
			if(min2 > max2) {
				var temp2 = min2;
				min2 = max2;
				max2 = temp2;
			}
			d = Math.max(min2,d);
			maxValue = Math.min(max2,maxValue);
			if(d > maxValue) return false;
		}
		return true;
	}
	,intersectsBox: function(box) {
		return this.intersectsBoxMinMax(box.minimum,box.maximum);
	}
	,intersectsSphere: function(sphere) {
		var x = sphere.center.x - this.origin.x;
		var y = sphere.center.y - this.origin.y;
		var z = sphere.center.z - this.origin.z;
		var pyth = x * x + y * y + z * z;
		var rr = sphere.radius * sphere.radius;
		if(pyth <= rr) return true;
		var dot = x * this.direction.x + y * this.direction.y + z * this.direction.z;
		if(dot < 0.0) return false;
		var temp = pyth - dot * dot;
		return temp <= rr;
	}
	,intersectsTriangle: function(vertex0,vertex1,vertex2) {
		if(this._edge1 == null) {
			this._edge1 = new com_babylonhx_math_Vector3(0,0,0);
			this._edge2 = new com_babylonhx_math_Vector3(0,0,0);
			this._pvec = new com_babylonhx_math_Vector3(0,0,0);
			this._tvec = new com_babylonhx_math_Vector3(0,0,0);
			this._qvec = new com_babylonhx_math_Vector3(0,0,0);
		}
		vertex1.subtractToRef(vertex0,this._edge1);
		vertex2.subtractToRef(vertex0,this._edge2);
		com_babylonhx_math_Vector3.CrossToRef(this.direction,this._edge2,this._pvec);
		var det = com_babylonhx_math_Vector3.Dot(this._edge1,this._pvec);
		if(det == 0) return null;
		var invdet = 1 / det;
		this.origin.subtractToRef(vertex0,this._tvec);
		var bu = com_babylonhx_math_Vector3.Dot(this._tvec,this._pvec) * invdet;
		if(bu < 0 || bu > 1.0) return null;
		com_babylonhx_math_Vector3.CrossToRef(this._tvec,this._edge1,this._qvec);
		var bv = com_babylonhx_math_Vector3.Dot(this.direction,this._qvec) * invdet;
		if(bv < 0 || bu + bv > 1.0) return null;
		return new com_babylonhx_collisions_IntersectionInfo(bu,bv,com_babylonhx_math_Vector3.Dot(this._edge2,this._qvec) * invdet);
	}
	,__class__: com_babylonhx_math_Ray
};
var com_babylonhx_math_Space = $hxClasses["com.babylonhx.math.Space"] = { __ename__ : ["com","babylonhx","math","Space"], __constructs__ : ["LOCAL","GLOBAL"] };
com_babylonhx_math_Space.LOCAL = ["LOCAL",0];
com_babylonhx_math_Space.LOCAL.toString = $estr;
com_babylonhx_math_Space.LOCAL.__enum__ = com_babylonhx_math_Space;
com_babylonhx_math_Space.GLOBAL = ["GLOBAL",1];
com_babylonhx_math_Space.GLOBAL.toString = $estr;
com_babylonhx_math_Space.GLOBAL.__enum__ = com_babylonhx_math_Space;
var com_babylonhx_math_Vector2 = $hx_exports.BABYLON.Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.babylonhx.math.Vector2"] = com_babylonhx_math_Vector2;
com_babylonhx_math_Vector2.__name__ = ["com","babylonhx","math","Vector2"];
com_babylonhx_math_Vector2.Zero = function() {
	return new com_babylonhx_math_Vector2(0,0);
};
com_babylonhx_math_Vector2.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector2(array[offset],array[offset + 1]);
};
com_babylonhx_math_Vector2.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	return result;
};
com_babylonhx_math_Vector2.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y;
};
com_babylonhx_math_Vector2.Normalize = function(vector) {
	var newVector = new com_babylonhx_math_Vector2(vector.x,vector.y);
	newVector.normalize();
	return newVector;
};
com_babylonhx_math_Vector2.Minimize = function(left,right) {
	var x;
	if(left.x < right.x) x = left.x; else x = right.x;
	var y;
	if(left.y < right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Maximize = function(left,right) {
	var x;
	if(left.x > right.x) x = left.x; else x = right.x;
	var y;
	if(left.y > right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Transform = function(vector,transformation) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5];
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector2.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector2.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	return x * x + y * y;
};
com_babylonhx_math_Vector2.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		return this;
	}
	,copyFromFloats: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,addVector3: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x - otherVector.x,this.y - otherVector.y);
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		return this;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x * otherVector.x,this.y * otherVector.y);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		return this;
	}
	,multiplyByFloats: function(x,y) {
		return new com_babylonhx_math_Vector2(this.x * x,this.y * y);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x / otherVector.x,this.y / otherVector.y);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector2(-this.x,-this.y);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector2(this.x * scale,this.y * scale);
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon);
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector2(this.x,this.y);
	}
	,__class__: com_babylonhx_math_Vector2
};
var com_babylonhx_math_Viewport = $hx_exports.BABYLON.Viewport = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["com.babylonhx.math.Viewport"] = com_babylonhx_math_Viewport;
com_babylonhx_math_Viewport.__name__ = ["com","babylonhx","math","Viewport"];
com_babylonhx_math_Viewport.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,toGlobal: function(engine) {
		var width = engine.getRenderWidth();
		var height = engine.getRenderHeight();
		return new com_babylonhx_math_Viewport(this.x * width,this.y * height,this.width * width,this.height * height);
	}
	,__class__: com_babylonhx_math_Viewport
};
var com_babylonhx_mesh_GroundMesh = $hx_exports.BABYLON.GroundMesh = function(name,scene) {
	this._worldInverse = new com_babylonhx_math_Matrix();
	this.generateOctree = false;
	com_babylonhx_mesh_Mesh.call(this,name,scene);
};
$hxClasses["com.babylonhx.mesh.GroundMesh"] = com_babylonhx_mesh_GroundMesh;
com_babylonhx_mesh_GroundMesh.__name__ = ["com","babylonhx","mesh","GroundMesh"];
com_babylonhx_mesh_GroundMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_GroundMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	generateOctree: null
	,_worldInverse: null
	,_subdivisions: null
	,get_subdivisions: function() {
		return this._subdivisions;
	}
	,set_subdivisions: function(value) {
		this._subdivisions = value;
		return this._subdivisions;
	}
	,optimize: function(chunksCount) {
		this.subdivide(this._subdivisions);
		this.createOrUpdateSubmeshesOctree(32,null);
	}
	,getHeightAtCoordinates: function(x,z) {
		var ray = new com_babylonhx_math_Ray(new com_babylonhx_math_Vector3(x,this.getBoundingInfo().boundingBox.maximumWorld.y + 1,z),new com_babylonhx_math_Vector3(0,-1,0));
		this.getWorldMatrix().invertToRef(this._worldInverse);
		ray = com_babylonhx_math_Ray.Transform(ray,this._worldInverse);
		var pickInfo = this.intersects(ray);
		if(pickInfo.hit) return pickInfo.pickedPoint.y;
		return 0;
	}
	,__class__: com_babylonhx_mesh_GroundMesh
	,__properties__: $extend(com_babylonhx_mesh_Mesh.prototype.__properties__,{set_subdivisions:"set_subdivisions",get_subdivisions:"get_subdivisions"})
});
var com_babylonhx_mesh_InstancedMesh = $hx_exports.BABYLON.InstancedMesh = function(name,source) {
	com_babylonhx_mesh_AbstractMesh.call(this,name,source._scene);
	source.instances.push(this);
	this._sourceMesh = source;
	this.position.copyFrom(source.position);
	this.rotation.copyFrom(source.rotation);
	this.scaling.copyFrom(source.scaling);
	if(source.rotationQuaternion != null) this.rotationQuaternion = source.rotationQuaternion.clone();
	this.infiniteDistance = source.infiniteDistance;
	this._pivotMatrix = source._pivotMatrix;
	this._cache.pivotMatrixUpdated = true;
	this.refreshBoundingInfo();
	this._syncSubMeshes();
};
$hxClasses["com.babylonhx.mesh.InstancedMesh"] = com_babylonhx_mesh_InstancedMesh;
com_babylonhx_mesh_InstancedMesh.__name__ = ["com","babylonhx","mesh","InstancedMesh"];
com_babylonhx_mesh_InstancedMesh.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_mesh_InstancedMesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_InstancedMesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	_sourceMesh: null
	,_currentLOD: null
	,get_receiveShadows: function() {
		return this._sourceMesh.get_receiveShadows();
	}
	,get_material: function() {
		return this._sourceMesh.get_material();
	}
	,get_visibility: function() {
		return this._sourceMesh.get_visibility();
	}
	,get_skeleton: function() {
		return this._sourceMesh.get_skeleton();
	}
	,getTotalVertices: function() {
		return this._sourceMesh.getTotalVertices();
	}
	,sourceMesh: null
	,get_sourceMesh: function() {
		return this._sourceMesh;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getVerticesData(kind,copyWhenShared);
	}
	,isVerticesDataPresent: function(kind) {
		return this._sourceMesh.isVerticesDataPresent(kind);
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getIndices(copyWhenShared);
	}
	,get_positions: function() {
		return this._sourceMesh._positions;
	}
	,refreshBoundingInfo: function() {
		var data = this._sourceMesh.getVerticesData("position");
		if(data != null) {
			var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._sourceMesh.getTotalVertices());
			this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
		}
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_preActivate: function() {
		if(this._currentLOD != null) this._currentLOD._preActivate();
	}
	,_activate: function(renderId) {
		if(this._currentLOD != null) this.get_sourceMesh()._registerInstanceForRenderId(this,renderId);
	}
	,getLOD: function(camera,boundingSphere) {
		this._currentLOD = this.get_sourceMesh().getLOD(this._scene.activeCamera,this.getBoundingInfo().boundingSphere);
		if(this._currentLOD == this.get_sourceMesh()) return this;
		return this._currentLOD;
	}
	,_syncSubMeshes: function() {
		this.releaseSubMeshes();
		if(this._sourceMesh.subMeshes != null) {
			var _g1 = 0;
			var _g = this._sourceMesh.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._sourceMesh.subMeshes[index].clone(this,this._sourceMesh);
			}
		}
	}
	,_generatePointsArray: function() {
		return this._sourceMesh._generatePointsArray();
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		haxe_Log.trace("InstancedMesh:clone()",{ fileName : "InstancedMesh.hx", lineNumber : 141, className : "com.babylonhx.mesh.InstancedMesh", methodName : "clone"});
		var result = this._sourceMesh.createInstance(name);
		com_babylonhx_tools_Tools.DeepCopy(this,result,["name"],[]);
		this.refreshBoundingInfo();
		if(newParent != null) result.parent = newParent;
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = this._scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = this._scene.meshes[index];
				if(mesh.parent == this) mesh.clone(mesh.name,result);
			}
		}
		result.computeWorldMatrix(true);
		return result;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		HxOverrides.remove(this._sourceMesh.instances,this);
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,__class__: com_babylonhx_mesh_InstancedMesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_sourceMesh:"get_sourceMesh"})
});
var com_babylonhx_mesh_LinesMesh = $hx_exports.BABYLON.LinesMesh = function(name,scene,updatable) {
	if(updatable == null) updatable = false;
	this._indices = [];
	this.alpha = 1;
	this.color = new com_babylonhx_math_Color3(1,1,1);
	com_babylonhx_mesh_Mesh.call(this,name,scene);
	this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"], needAlphaBlending : true});
};
$hxClasses["com.babylonhx.mesh.LinesMesh"] = com_babylonhx_mesh_LinesMesh;
com_babylonhx_mesh_LinesMesh.__name__ = ["com","babylonhx","mesh","LinesMesh"];
com_babylonhx_mesh_LinesMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_LinesMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	color: null
	,alpha: null
	,_colorShader: null
	,_ib: null
	,_indicesLength: null
	,_indices: null
	,get_material: function() {
		return this._colorShader;
	}
	,get_isPickable: function() {
		return false;
	}
	,get_checkCollisions: function() {
		return false;
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexToBind = this._geometry.getIndexBuffer();
		engine.bindBuffers(this._geometry.getVertexBuffer("position").getBuffer(),indexToBind,[3],12,this._colorShader.getEffect());
		this._colorShader.setColor4("color",this.color.toColor4(this.alpha));
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		engine.draw(false,subMesh.indexStart,subMesh.indexCount);
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		return null;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		this._colorShader.dispose();
		com_babylonhx_mesh_Mesh.prototype.dispose.call(this,doNotRecurse);
	}
	,__class__: com_babylonhx_mesh_LinesMesh
});
var com_babylonhx_mesh_MeshLODLevel = $hx_exports.BABYLON.MeshLODLevel = function(distance,mesh) {
	this.distance = distance;
	this.mesh = mesh;
};
$hxClasses["com.babylonhx.mesh.MeshLODLevel"] = com_babylonhx_mesh_MeshLODLevel;
com_babylonhx_mesh_MeshLODLevel.__name__ = ["com","babylonhx","mesh","MeshLODLevel"];
com_babylonhx_mesh_MeshLODLevel.prototype = {
	mesh: null
	,distance: null
	,__class__: com_babylonhx_mesh_MeshLODLevel
};
var com_babylonhx_mesh_VertexBuffer = $hx_exports.BABYLON.VertexBuffer = function(engine,data,kind,updatable,postponeInternalCreation,stride) {
	if(postponeInternalCreation == null) postponeInternalCreation = false;
	this._engine = engine;
	this._updatable = updatable;
	this._data = data;
	if(!postponeInternalCreation) this.create();
	this._kind = kind;
	if(stride != null) {
		this._strideSize = stride;
		return;
	}
	switch(kind) {
	case "position":
		this._strideSize = 3;
		break;
	case "normal":
		this._strideSize = 3;
		break;
	case "uv":case "uv2":case "uv3":case "uv4":case "uv5":case "uv6":
		this._strideSize = 2;
		break;
	case "color":
		this._strideSize = 4;
		break;
	case "matricesIndices":
		this._strideSize = 4;
		break;
	case "matricesWeights":
		this._strideSize = 4;
		break;
	}
};
$hxClasses["com.babylonhx.mesh.VertexBuffer"] = com_babylonhx_mesh_VertexBuffer;
com_babylonhx_mesh_VertexBuffer.__name__ = ["com","babylonhx","mesh","VertexBuffer"];
com_babylonhx_mesh_VertexBuffer.prototype = {
	_mesh: null
	,_engine: null
	,_buffer: null
	,_data: null
	,_updatable: null
	,_kind: null
	,_strideSize: null
	,isUpdatable: function() {
		return this._updatable;
	}
	,getData: function() {
		return this._data;
	}
	,getBuffer: function() {
		return this._buffer;
	}
	,getStrideSize: function() {
		return this._strideSize;
	}
	,create: function(data) {
		if(data == null && this._buffer != null) return;
		if(data != null) data = data; else data = this._data;
		if(this._buffer == null) {
			if(this._updatable) this._buffer = this._engine.createDynamicVertexBuffer(data.length * 4); else this._buffer = this._engine.createVertexBuffer(data);
		}
		if(this._updatable) {
			this._engine.updateDynamicVertexBuffer(this._buffer,data,null);
			this._data = data;
		}
	}
	,update: function(data) {
		this.create(data);
	}
	,updateDirectly: function(data,offset) {
		if(this._buffer != null) {
			if(this._updatable) {
				this._engine.updateDynamicVertexBuffer(this._buffer,data,offset);
				this._data = null;
			}
		}
	}
	,dispose: function() {
		if(this._buffer != null) {
			if(this._engine._releaseBuffer(this._buffer)) this._buffer = null;
		}
	}
	,__class__: com_babylonhx_mesh_VertexBuffer
};
var com_babylonhx_mesh_WebGLBuffer = $hx_exports.BABYLON.WebGLBuffer = function(buffer) {
	this.is32Bits = false;
	this.capacity = 0;
	this.buffer = buffer;
	this.references = 1;
};
$hxClasses["com.babylonhx.mesh.WebGLBuffer"] = com_babylonhx_mesh_WebGLBuffer;
com_babylonhx_mesh_WebGLBuffer.__name__ = ["com","babylonhx","mesh","WebGLBuffer"];
com_babylonhx_mesh_WebGLBuffer.prototype = {
	buffer: null
	,references: null
	,capacity: null
	,is32Bits: null
	,__class__: com_babylonhx_mesh_WebGLBuffer
};
var com_babylonhx_mesh__$InstancesBatch = $hx_exports.BABYLON._InstancesBatch = function() {
	this.renderSelf = [];
	this.visibleInstances = [];
	this.mustReturn = false;
	this.mustReturn = false;
	this.visibleInstances = [];
	this.renderSelf = [];
};
$hxClasses["com.babylonhx.mesh._InstancesBatch"] = com_babylonhx_mesh__$InstancesBatch;
com_babylonhx_mesh__$InstancesBatch.__name__ = ["com","babylonhx","mesh","_InstancesBatch"];
com_babylonhx_mesh__$InstancesBatch.prototype = {
	mustReturn: null
	,visibleInstances: null
	,renderSelf: null
	,__class__: com_babylonhx_mesh__$InstancesBatch
};
var com_babylonhx_mesh__$VisibleInstances = $hx_exports.BABYLON._VisibleInstances = function(defaultRenderId,selfDefaultRenderId) {
	this.map = new haxe_ds_IntMap();
	this.defaultRenderId = defaultRenderId;
	this.selfDefaultRenderId = selfDefaultRenderId;
};
$hxClasses["com.babylonhx.mesh._VisibleInstances"] = com_babylonhx_mesh__$VisibleInstances;
com_babylonhx_mesh__$VisibleInstances.__name__ = ["com","babylonhx","mesh","_VisibleInstances"];
com_babylonhx_mesh__$VisibleInstances.prototype = {
	map: null
	,defaultRenderId: null
	,selfDefaultRenderId: null
	,__class__: com_babylonhx_mesh__$VisibleInstances
};
var com_babylonhx_mesh_simplification_DecimationTriangle = $hx_exports.BABYLON.DecimationTriangle = function(vertices) {
	this.error = [];
	this.deleted = false;
	this.isDirty = false;
	this.borderFactor = 0;
	this.vertices = vertices;
	this.deletePending = false;
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationTriangle"] = com_babylonhx_mesh_simplification_DecimationTriangle;
com_babylonhx_mesh_simplification_DecimationTriangle.__name__ = ["com","babylonhx","mesh","simplification","DecimationTriangle"];
com_babylonhx_mesh_simplification_DecimationTriangle.prototype = {
	vertices: null
	,normal: null
	,error: null
	,deleted: null
	,isDirty: null
	,borderFactor: null
	,deletePending: null
	,originalOffset: null
	,__class__: com_babylonhx_mesh_simplification_DecimationTriangle
};
var com_babylonhx_mesh_simplification_DecimationVertex = $hx_exports.BABYLON.DecimationVertex = function(position,id) {
	this.id = id;
	this.position = position;
	this.isBorder = true;
	this.q = new com_babylonhx_mesh_simplification_QuadraticMatrix();
	this.triangleCount = 0;
	this.triangleStart = 0;
	this.originalOffsets = [];
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationVertex"] = com_babylonhx_mesh_simplification_DecimationVertex;
com_babylonhx_mesh_simplification_DecimationVertex.__name__ = ["com","babylonhx","mesh","simplification","DecimationVertex"];
com_babylonhx_mesh_simplification_DecimationVertex.prototype = {
	id: null
	,position: null
	,q: null
	,isBorder: null
	,triangleStart: null
	,triangleCount: null
	,originalOffsets: null
	,updatePosition: function(newPosition) {
		this.position.copyFrom(newPosition);
	}
	,__class__: com_babylonhx_mesh_simplification_DecimationVertex
};
var com_babylonhx_mesh_simplification_ISimplificationSettings = $hx_exports.BABYLON.ISimplificationSettings = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplificationSettings"] = com_babylonhx_mesh_simplification_ISimplificationSettings;
com_babylonhx_mesh_simplification_ISimplificationSettings.__name__ = ["com","babylonhx","mesh","simplification","ISimplificationSettings"];
com_babylonhx_mesh_simplification_ISimplificationSettings.prototype = {
	quality: null
	,distance: null
	,optimizeMesh: null
	,__class__: com_babylonhx_mesh_simplification_ISimplificationSettings
};
var com_babylonhx_mesh_simplification_ISimplifier = $hx_exports.BABYLON.ISimplifier = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplifier"] = com_babylonhx_mesh_simplification_ISimplifier;
com_babylonhx_mesh_simplification_ISimplifier.__name__ = ["com","babylonhx","mesh","simplification","ISimplifier"];
com_babylonhx_mesh_simplification_ISimplifier.prototype = {
	simplify: null
	,__class__: com_babylonhx_mesh_simplification_ISimplifier
};
var com_babylonhx_mesh_simplification_QuadraticErrorSimplification = $hx_exports.BABYLON.QuadraticErrorSimplification = function(mesh) {
	this.syncIterations = 5000;
	this.initialised = false;
	this.aggressiveness = 7;
	this.decimationIterations = 100;
	this.boundingBoxEpsilon = 0.001;
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticErrorSimplification"] = com_babylonhx_mesh_simplification_QuadraticErrorSimplification;
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__name__ = ["com","babylonhx","mesh","simplification","QuadraticErrorSimplification"];
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplifier];
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.prototype = {
	triangles: null
	,vertices: null
	,references: null
	,initialised: null
	,_reconstructedMesh: null
	,syncIterations: null
	,aggressiveness: null
	,decimationIterations: null
	,boundingBoxEpsilon: null
	,_mesh: null
	,simplify: function(settings,successCallback,errorCallback) {
		var _g = this;
		this.initDecimatedMesh();
		com_babylonhx_tools_AsyncLoop.Run(this._mesh.subMeshes.length,function(loop) {
			_g.initWithMesh(loop.index,function() {
				_g.runDecimation(settings,loop.index,function() {
					loop.executeNext();
				});
			});
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				successCallback(_g._reconstructedMesh);
			},0);
		});
	}
	,isTriangleOnBoundingBox: function(triangle) {
		var gCount = 0;
		var _g = 0;
		var _g1 = triangle.vertices;
		while(_g < _g1.length) {
			var vertex = _g1[_g];
			++_g;
			var count = 0;
			var vPos = vertex.position;
			var bbox = this._mesh.getBoundingInfo().boundingBox;
			if(bbox.maximum.x - vPos.x < this.boundingBoxEpsilon || vPos.x - bbox.minimum.x > this.boundingBoxEpsilon) ++count;
			if(bbox.maximum.y == vPos.y || vPos.y == bbox.minimum.y) ++count;
			if(bbox.maximum.z == vPos.z || vPos.z == bbox.minimum.z) ++count;
			if(count > 1) ++gCount;
		}
		if(gCount > 1) {
			haxe_Log.trace(triangle,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 82, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
			haxe_Log.trace(gCount,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 83, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
		}
		return gCount > 1;
	}
	,runDecimation: function(settings,submeshIndex,successCallback) {
		var _g = this;
		var targetCount = this.triangles.length * settings.quality | 0;
		var deletedTriangles = 0;
		var triangleCount = this.triangles.length;
		var iterationFunction = function(iteration,cback) {
			com_babylonhx_tools_Tools.delay(function() {
				if(iteration % 5 == 0) _g.updateMesh(iteration == 0);
				var _g22 = 0;
				var _g11 = _g.triangles.length;
				while(_g22 < _g11) {
					var i1 = _g22++;
					_g.triangles[i1].isDirty = false;
				}
				var threshold = 0.000000001 * Math.pow(iteration + 3,_g.aggressiveness);
				var trianglesIterator = function(i) {
					var tIdx = (_g.triangles.length / 2 + i) % _g.triangles.length | 0;
					var t = _g.triangles[tIdx];
					if(t == null) return;
					if(t.error[3] > threshold || t.deleted || t.isDirty) return;
					var _g1 = 0;
					while(_g1 < 3) {
						var j = _g1++;
						if(t.error[j] < threshold) {
							var deleted0 = [];
							var deleted1 = [];
							var v0 = t.vertices[j];
							var v1 = t.vertices[(j + 1) % 3];
							if(v0.isBorder != v1.isBorder) continue;
							var p = new com_babylonhx_math_Vector3(0,0,0);
							var n = new com_babylonhx_math_Vector3(0,0,0);
							var uv = new com_babylonhx_math_Vector2(0,0);
							var color = new com_babylonhx_math_Color4(0,0,0,1);
							_g.calculateError(v0,v1,p,n,uv,color);
							var delTr = [];
							if(_g.isFlipped(v0,v1,p,deleted0,t.borderFactor,delTr)) continue;
							if(_g.isFlipped(v1,v0,p,deleted1,t.borderFactor,delTr)) continue;
							if(HxOverrides.indexOf(deleted0,true,0) < 0 || HxOverrides.indexOf(deleted1,true,0) < 0) continue;
							var uniqueArray = [];
							var _g2 = 0;
							while(_g2 < delTr.length) {
								var deletedT = delTr[_g2];
								++_g2;
								if(HxOverrides.indexOf(uniqueArray,deletedT,0) == -1) {
									deletedT.deletePending = true;
									uniqueArray.push(deletedT);
								}
							}
							if(uniqueArray.length % 2 != 0) continue;
							v0.q = v1.q.add(v0.q);
							v0.updatePosition(p);
							var tStart = _g.references.length;
							deletedTriangles = _g.updateTriangles(v0,v0,deleted0,deletedTriangles);
							deletedTriangles = _g.updateTriangles(v0,v1,deleted1,deletedTriangles);
							var tCount = _g.references.length - tStart;
							if(tCount <= v0.triangleCount) {
								if(tCount > 0) {
									var _g21 = 0;
									while(_g21 < tCount) {
										var c = _g21++;
										_g.references[v0.triangleStart + c] = _g.references[tStart + c];
									}
								}
							} else v0.triangleStart = tStart;
							v0.triangleCount = tCount;
							break;
						}
					}
				};
				com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,trianglesIterator,cback,function() {
					return triangleCount - deletedTriangles <= targetCount;
				});
			},0);
		};
		com_babylonhx_tools_AsyncLoop.Run(this.decimationIterations,function(loop) {
			if(triangleCount - deletedTriangles <= targetCount) loop.breakLoop(); else iterationFunction(loop.index,$bind(loop,loop.executeNext));
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				_g.reconstructMesh(submeshIndex);
				successCallback();
			},0);
		});
	}
	,initWithMesh: function(submeshIndex,callbackFn,optimizeMesh) {
		if(optimizeMesh == null) optimizeMesh = false;
		var _g = this;
		this.vertices = [];
		this.triangles = [];
		var positionData = this._mesh.getVerticesData("position");
		var indices = this._mesh.getIndices();
		var submesh = this._mesh.subMeshes[submeshIndex];
		var findInVertices = function(positionToSearch) {
			if(optimizeMesh) {
				var _g2 = 0;
				var _g1 = _g.vertices.length;
				while(_g2 < _g1) {
					var ii = _g2++;
					if(_g.vertices[ii].position.equals(positionToSearch)) return _g.vertices[ii];
				}
			}
			return null;
		};
		var vertexReferences = [];
		var vertexInit = function(i) {
			var offset = i + submesh.verticesStart;
			var position = com_babylonhx_math_Vector3.FromArray(positionData,offset * 3);
			var vertex = findInVertices(position);
			if(vertex == null) vertex = new com_babylonhx_mesh_simplification_DecimationVertex(position,_g.vertices.length);
			vertex.originalOffsets.push(offset);
			if(vertex.id == _g.vertices.length) _g.vertices.push(vertex);
			vertexReferences.push(vertex.id);
		};
		var totalVertices = submesh.verticesCount;
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(totalVertices,this.syncIterations / 4 | 0,vertexInit,function() {
			var indicesInit = function(i1) {
				var offset1 = submesh.indexStart / 3 + i1;
				var pos = offset1 * 3 | 0;
				var i0 = indices[pos];
				var i11 = indices[pos + 1];
				var i2 = indices[pos + 2];
				var v0 = _g.vertices[vertexReferences[i0 - submesh.verticesStart]];
				var v1 = _g.vertices[vertexReferences[i11 - submesh.verticesStart]];
				var v2 = _g.vertices[vertexReferences[i2 - submesh.verticesStart]];
				var triangle = new com_babylonhx_mesh_simplification_DecimationTriangle([v0,v1,v2]);
				triangle.originalOffset = pos;
				_g.triangles.push(triangle);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(indices.length / 3 | 0,_g.syncIterations,indicesInit,function() {
				_g.init(callbackFn);
			});
		});
	}
	,init: function(callbackFn) {
		var _g = this;
		var triangleInit1 = function(i) {
			var t = _g.triangles[i];
			t.normal = com_babylonhx_math_Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position),t.vertices[2].position.subtract(t.vertices[0].position)).normalize();
			var _g1 = 0;
			while(_g1 < 3) {
				var j = _g1++;
				t.vertices[j].q.addArrayInPlace(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(t.normal.x,t.normal.y,t.normal.z,-com_babylonhx_math_Vector3.Dot(t.normal,t.vertices[0].position)));
			}
		};
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(this.triangles.length,this.syncIterations,triangleInit1,function() {
			var triangleInit2 = function(i1) {
				var t1 = _g.triangles[i1];
				var _g11 = 0;
				while(_g11 < 3) {
					var j1 = _g11++;
					t1.error[j1] = _g.calculateError(t1.vertices[j1],t1.vertices[(j1 + 1) % 3]);
				}
				t1.error[3] = Math.min(t1.error[0],t1.error[1]);
				t1.error[3] = Math.min(t1.error[3],t1.error[2]);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,triangleInit2,function() {
				_g.initialised = true;
				callbackFn();
			});
		});
	}
	,reconstructMesh: function(submeshIndex) {
		var newTriangles = [];
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.vertices[i].triangleCount = 0;
		}
		var t = null;
		var _g11 = 0;
		var _g2 = this.triangles.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(!this.triangles[i1].deleted) {
				t = this.triangles[i1];
				var _g21 = 0;
				while(_g21 < 3) {
					var j = _g21++;
					t.vertices[j].triangleCount = 1;
				}
				newTriangles.push(t);
			}
		}
		var newPositionData = this._reconstructedMesh.getVerticesData("position");
		if(newPositionData == null) newPositionData = [];
		var newNormalData = this._reconstructedMesh.getVerticesData("normal");
		if(newNormalData == null) newNormalData = [];
		var newUVsData = this._reconstructedMesh.getVerticesData("uv");
		if(newUVsData == null) newUVsData = [];
		var newColorsData = this._reconstructedMesh.getVerticesData("color");
		if(newColorsData == null) newColorsData = [];
		var normalData = this._mesh.getVerticesData("normal");
		var uvs = this._mesh.getVerticesData("uv");
		var colorsData = this._mesh.getVerticesData("color");
		var vertexCount = 0;
		var _g12 = 0;
		var _g3 = this.vertices.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var vertex = this.vertices[i2];
			vertex.id = vertexCount;
			if(vertex.triangleCount > 0) {
				var _g22 = 0;
				var _g31 = vertex.originalOffsets;
				while(_g22 < _g31.length) {
					var originalOffset = _g31[_g22];
					++_g22;
					newPositionData.push(vertex.position.x);
					newPositionData.push(vertex.position.y);
					newPositionData.push(vertex.position.z);
					newNormalData.push(normalData[originalOffset * 3]);
					newNormalData.push(normalData[originalOffset * 3 + 1]);
					newNormalData.push(normalData[originalOffset * 3 + 2]);
					if(uvs != null && uvs.length > 0) {
						newUVsData.push(uvs[originalOffset * 2]);
						newUVsData.push(uvs[originalOffset * 2 + 1]);
					} else if(colorsData != null && colorsData.length > 0) {
						newColorsData.push(colorsData[originalOffset * 4]);
						newColorsData.push(colorsData[originalOffset * 4 + 1]);
						newColorsData.push(colorsData[originalOffset * 4 + 2]);
						newColorsData.push(colorsData[originalOffset * 4 + 3]);
					}
					++vertexCount;
				}
			}
		}
		var startingIndex = this._reconstructedMesh.getTotalIndices();
		var startingVertex = this._reconstructedMesh.getTotalVertices();
		var submeshesArray = this._reconstructedMesh.subMeshes;
		this._reconstructedMesh.subMeshes = [];
		var newIndicesArray = this._reconstructedMesh.getIndices();
		var originalIndices = this._mesh.getIndices();
		var _g13 = 0;
		var _g4 = newTriangles.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var t1 = newTriangles[i3];
			var _g23 = 0;
			var _g32 = [0,1,2];
			while(_g23 < _g32.length) {
				var idx = _g32[_g23];
				++_g23;
				var id = originalIndices[t1.originalOffset + idx];
				var offset = HxOverrides.indexOf(t1.vertices[idx].originalOffsets,id,0);
				if(offset < 0) offset = 0;
				newIndicesArray.push(t1.vertices[idx].id + offset + startingVertex);
			}
		}
		this._reconstructedMesh.setIndices(newIndicesArray);
		this._reconstructedMesh.setVerticesData("position",newPositionData);
		this._reconstructedMesh.setVerticesData("normal",newNormalData);
		if(newUVsData.length > 0) this._reconstructedMesh.setVerticesData("uv",newUVsData);
		if(newColorsData.length > 0) this._reconstructedMesh.setVerticesData("color",newColorsData);
		var originalSubmesh = this._mesh.subMeshes[submeshIndex];
		if(submeshIndex > 0) {
			this._reconstructedMesh.subMeshes = [];
			var _g5 = 0;
			while(_g5 < submeshesArray.length) {
				var submesh = submeshesArray[_g5];
				++_g5;
				new com_babylonhx_mesh_SubMesh(submesh.materialIndex,submesh.verticesStart,submesh.verticesCount,submesh.indexStart,submesh.indexCount,submesh._mesh);
			}
			var newSubmesh = new com_babylonhx_mesh_SubMesh(originalSubmesh.materialIndex,startingVertex,vertexCount,startingIndex,newTriangles.length * 3,this._reconstructedMesh);
		}
	}
	,initDecimatedMesh: function() {
		this._reconstructedMesh = new com_babylonhx_mesh_Mesh(this._mesh.name + "Decimated",this._mesh._scene);
		this._reconstructedMesh.set_material(this._mesh.get_material());
		this._reconstructedMesh.parent = this._mesh.parent;
		this._reconstructedMesh.isVisible = false;
	}
	,isFlipped: function(vertex1,vertex2,point,deletedArray,borderFactor,delTr) {
		var _g1 = 0;
		var _g = vertex1.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];
			if(t.deleted) continue;
			var s = this.references[vertex1.triangleStart + i].vertexId;
			var v1 = t.vertices[(s + 1) % 3];
			var v2 = t.vertices[(s + 2) % 3];
			if(v1 == vertex2 || v2 == vertex2) {
				deletedArray[i] = true;
				delTr.push(t);
				continue;
			}
			var d1 = v1.position.subtract(point);
			d1 = d1.normalize();
			var d2 = v2.position.subtract(point);
			d2 = d2.normalize();
			if(Math.abs(d1.x * d2.x + d1.y * d2.y + d1.z * d2.z) > 0.999) return true;
			var normal = com_babylonhx_math_Vector3.Cross(d1,d2).normalize();
			deletedArray[i] = false;
			if(com_babylonhx_math_Vector3.Dot(normal,t.normal) < 0.2) return true;
		}
		return false;
	}
	,updateTriangles: function(origVertex,vertex,deletedArray,deletedTriangles) {
		var newDeleted = deletedTriangles;
		var _g1 = 0;
		var _g = vertex.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var ref = this.references[vertex.triangleStart + i];
			var t = this.triangles[ref.triangleId];
			if(t.deleted) continue;
			if(deletedArray[i] && t.deletePending) {
				t.deleted = true;
				newDeleted++;
				continue;
			}
			t.vertices[ref.vertexId] = origVertex;
			t.isDirty = true;
			t.error[0] = this.calculateError(t.vertices[0],t.vertices[1]) + t.borderFactor / 2;
			t.error[1] = this.calculateError(t.vertices[1],t.vertices[2]) + t.borderFactor / 2;
			t.error[2] = this.calculateError(t.vertices[2],t.vertices[0]) + t.borderFactor / 2;
			t.error[3] = Math.min(t.error[0],t.error[1]);
			t.error[3] = Math.min(t.error[3],t.error[2]);
			this.references.push(ref);
		}
		return newDeleted;
	}
	,identifyBorder: function() {
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var vCount = [];
			var vId = [];
			var v = this.vertices[i];
			var _g3 = 0;
			var _g2 = v.triangleCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];
				var _g4 = 0;
				while(_g4 < 3) {
					var ii = _g4++;
					var ofs = 0;
					var vv = triangle.vertices[ii];
					while(ofs < vCount.length) {
						if(vId[ofs] == vv.id) break;
						++ofs;
					}
					if(ofs == vCount.length) {
						vCount.push(1);
						vId.push(vv.id);
					} else vCount[ofs]++;
				}
			}
			var _g31 = 0;
			var _g21 = vCount.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				if(vCount[j1] == 1) this.vertices[vId[j1]].isBorder = true; else this.vertices[vId[j1]].isBorder = false;
			}
		}
	}
	,updateMesh: function(identifyBorders) {
		if(identifyBorders == null) identifyBorders = false;
		if(!identifyBorders) {
			var newTrianglesVector = [];
			var _g1 = 0;
			var _g = this.triangles.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.triangles[i].deleted) newTrianglesVector.push(this.triangles[i]);
			}
			this.triangles = newTrianglesVector;
		}
		var _g11 = 0;
		var _g2 = this.vertices.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.vertices[i1].triangleCount = 0;
			this.vertices[i1].triangleStart = 0;
		}
		var t = null;
		var v = null;
		var _g12 = 0;
		var _g3 = this.triangles.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			t = this.triangles[i2];
			var _g21 = 0;
			while(_g21 < 3) {
				var j = _g21++;
				v = t.vertices[j];
				v.triangleCount++;
			}
		}
		var tStart = 0;
		var _g13 = 0;
		var _g4 = this.vertices.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.vertices[i3].triangleStart = tStart;
			tStart += this.vertices[i3].triangleCount;
			this.vertices[i3].triangleCount = 0;
		}
		var newReferences = [];
		var _g14 = 0;
		var _g5 = this.triangles.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			t = this.triangles[i4];
			var _g22 = 0;
			while(_g22 < 3) {
				var j1 = _g22++;
				v = t.vertices[j1];
				newReferences[v.triangleStart + v.triangleCount] = new com_babylonhx_mesh_simplification_Reference(j1,i4);
				v.triangleCount++;
			}
		}
		this.references = newReferences;
		if(identifyBorders) this.identifyBorder();
	}
	,vertexError: function(q,point) {
		var x = point.x;
		var y = point.y;
		var z = point.z;
		return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];
	}
	,calculateError: function(vertex1,vertex2,pointResult,normalResult,uvResult,colorResult) {
		var q = vertex1.q.add(vertex2.q);
		var border = vertex1.isBorder && vertex2.isBorder;
		var error = 0.0;
		var qDet = q.det(0,1,2,1,4,5,2,5,7);
		if(qDet != 0 && !border) {
			if(pointResult == null) pointResult = new com_babylonhx_math_Vector3(0,0,0);
			pointResult.x = -1 / qDet * q.det(1,2,3,4,5,6,5,7,8);
			pointResult.y = 1 / qDet * q.det(0,2,3,1,5,6,2,7,8);
			pointResult.z = -1 / qDet * q.det(0,1,3,1,4,6,2,5,8);
			error = this.vertexError(q,pointResult);
		} else {
			var p3 = vertex1.position.add(vertex2.position).divide(new com_babylonhx_math_Vector3(2,2,2));
			var error1 = this.vertexError(q,vertex1.position);
			var error2 = this.vertexError(q,vertex2.position);
			var error3 = this.vertexError(q,p3);
			error = Math.min(error1,error2);
			error = Math.min(error,error3);
			if(error == error1) {
				if(pointResult != null) pointResult.copyFrom(vertex1.position);
			} else if(error == error2) {
				if(pointResult != null) pointResult.copyFrom(vertex2.position);
			} else if(pointResult != null) {
				pointResult.x = p3.x;
				pointResult.y = p3.y;
				pointResult.z = p3.z;
			}
		}
		return error;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticErrorSimplification
};
var com_babylonhx_mesh_simplification_QuadraticMatrix = $hx_exports.BABYLON.QuadraticMatrix = function(data) {
	this.data = [];
	if(data != null) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			if(i <= data.length) this.data[i] = data[i]; else this.data[i] = 0;
		}
	}
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticMatrix"] = com_babylonhx_mesh_simplification_QuadraticMatrix;
com_babylonhx_mesh_simplification_QuadraticMatrix.__name__ = ["com","babylonhx","mesh","simplification","QuadraticMatrix"];
com_babylonhx_mesh_simplification_QuadraticMatrix.FromData = function(a,b,c,d) {
	return new com_babylonhx_mesh_simplification_QuadraticMatrix(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(a,b,c,d));
};
com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers = function(a,b,c,d) {
	return [a * a,a * b,a * c,a * d,b * b,b * c,b * d,c * c,c * d,d * d];
};
com_babylonhx_mesh_simplification_QuadraticMatrix.prototype = {
	data: null
	,det: function(a11,a12,a13,a21,a22,a23,a31,a32,a33) {
		var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];
		return det;
	}
	,addInPlace: function(matrix) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += matrix.data[i];
		}
	}
	,addArrayInPlace: function(data) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += data[i];
		}
	}
	,add: function(matrix) {
		var m = new com_babylonhx_mesh_simplification_QuadraticMatrix();
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			m.data[i] = this.data[i] + matrix.data[i];
		}
		return m;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticMatrix
};
var com_babylonhx_mesh_simplification_Reference = $hx_exports.BABYLON.Reference = function(vertexId,triangleId) {
	this.vertexId = vertexId;
	this.triangleId = triangleId;
};
$hxClasses["com.babylonhx.mesh.simplification.Reference"] = com_babylonhx_mesh_simplification_Reference;
com_babylonhx_mesh_simplification_Reference.__name__ = ["com","babylonhx","mesh","simplification","Reference"];
com_babylonhx_mesh_simplification_Reference.prototype = {
	vertexId: null
	,triangleId: null
	,__class__: com_babylonhx_mesh_simplification_Reference
};
var com_babylonhx_mesh_simplification_SimplificationQueue = $hx_exports.BABYLON.SimplificationQueue = function() {
	this.running = false;
	this._simplificationArray = [];
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationQueue"] = com_babylonhx_mesh_simplification_SimplificationQueue;
com_babylonhx_mesh_simplification_SimplificationQueue.__name__ = ["com","babylonhx","mesh","simplification","SimplificationQueue"];
com_babylonhx_mesh_simplification_SimplificationQueue.prototype = {
	_simplificationArray: null
	,running: null
	,addTask: function(task) {
		this._simplificationArray.push(task);
	}
	,executeNext: function() {
		var task = this._simplificationArray.pop();
		if(task != null) {
			this.running = true;
			this.runSimplification(task);
		} else this.running = false;
	}
	,runSimplification: function(task) {
		var _g2 = this;
		if(task.parallelProcessing) {
			var _g = 0;
			var _g1 = task.settings;
			while(_g < _g1.length) {
				var setting = [_g1[_g]];
				++_g;
				var simplifier = this.getSimplifier(task);
				simplifier.simplify(setting[0],(function(setting) {
					return function(newMesh) {
						task.mesh.addLODLevel(setting[0].distance,newMesh);
						newMesh.isVisible = true;
						if(setting[0].quality == task.settings[task.settings.length - 1].quality && task.successCallback != null) task.successCallback();
						_g2.executeNext();
					};
				})(setting));
			}
		} else {
			var simplifier1 = this.getSimplifier(task);
			var runDecimation = function(setting1,callback) {
				simplifier1.simplify(setting1,function(newMesh1) {
					task.mesh.addLODLevel(setting1.distance,newMesh1);
					newMesh1.isVisible = true;
					callback();
				});
			};
			com_babylonhx_tools_AsyncLoop.Run(task.settings.length,function(loop) {
				runDecimation(task.settings[loop.index],function() {
					loop.executeNext();
				});
			},function() {
				if(task.successCallback != null) task.successCallback();
				_g2.executeNext();
			});
		}
	}
	,getSimplifier: function(task) {
		var _g = task.simplificationType;
		switch(_g) {
		case 0:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		default:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		}
		return null;
	}
	,__class__: com_babylonhx_mesh_simplification_SimplificationQueue
};
var com_babylonhx_mesh_simplification_SimplificationSettings = $hx_exports.BABYLON.SimplificationSettings = function(quality,distance,optimizeMesh) {
	if(optimizeMesh == null) optimizeMesh = false;
	this.quality = quality;
	this.distance = distance;
	this.optimizeMesh = optimizeMesh;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationSettings"] = com_babylonhx_mesh_simplification_SimplificationSettings;
com_babylonhx_mesh_simplification_SimplificationSettings.__name__ = ["com","babylonhx","mesh","simplification","SimplificationSettings"];
com_babylonhx_mesh_simplification_SimplificationSettings.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplificationSettings];
com_babylonhx_mesh_simplification_SimplificationSettings.prototype = {
	quality: null
	,distance: null
	,optimizeMesh: null
	,__class__: com_babylonhx_mesh_simplification_SimplificationSettings
};
var com_babylonhx_mesh_simplification_SimplificationTask = $hx_exports.BABYLON.SimplificationTask = function(settings,simplificationType,mesh,successCallback,parallelProcessing) {
	if(parallelProcessing == null) parallelProcessing = false;
	this.settings = settings;
	this.simplificationType = simplificationType;
	this.mesh = mesh;
	this.successCallback = successCallback;
	this.parallelProcessing = parallelProcessing;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationTask"] = com_babylonhx_mesh_simplification_SimplificationTask;
com_babylonhx_mesh_simplification_SimplificationTask.__name__ = ["com","babylonhx","mesh","simplification","SimplificationTask"];
com_babylonhx_mesh_simplification_SimplificationTask.prototype = {
	settings: null
	,simplificationType: null
	,mesh: null
	,successCallback: null
	,parallelProcessing: null
	,__class__: com_babylonhx_mesh_simplification_SimplificationTask
};
var com_babylonhx_particles_Particle = $hx_exports.BABYLON.Particle = function() {
	this.angularSpeed = 0;
	this.angle = 0;
	this.size = 0;
	this.age = 0;
	this.lifeTime = 1.0;
	this.colorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this.color = new com_babylonhx_math_Color4(0,0,0,0);
	this.direction = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.particles.Particle"] = com_babylonhx_particles_Particle;
com_babylonhx_particles_Particle.__name__ = ["com","babylonhx","particles","Particle"];
com_babylonhx_particles_Particle.prototype = {
	position: null
	,direction: null
	,color: null
	,colorStep: null
	,lifeTime: null
	,age: null
	,size: null
	,angle: null
	,angularSpeed: null
	,__class__: com_babylonhx_particles_Particle
};
var com_babylonhx_physics_IPhysicsEnginePlugin = $hx_exports.BABYLON.IPhysicsEnginePlugin = function() { };
$hxClasses["com.babylonhx.physics.IPhysicsEnginePlugin"] = com_babylonhx_physics_IPhysicsEnginePlugin;
com_babylonhx_physics_IPhysicsEnginePlugin.__name__ = ["com","babylonhx","physics","IPhysicsEnginePlugin"];
com_babylonhx_physics_IPhysicsEnginePlugin.prototype = {
	initialize: null
	,setGravity: null
	,runOneStep: null
	,registerMesh: null
	,registerMeshesAsCompound: null
	,unregisterMesh: null
	,applyImpulse: null
	,createLink: null
	,dispose: null
	,isSupported: null
	,updateBodyPosition: null
	,__class__: com_babylonhx_physics_IPhysicsEnginePlugin
};
var com_babylonhx_physics_PhysicsCompoundBodyPart = $hx_exports.BABYLON.PhysicsCompoundBodyPart = function() { };
$hxClasses["com.babylonhx.physics.PhysicsCompoundBodyPart"] = com_babylonhx_physics_PhysicsCompoundBodyPart;
com_babylonhx_physics_PhysicsCompoundBodyPart.__name__ = ["com","babylonhx","physics","PhysicsCompoundBodyPart"];
com_babylonhx_physics_PhysicsCompoundBodyPart.prototype = {
	mesh: null
	,impostor: null
	,__class__: com_babylonhx_physics_PhysicsCompoundBodyPart
};
var com_babylonhx_physics_PhysicsEngine = $hx_exports.BABYLON.PhysicsEngine = function(plugin) {
	if(plugin != null) this._currentPlugin = plugin; else this._currentPlugin = new com_babylonhx_physics_plugins_OimoPlugin();
};
$hxClasses["com.babylonhx.physics.PhysicsEngine"] = com_babylonhx_physics_PhysicsEngine;
com_babylonhx_physics_PhysicsEngine.__name__ = ["com","babylonhx","physics","PhysicsEngine"];
com_babylonhx_physics_PhysicsEngine.prototype = {
	gravity: null
	,_currentPlugin: null
	,_initialize: function(gravity) {
		this._currentPlugin.initialize();
		this._setGravity(gravity);
	}
	,_runOneStep: function(delta) {
		if(delta > 0.1) delta = 0.1; else if(delta <= 0) delta = 0.016666666666666666;
		this._currentPlugin.runOneStep(delta);
	}
	,_setGravity: function(gravity) {
		if(gravity != null) this.gravity = gravity; else this.gravity = new com_babylonhx_math_Vector3(0,-9.82,0);
		this._currentPlugin.setGravity(this.gravity);
	}
	,_registerMesh: function(mesh,impostor,options) {
		return this._currentPlugin.registerMesh(mesh,impostor,options);
	}
	,_registerMeshesAsCompound: function(parts,options) {
		return this._currentPlugin.registerMeshesAsCompound(parts,options);
	}
	,_unregisterMesh: function(mesh) {
		this._currentPlugin.unregisterMesh(mesh);
	}
	,_applyImpulse: function(mesh,force,contactPoint) {
		this._currentPlugin.applyImpulse(mesh,force,contactPoint);
	}
	,_createLink: function(mesh1,mesh2,pivot1,pivot2,options) {
		return this._currentPlugin.createLink(mesh1,mesh2,pivot1,pivot2,options);
	}
	,_updateBodyPosition: function(mesh) {
		this._currentPlugin.updateBodyPosition(mesh);
	}
	,dispose: function() {
		this._currentPlugin.dispose();
	}
	,isSupported: function() {
		return this._currentPlugin.isSupported();
	}
	,__class__: com_babylonhx_physics_PhysicsEngine
};
var com_babylonhx_physics_plugins_Body = function(Obj) {
	var obj;
	if(Obj != null) obj = Obj; else obj = { };
	if(obj.world == null) return;
	this.parent = obj.world;
	if(obj.name != null) this.name = obj.name; else this.name = "";
	var move;
	if(obj.move != null) move = obj.move; else move = false;
	var noSleep;
	if(obj.noSleep != null) noSleep = obj.noSleep; else noSleep = false;
	var p;
	if(obj.pos != null) p = obj.pos; else p = [0,0,0];
	p[0] *= 0.01;
	p[1] *= 0.01;
	p[2] *= 0.01;
	var s;
	if(obj.size != null) s = obj.size; else s = [1,1,1];
	s[0] *= 0.01;
	s[1] *= 0.01;
	s[2] *= 0.01;
	var rot;
	if(obj.rot != null) rot = obj.rot; else rot = [0,0,0];
	var r = [];
	var tmp = com_babylonhx_physics_plugins_Body.EulerToAxis(rot[0],rot[1],rot[2]);
	r.push(tmp[0]);
	r.push(tmp[1]);
	r.push(tmp[2]);
	r.push(tmp[3]);
	var sc;
	if(obj.sc != null) sc = obj.sc; else sc = new oimohx_physics_collision_shape_ShapeConfig();
	if(obj.config != null) {
		if(obj.config[0] != null) sc.density = obj.config[0]; else sc.density = 1;
		if(obj.config[1] != null) sc.friction = obj.config[1]; else sc.friction = 0.4;
		if(obj.config[2] != null) sc.restitution = obj.config[2]; else sc.restitution = 0.2;
		if(obj.config[3] != null) sc.belongsTo = obj.config[3]; else sc.belongsTo = 1;
		if(obj.config[4] != null) sc.collidesWith = obj.config[4]; else sc.collidesWith = -1;
	}
	if(obj.massPos != null) {
		obj.massPos = obj.massPos.map(function(x) {
			return x * 0.01;
		});
		sc.relativePosition.init(obj.massPos[0],obj.massPos[1],obj.massPos[2]);
	}
	if(obj.massRot != null) {
		obj.massRot = obj.massRot.map(function(x1) {
			return x1 * oimohx_physics_dynamics_World.TO_RAD;
		});
		sc.relativeRotation = com_babylonhx_physics_plugins_Body.EulerToMatrix(obj.massRot[0],obj.massRot[1],obj.massRot[2]);
	}
	this.body = new oimohx_physics_dynamics_RigidBody(p[0],p[1],p[2],r[0],r[1],r[2],r[3]);
	var shape = null;
	var _type;
	if(obj.type != null) _type = obj.type; else _type = "box";
	switch(_type) {
	case "sphere":
		shape = new oimohx_physics_collision_shape_SphereShape(sc,s[0]);
		break;
	case "cylinder":
		shape = new oimohx_physics_collision_shape_BoxShape(sc,s[0],s[1],s[2]);
		break;
	case "box":
		shape = new oimohx_physics_collision_shape_BoxShape(sc,s[0],s[1],s[2]);
		break;
	}
	this.body.addShape(shape);
	if(move) {
		if(obj.massPos != null || obj.massRot != null) this.body.setupMass(1,false); else this.body.setupMass(1,true);
		if(noSleep) this.body.allowSleep = false; else this.body.allowSleep = true;
	} else this.body.setupMass(2,false);
	this.body.name = this.name;
	this.sleeping = this.body.sleeping;
	this.parent.addRigidBody(this.body);
};
$hxClasses["com.babylonhx.physics.plugins.Body"] = com_babylonhx_physics_plugins_Body;
com_babylonhx_physics_plugins_Body.__name__ = ["com","babylonhx","physics","plugins","Body"];
com_babylonhx_physics_plugins_Body.EulerToAxis = function(ox,oy,oz) {
	var c1 = Math.cos(oy * 0.5);
	var s1 = Math.sin(oy * 0.5);
	var c2 = Math.cos(oz * 0.5);
	var s2 = Math.sin(oz * 0.5);
	var c3 = Math.cos(ox * 0.5);
	var s3 = Math.sin(ox * 0.5);
	var c1c2 = c1 * c2;
	var s1s2 = s1 * s2;
	var w = c1c2 * c3 - s1s2 * s3;
	var x = c1c2 * s3 + s1s2 * c3;
	var y = s1 * c2 * c3 + c1 * s2 * s3;
	var z = c1 * s2 * c3 - s1 * c2 * s3;
	var angle = 2 * Math.acos(w);
	var norm = x * x + y * y + z * z;
	if(norm < 0.001) {
		x = 1;
		y = z = 0;
	} else {
		norm = Math.sqrt(norm);
		x /= norm;
		y /= norm;
		z /= norm;
	}
	return [angle,x,y,z];
};
com_babylonhx_physics_plugins_Body.EulerToMatrix = function(ox,oy,oz) {
	var ch = Math.cos(oy);
	var sh = Math.sin(oy);
	var ca = Math.cos(oz);
	var sa = Math.sin(oz);
	var cb = Math.cos(ox);
	var sb = Math.sin(ox);
	var mtx = new oimohx_math_Mat33();
	mtx.elements[0] = ch * ca;
	mtx.elements[1] = sh * sb - ch * sa * cb;
	mtx.elements[2] = ch * sa * sb + sh * cb;
	mtx.elements[3] = sa;
	mtx.elements[4] = ca * cb;
	mtx.elements[5] = -ca * sb;
	mtx.elements[6] = -sh * ca;
	mtx.elements[7] = sh * sa * cb + ch * sb;
	mtx.elements[8] = -sh * sa * sb + ch * cb;
	return mtx;
};
com_babylonhx_physics_plugins_Body.prototype = {
	body: null
	,parent: null
	,name: null
	,sleeping: null
	,setPosition: function(x,y,z) {
		this.body.setPosition(new oimohx_math_Vec3(x,y,z));
	}
	,setRotation: function(rot) {
		this.body.setRotation(rot);
	}
	,getPosition: function() {
		return this.body.position;
	}
	,getSleep: function() {
		return this.body.sleeping;
	}
	,resetPosition: function(x,y,z) {
		this.body.resetPosition(x,y,z);
	}
	,awake: function() {
		this.body.awake();
	}
	,remove: function() {
		this.parent.removeRigidBody(this.body);
	}
	,checkContact: function(name) {
		this.parent.checkContact(this.name,name);
	}
	,__class__: com_babylonhx_physics_plugins_Body
};
var com_babylonhx_physics_plugins_Link = function(obj) {
	if(obj.world == null) return;
	this.parent = obj.world;
	if(obj.name != null) this.name = obj.name; else this.name = "";
	var type;
	if(obj.type != null) type = obj.type; else type = "jointHinge";
	var axe1;
	if(obj.axe1 != null) axe1 = obj.axe1; else axe1 = [1.0,0.0,0.0];
	var axe2;
	if(obj.axe2 != null) axe2 = obj.axe2; else axe2 = [1.0,0.0,0.0];
	var pos1;
	if(obj.pos1 != null) pos1 = obj.pos1; else pos1 = [0.0,0.0,0.0];
	var pos2;
	if(obj.pos2 != null) pos2 = obj.pos2; else pos2 = [0.0,0.0,0.0];
	pos1 = pos1.map(function(x) {
		return x * 0.01;
	});
	pos2 = pos2.map(function(x1) {
		return x1 * 0.01;
	});
	var min;
	var max;
	if(type == "jointDistance") {
		if(obj.min != null) min = obj.min; else min = 0;
		if(obj.max != null) max = obj.max; else max = 10;
		min = min * 0.01;
		max = max * 0.01;
	} else {
		if(obj.min != null) min = obj.min; else min = 57.29578;
		if(obj.max != null) max = obj.max; else max = 0;
		min = min * oimohx_physics_dynamics_World.TO_RAD;
		max = max * oimohx_physics_dynamics_World.TO_RAD;
	}
	var limit = obj.limit;
	var spring = obj.spring;
	var motor = obj.motor;
	var jc = new oimohx_physics_constraint_joint_JointConfig();
	if(obj.collision != null) jc.allowCollision = obj.collision; else jc.allowCollision = false;
	jc.localAxis1.init(axe1[0],axe1[1],axe1[2]);
	jc.localAxis2.init(axe2[0],axe2[1],axe2[2]);
	jc.localAnchorPoint1.init(pos1[0],pos1[1],pos1[2]);
	jc.localAnchorPoint2.init(pos2[0],pos2[1],pos2[2]);
	jc.body1 = obj.body1;
	jc.body2 = obj.body2;
	switch(type) {
	case "jointDistance":
		this.joint = new oimohx_physics_constraint_joint_DistanceJoint(jc,min,max);
		if(spring != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_DistanceJoint)).limitMotor.setSpring(spring[0],spring[1]);
		if(motor != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_DistanceJoint)).limitMotor.setSpring(motor[0],motor[1]);
		break;
	case "jointHinge":
		this.joint = new oimohx_physics_constraint_joint_HingeJoint(jc,min,max);
		if(spring != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_HingeJoint)).limitMotor.setSpring(spring[0],spring[1]);
		if(motor != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_HingeJoint)).limitMotor.setSpring(motor[0],motor[1]);
		break;
	case "jointPrisme":
		this.joint = new oimohx_physics_constraint_joint_PrismaticJoint(jc,min,max);
		break;
	case "jointSlide":
		this.joint = new oimohx_physics_constraint_joint_SliderJoint(jc,min,max);
		break;
	case "jointBall":
		this.joint = new oimohx_physics_constraint_joint_BallAndSocketJoint(jc);
		break;
	case "jointWheel":
		this.joint = new oimohx_physics_constraint_joint_WheelJoint(jc);
		if(limit != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_WheelJoint)).rotationalLimitMotor1.setLimit(limit[0],limit[1]);
		if(spring != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_WheelJoint)).rotationalLimitMotor1.setSpring(spring[0],spring[1]);
		if(motor != null) (js_Boot.__cast(this.joint , oimohx_physics_constraint_joint_WheelJoint)).rotationalLimitMotor1.setSpring(motor[0],motor[1]);
		break;
	}
	this.parent.addJoint(this.joint);
};
$hxClasses["com.babylonhx.physics.plugins.Link"] = com_babylonhx_physics_plugins_Link;
com_babylonhx_physics_plugins_Link.__name__ = ["com","babylonhx","physics","plugins","Link"];
com_babylonhx_physics_plugins_Link.prototype = {
	parent: null
	,name: null
	,joint: null
	,remove: function() {
		this.parent.removeJoint(this.joint);
	}
	,awake: function() {
		this.joint.awake();
	}
	,__class__: com_babylonhx_physics_plugins_Link
};
var com_babylonhx_physics_plugins_OimoPlugin = function() {
	this.mtx = null;
	this.m = [];
	this.oimoContactPoint = new oimohx_math_Vec3();
	this.oimoForce = new oimohx_math_Vec3();
	this._registeredMeshes = [];
};
$hxClasses["com.babylonhx.physics.plugins.OimoPlugin"] = com_babylonhx_physics_plugins_OimoPlugin;
com_babylonhx_physics_plugins_OimoPlugin.__name__ = ["com","babylonhx","physics","plugins","OimoPlugin"];
com_babylonhx_physics_plugins_OimoPlugin.__interfaces__ = [com_babylonhx_physics_IPhysicsEnginePlugin];
com_babylonhx_physics_plugins_OimoPlugin.prototype = {
	_world: null
	,_registeredMeshes: null
	,_checkWithEpsilon: function(value) {
		if(value < 0.001) return 0.001; else return value;
	}
	,initialize: function(iterations) {
		this._world = new oimohx_physics_dynamics_World();
		this._world.clear();
	}
	,setGravity: function(gravity) {
		this._world.gravity = new oimohx_math_Vec3(gravity.x,gravity.y,gravity.z);
	}
	,registerMesh: function(mesh,impostor,options) {
		var _tempRot = mesh.rotation.clone();
		mesh.rotation = new com_babylonhx_math_Vector3(0,0,0);
		var body = null;
		this.unregisterMesh(mesh);
		mesh.computeWorldMatrix(true);
		var initialRotation = null;
		if(mesh.rotationQuaternion != null) {
			initialRotation = mesh.rotationQuaternion.clone();
			mesh.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
			mesh.computeWorldMatrix(true);
		}
		var bbox = mesh.getBoundingInfo().boundingBox;
		var deltaPosition = mesh.position.subtract(bbox.center);
		if(initialRotation != null) {
			var m = new com_babylonhx_math_Matrix();
			initialRotation.toRotationMatrix(m);
			deltaPosition = com_babylonhx_math_Vector3.TransformCoordinates(deltaPosition,m);
		}
		switch(impostor) {
		case 1:
			var radiusX = bbox.maximumWorld.x - bbox.minimumWorld.x;
			var radiusY = bbox.maximumWorld.y - bbox.minimumWorld.y;
			var radiusZ = bbox.maximumWorld.z - bbox.minimumWorld.z;
			var size = Math.max(this._checkWithEpsilon(radiusX),this._checkWithEpsilon(radiusY));
			size = Math.max(size,this._checkWithEpsilon(radiusZ)) / 2;
			body = new com_babylonhx_physics_plugins_Body({ name : options.name, type : "sphere", size : [size], pos : [bbox.center.x,bbox.center.y,bbox.center.z], rot : [_tempRot.x,_tempRot.y,_tempRot.z], move : options.mass != 0, config : [options.mass,options.friction,options.restitution], world : this._world});
			break;
		case 3:case 7:case 2:
			var min = bbox.minimumWorld;
			var max = bbox.maximumWorld;
			var box = new com_babylonhx_math_Vector3(max.x - min.x,max.y - min.y,max.z - min.z);
			var sizeX = this._checkWithEpsilon(box.x);
			var sizeY = this._checkWithEpsilon(box.y);
			var sizeZ = this._checkWithEpsilon(box.z);
			body = new com_babylonhx_physics_plugins_Body({ name : options.name, type : "box", size : [sizeX,sizeY,sizeZ], pos : [bbox.center.x,bbox.center.y,bbox.center.z], rot : [_tempRot.x,_tempRot.y,_tempRot.z], move : options.mass != 0, config : [options.mass,options.friction,options.restitution], world : this._world});
			break;
		}
		if(initialRotation != null) {
			body.body.orientation = new oimohx_math_Quat(initialRotation.w,initialRotation.x,initialRotation.y,initialRotation.z);
			body.body.syncShapes();
		}
		this._registeredMeshes.push({ mesh : mesh, body : body, delta : deltaPosition});
		(js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh)).rigidBody = body.body;
		return body;
	}
	,registerMeshesAsCompound: function(parts,options) {
		var types = [];
		var sizes = [];
		var positions = [];
		var rotations = [];
		var initialMesh = parts[0].mesh;
		var _g1 = 0;
		var _g = parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var part = parts[index];
			var bodyParameters = this._createBodyAsCompound(part,options,initialMesh);
			types.push(bodyParameters.type);
			sizes.push(bodyParameters.size);
			positions.push(bodyParameters.pos);
			rotations.push(bodyParameters.rot);
		}
		var body = new com_babylonhx_physics_plugins_Body({ type : types, size : sizes, pos : positions, rot : rotations, move : options.mass != 0, config : [options.mass,options.friction,options.restitution], world : this._world});
		this._registeredMeshes.push({ mesh : initialMesh, body : body});
		return body;
	}
	,_createBodyAsCompound: function(part,options,initialMesh) {
		var bodyParameters = { type : "", size : [], pos : [], rot : []};
		var mesh = part.mesh;
		var _tempRot = mesh.rotation.clone();
		mesh.rotation = new com_babylonhx_math_Vector3(0,0,0);
		mesh.computeWorldMatrix();
		var _g = part.impostor;
		switch(_g) {
		case 1:
			var bbox = mesh.getBoundingInfo().boundingBox;
			var radiusX = bbox.maximumWorld.x - bbox.minimumWorld.x;
			var radiusY = bbox.maximumWorld.y - bbox.minimumWorld.y;
			var radiusZ = bbox.maximumWorld.z - bbox.minimumWorld.z;
			var size = Math.max(this._checkWithEpsilon(radiusX),this._checkWithEpsilon(radiusY));
			size = Math.max(size,this._checkWithEpsilon(radiusZ)) / 2;
			bodyParameters = { type : "sphere", size : [size,-1,-1], pos : [mesh.position.x,mesh.position.y,mesh.position.z], rot : [_tempRot.x,_tempRot.y,_tempRot.z]};
			break;
		case 3:case 2:
			var bbox1 = mesh.getBoundingInfo().boundingBox;
			var min = bbox1.minimumWorld;
			var max = bbox1.maximumWorld;
			var box = new com_babylonhx_math_Vector3(max.x - min.x,max.y - min.y,max.z - min.z);
			var sizeX = this._checkWithEpsilon(box.x);
			var sizeY = this._checkWithEpsilon(box.y);
			var sizeZ = this._checkWithEpsilon(box.z);
			var relativePosition = mesh.position;
			bodyParameters = { type : "box", size : [sizeX,sizeY,sizeZ], pos : [relativePosition.x,relativePosition.y,relativePosition.z], rot : [_tempRot.x,_tempRot.y,_tempRot.z]};
			break;
		}
		return bodyParameters;
	}
	,unregisterMesh: function(mesh) {
		var _g1 = 0;
		var _g = this._registeredMeshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var registeredMesh = this._registeredMeshes[index];
			if(registeredMesh.mesh == mesh || registeredMesh.mesh == mesh.parent) {
				if(registeredMesh.body != null) {
					this._world.removeRigidBody(registeredMesh.body.body);
					this._unbindBody(registeredMesh.body);
				}
				this._registeredMeshes.splice(index,1);
				return;
			}
		}
	}
	,_unbindBody: function(body) {
		var _g1 = 0;
		var _g = this._registeredMeshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var registeredMesh = this._registeredMeshes[index];
			if(registeredMesh.body == body) registeredMesh.body = null;
		}
	}
	,updateBodyPosition: function(mesh) {
		var _g1 = 0;
		var _g = this._registeredMeshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var registeredMesh = this._registeredMeshes[index];
			if(registeredMesh.mesh == mesh || registeredMesh.mesh == mesh.parent) {
				var body = registeredMesh.body;
				mesh.computeWorldMatrix(true);
				var center = mesh.getBoundingInfo().boundingBox.center;
				body.resetPosition(center.x,center.y,center.z);
				return;
			}
			if(registeredMesh.mesh.parent == mesh) {
				mesh.computeWorldMatrix(true);
				registeredMesh.mesh.computeWorldMatrix(true);
				var absolutePosition = registeredMesh.mesh.getAbsolutePosition();
				var absoluteRotation = mesh.rotation;
				var body1 = registeredMesh.body;
				body1.setPosition(absolutePosition.x,absolutePosition.y,absolutePosition.z);
				return;
			}
		}
	}
	,oimoForce: null
	,oimoContactPoint: null
	,applyImpulse: function(mesh,force,contactPoint) {
		var _g1 = 0;
		var _g = this._registeredMeshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var registeredMesh = this._registeredMeshes[index];
			if(registeredMesh.mesh == mesh || registeredMesh.mesh == mesh.parent) {
				var mass = registeredMesh.body.body.mass;
				var tmpCP = new com_babylonhx_math_Vector3(contactPoint.x * 0.01,contactPoint.y * 0.01,contactPoint.z * 0.01);
				var tmpF = force.scale(0.01 * mass);
				this.oimoForce.x = tmpF.x;
				this.oimoForce.y = tmpF.y;
				this.oimoForce.z = tmpF.z;
				this.oimoContactPoint.init(tmpCP.x,tmpCP.y,tmpCP.z);
				registeredMesh.body.body.applyImpulse(this.oimoContactPoint,this.oimoForce);
				return;
			}
		}
	}
	,createLink: function(mesh1,mesh2,pivot1,pivot2,options) {
		var body1 = null;
		var body2 = null;
		var _g1 = 0;
		var _g = this._registeredMeshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var registeredMesh = this._registeredMeshes[index];
			if(registeredMesh.mesh == mesh1) body1 = registeredMesh.body.body; else if(registeredMesh.mesh == mesh2) body2 = registeredMesh.body.body;
		}
		if(body1 == null || body2 == null) return false;
		if(options == null) options = { };
		new com_babylonhx_physics_plugins_Link({ type : options.type, body1 : body1, body2 : body2, min : options.min, max : options.max, axe1 : options.axe1, axe2 : options.axe2, pos1 : [pivot1.x,pivot1.y,pivot1.z], pos2 : [pivot2.x,pivot2.y,pivot2.z], collision : options.collision, spring : options.spring, world : this._world});
		return true;
	}
	,dispose: function() {
		this._world.clear();
		while(this._registeredMeshes.length > 0) this.unregisterMesh(this._registeredMeshes[0].mesh);
	}
	,isSupported: function() {
		return true;
	}
	,_getLastShape: function(body) {
		var lastShape = body.shapes;
		while(lastShape.next != null) lastShape = lastShape.next;
		return lastShape;
	}
	,m: null
	,mtx: null
	,runOneStep: function(time) {
		this._world.step(time);
		var i = this._registeredMeshes.length;
		while(i-- > 0) {
			var body = this._registeredMeshes[i].body.body;
			var mesh = this._registeredMeshes[i].mesh;
			var delta = this._registeredMeshes[i].delta;
			if(!body.sleeping) {
				if(body.shapes != null) {
					var parentShape = body;
					mesh.position.x = parentShape.position.x * 100;
					mesh.position.y = parentShape.position.y * 100;
					mesh.position.z = parentShape.position.z * 100;
					this.mtx = com_babylonhx_math_Matrix.FromArray(body.getMatrix(),null);
					if(mesh.rotationQuaternion == null) mesh.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
					mesh.rotationQuaternion.fromRotationMatrix(this.mtx);
					mesh.computeWorldMatrix();
				} else {
					this.m = body.getMatrix();
					this.mtx = com_babylonhx_math_Matrix.FromArray(this.m,null);
					var bodyX = this.mtx.m[12];
					var bodyY = this.mtx.m[13];
					var bodyZ = this.mtx.m[14];
					if(delta == null) {
						mesh.position.x = bodyX;
						mesh.position.y = bodyY;
						mesh.position.z = bodyZ;
					} else {
						mesh.position.x = bodyX + delta.x;
						mesh.position.y = bodyY + delta.y;
						mesh.position.z = bodyZ + delta.z;
					}
					if(mesh.rotationQuaternion == null) mesh.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
					com_babylonhx_math_Quaternion.FromRotationMatrixToRef(this.mtx,mesh.rotationQuaternion);
					mesh.computeWorldMatrix();
				}
			}
		}
	}
	,__class__: com_babylonhx_physics_plugins_OimoPlugin
};
var com_babylonhx_postprocess_DisplayPassPostProcess = $hx_exports.BABYLON.DisplayPassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"displayPass",["passSampler"],["passSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.DisplayPassPostProcess"] = com_babylonhx_postprocess_DisplayPassPostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.__name__ = ["com","babylonhx","postprocess","DisplayPassPostProcess"];
com_babylonhx_postprocess_DisplayPassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_DisplayPassPostProcess
});
var com_babylonhx_postprocess_PostProcessManager = $hx_exports.BABYLON.PostProcessManager = function(scene) {
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._scene = scene;
};
$hxClasses["com.babylonhx.postprocess.PostProcessManager"] = com_babylonhx_postprocess_PostProcessManager;
com_babylonhx_postprocess_PostProcessManager.__name__ = ["com","babylonhx","postprocess","PostProcessManager"];
com_babylonhx_postprocess_PostProcessManager.prototype = {
	_scene: null
	,_indexBuffer: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_prepareBuffers: function() {
		if(this._vertexBuffer != null) return;
		var vertices = [];
		vertices.push(1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		this._vertexBuffer = this._scene._engine.createVertexBuffer(vertices);
		var indices = [];
		indices.push(0);
		indices.push(1);
		indices.push(2);
		indices.push(0);
		indices.push(2);
		indices.push(3);
		this._indexBuffer = this._scene._engine.createIndexBuffer(indices);
	}
	,_prepareFrame: function(sourceTexture) {
		var postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return false;
		postProcesses[this._scene.activeCamera._postProcessesTakenIndices[0]].activate(this._scene.activeCamera,sourceTexture);
		return true;
	}
	,directRender: function(postProcesses,targetTexture) {
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcesses.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcesses.length - 1) postProcesses[index + 1].activate(this._scene.activeCamera,targetTexture); else if(targetTexture != null) engine.bindFramebuffer(targetTexture); else {
				snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			var pp = postProcesses[index];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,_finalizeFrame: function(doNotPresent,targetTexture,postProcesses) {
		if(doNotPresent == null) doNotPresent = false;
		if(postProcesses == null) postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return;
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcessesTakenIndices.length - 1) postProcesses[postProcessesTakenIndices[index + 1]].activate(this._scene.activeCamera); else if(targetTexture != null) engine.bindFramebuffer(targetTexture); else {
				snow_modules_opengl_web_GL.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			if(doNotPresent) break;
			var pp = postProcesses[postProcessesTakenIndices[index]];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
	}
	,__class__: com_babylonhx_postprocess_PostProcessManager
};
var com_babylonhx_postprocess_StereoscopicInterlacePostProcess = function(name,camB,postProcessA,isStereoscopicHoriz,samplingMode) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"stereoscopicInterlace",["stepSize"],["camASampler"],1,camB,samplingMode,camB._scene._engine,false,isStereoscopicHoriz?"#define IS_STEREOSCOPIC_HORIZ 1":null);
	this._stepSize = new com_babylonhx_math_Vector2(1 / this.width,1 / this.height);
	this.onSizeChanged = function() {
		_g._stepSize = new com_babylonhx_math_Vector2(1 / _g.width,1 / _g.height);
	};
	this.onApply = function(effect) {
		effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"camASampler",0),postProcessA);
		effect.setFloat2("stepSize",_g._stepSize.x,_g._stepSize.y);
	};
};
$hxClasses["com.babylonhx.postprocess.StereoscopicInterlacePostProcess"] = com_babylonhx_postprocess_StereoscopicInterlacePostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__name__ = ["com","babylonhx","postprocess","StereoscopicInterlacePostProcess"];
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	_stepSize: null
	,__class__: com_babylonhx_postprocess_StereoscopicInterlacePostProcess
});
var com_babylonhx_postprocess_VRDistortionCorrectionPostProcess = function(name,camera,isRightEye,vrMetrics) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"vrDistortionCorrection",["LensCenter","Scale","ScaleIn","HmdWarpParam"],null,vrMetrics.postProcessScaleFactor,camera,2,null,false);
	this._isRightEye = isRightEye;
	this._distortionFactors = vrMetrics.distortionK;
	this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;
	this._lensCenterOffset = vrMetrics.lensCenterOffset;
	this.onSizeChanged = function() {
		_g.aspectRatio = _g.width * .5 / _g.height;
		_g._scaleIn = new com_babylonhx_math_Vector2(2,2 / _g.aspectRatio);
		_g._scaleFactor = new com_babylonhx_math_Vector2(.5 * (1 / _g._postProcessScaleFactor),.5 * (1 / _g._postProcessScaleFactor) * _g.aspectRatio);
		_g._lensCenter = new com_babylonhx_math_Vector2(_g._isRightEye?0.5 - _g._lensCenterOffset * 0.5:0.5 + _g._lensCenterOffset * 0.5,0.5);
	};
	this.onApply = function(effect) {
		effect.setFloat2("LensCenter",_g._lensCenter.x,_g._lensCenter.y);
		effect.setFloat2("Scale",_g._scaleFactor.x,_g._scaleFactor.y);
		effect.setFloat2("ScaleIn",_g._scaleIn.x,_g._scaleIn.y);
		effect.setFloat4("HmdWarpParam",_g._distortionFactors[0],_g._distortionFactors[1],_g._distortionFactors[2],_g._distortionFactors[3]);
	};
};
$hxClasses["com.babylonhx.postprocess.VRDistortionCorrectionPostProcess"] = com_babylonhx_postprocess_VRDistortionCorrectionPostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__name__ = ["com","babylonhx","postprocess","VRDistortionCorrectionPostProcess"];
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	aspectRatio: null
	,_isRightEye: null
	,_distortionFactors: null
	,_postProcessScaleFactor: null
	,_lensCenterOffset: null
	,_scaleIn: null
	,_scaleFactor: null
	,_lensCenter: null
	,__class__: com_babylonhx_postprocess_VRDistortionCorrectionPostProcess
});
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect = $hx_exports.BABYLON.PostProcessRenderEffect = function(engine,name,getPostProcess,singleInstance) {
	if(singleInstance == null) singleInstance = true;
	this._engine = engine;
	this._name = name;
	this._singleInstance = singleInstance;
	this._getPostProcess = getPostProcess;
	this._cameras = new haxe_ds_StringMap();
	this._indicesForCamera = new haxe_ds_StringMap();
	this._postProcesses = new haxe_ds_StringMap();
	this._renderPasses = new haxe_ds_StringMap();
	this._renderEffectAsPasses = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderEffect"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderEffect"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.prototype = {
	_engine: null
	,_postProcesses: null
	,_getPostProcess: null
	,_singleInstance: null
	,_cameras: null
	,_indicesForCamera: null
	,_renderPasses: null
	,_renderEffectAsPasses: null
	,_name: null
	,applyParameters: null
	,_update: function() {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			this._renderPasses.get(renderPassName)._update();
		}
	}
	,addPass: function(renderPass) {
		this._renderPasses.set(renderPass._name,renderPass);
		this._linkParameters();
	}
	,removePass: function(renderPass) {
		{
			this._renderPasses.set(renderPass._name,null);
			null;
		}
		this._renderPasses.remove(renderPass._name);
		this._linkParameters();
	}
	,addRenderEffectAsPass: function(renderEffect) {
		this._renderEffectAsPasses.set(renderEffect._name,renderEffect);
		this._linkParameters();
	}
	,getPass: function(passName) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			if(renderPassName == passName) return this._renderPasses.get(passName);
		}
		return null;
	}
	,emptyPasses: function() {
		this._renderPasses = new haxe_ds_StringMap();
		this._linkParameters();
	}
	,_attachCameras: function(cameras) {
		var cameraKey = "";
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			if(this._singleInstance) cameraKey = "0"; else cameraKey = cameraName;
			var value;
			if(this._postProcesses.exists(cameraKey)) value = this._postProcesses.get(cameraKey); else value = this._getPostProcess();
			this._postProcesses.set(cameraKey,value);
			var index = camera.attachPostProcess(this._postProcesses.get(cameraKey));
			if(!this._indicesForCamera.exists(cameraName)) this._indicesForCamera.set(cameraName,[]);
			this._indicesForCamera.get(cameraName).push(index);
			if(!this._cameras.exists(camera.name)) this._cameras.set(cameraName,camera);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
		this._linkParameters();
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			this._cameras.remove(cameraName);
			this._indicesForCamera.remove(cameraName);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,_enable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			var _g2 = 0;
			var _g1 = this._indicesForCamera.get(cameraName).length;
			while(_g2 < _g1) {
				var j = _g2++;
				if(camera._postProcesses[this._indicesForCamera.get(cameraName)[j]] == null) c.attachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName)[j]);
			}
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
	}
	,_disable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,getPostProcess: function(camera) {
		if(this._singleInstance) return this._postProcesses.get("0"); else return this._postProcesses.get(camera.name);
	}
	,_linkParameters: function() {
		var _g = this;
		var $it0 = this._postProcesses.keys();
		while( $it0.hasNext() ) {
			var index = $it0.next();
			if(this.applyParameters != null) this.applyParameters(this._postProcesses.get(index));
			this._postProcesses.get(index).onBeforeRender = function(effect) {
				_g._linkTextures(effect);
			};
		}
	}
	,_linkTextures: function(effect) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			effect.setTexture(renderPassName,this._renderPasses.get(renderPassName).getRenderTexture());
		}
		var $it1 = this._renderEffectAsPasses.keys();
		while( $it1.hasNext() ) {
			var renderEffectName = $it1.next();
			effect.setTextureFromPostProcess(renderEffectName + "Sampler",this._renderEffectAsPasses.get(renderEffectName).getPostProcess());
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass = $hx_exports.BABYLON.PostProcessRenderPass = function(scene,name,size,renderList,beforeRender,afterRender) {
	this._refCount = 0;
	this._enabled = true;
	this._name = name;
	this._renderTexture = new com_babylonhx_materials_textures_RenderTargetTexture(name,size,scene);
	this.setRenderList(renderList);
	this._renderTexture.onBeforeRender = beforeRender;
	this._renderTexture.onAfterRender = afterRender;
	this._scene = scene;
	this._renderList = renderList;
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPass"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPass"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.prototype = {
	_enabled: null
	,_renderList: null
	,_renderTexture: null
	,_scene: null
	,_refCount: null
	,_name: null
	,_incRefCount: function() {
		if(this._refCount == 0) this._scene.customRenderTargets.push(this._renderTexture);
		return ++this._refCount;
	}
	,_decRefCount: function() {
		this._refCount--;
		if(this._refCount <= 0) this._scene.customRenderTargets.splice(HxOverrides.indexOf(this._scene.customRenderTargets,this._renderTexture,0),1);
		return this._refCount;
	}
	,_update: function() {
		this.setRenderList(this._renderList);
	}
	,setRenderList: function(renderList) {
		this._renderTexture.renderList = renderList;
	}
	,getRenderTexture: function() {
		return this._renderTexture;
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline = $hx_exports.BABYLON.PostProcessRenderPipeline = function(engine,name) {
	this._engine = engine;
	this._name = name;
	this._renderEffects = new haxe_ds_StringMap();
	this._renderEffectsForIsolatedPass = new haxe_ds_StringMap();
	this._cameras = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipeline"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPipeline"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.prototype = {
	_engine: null
	,_renderEffects: null
	,_renderEffectsForIsolatedPass: null
	,_cameras: null
	,_name: null
	,addEffect: function(renderEffect) {
		this._renderEffects.set(renderEffect._name,renderEffect);
	}
	,_enableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._enable(cameras != null?cameras:this._cameras);
	}
	,_disableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._disable(com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras));
	}
	,_attachCameras: function(cameras,unique) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var indicesToDelete = [];
		var _g1 = 0;
		var _g = _cam.length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = _cam[i];
			var cameraName = camera.name;
			if(!this._cameras.exists(cameraName)) this._cameras.set(cameraName,camera); else if(unique) indicesToDelete.push(i);
		}
		var _g11 = 0;
		var _g2 = indicesToDelete.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			_cam.splice(indicesToDelete[i1],1);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._attachCameras(_cam);
		}
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._detachCameras(_cam);
		}
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var key = c.name;
			this._cameras.remove(key);
		}
	}
	,_enableDisplayOnlyPass: function(passName,cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var pass = null;
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			pass = this._renderEffects.get(renderEffectName).getPass(passName);
			if(pass != null) break;
		}
		if(pass == null) return;
		var $it1 = this._renderEffects.keys();
		while( $it1.hasNext() ) {
			var renderEffectName1 = $it1.next();
			this._renderEffects.get(renderEffectName1)._disable(_cam);
		}
		pass._name = "passSampler";
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName).emptyPasses();
			this._renderEffectsForIsolatedPass.get(cameraName).addPass(pass);
			this._renderEffectsForIsolatedPass.get(cameraName)._attachCameras(camera);
		}
	}
	,_disableDisplayOnlyPass: function(cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName)._disable(camera);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._enable(_cam);
		}
	}
	,_update: function() {
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._update();
		}
		var $it1 = this._cameras.keys();
		while( $it1.hasNext() ) {
			var key = $it1.next();
			var cameraName = this._cameras.get(key).name;
			if(this._renderEffectsForIsolatedPass.exists(cameraName)) this._renderEffectsForIsolatedPass.get(cameraName)._update();
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager = $hx_exports.BABYLON.PostProcessRenderPipelineManager = function() {
	this._renderPipelines = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipelineManager"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPipelineManager"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.prototype = {
	_renderPipelines: null
	,addPipeline: function(renderPipeline) {
		this._renderPipelines.set(renderPipeline._name,renderPipeline);
	}
	,attachCamerasToRenderPipeline: function(renderPipelineName,cameras,unique) {
		if(unique == null) unique = false;
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._attachCameras(cameras,unique);
	}
	,detachCamerasFromRenderPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._detachCameras(cameras);
	}
	,enableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableEffect(renderEffectName,cameras);
	}
	,disableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableEffect(renderEffectName,cameras);
	}
	,enableDisplayOnlyPassInPipeline: function(renderPipelineName,passName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableDisplayOnlyPass(passName,cameras);
	}
	,disableDisplayOnlyPassInPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableDisplayOnlyPass(cameras);
	}
	,update: function() {
		var $it0 = this._renderPipelines.keys();
		while( $it0.hasNext() ) {
			var renderPipelineName = $it0.next();
			this._renderPipelines.get(renderPipelineName)._update();
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager
};
var com_babylonhx_rendering_BoundingBoxRenderer = $hx_exports.BABYLON.BoundingBoxRenderer = function(scene) {
	this.renderList = new com_babylonhx_tools_SmartArray(32);
	this.showBackLines = true;
	this.backColor = new com_babylonhx_math_Color3(0.1,0.1,0.1);
	this.frontColor = new com_babylonhx_math_Color3(1,1,1);
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.BoundingBoxRenderer"] = com_babylonhx_rendering_BoundingBoxRenderer;
com_babylonhx_rendering_BoundingBoxRenderer.__name__ = ["com","babylonhx","rendering","BoundingBoxRenderer"];
com_babylonhx_rendering_BoundingBoxRenderer.prototype = {
	frontColor: null
	,backColor: null
	,showBackLines: null
	,renderList: null
	,_scene: null
	,_colorShader: null
	,_vb: null
	,_ib: null
	,_prepareRessources: function() {
		if(this._colorShader != null) return;
		this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",this._scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"]});
		var engine = this._scene._engine;
		var boxdata = com_babylonhx_mesh_VertexData.CreateBox(1.0);
		this._vb = new com_babylonhx_mesh_VertexBuffer(engine,boxdata.positions,"position",false);
		this._ib = engine.createIndexBuffer([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,7,1,6,2,5,3,4]);
	}
	,reset: function() {
		this.renderList.reset();
	}
	,render: function() {
		if(this.renderList.length == 0 || !this._colorShader.isReady()) return;
		this._prepareRessources();
		if(!this._colorShader.isReady()) return;
		var engine = this._scene._engine;
		engine._depthCullingState.set_depthMask(false);
		this._colorShader._preBind();
		var _g1 = 0;
		var _g = this.renderList.length;
		while(_g1 < _g) {
			var boundingBoxIndex = _g1++;
			var boundingBox = this.renderList.data[boundingBoxIndex];
			var min = boundingBox.minimum;
			var max = boundingBox.maximum;
			var diff = max.subtract(min);
			var median = min.add(diff.scale(0.5));
			var worldMatrix = com_babylonhx_math_Matrix.Scaling(diff.x,diff.y,diff.z).multiply(com_babylonhx_math_Matrix.Translation(median.x,median.y,median.z)).multiply(boundingBox.getWorldMatrix());
			engine.bindBuffers(this._vb._buffer,this._ib,[3],12,this._colorShader.getEffect());
			if(this.showBackLines) {
				engine._depthCullingState.set_depthFunc(518);
				this._scene._cachedMaterial = null;
				this._colorShader.setColor4("color",this.backColor.toColor4(null));
				this._colorShader.bind(worldMatrix);
				engine.draw(false,0,24);
			}
			engine._depthCullingState.set_depthFunc(513);
			this._scene._cachedMaterial = null;
			this._colorShader.setColor4("color",this.frontColor.toColor4(null));
			this._colorShader.bind(worldMatrix);
			engine.draw(false,0,24);
		}
		this._colorShader.unbind();
		engine._depthCullingState.set_depthFunc(515);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._colorShader == null) return;
		this._colorShader.dispose();
		this._vb.dispose();
		this._scene._engine._releaseBuffer(this._ib);
	}
	,__class__: com_babylonhx_rendering_BoundingBoxRenderer
};
var com_babylonhx_rendering_DepthRenderer = $hx_exports.BABYLON.DepthRenderer = function(scene,type) {
	if(type == null) type = 1;
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	var _g = this;
	this._scene = scene;
	var engine = scene._engine;
	this._depthMap = new com_babylonhx_materials_textures_RenderTargetTexture("depthMap",{ width : engine.getRenderWidth(), height : engine.getRenderHeight()},this._scene,false,true,type);
	this._depthMap.wrapU = 0;
	this._depthMap.wrapV = 0;
	this._depthMap.set_refreshRate(1);
	this._depthMap.renderParticles = false;
	this._depthMap.renderList = null;
	this._depthMap.onClear = function(engine2) {
		engine2.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene1 = _g._scene;
		var engine1 = scene1._engine;
		engine1.setState(subMesh.getMaterial().backFaceCulling,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine1.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine1.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,com_babylonhx_materials_Material.TriangleFillMode);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",scene1._transformMatrix);
			_g._effect.setFloat("far",scene1.activeCamera.maxZ);
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones()) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,com_babylonhx_materials_Material.TriangleFillMode,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		}
	};
	this._depthMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
	};
};
$hxClasses["com.babylonhx.rendering.DepthRenderer"] = com_babylonhx_rendering_DepthRenderer;
com_babylonhx_rendering_DepthRenderer.__name__ = ["com","babylonhx","rendering","DepthRenderer"];
com_babylonhx_rendering_DepthRenderer.prototype = {
	_scene: null
	,_depthMap: null
	,_effect: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_transformMatrix: null
	,_worldViewProjection: null
	,_cachedDefines: null
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var scene = mesh._scene;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_skeleton() != null && scene.skeletonsEnabled && mesh.isVerticesDataPresent("matricesIndices") && mesh.isVerticesDataPresent("matricesWeights")) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			defines.push("#define BONES");
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		}
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("depth",attribs,["world","mBones","viewProjection","diffuseMatrix","far"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getDepthMap: function() {
		return this._depthMap;
	}
	,dispose: function() {
		this._depthMap.dispose();
	}
	,__class__: com_babylonhx_rendering_DepthRenderer
};
var com_babylonhx_rendering_OutlineRenderer = $hx_exports.BABYLON.OutlineRenderer = function(scene) {
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.OutlineRenderer"] = com_babylonhx_rendering_OutlineRenderer;
com_babylonhx_rendering_OutlineRenderer.__name__ = ["com","babylonhx","rendering","OutlineRenderer"];
com_babylonhx_rendering_OutlineRenderer.prototype = {
	_scene: null
	,_effect: null
	,_cachedDefines: null
	,render: function(subMesh,batch,useOverlay) {
		if(useOverlay == null) useOverlay = false;
		var scene = this._scene;
		var engine = this._scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(!this.isReady(subMesh,hardwareInstancedRendering)) return;
		var mesh = subMesh._renderingMesh;
		var material = subMesh.getMaterial();
		engine.enableEffect(this._effect);
		this._effect.setFloat("offset",mesh.outlineWidth);
		this._effect.setFloat("offset",useOverlay?0:mesh.outlineWidth);
		this._effect.setColor4("color",useOverlay?mesh.overlayColor:mesh.outlineColor,useOverlay?mesh.overlayAlpha:1.0);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		var useBones = mesh.get_skeleton() != null && scene.skeletonsEnabled && mesh.isVerticesDataPresent("matricesIndices") && mesh.isVerticesDataPresent("matricesWeights");
		if(useBones) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		mesh._bind(subMesh,this._effect,com_babylonhx_materials_Material.TriangleFillMode);
		if(material != null && material.needAlphaTesting()) {
			var alphaTexture = material.getAlphaTestTexture();
			this._effect.setTexture("diffuseSampler",alphaTexture);
			this._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
		}
		if(hardwareInstancedRendering) mesh._renderWithInstances(subMesh,com_babylonhx_materials_Material.TriangleFillMode,batch,this._effect,engine); else {
			if(batch.renderSelf.length > subMesh._id) {
				this._effect.setMatrix("world",mesh.getWorldMatrix());
				mesh._draw(subMesh,com_babylonhx_materials_Material.TriangleFillMode);
			}
			if(batch.visibleInstances[subMesh._id] != null) {
				var _g1 = 0;
				var _g = batch.visibleInstances[subMesh._id].length;
				while(_g1 < _g) {
					var instanceIndex = _g1++;
					var instance = batch.visibleInstances[subMesh._id][instanceIndex];
					this._effect.setMatrix("world",instance.getWorldMatrix());
					mesh._draw(subMesh,com_babylonhx_materials_Material.TriangleFillMode);
				}
			}
		}
	}
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position","normal"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_skeleton() != null && mesh.isVerticesDataPresent("matricesIndices") && mesh.isVerticesDataPresent("matricesWeights")) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			defines.push("#define BONES");
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		}
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("outline",attribs,["world","mBones","viewProjection","diffuseMatrix","offset","color"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,__class__: com_babylonhx_rendering_OutlineRenderer
};
var com_babylonhx_rendering_RenderingGroup = $hx_exports.BABYLON.RenderingGroup = function(index,scene) {
	this._activeVertices = 0;
	this._alphaTestSubMeshes = new com_babylonhx_tools_SmartArray();
	this._transparentSubMeshes = new com_babylonhx_tools_SmartArray();
	this._opaqueSubMeshes = new com_babylonhx_tools_SmartArray();
	this._scene = scene;
	this.index = index;
};
$hxClasses["com.babylonhx.rendering.RenderingGroup"] = com_babylonhx_rendering_RenderingGroup;
com_babylonhx_rendering_RenderingGroup.__name__ = ["com","babylonhx","rendering","RenderingGroup"];
com_babylonhx_rendering_RenderingGroup.prototype = {
	index: null
	,_scene: null
	,_opaqueSubMeshes: null
	,_transparentSubMeshes: null
	,_alphaTestSubMeshes: null
	,_activeVertices: null
	,render: function(customRenderFunction) {
		if(customRenderFunction != null) {
			customRenderFunction(this._opaqueSubMeshes,this._alphaTestSubMeshes,this._transparentSubMeshes);
			return true;
		}
		if(this._opaqueSubMeshes.length == 0 && this._alphaTestSubMeshes.length == 0 && this._transparentSubMeshes.length == 0) return false;
		var engine = this._scene._engine;
		var submesh = null;
		var _g1 = 0;
		var _g = this._opaqueSubMeshes.length;
		while(_g1 < _g) {
			var subIndex = _g1++;
			submesh = this._opaqueSubMeshes.data[subIndex];
			submesh.render();
		}
		engine._alphaTest = true;
		var _g11 = 0;
		var _g2 = this._alphaTestSubMeshes.length;
		while(_g11 < _g2) {
			var subIndex1 = _g11++;
			submesh = this._alphaTestSubMeshes.data[subIndex1];
			submesh.render();
		}
		engine._alphaTest = false;
		if(this._transparentSubMeshes.length > 0) {
			var _g12 = 0;
			var _g3 = this._transparentSubMeshes.length;
			while(_g12 < _g3) {
				var subIndex2 = _g12++;
				submesh = this._transparentSubMeshes.data[subIndex2];
				submesh._alphaIndex = submesh._mesh.alphaIndex;
				submesh._distanceToCamera = submesh._boundingInfo.boundingSphere.centerWorld.subtract(this._scene.activeCamera.get_globalPosition()).length();
			}
			var sortedArray = this._transparentSubMeshes.data.slice(0,this._transparentSubMeshes.length);
			sortedArray.sort(function(a,b) {
				if(a._alphaIndex > b._alphaIndex) return 1;
				if(a._alphaIndex < b._alphaIndex) return -1;
				if(a._distanceToCamera < b._distanceToCamera) return 1;
				if(a._distanceToCamera > b._distanceToCamera) return -1;
				return 0;
			});
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
			var _g13 = 0;
			var _g4 = sortedArray.length;
			while(_g13 < _g4) {
				var subIndex3 = _g13++;
				submesh = sortedArray[subIndex3];
				submesh.render();
			}
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
		return true;
	}
	,prepare: function() {
		this._opaqueSubMeshes.reset();
		this._transparentSubMeshes.reset();
		this._alphaTestSubMeshes.reset();
	}
	,dispatch: function(subMesh) {
		var material = subMesh.getMaterial();
		var mesh = subMesh._mesh;
		if(material.needAlphaBlending() || mesh.get_visibility() < 1.0 || mesh.hasVertexAlpha) this._transparentSubMeshes.push(subMesh); else if(material.needAlphaTesting()) this._alphaTestSubMeshes.push(subMesh); else this._opaqueSubMeshes.push(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingGroup
};
var com_babylonhx_sprites_Sprite = $hx_exports.BABYLON.Sprite = function(name,manager) {
	this._time = 0;
	this._frameCount = 0;
	this._direction = 1;
	this._delay = 0;
	this._toIndex = 0;
	this._fromIndex = 0;
	this._loopAnimation = false;
	this._animationStarted = false;
	this.animations = [];
	this.invertV = false;
	this.invertU = false;
	this.cellIndex = 0;
	this.angle = 0;
	this.height = 1.0;
	this.width = 1.0;
	this.color = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.name = name;
	this._manager = manager;
	this._manager.sprites.push(this);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.sprites.Sprite"] = com_babylonhx_sprites_Sprite;
com_babylonhx_sprites_Sprite.__name__ = ["com","babylonhx","sprites","Sprite"];
com_babylonhx_sprites_Sprite.prototype = {
	name: null
	,position: null
	,color: null
	,width: null
	,height: null
	,angle: null
	,cellIndex: null
	,invertU: null
	,invertV: null
	,disposeWhenFinishedAnimating: null
	,animations: null
	,_animationStarted: null
	,_loopAnimation: null
	,_fromIndex: null
	,_toIndex: null
	,_delay: null
	,_direction: null
	,_frameCount: null
	,_manager: null
	,_time: null
	,get_size: function() {
		return this.width;
	}
	,set_size: function(value) {
		this.width = value;
		this.height = value;
		return value;
	}
	,playAnimation: function(from,to,loop,delay) {
		this._fromIndex = from;
		this._toIndex = to;
		this._loopAnimation = loop;
		this._delay = delay;
		this._animationStarted = true;
		if(from < to) this._direction = 1; else this._direction = -1;
		this.cellIndex = from;
		this._time = 0;
	}
	,stopAnimation: function() {
		this._animationStarted = false;
	}
	,_animate: function(deltaTime) {
		if(this._animationStarted) {
			this._time += deltaTime;
			if(this._time > this._delay) {
				this._time = this._time % this._delay;
				this.cellIndex += this._direction;
				if(this.cellIndex == this._toIndex) {
					if(this._loopAnimation) this.cellIndex = this._fromIndex; else {
						this._animationStarted = false;
						if(this.disposeWhenFinishedAnimating) this.dispose();
					}
				}
			}
		}
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this._manager.sprites.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._manager.sprites[i] == this) this._manager.sprites.splice(i,1);
		}
	}
	,__class__: com_babylonhx_sprites_Sprite
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var com_babylonhx_sprites_SpriteManager = $hx_exports.BABYLON.SpriteManager = function(name,imgUrl,capacity,cellSize,scene,epsilon,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	this._vertexStrideSize = 64;
	this._vertexDeclaration = [4,4,4,4];
	this.fogEnabled = true;
	this.renderingGroupId = 0;
	this.sprites = [];
	this.name = name;
	this.cellSize = cellSize;
	this._capacity = capacity;
	this._spriteTexture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,true,false,samplingMode);
	this._spriteTexture.wrapU = 0;
	this._spriteTexture.wrapV = 0;
	if(epsilon == null) this._epsilon = 0.01; else this._epsilon = epsilon;
	if(samplingMode == 1) this._spriteTexture.anisotropicFilteringLevel = 1;
	this._scene = scene;
	this._scene.spriteManagers.push(this);
	this._vertexBuffer = scene._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g = 0;
	while(_g < capacity) {
		var count = _g++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	var elements = capacity * this._vertexStrideSize;
	var len = null;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this._vertices = this1;
	this._effectBase = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest"],["diffuseSampler"],"");
	this._effectFog = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest","vFogInfos","vFogColor"],["diffuseSampler"],"#define FOG");
};
$hxClasses["com.babylonhx.sprites.SpriteManager"] = com_babylonhx_sprites_SpriteManager;
com_babylonhx_sprites_SpriteManager.__name__ = ["com","babylonhx","sprites","SpriteManager"];
com_babylonhx_sprites_SpriteManager.prototype = {
	name: null
	,sprites: null
	,renderingGroupId: null
	,onDispose: null
	,fogEnabled: null
	,cellSize: null
	,_capacity: null
	,_spriteTexture: null
	,_epsilon: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_vertices: null
	,_effectBase: null
	,_effectFog: null
	,_appendSpriteVertex: function(index,sprite,offsetX,offsetY,rowSize) {
		var arrayOffset = index * 16;
		if(offsetX == 0) offsetX = this._epsilon; else if(offsetX == 1) offsetX = 1 - this._epsilon;
		if(offsetY == 0) offsetY = this._epsilon; else if(offsetY == 1) offsetY = 1 - this._epsilon;
		this._vertices[arrayOffset] = sprite.position.x;
		this._vertices[arrayOffset + 1] = sprite.position.y;
		this._vertices[arrayOffset + 2] = sprite.position.z;
		this._vertices[arrayOffset + 3] = sprite.angle;
		this._vertices[arrayOffset + 4] = sprite.width;
		this._vertices[arrayOffset + 5] = sprite.height;
		this._vertices[arrayOffset + 6] = offsetX;
		this._vertices[arrayOffset + 7] = offsetY;
		if(sprite.invertU) this._vertices[arrayOffset + 8] = 1; else this._vertices[arrayOffset + 8] = 0;
		if(sprite.invertV) this._vertices[arrayOffset + 9] = 1; else this._vertices[arrayOffset + 9] = 0;
		var offset = sprite.cellIndex / rowSize | 0;
		this._vertices[arrayOffset + 10] = sprite.cellIndex - offset * rowSize;
		this._vertices[arrayOffset + 11] = offset;
		this._vertices[arrayOffset + 12] = sprite.color.r;
		this._vertices[arrayOffset + 13] = sprite.color.g;
		this._vertices[arrayOffset + 14] = sprite.color.b;
		this._vertices[arrayOffset + 15] = sprite.color.a;
	}
	,render: function() {
		if(!this._effectBase._isReady || !this._effectFog._isReady || this._spriteTexture == null || !this._spriteTexture.isReady()) return;
		var engine = this._scene._engine;
		var baseSize = this._spriteTexture.getBaseSize();
		var deltaTime = engine.deltaTime;
		var max = Math.min(this._capacity,this.sprites.length);
		var rowSize = baseSize.width / this.cellSize;
		var offset = 0;
		var _g = 0;
		while(_g < max) {
			var index = _g++;
			var sprite = this.sprites[index];
			if(sprite == null) continue;
			if(sprite._animationStarted) {
				sprite._time += deltaTime;
				if(sprite._time > sprite._delay) {
					sprite._time = sprite._time % sprite._delay;
					sprite.cellIndex += sprite._direction;
					if(sprite.cellIndex == sprite._toIndex) {
						if(sprite._loopAnimation) sprite.cellIndex = sprite._fromIndex; else {
							sprite._animationStarted = false;
							if(sprite.disposeWhenFinishedAnimating) sprite.dispose();
						}
					}
				}
			}
			this._appendSpriteVertex(offset++,sprite,0,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,1,rowSize);
			this._appendSpriteVertex(offset++,sprite,0,1,rowSize);
		}
		engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
		var effect = this._effectBase;
		if(this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) effect = this._effectFog;
		engine.enableEffect(effect);
		var viewMatrix = this._scene._viewMatrix;
		effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"diffuseSampler",0),this._spriteTexture);
		effect._engine.setMatrix(effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,"view",0)],viewMatrix);
		effect;
		effect._engine.setMatrix(effect._uniforms[HxOverrides.indexOf(effect._uniformsNames,"projection",0)],this._scene._projectionMatrix);
		effect;
		effect.setFloat2("textureInfos",this.cellSize / baseSize.width,this.cellSize / baseSize.height);
		if(this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) {
			effect.setFloat4("vFogInfos",this._scene.fogMode,this._scene.fogStart,this._scene.fogEnd,this._scene.fogDensity);
			effect.setColor3("vFogColor",this._scene.fogColor);
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
		engine._depthCullingState.set_depthFunc(515);
		effect.setBool("alphaTest",true);
		snow_modules_opengl_web_GL.colorMask(false,false,false,false);
		engine.draw(true,0,max * 6);
		snow_modules_opengl_web_GL.colorMask(true,true,true,true);
		effect.setBool("alphaTest",false);
		switch(2) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 2;
		engine.draw(true,0,max * 6);
		switch(0) {
		case 0:
			engine._depthCullingState.set_depthMask(true);
			engine._alphaState.set_alphaBlend(false);
			break;
		case 2:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		case 1:
			engine._depthCullingState.set_depthMask(false);
			engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			engine._alphaState.set_alphaBlend(true);
			break;
		}
		engine._alphaMode = 0;
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this._spriteTexture != null) {
			this._spriteTexture.dispose();
			this._spriteTexture = null;
		}
		HxOverrides.remove(this._scene.spriteManagers,this);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_sprites_SpriteManager
};
var com_babylonhx_tools_AsyncLoop = $hx_exports.BABYLON.AsyncLoop = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	this.iterations = iterations;
	this._fn = _fn;
	this._successCallback = _successCallback;
	this.index = offset - 1;
	this._done = false;
};
$hxClasses["com.babylonhx.tools.AsyncLoop"] = com_babylonhx_tools_AsyncLoop;
com_babylonhx_tools_AsyncLoop.__name__ = ["com","babylonhx","tools","AsyncLoop"];
com_babylonhx_tools_AsyncLoop.Run = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	var loop = new com_babylonhx_tools_AsyncLoop(iterations,_fn,_successCallback,offset);
	loop.executeNext();
	return loop;
};
com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop = function(iterations,syncedIterations,fn,cback,breakFunction,timeout) {
	if(timeout == null) timeout = 0;
	com_babylonhx_tools_AsyncLoop.Run(Math.ceil(iterations / syncedIterations),function(loop) {
		if(breakFunction != null && breakFunction()) loop.breakLoop(); else com_babylonhx_tools_Tools.delay(function() {
			var _g = 0;
			while(_g < syncedIterations) {
				var i = _g++;
				var iteration = loop.index * syncedIterations + i;
				if(iteration >= iterations) break;
				fn(iteration);
				if(breakFunction != null && breakFunction()) {
					loop.breakLoop();
					break;
				}
			}
			loop.executeNext();
		},timeout);
	},cback);
};
com_babylonhx_tools_AsyncLoop.prototype = {
	iterations: null
	,index: null
	,_done: null
	,_fn: null
	,_successCallback: null
	,executeNext: function() {
		if(!this._done) {
			if(this.index + 1 < this.iterations) {
				++this.index;
				this._fn(this);
			} else this.breakLoop();
		}
	}
	,breakLoop: function() {
		this._done = true;
		this._successCallback();
	}
	,__class__: com_babylonhx_tools_AsyncLoop
};
var com_babylonhx_tools_SmartArray = $hx_exports.BABYLON.SmartArray = function(capacity) {
	if(capacity == null) capacity = 256;
	this._duplicateId = 0;
	this.length = 0;
	this.data = [];
	this._id = com_babylonhx_tools_SmartArray._GlobalId++;
};
$hxClasses["com.babylonhx.tools.SmartArray"] = com_babylonhx_tools_SmartArray;
com_babylonhx_tools_SmartArray.__name__ = ["com","babylonhx","tools","SmartArray"];
com_babylonhx_tools_SmartArray.prototype = {
	data: null
	,length: null
	,__smartArrayFlags: null
	,_id: null
	,_duplicateId: null
	,push: function(value) {
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,pushNoDuplicate: function(value) {
		if(value.__smartArrayFlags != null && value.__smartArrayFlags[this._id] == this._duplicateId) return;
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,sort: function(compareFn) {
		this.data.sort(compareFn);
	}
	,reset: function() {
		this.length = 0;
		this._duplicateId++;
	}
	,concat: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.data[this.length++] = (array.data != null?array.data:array)[index];
			}
		}
	}
	,concatWithNoDuplicate: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				var item = (array.data != null?array.data:array)[index];
				this.pushNoDuplicate(item);
			}
		}
	}
	,indexOf: function(value) {
		var position;
		var x = value;
		position = HxOverrides.indexOf(this.data,x,0);
		if(position >= this.length) return -1;
		return position;
	}
	,__class__: com_babylonhx_tools_SmartArray
};
var com_babylonhx_utils_Image = function(data,width,height) {
	this.width = 0;
	this.height = 0;
	this.width = width;
	this.height = height;
	if(data != null) this.data = data; else {
		var elements = width * height * 4;
		var len = null;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		this.data = this1;
	}
};
$hxClasses["com.babylonhx.utils.Image"] = com_babylonhx_utils_Image;
com_babylonhx_utils_Image.__name__ = ["com","babylonhx","utils","Image"];
com_babylonhx_utils_Image.prototype = {
	data: null
	,height: null
	,width: null
	,__class__: com_babylonhx_utils_Image
};
var com_babylonhx_utils_Scancodes = function() { };
$hxClasses["com.babylonhx.utils.Scancodes"] = com_babylonhx_utils_Scancodes;
com_babylonhx_utils_Scancodes.__name__ = ["com","babylonhx","utils","Scancodes"];
com_babylonhx_utils_Scancodes.$name = function(scancode) {
	var res = null;
	if(scancode >= 0 && scancode < com_babylonhx_utils_Scancodes.scancode_names.length) res = com_babylonhx_utils_Scancodes.scancode_names[scancode];
	if(res != null) return res; else return "";
};
var com_babylonhx_utils_Keycodes = function() { };
$hxClasses["com.babylonhx.utils.Keycodes"] = com_babylonhx_utils_Keycodes;
com_babylonhx_utils_Keycodes.__name__ = ["com","babylonhx","utils","Keycodes"];
com_babylonhx_utils_Keycodes.from_scan = function(scancode) {
	return scancode | com_babylonhx_utils_Scancodes.MASK;
};
com_babylonhx_utils_Keycodes.to_scan = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return keycode & ~com_babylonhx_utils_Scancodes.MASK;
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.enter;
	case 27:
		return com_babylonhx_utils_Scancodes.escape;
	case 8:
		return com_babylonhx_utils_Scancodes.backspace;
	case 9:
		return com_babylonhx_utils_Scancodes.tab;
	case 32:
		return com_babylonhx_utils_Scancodes.space;
	case 47:
		return com_babylonhx_utils_Scancodes.slash;
	case 48:
		return com_babylonhx_utils_Scancodes.key_0;
	case 49:
		return com_babylonhx_utils_Scancodes.key_1;
	case 50:
		return com_babylonhx_utils_Scancodes.key_2;
	case 51:
		return com_babylonhx_utils_Scancodes.key_3;
	case 52:
		return com_babylonhx_utils_Scancodes.key_4;
	case 53:
		return com_babylonhx_utils_Scancodes.key_5;
	case 54:
		return com_babylonhx_utils_Scancodes.key_6;
	case 55:
		return com_babylonhx_utils_Scancodes.key_7;
	case 56:
		return com_babylonhx_utils_Scancodes.key_8;
	case 57:
		return com_babylonhx_utils_Scancodes.key_9;
	case 59:
		return com_babylonhx_utils_Scancodes.semicolon;
	case 61:
		return com_babylonhx_utils_Scancodes.equals;
	case 91:
		return com_babylonhx_utils_Scancodes.leftbracket;
	case 92:
		return com_babylonhx_utils_Scancodes.backslash;
	case 93:
		return com_babylonhx_utils_Scancodes.rightbracket;
	case 96:
		return com_babylonhx_utils_Scancodes.grave;
	case 97:
		return com_babylonhx_utils_Scancodes.key_a;
	case 98:
		return com_babylonhx_utils_Scancodes.key_b;
	case 99:
		return com_babylonhx_utils_Scancodes.key_c;
	case 100:
		return com_babylonhx_utils_Scancodes.key_d;
	case 101:
		return com_babylonhx_utils_Scancodes.key_e;
	case 102:
		return com_babylonhx_utils_Scancodes.key_f;
	case 103:
		return com_babylonhx_utils_Scancodes.key_g;
	case 104:
		return com_babylonhx_utils_Scancodes.key_h;
	case 105:
		return com_babylonhx_utils_Scancodes.key_i;
	case 106:
		return com_babylonhx_utils_Scancodes.key_j;
	case 107:
		return com_babylonhx_utils_Scancodes.key_k;
	case 108:
		return com_babylonhx_utils_Scancodes.key_l;
	case 109:
		return com_babylonhx_utils_Scancodes.key_m;
	case 110:
		return com_babylonhx_utils_Scancodes.key_n;
	case 111:
		return com_babylonhx_utils_Scancodes.key_o;
	case 112:
		return com_babylonhx_utils_Scancodes.key_p;
	case 113:
		return com_babylonhx_utils_Scancodes.key_q;
	case 114:
		return com_babylonhx_utils_Scancodes.key_r;
	case 115:
		return com_babylonhx_utils_Scancodes.key_s;
	case 116:
		return com_babylonhx_utils_Scancodes.key_t;
	case 117:
		return com_babylonhx_utils_Scancodes.key_u;
	case 118:
		return com_babylonhx_utils_Scancodes.key_v;
	case 119:
		return com_babylonhx_utils_Scancodes.key_w;
	case 120:
		return com_babylonhx_utils_Scancodes.key_x;
	case 121:
		return com_babylonhx_utils_Scancodes.key_y;
	case 122:
		return com_babylonhx_utils_Scancodes.key_z;
	}
	return com_babylonhx_utils_Scancodes.unknown;
};
com_babylonhx_utils_Keycodes.$name = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return com_babylonhx_utils_Scancodes.$name(keycode & ~com_babylonhx_utils_Scancodes.MASK);
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.enter);
	case 27:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.escape);
	case 8:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.backspace);
	case 9:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.tab);
	case 32:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.space);
	case 127:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes["delete"]);
	default:
		var decoder = new haxe_Utf8();
		decoder.__b += String.fromCharCode(keycode);
		return decoder.__b;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	set: null
	,remove: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) return "";
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		return s != null && s != "";
	});
	if(paths1.length == 0) return "";
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join("/");
	if(path == null || path == slash) return slash;
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") target.pop(); else if(token != ".") target.push(token);
	}
	var tmp = target.join(slash);
	var regex = new EReg("([^:])/+","g");
	var result = regex.replace(tmp,"$1" + slash);
	var acc = new StringBuf();
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = HxOverrides.cca(tmp,i);
		var i1 = _g21;
		if(_g21 != null) switch(_g21) {
		case 58:
			acc.b += ":";
			colon = true;
			break;
		case 47:
			if(colon == false) slashes = true; else {
				colon = false;
				if(slashes) {
					acc.b += "/";
					slashes = false;
				}
				acc.add(String.fromCharCode(i1));
			}
			break;
		default:
			colon = false;
			if(slashes) {
				acc.b += "/";
				slashes = false;
			}
			acc.add(String.fromCharCode(i1));
		} else {
			colon = false;
			if(slashes) {
				acc.b += "/";
				slashes = false;
			}
			acc.add(String.fromCharCode(i1));
		}
	}
	var result1 = acc.b;
	return result1;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) return "/";
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) return path + "\\"; else return path;
	} else if(c1 != path.length - 1) return path + "/"; else return path;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var oimohx_math_Mat33 = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	if(e22 == null) e22 = 1;
	if(e21 == null) e21 = 0;
	if(e20 == null) e20 = 0;
	if(e12 == null) e12 = 0;
	if(e11 == null) e11 = 1;
	if(e10 == null) e10 = 0;
	if(e02 == null) e02 = 0;
	if(e01 == null) e01 = 0;
	if(e00 == null) e00 = 1;
	this.elements = (function($this) {
		var $r;
		var len = null;
		var this1;
		this1 = new Float32Array(9);
		$r = this1;
		return $r;
	}(this));
	var te = this.elements;
	te[0] = e00;
	te[1] = e01;
	te[2] = e02;
	te[3] = e10;
	te[4] = e11;
	te[5] = e12;
	te[6] = e20;
	te[7] = e21;
	te[8] = e22;
};
$hxClasses["oimohx.math.Mat33"] = oimohx_math_Mat33;
oimohx_math_Mat33.__name__ = ["oimohx","math","Mat33"];
oimohx_math_Mat33.prototype = {
	elements: null
	,init: function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		if(e22 == null) e22 = 1;
		if(e21 == null) e21 = 0;
		if(e20 == null) e20 = 0;
		if(e12 == null) e12 = 0;
		if(e11 == null) e11 = 1;
		if(e10 == null) e10 = 0;
		if(e02 == null) e02 = 0;
		if(e01 == null) e01 = 0;
		if(e00 == null) e00 = 1;
		var te = this.elements;
		te[0] = e00;
		te[1] = e01;
		te[2] = e02;
		te[3] = e10;
		te[4] = e11;
		te[5] = e12;
		te[6] = e20;
		te[7] = e21;
		te[8] = e22;
		return this;
	}
	,add: function(m1,m2) {
		var te = this.elements;
		var tem1 = m1.elements;
		var tem2 = m2.elements;
		te[0] = tem1[0] + tem2[0];
		te[1] = tem1[1] + tem2[1];
		te[2] = tem1[2] + tem2[2];
		te[3] = tem1[3] + tem2[3];
		te[4] = tem1[4] + tem2[4];
		te[5] = tem1[5] + tem2[5];
		te[6] = tem1[6] + tem2[6];
		te[7] = tem1[7] + tem2[7];
		te[8] = tem1[8] + tem2[8];
		return this;
	}
	,addEqual: function(m) {
		var te = this.elements;
		var tem = m.elements;
		te[0] = te[0] + tem[0];
		te[1] = te[1] + tem[1];
		te[2] = te[2] + tem[2];
		te[3] = te[3] + tem[3];
		te[4] = te[4] + tem[4];
		te[5] = te[5] + tem[5];
		te[6] = te[6] + tem[6];
		te[7] = te[7] + tem[7];
		te[8] = te[8] + tem[8];
		return this;
	}
	,sub: function(m1,m2) {
		var te = this.elements;
		var tem1 = m1.elements;
		var tem2 = m2.elements;
		te[0] = tem1[0] - tem2[0];
		te[1] = tem1[1] - tem2[1];
		te[2] = tem1[2] - tem2[2];
		te[3] = tem1[3] - tem2[3];
		te[4] = tem1[4] - tem2[4];
		te[5] = tem1[5] - tem2[5];
		te[6] = tem1[6] - tem2[6];
		te[7] = tem1[7] - tem2[7];
		te[8] = tem1[8] - tem2[8];
		return this;
	}
	,subEqual: function(m) {
		var te = this.elements;
		var tem = m.elements;
		te[0] = te[0] - tem[0];
		te[1] = te[1] - tem[1];
		te[2] = te[2] - tem[2];
		te[3] = te[3] - tem[3];
		te[4] = te[4] - tem[4];
		te[5] = te[5] - tem[5];
		te[6] = te[6] - tem[6];
		te[7] = te[7] - tem[7];
		te[8] = te[8] - tem[8];
		return this;
	}
	,scale: function(m,s) {
		var te = this.elements;
		var tm = m.elements;
		te[0] = tm[0] * s;
		te[1] = tm[1] * s;
		te[2] = tm[2] * s;
		te[3] = tm[3] * s;
		te[4] = tm[4] * s;
		te[5] = tm[5] * s;
		te[6] = tm[6] * s;
		te[7] = tm[7] * s;
		te[8] = tm[8] * s;
		return this;
	}
	,scaleEqual: function(s) {
		var te = this.elements;
		te[0] = te[0] * s;
		te[1] = te[1] * s;
		te[2] = te[2] * s;
		te[3] = te[3] * s;
		te[4] = te[4] * s;
		te[5] = te[5] * s;
		te[6] = te[6] * s;
		te[7] = te[7] * s;
		te[8] = te[8] * s;
		return this;
	}
	,mul: function(m1,m2) {
		var te = this.elements;
		var tm1 = m1.elements;
		var tm2 = m2.elements;
		var a0 = tm1[0];
		var a3 = tm1[3];
		var a6 = tm1[6];
		var a1 = tm1[1];
		var a4 = tm1[4];
		var a7 = tm1[7];
		var a2 = tm1[2];
		var a5 = tm1[5];
		var a8 = tm1[8];
		var b0 = tm2[0];
		var b3 = tm2[3];
		var b6 = tm2[6];
		var b1 = tm2[1];
		var b4 = tm2[4];
		var b7 = tm2[7];
		var b2 = tm2[2];
		var b5 = tm2[5];
		var b8 = tm2[8];
		te[0] = a0 * b0 + a1 * b3 + a2 * b6;
		te[1] = a0 * b1 + a1 * b4 + a2 * b7;
		te[2] = a0 * b2 + a1 * b5 + a2 * b8;
		te[3] = a3 * b0 + a4 * b3 + a5 * b6;
		te[4] = a3 * b1 + a4 * b4 + a5 * b7;
		te[5] = a3 * b2 + a4 * b5 + a5 * b8;
		te[6] = a6 * b0 + a7 * b3 + a8 * b6;
		te[7] = a6 * b1 + a7 * b4 + a8 * b7;
		te[8] = a6 * b2 + a7 * b5 + a8 * b8;
		return this;
	}
	,mulScale: function(m,sx,sy,sz,prepend) {
		if(prepend == null) prepend = false;
		var te = this.elements;
		var tm = m.elements;
		if(prepend) {
			te[0] = sx * tm[0];
			te[1] = sx * tm[1];
			te[2] = sx * tm[2];
			te[3] = sy * tm[3];
			te[4] = sy * tm[4];
			te[5] = sy * tm[5];
			te[6] = sz * tm[6];
			te[7] = sz * tm[7];
			te[8] = sz * tm[8];
		} else {
			te[0] = tm[0] * sx;
			te[1] = tm[1] * sy;
			te[2] = tm[2] * sz;
			te[3] = tm[3] * sx;
			te[4] = tm[4] * sy;
			te[5] = tm[5] * sz;
			te[6] = tm[6] * sx;
			te[7] = tm[7] * sy;
			te[8] = tm[8] * sz;
		}
		return this;
	}
	,mulRotate: function(m,rad,ax,ay,az,prepend) {
		if(prepend == null) prepend = false;
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = ax * ax * c1 + c;
		var r01 = ax * ay * c1 - az * s;
		var r02 = ax * az * c1 + ay * s;
		var r10 = ay * ax * c1 + az * s;
		var r11 = ay * ay * c1 + c;
		var r12 = ay * az * c1 - ax * s;
		var r20 = az * ax * c1 - ay * s;
		var r21 = az * ay * c1 + ax * s;
		var r22 = az * az * c1 + c;
		var tm = m.elements;
		var a0 = tm[0];
		var a3 = tm[3];
		var a6 = tm[6];
		var a1 = tm[1];
		var a4 = tm[4];
		var a7 = tm[7];
		var a2 = tm[2];
		var a5 = tm[5];
		var a8 = tm[8];
		var te = this.elements;
		if(prepend) {
			te[0] = r00 * a0 + r01 * a3 + r02 * a6;
			te[1] = r00 * a1 + r01 * a4 + r02 * a7;
			te[2] = r00 * a2 + r01 * a5 + r02 * a8;
			te[3] = r10 * a0 + r11 * a3 + r12 * a6;
			te[4] = r10 * a1 + r11 * a4 + r12 * a7;
			te[5] = r10 * a2 + r11 * a5 + r12 * a8;
			te[6] = r20 * a0 + r21 * a3 + r22 * a6;
			te[7] = r20 * a1 + r21 * a4 + r22 * a7;
			te[8] = r20 * a2 + r21 * a5 + r22 * a8;
		} else {
			te[0] = a0 * r00 + a1 * r10 + a2 * r20;
			te[1] = a0 * r01 + a1 * r11 + a2 * r21;
			te[2] = a0 * r02 + a1 * r12 + a2 * r22;
			te[3] = a3 * r00 + a4 * r10 + a5 * r20;
			te[4] = a3 * r01 + a4 * r11 + a5 * r21;
			te[5] = a3 * r02 + a4 * r12 + a5 * r22;
			te[6] = a6 * r00 + a7 * r10 + a8 * r20;
			te[7] = a6 * r01 + a7 * r11 + a8 * r21;
			te[8] = a6 * r02 + a7 * r12 + a8 * r22;
		}
		return this;
	}
	,transpose: function(m) {
		var te = this.elements;
		var tm = m.elements;
		te[0] = tm[0];
		te[1] = tm[3];
		te[2] = tm[6];
		te[3] = tm[1];
		te[4] = tm[4];
		te[5] = tm[7];
		te[6] = tm[2];
		te[7] = tm[5];
		te[8] = tm[8];
		return this;
	}
	,setQuat: function(q) {
		var te = this.elements;
		var x2 = 2 * q.x;
		var y2 = 2 * q.y;
		var z2 = 2 * q.z;
		var xx = q.x * x2;
		var yy = q.y * y2;
		var zz = q.z * z2;
		var xy = q.x * y2;
		var yz = q.y * z2;
		var xz = q.x * z2;
		var sx = q.s * x2;
		var sy = q.s * y2;
		var sz = q.s * z2;
		te[0] = 1 - yy - zz;
		te[1] = xy - sz;
		te[2] = xz + sy;
		te[3] = xy + sz;
		te[4] = 1 - xx - zz;
		te[5] = yz - sx;
		te[6] = xz - sy;
		te[7] = yz + sx;
		te[8] = 1 - xx - yy;
		return this;
	}
	,invert: function(m) {
		var te = this.elements;
		var tm = m.elements;
		var a0 = tm[0];
		var a3 = tm[3];
		var a6 = tm[6];
		var a1 = tm[1];
		var a4 = tm[4];
		var a7 = tm[7];
		var a2 = tm[2];
		var a5 = tm[5];
		var a8 = tm[8];
		var b01 = a4 * a8 - a7 * a5;
		var b11 = a7 * a2 - a1 * a8;
		var b21 = a1 * a5 - a4 * a2;
		var dt = a0 * b01 + a3 * b11 + a6 * b21;
		if(dt != 0) dt = 1.0 / dt;
		te[0] = dt * b01;
		te[1] = dt * b11;
		te[2] = dt * b21;
		te[3] = dt * (a5 * a6 - a3 * a8);
		te[4] = dt * (a0 * a8 - a2 * a6);
		te[5] = dt * (a2 * a3 - a0 * a5);
		te[6] = dt * (a3 * a7 - a4 * a6);
		te[7] = dt * (a1 * a6 - a0 * a7);
		te[8] = dt * (a0 * a4 - a1 * a3);
		return this;
	}
	,copy: function(m) {
		var te = this.elements;
		var tem = m.elements;
		te[0] = tem[0];
		te[1] = tem[1];
		te[2] = tem[2];
		te[3] = tem[3];
		te[4] = tem[4];
		te[5] = tem[5];
		te[6] = tem[6];
		te[7] = tem[7];
		te[8] = tem[8];
		return this;
	}
	,clone: function() {
		var te = this.elements;
		return new oimohx_math_Mat33(te[0],te[1],te[2],te[3],te[4],te[5],te[6],te[7],te[8]);
	}
	,__class__: oimohx_math_Mat33
};
var oimohx_math_Mat44 = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	if(e33 == null) e33 = 1;
	if(e32 == null) e32 = 0;
	if(e31 == null) e31 = 0;
	if(e30 == null) e30 = 0;
	if(e23 == null) e23 = 0;
	if(e22 == null) e22 = 1;
	if(e21 == null) e21 = 0;
	if(e20 == null) e20 = 0;
	if(e13 == null) e13 = 0;
	if(e12 == null) e12 = 0;
	if(e11 == null) e11 = 1;
	if(e10 == null) e10 = 0;
	if(e03 == null) e03 = 0;
	if(e02 == null) e02 = 0;
	if(e01 == null) e01 = 0;
	if(e00 == null) e00 = 1;
	this.elements = (function($this) {
		var $r;
		var len = null;
		var this1;
		this1 = new Float32Array(16);
		$r = this1;
		return $r;
	}(this));
	var te = this.elements;
	te[0] = e00;
	te[4] = e01;
	te[8] = e02;
	te[12] = e03;
	te[1] = e10;
	te[5] = e11;
	te[9] = e12;
	te[13] = e13;
	te[2] = e20;
	te[6] = e21;
	te[10] = e22;
	te[14] = e23;
	te[3] = e30;
	te[7] = e31;
	te[11] = e32;
	te[15] = e33;
};
$hxClasses["oimohx.math.Mat44"] = oimohx_math_Mat44;
oimohx_math_Mat44.__name__ = ["oimohx","math","Mat44"];
oimohx_math_Mat44.prototype = {
	elements: null
	,init: function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		if(e33 == null) e33 = 1;
		if(e32 == null) e32 = 0;
		if(e31 == null) e31 = 0;
		if(e30 == null) e30 = 0;
		if(e23 == null) e23 = 0;
		if(e22 == null) e22 = 1;
		if(e21 == null) e21 = 0;
		if(e20 == null) e20 = 0;
		if(e13 == null) e13 = 0;
		if(e12 == null) e12 = 0;
		if(e11 == null) e11 = 1;
		if(e10 == null) e10 = 0;
		if(e03 == null) e03 = 0;
		if(e02 == null) e02 = 0;
		if(e01 == null) e01 = 0;
		if(e00 == null) e00 = 1;
		var te = this.elements;
		te[0] = e00;
		te[4] = e01;
		te[8] = e02;
		te[12] = e03;
		te[1] = e10;
		te[5] = e11;
		te[9] = e12;
		te[13] = e13;
		te[2] = e20;
		te[6] = e21;
		te[10] = e22;
		te[14] = e23;
		te[3] = e30;
		te[7] = e31;
		te[11] = e32;
		te[15] = e33;
		return this;
	}
	,__class__: oimohx_math_Mat44
};
var oimohx_math_Quat = function(s,x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(s == null) s = 1;
	this.s = s;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["oimohx.math.Quat"] = oimohx_math_Quat;
oimohx_math_Quat.__name__ = ["oimohx","math","Quat"];
oimohx_math_Quat.prototype = {
	s: null
	,x: null
	,y: null
	,z: null
	,init: function(s,x,y,z) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(s == null) s = 1;
		this.s = s;
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,add: function(q1,q2) {
		this.s = q1.s + q2.s;
		this.x = q1.x + q2.x;
		this.y = q1.y + q2.y;
		this.z = q1.z + q2.z;
		return this;
	}
	,addTime: function(v,t) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var qs = this.s;
		var qx = this.x;
		var qy = this.y;
		var qz = this.z;
		t *= 0.5;
		var ns = (-x * qx - y * qy - z * qz) * t;
		var nx = (x * qs + y * qz - z * qy) * t;
		var ny = (-x * qz + y * qs + z * qx) * t;
		var nz = (x * qy - y * qx + z * qs) * t;
		qs += ns;
		qx += nx;
		qy += ny;
		qz += nz;
		var s = 1 / Math.sqrt(qs * qs + qx * qx + qy * qy + qz * qz);
		this.s = qs * s;
		this.x = qx * s;
		this.y = qy * s;
		this.z = qz * s;
		return this;
	}
	,sub: function(q1,q2) {
		this.s = q1.s - q2.s;
		this.x = q1.x - q2.x;
		this.y = q1.y - q2.y;
		this.z = q1.z - q2.z;
		return this;
	}
	,scale: function(q,s) {
		this.s = q.s * s;
		this.x = q.x * s;
		this.y = q.y * s;
		this.z = q.z * s;
		return this;
	}
	,mul: function(q1,q2) {
		this.s = q1.s * q2.s - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = q1.s * q2.x + q1.x * q2.s + q1.y * q2.z - q1.z * q2.y;
		this.y = q1.s * q2.y - q1.x * q2.z + q1.y * q2.s + q1.z * q2.x;
		this.z = q1.s * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.s;
		return this;
	}
	,arc: function(v1,v2) {
		var d = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
		if(d == -1) {
			v2.x = v1.y * v1.x - v1.z * v1.z;
			v2.y = -v1.z * v1.y - v1.x * v1.x;
			v2.z = v1.x * v1.z + v1.y * v1.y;
			d = 1 / Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
			this.s = 0;
			this.x = v2.x * d;
			this.y = v2.y * d;
			this.z = v2.z * d;
		} else {
			d = 0.5 / Math.sqrt((1 + d) * 0.5);
			this.x = (v1.y * v2.z - v1.z * v2.y) * d;
			this.y = (v1.z * v2.x - v1.x * v2.z) * d;
			this.z = (v1.x * v2.y - v1.y * v2.x) * d;
		}
		return this;
	}
	,normalize: function(q) {
		var len = Math.sqrt(q.s * q.s + q.x * q.x + q.y * q.y + q.z * q.z);
		if(len > 0) len = 1 / len;
		this.s = q.s * len;
		this.x = q.x * len;
		this.y = q.y * len;
		this.z = q.z * len;
		return this;
	}
	,invert: function(q) {
		this.s = q.s;
		this.x = -q.x;
		this.y = -q.y;
		this.z = -q.z;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.s * this.s + this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,copy: function(q) {
		this.s = q.s;
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		return this;
	}
	,testDiff: function(q) {
		if(this.s != q.s || this.x != q.x || this.y != q.y || this.z != q.z) return true; else return false;
	}
	,clone: function(q) {
		return new oimohx_math_Quat(this.s,this.x,this.y,this.z);
	}
	,toString: function() {
		return "Quat[" + this.s + ", (" + this.x + ", " + this.y + ", " + this.z + ")]";
	}
	,__class__: oimohx_math_Quat
};
var oimohx_math_Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["oimohx.math.Vec3"] = oimohx_math_Vec3;
oimohx_math_Vec3.__name__ = ["oimohx","math","Vec3"];
oimohx_math_Vec3.prototype = {
	x: null
	,y: null
	,z: null
	,init: function(x,y,z) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,add: function(v1,v2) {
		this.x = v1.x + v2.x;
		this.y = v1.y + v2.y;
		this.z = v1.z + v2.z;
		return this;
	}
	,addEqual: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addTime: function(v,t) {
		this.x += v.x * t;
		this.y += v.y * t;
		this.z += v.z * t;
		return this;
	}
	,sub: function(v1,v2) {
		this.x = v1.x - v2.x;
		this.y = v1.y - v2.y;
		this.z = v1.z - v2.z;
		return this;
	}
	,subEqual: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,scale: function(v,s) {
		this.x = v.x * s;
		this.y = v.y * s;
		this.z = v.z * s;
		return this;
	}
	,scaleEqual: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,cross: function(v1,v2) {
		this.x = v1.y * v2.z - v1.z * v2.y;
		this.y = v1.z * v2.x - v1.x * v2.z;
		this.z = v1.x * v2.y - v1.y * v2.x;
		return this;
	}
	,mul: function(o,v,m) {
		var te = m.elements;
		this.x = o.x + v.x * te[0] + v.y * te[1] + v.z * te[2];
		this.y = o.y + v.x * te[3] + v.y * te[4] + v.z * te[5];
		this.z = o.z + v.x * te[6] + v.y * te[7] + v.z * te[8];
		return this;
	}
	,mulMat: function(m,v) {
		this.x = m.elements[0] * v.x + m.elements[1] * v.y + m.elements[2] * v.z;
		this.y = m.elements[3] * v.x + m.elements[4] * v.y + m.elements[5] * v.z;
		this.z = m.elements[6] * v.x + m.elements[7] * v.y + m.elements[8] * v.z;
		return this;
	}
	,normalize: function(v) {
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		if(length > 0) length = 1 / length;
		this.x = v.x * length;
		this.y = v.y * length;
		this.z = v.z * length;
		return this;
	}
	,invert: function(v) {
		this.x = -v.x;
		this.y = -v.y;
		this.z = -v.z;
		return this;
	}
	,testZero: function() {
		if(this.x != 0 || this.y != 0 || this.z != 0) return true; else return false;
	}
	,testDiff: function(v) {
		if(this.x != v.x || this.y != v.y || this.z != v.z) return true; else return false;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,copy: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new oimohx_math_Vec3(this.x,this.y,this.z);
	}
	,toString: function() {
		return "Vec3[" + this.x + ", " + this.y + ", " + this.z + "]";
	}
	,__class__: oimohx_math_Vec3
};
var oimohx_physics_collision_broadphase_AABB = function(minX,maxX,minY,maxY,minZ,maxZ) {
	if(maxZ == null) maxZ = 0;
	if(minZ == null) minZ = 0;
	if(maxY == null) maxY = 0;
	if(minY == null) minY = 0;
	if(maxX == null) maxX = 0;
	if(minX == null) minX = 0;
	this.minX = minX;
	this.maxX = maxX;
	this.minY = minY;
	this.maxY = maxY;
	this.minZ = minZ;
	this.maxZ = maxZ;
};
$hxClasses["oimohx.physics.collision.broadphase.AABB"] = oimohx_physics_collision_broadphase_AABB;
oimohx_physics_collision_broadphase_AABB.__name__ = ["oimohx","physics","collision","broadphase","AABB"];
oimohx_physics_collision_broadphase_AABB.prototype = {
	minX: null
	,maxX: null
	,minY: null
	,maxY: null
	,minZ: null
	,maxZ: null
	,init: function(minX,maxX,minY,maxY,minZ,maxZ) {
		if(maxZ == null) maxZ = 0;
		if(minZ == null) minZ = 0;
		if(maxY == null) maxY = 0;
		if(minY == null) minY = 0;
		if(maxX == null) maxX = 0;
		if(minX == null) minX = 0;
		this.minX = minX;
		this.maxX = maxX;
		this.minY = minY;
		this.maxY = maxY;
		this.minZ = minZ;
		this.maxZ = maxZ;
	}
	,combine: function(aabb1,aabb2) {
		if(aabb1.minX < aabb2.minX) this.minX = aabb1.minX; else this.minX = aabb2.minX;
		if(aabb1.maxX > aabb2.maxX) this.maxX = aabb1.maxX; else this.maxX = aabb2.maxX;
		if(aabb1.minY < aabb2.minY) this.minY = aabb1.minY; else this.minY = aabb2.minY;
		if(aabb1.maxY > aabb2.maxY) this.maxY = aabb1.maxY; else this.maxY = aabb2.maxY;
		if(aabb1.minZ < aabb2.minZ) this.minZ = aabb1.minZ; else this.minZ = aabb2.minZ;
		if(aabb1.maxZ > aabb2.maxZ) this.maxZ = aabb1.maxZ; else this.maxZ = aabb2.maxZ;
		var margin = 0;
		this.minX -= margin;
		this.minY -= margin;
		this.minZ -= margin;
		this.maxX += margin;
		this.maxY += margin;
		this.maxZ += margin;
	}
	,surfaceArea: function() {
		var h = this.maxY - this.minY;
		var d = this.maxZ - this.minZ;
		return 2 * ((this.maxX - this.minX) * (h + d) + h * d);
	}
	,intersectsWithPoint: function(x,y,z) {
		return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY && z >= this.minZ && z <= this.maxZ;
	}
	,__class__: oimohx_physics_collision_broadphase_AABB
};
var oimohx_physics_collision_broadphase_Proxy = function(shape) {
	this.shape = shape;
	this.aabb = shape.aabb;
	this.update = function() {
	};
};
$hxClasses["oimohx.physics.collision.broadphase.Proxy"] = oimohx_physics_collision_broadphase_Proxy;
oimohx_physics_collision_broadphase_Proxy.__name__ = ["oimohx","physics","collision","broadphase","Proxy"];
oimohx_physics_collision_broadphase_Proxy.prototype = {
	shape: null
	,aabb: null
	,update: null
	,__class__: oimohx_physics_collision_broadphase_Proxy
};
var oimohx_physics_collision_broadphase_BasicProxy = function(shape) {
	oimohx_physics_collision_broadphase_Proxy.call(this,shape);
};
$hxClasses["oimohx.physics.collision.broadphase.BasicProxy"] = oimohx_physics_collision_broadphase_BasicProxy;
oimohx_physics_collision_broadphase_BasicProxy.__name__ = ["oimohx","physics","collision","broadphase","BasicProxy"];
oimohx_physics_collision_broadphase_BasicProxy.__super__ = oimohx_physics_collision_broadphase_Proxy;
oimohx_physics_collision_broadphase_BasicProxy.prototype = $extend(oimohx_physics_collision_broadphase_Proxy.prototype,{
	__class__: oimohx_physics_collision_broadphase_BasicProxy
});
var oimohx_physics_collision_broadphase_BroadPhase = function() {
	this.numPairs = 0;
	this.bufferSize = 256;
	this.pairs = [];
	var _g1 = 0;
	var _g = this.bufferSize;
	while(_g1 < _g) {
		var i = _g1++;
		this.pairs[i] = new oimohx_physics_collision_broadphase_Pair();
	}
};
$hxClasses["oimohx.physics.collision.broadphase.BroadPhase"] = oimohx_physics_collision_broadphase_BroadPhase;
oimohx_physics_collision_broadphase_BroadPhase.__name__ = ["oimohx","physics","collision","broadphase","BroadPhase"];
oimohx_physics_collision_broadphase_BroadPhase.prototype = {
	pairs: null
	,numPairs: null
	,collectPairs: null
	,numPairChecks: null
	,bufferSize: null
	,createProxy: function(shape) {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,addProxy: function(proxy) {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,removeProxy: function(proxy) {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,isAvailablePair: function(s1,s2) {
		var b1 = s1.parent;
		var b2 = s2.parent;
		if(b1 == b2 || !b1.isDynamic && !b2.isDynamic || (s1.belongsTo & s2.collidesWith) == 0 || (s2.belongsTo & s1.collidesWith) == 0) return false;
		var js;
		if(b1.numJoints < b2.numJoints) js = b1.jointLink; else js = b2.jointLink;
		var joint = null;
		while(js != null) {
			joint = js.joint;
			if(!joint.allowCollision && (joint.body1 == b1 && joint.body2 == b2 || joint.body1 == b2 && joint.body2 == b1)) return false;
			js = js.next;
		}
		return true;
	}
	,detectPairs: function() {
		while(this.numPairs > 0) {
			var pair = this.pairs[--this.numPairs];
			pair.shape1 = null;
			pair.shape2 = null;
		}
		this.numPairChecks = 0;
		this.collectPairs();
	}
	,addPair: function(s1,s2) {
		if(this.numPairs == this.bufferSize) {
			var newBufferSize = this.bufferSize << 1;
			var newPairs = [];
			var _g1 = 0;
			var _g = this.bufferSize;
			while(_g1 < _g) {
				var i = _g1++;
				newPairs[i] = this.pairs[i];
			}
			var _g2 = this.bufferSize;
			while(_g2 < newBufferSize) {
				var i1 = _g2++;
				newPairs[i1] = new oimohx_physics_collision_broadphase_Pair();
			}
			this.pairs = newPairs;
			this.bufferSize = newBufferSize;
		}
		var pair = this.pairs[this.numPairs++];
		pair.shape1 = s1;
		pair.shape2 = s2;
	}
	,__class__: oimohx_physics_collision_broadphase_BroadPhase
};
var oimohx_physics_collision_broadphase_BruteForceBroadPhase = function() {
	oimohx_physics_collision_broadphase_BroadPhase.call(this);
	this.maxProxies = 256;
	this.proxies = [];
	this.collectPairs = $bind(this,this._collectPairs);
};
$hxClasses["oimohx.physics.collision.broadphase.BruteForceBroadPhase"] = oimohx_physics_collision_broadphase_BruteForceBroadPhase;
oimohx_physics_collision_broadphase_BruteForceBroadPhase.__name__ = ["oimohx","physics","collision","broadphase","BruteForceBroadPhase"];
oimohx_physics_collision_broadphase_BruteForceBroadPhase.__super__ = oimohx_physics_collision_broadphase_BroadPhase;
oimohx_physics_collision_broadphase_BruteForceBroadPhase.prototype = $extend(oimohx_physics_collision_broadphase_BroadPhase.prototype,{
	proxies: null
	,numProxies: null
	,maxProxies: null
	,createProxy: function(shape) {
		return new oimohx_physics_collision_broadphase_BasicProxy(shape);
	}
	,addProxy: function(proxy) {
		if(this.numProxies == this.maxProxies) {
			this.maxProxies <<= 1;
			var newProxies = [];
			var _g1 = 0;
			var _g = this.numProxies;
			while(_g1 < _g) {
				var i = _g1++;
				newProxies[i] = this.proxies[i];
			}
			this.proxies = newProxies;
		}
		this.proxies[this.numProxies++] = proxy;
	}
	,removeProxy: function(proxy) {
		var _g1 = 0;
		var _g = this.numProxies;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.proxies[i] == proxy) {
				this.proxies[i] = this.proxies[--this.numProxies];
				this.proxies[this.numProxies] = null;
				return;
			}
		}
	}
	,_collectPairs: function() {
		this.numPairChecks = this.numProxies * (this.numProxies - 1) >> 1;
		var p1 = null;
		var b1 = null;
		var s1 = null;
		var p2 = null;
		var b2 = null;
		var s2 = null;
		var _g1 = 0;
		var _g = this.numProxies;
		while(_g1 < _g) {
			var i = _g1++;
			p1 = this.proxies[i];
			b1 = p1.aabb;
			s1 = p1.shape;
			var _g3 = i + 1;
			var _g2 = this.numProxies;
			while(_g3 < _g2) {
				var j = _g3++;
				p2 = this.proxies[j];
				b2 = p2.aabb;
				s2 = p2.shape;
				if(b1.maxX < b2.minX || b1.minX > b2.maxX || b1.maxY < b2.minY || b1.minY > b2.maxY || b1.maxZ < b2.minZ || b1.minZ > b2.maxZ || !this.isAvailablePair(s1,s2)) continue;
				this.addPair(s1,s2);
			}
		}
	}
	,__class__: oimohx_physics_collision_broadphase_BruteForceBroadPhase
});
var oimohx_physics_collision_broadphase_Pair = function() {
};
$hxClasses["oimohx.physics.collision.broadphase.Pair"] = oimohx_physics_collision_broadphase_Pair;
oimohx_physics_collision_broadphase_Pair.__name__ = ["oimohx","physics","collision","broadphase","Pair"];
oimohx_physics_collision_broadphase_Pair.prototype = {
	shape1: null
	,shape2: null
	,__class__: oimohx_physics_collision_broadphase_Pair
};
var oimohx_physics_collision_broadphase_dbvt_DBVT = function() {
	this.freeNodes = [];
	this.numFreeNodes = 0;
	this.aabb = new oimohx_physics_collision_broadphase_AABB();
};
$hxClasses["oimohx.physics.collision.broadphase.dbvt.DBVT"] = oimohx_physics_collision_broadphase_dbvt_DBVT;
oimohx_physics_collision_broadphase_dbvt_DBVT.__name__ = ["oimohx","physics","collision","broadphase","dbvt","DBVT"];
oimohx_physics_collision_broadphase_dbvt_DBVT.prototype = {
	root: null
	,freeNodes: null
	,numFreeNodes: null
	,aabb: null
	,moveLeaf: function(leaf) {
		this.deleteLeaf(leaf);
		this.insertLeaf(leaf);
	}
	,insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			return;
		}
		var lb = leaf.aabb;
		var sibling = this.root;
		var oldArea;
		var newArea;
		while(sibling.proxy == null) {
			var c1 = sibling.child1;
			var c2 = sibling.child2;
			var b = sibling.aabb;
			var c1b = c1.aabb;
			var c2b = c2.aabb;
			oldArea = b.surfaceArea();
			this.aabb.combine(lb,b);
			newArea = this.aabb.surfaceArea();
			var creatingCost = newArea * 2;
			var incrementalCost = (newArea - oldArea) * 2;
			var discendingCost1 = incrementalCost;
			this.aabb.combine(lb,c1b);
			if(c1.proxy != null) discendingCost1 += this.aabb.surfaceArea(); else discendingCost1 += this.aabb.surfaceArea() - c1b.surfaceArea();
			var discendingCost2 = incrementalCost;
			this.aabb.combine(lb,c2b);
			if(c2.proxy != null) discendingCost2 += this.aabb.surfaceArea(); else discendingCost2 += this.aabb.surfaceArea() - c2b.surfaceArea();
			if(discendingCost1 < discendingCost2) {
				if(creatingCost < discendingCost1) break; else sibling = c1;
			} else if(creatingCost < discendingCost2) break; else sibling = c2;
		}
		var oldParent = sibling.parent;
		var newParent;
		if(this.numFreeNodes > 0) newParent = this.freeNodes[--this.numFreeNodes]; else newParent = new oimohx_physics_collision_broadphase_dbvt_DBVTNode();
		newParent.parent = oldParent;
		newParent.child1 = leaf;
		newParent.child2 = sibling;
		newParent.aabb.combine(leaf.aabb,sibling.aabb);
		newParent.height = sibling.height + 1;
		sibling.parent = newParent;
		leaf.parent = newParent;
		if(sibling == this.root) this.root = newParent; else if(oldParent.child1 == sibling) oldParent.child1 = newParent; else oldParent.child2 = newParent;
		do {
			newParent = this.balance(newParent);
			this.fix(newParent);
			newParent = newParent.parent;
		} while(newParent != null);
	}
	,getBalance: function(node) {
		if(node.proxy != null) return 0;
		return node.child1.height - node.child2.height;
	}
	,print: function(node,indent,text) {
		var hasChild = node.proxy == null;
		if(hasChild) text = this.print(node.child1,indent + 1,text);
		var i = indent * 2;
		while(i >= 0) {
			text += " ";
			i--;
		}
		text += (hasChild?this.getBalance(node) + "":"[" + node.proxy.aabb.minX + "]") + "\n";
		if(hasChild) text = this.print(node.child2,indent + 1,text);
		return text;
	}
	,deleteLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		}
		var parent = leaf.parent;
		var sibling;
		if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
		if(parent == this.root) {
			this.root = sibling;
			sibling.parent = null;
			return;
		}
		var grandParent = parent.parent;
		sibling.parent = grandParent;
		if(grandParent.child1 == parent) grandParent.child1 = sibling; else grandParent.child2 = sibling;
		if(this.numFreeNodes < 16384) this.freeNodes[this.numFreeNodes++] = parent;
		do {
			grandParent = this.balance(grandParent);
			this.fix(grandParent);
			grandParent = grandParent.parent;
		} while(grandParent != null);
	}
	,balance: function(node) {
		var nh = node.height;
		if(nh < 2) return node;
		var p = node.parent;
		var l = node.child1;
		var r = node.child2;
		var lh = l.height;
		var rh = r.height;
		var balance = lh - rh;
		var t;
		if(balance > 1) {
			var ll = l.child1;
			var lr = l.child2;
			var llh = ll.height;
			var lrh = lr.height;
			if(llh > lrh) {
				l.child2 = node;
				node.parent = l;
				node.child1 = lr;
				lr.parent = node;
				node.aabb.combine(lr.aabb,r.aabb);
				t = lrh - rh;
				node.height = lrh - (t & t >> 31) + 1;
				l.aabb.combine(ll.aabb,node.aabb);
				t = llh - nh;
				l.height = llh - (t & t >> 31) + 1;
			} else {
				l.child1 = node;
				node.parent = l;
				node.child1 = ll;
				ll.parent = node;
				node.aabb.combine(ll.aabb,r.aabb);
				t = llh - rh;
				node.height = llh - (t & t >> 31) + 1;
				l.aabb.combine(node.aabb,lr.aabb);
				t = nh - lrh;
				l.height = nh - (t & t >> 31) + 1;
			}
			if(p != null) {
				if(p.child1 == node) p.child1 = l; else p.child2 = l;
			} else this.root = l;
			l.parent = p;
			return l;
		} else if(balance < -1) {
			var rl = r.child1;
			var rr = r.child2;
			var rlh = rl.height;
			var rrh = rr.height;
			if(rlh > rrh) {
				r.child2 = node;
				node.parent = r;
				node.child2 = rr;
				rr.parent = node;
				node.aabb.combine(l.aabb,rr.aabb);
				t = lh - rrh;
				node.height = lh - (t & t >> 31) + 1;
				r.aabb.combine(rl.aabb,node.aabb);
				t = rlh - nh;
				r.height = rlh - (t & t >> 31) + 1;
			} else {
				r.child1 = node;
				node.parent = r;
				node.child2 = rl;
				rl.parent = node;
				node.aabb.combine(l.aabb,rl.aabb);
				t = lh - rlh;
				node.height = lh - (t & t >> 31) + 1;
				r.aabb.combine(node.aabb,rr.aabb);
				t = nh - rrh;
				r.height = nh - (t & t >> 31) + 1;
			}
			if(p != null) {
				if(p.child1 == node) p.child1 = r; else p.child2 = r;
			} else this.root = r;
			r.parent = p;
			return r;
		}
		return node;
	}
	,fix: function(node) {
		var c1 = node.child1;
		var c2 = node.child2;
		node.aabb.combine(c1.aabb,c2.aabb);
		var h1 = c1.height;
		var h2 = c2.height;
		if(h1 < h2) node.height = h2 + 1; else node.height = h1 + 1;
	}
	,__class__: oimohx_physics_collision_broadphase_dbvt_DBVT
};
var oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase = function() {
	oimohx_physics_collision_broadphase_BroadPhase.call(this);
	this.tree = new oimohx_physics_collision_broadphase_dbvt_DBVT();
	this.maxStack = 256;
	this.stack = [];
	this.maxLeaves = 256;
	this.leaves = [];
	this.collectPairs = $bind(this,this._collectPairs);
};
$hxClasses["oimohx.physics.collision.broadphase.dbvt.DBVTBroadPhase"] = oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase;
oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase.__name__ = ["oimohx","physics","collision","broadphase","dbvt","DBVTBroadPhase"];
oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase.__super__ = oimohx_physics_collision_broadphase_BroadPhase;
oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase.prototype = $extend(oimohx_physics_collision_broadphase_BroadPhase.prototype,{
	tree: null
	,stack: null
	,maxStack: null
	,leaves: null
	,numLeaves: null
	,maxLeaves: null
	,createProxy: function(shape) {
		return new oimohx_physics_collision_broadphase_dbvt_DBVTProxy(shape);
	}
	,addProxy: function(proxy) {
		var p;
		p = js_Boot.__cast(proxy , oimohx_physics_collision_broadphase_dbvt_DBVTProxy);
		this.tree.insertLeaf(p.leaf);
		if(this.numLeaves == this.maxLeaves) {
			this.maxLeaves <<= 1;
			var newLeaves = [];
			var _g1 = 0;
			var _g = this.numLeaves;
			while(_g1 < _g) {
				var i = _g1++;
				newLeaves[i] = this.leaves[i];
			}
			this.leaves = newLeaves;
		}
		this.leaves[this.numLeaves++] = p.leaf;
	}
	,removeProxy: function(proxy) {
		var p;
		p = js_Boot.__cast(proxy , oimohx_physics_collision_broadphase_dbvt_DBVTProxy);
		this.tree.deleteLeaf(p.leaf);
		var _g1 = 0;
		var _g = this.numLeaves;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.leaves[i] == p.leaf) {
				this.leaves[i] = this.leaves[--this.numLeaves];
				this.leaves[this.numLeaves] = null;
				return;
			}
		}
	}
	,_collectPairs: function() {
		if(this.numLeaves < 2) return;
		var _g1 = 0;
		var _g = this.numLeaves;
		while(_g1 < _g) {
			var i = _g1++;
			var leaf = this.leaves[i];
			var trueB = leaf.proxy.aabb;
			var leafB = leaf.aabb;
			if(trueB.minX < leafB.minX || trueB.maxX > leafB.maxX || trueB.minY < leafB.minY || trueB.maxY > leafB.maxY || trueB.minZ < leafB.minZ || trueB.maxZ > leafB.maxZ) {
				var margin = 0.1;
				this.tree.deleteLeaf(leaf);
				leafB.minX = trueB.minX - margin;
				leafB.maxX = trueB.maxX + margin;
				leafB.minY = trueB.minY - margin;
				leafB.maxY = trueB.maxY + margin;
				leafB.minZ = trueB.minZ - margin;
				leafB.maxZ = trueB.maxZ + margin;
				this.tree.insertLeaf(leaf);
				this.collide(leaf,this.tree.root);
			}
		}
	}
	,collide: function(node1,node2) {
		var stackCount = 2;
		this.stack[0] = node1;
		this.stack[1] = node2;
		while(stackCount > 0) {
			var n1 = this.stack[--stackCount];
			var n2 = this.stack[--stackCount];
			var l1 = n1.proxy != null;
			var l2 = n2.proxy != null;
			this.numPairChecks++;
			if(l1 && l2) {
				var s1 = n1.proxy.shape;
				var s2 = n2.proxy.shape;
				var b1 = s1.aabb;
				var b2 = s2.aabb;
				if(s1 == s2 || b1.maxX < b2.minX || b1.minX > b2.maxX || b1.maxY < b2.minY || b1.minY > b2.maxY || b1.maxZ < b2.minZ || b1.minZ > b2.maxZ || !this.isAvailablePair(s1,s2)) continue;
				this.addPair(s1,s2);
			} else {
				var b11 = n1.aabb;
				var b21 = n2.aabb;
				if(b11.maxX < b21.minX || b11.minX > b21.maxX || b11.maxY < b21.minY || b11.minY > b21.maxY || b11.maxZ < b21.minZ || b11.minZ > b21.maxZ) continue;
				if(stackCount + 4 >= this.maxStack) {
					this.maxStack <<= 1;
					var newStack = [];
					var _g = 0;
					while(_g < stackCount) {
						var i = _g++;
						newStack[i] = this.stack[i];
					}
					this.stack = newStack;
				}
				if(l2 || !l1 && n1.aabb.surfaceArea() > n2.aabb.surfaceArea()) {
					this.stack[stackCount++] = n1.child1;
					this.stack[stackCount++] = n2;
					this.stack[stackCount++] = n1.child2;
					this.stack[stackCount++] = n2;
				} else {
					this.stack[stackCount++] = n1;
					this.stack[stackCount++] = n2.child1;
					this.stack[stackCount++] = n1;
					this.stack[stackCount++] = n2.child2;
				}
			}
		}
	}
	,__class__: oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase
});
var oimohx_physics_collision_broadphase_dbvt_DBVTNode = function() {
	this.aabb = new oimohx_physics_collision_broadphase_AABB();
};
$hxClasses["oimohx.physics.collision.broadphase.dbvt.DBVTNode"] = oimohx_physics_collision_broadphase_dbvt_DBVTNode;
oimohx_physics_collision_broadphase_dbvt_DBVTNode.__name__ = ["oimohx","physics","collision","broadphase","dbvt","DBVTNode"];
oimohx_physics_collision_broadphase_dbvt_DBVTNode.prototype = {
	child1: null
	,child2: null
	,parent: null
	,proxy: null
	,height: null
	,aabb: null
	,__class__: oimohx_physics_collision_broadphase_dbvt_DBVTNode
};
var oimohx_physics_collision_broadphase_dbvt_DBVTProxy = function(shape) {
	oimohx_physics_collision_broadphase_Proxy.call(this,shape);
	this.leaf = new oimohx_physics_collision_broadphase_dbvt_DBVTNode();
	this.leaf.proxy = this;
};
$hxClasses["oimohx.physics.collision.broadphase.dbvt.DBVTProxy"] = oimohx_physics_collision_broadphase_dbvt_DBVTProxy;
oimohx_physics_collision_broadphase_dbvt_DBVTProxy.__name__ = ["oimohx","physics","collision","broadphase","dbvt","DBVTProxy"];
oimohx_physics_collision_broadphase_dbvt_DBVTProxy.__super__ = oimohx_physics_collision_broadphase_Proxy;
oimohx_physics_collision_broadphase_dbvt_DBVTProxy.prototype = $extend(oimohx_physics_collision_broadphase_Proxy.prototype,{
	leaf: null
	,__class__: oimohx_physics_collision_broadphase_dbvt_DBVTProxy
});
var oimohx_physics_collision_broadphase_sap_SAPAxis = function() {
	this.stack = [];
	this.numElements = 0;
	this.bufferSize = 256;
	this.elements = [];
};
$hxClasses["oimohx.physics.collision.broadphase.sap.SAPAxis"] = oimohx_physics_collision_broadphase_sap_SAPAxis;
oimohx_physics_collision_broadphase_sap_SAPAxis.__name__ = ["oimohx","physics","collision","broadphase","sap","SAPAxis"];
oimohx_physics_collision_broadphase_sap_SAPAxis.prototype = {
	elements: null
	,numElements: null
	,bufferSize: null
	,stack: null
	,addElements: function(min,max) {
		if(this.numElements + 2 >= this.bufferSize) {
			this.bufferSize <<= 1;
			var newElements = [];
			var _g1 = 0;
			var _g = this.numElements;
			while(_g1 < _g) {
				var i = _g1++;
				newElements[i] = this.elements[i];
			}
		}
		this.elements[this.numElements++] = min;
		this.elements[this.numElements++] = max;
	}
	,removeElements: function(min,max) {
		var minIndex = -1;
		var maxIndex = -1;
		var _g1 = 0;
		var _g = this.numElements;
		while(_g1 < _g) {
			var i = _g1++;
			var e = this.elements[i];
			if(e == min || e == max) {
				if(minIndex == -1) minIndex = i; else {
					maxIndex = i;
					break;
				}
			}
		}
		var _g2 = minIndex + 1;
		while(_g2 < maxIndex) {
			var i1 = _g2++;
			this.elements[i1 - 1] = this.elements[i1];
		}
		var _g11 = maxIndex + 1;
		var _g3 = this.numElements;
		while(_g11 < _g3) {
			var i2 = _g11++;
			this.elements[i2 - 2] = this.elements[i2];
		}
		this.elements[--this.numElements] = null;
		this.elements[--this.numElements] = null;
	}
	,sort: function() {
		var count = 0;
		var threshold = 1;
		while(this.numElements >> threshold != 0) threshold++;
		threshold = threshold * this.numElements >> 2;
		count = 0;
		var giveup = false;
		var elements = this.elements;
		var _g1 = 1;
		var _g = this.numElements;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = elements[i];
			var pivot = tmp.value;
			var tmp2 = elements[i - 1];
			if(tmp2.value > pivot) {
				var j = i;
				do {
					elements[j] = tmp2;
					if(--j == 0) break;
					tmp2 = elements[j - 1];
				} while(tmp2.value > pivot);
				elements[j] = tmp;
				count += i - j;
				if(count > threshold) {
					giveup = true;
					break;
				}
			}
		}
		if(!giveup) return;
		count = 2;
		var stack = this.stack;
		stack[0] = 0;
		stack[1] = this.numElements - 1;
		while(count > 0) {
			var right = stack[--count];
			var left = stack[--count];
			var diff = right - left;
			if(diff > 16) {
				var mid = left + (diff >> 1);
				var tmp1 = elements[mid];
				elements[mid] = elements[right];
				elements[right] = tmp1;
				var pivot1 = tmp1.value;
				var i1 = left - 1;
				var j1 = right;
				while(true) {
					var ei;
					var ej;
					do ei = elements[++i1]; while(ei.value < pivot1);
					do ej = elements[--j1]; while(pivot1 < ej.value && j1 != left);
					if(i1 >= j1) break;
					elements[i1] = ej;
					elements[j1] = ei;
				}
				elements[right] = elements[i1];
				elements[i1] = tmp1;
				if(i1 - left > right - i1) {
					stack[count++] = left;
					stack[count++] = i1 - 1;
					stack[count++] = i1 + 1;
					stack[count++] = right;
				} else {
					stack[count++] = i1 + 1;
					stack[count++] = right;
					stack[count++] = left;
					stack[count++] = i1 - 1;
				}
			} else {
				var _g11 = left + 1;
				var _g2 = right + 1;
				while(_g11 < _g2) {
					var i2 = _g11++;
					var tmp3 = elements[i2];
					var pivot2 = tmp3.value;
					var tmp21 = elements[i2 - 1];
					if(tmp21.value > pivot2) {
						var j2 = i2;
						do {
							elements[j2] = tmp21;
							if(--j2 == 0) break;
							tmp21 = elements[j2 - 1];
						} while(tmp21.value > pivot2);
						elements[j2] = tmp3;
					}
				}
			}
		}
	}
	,calculateTestCount: function() {
		var num = 1;
		var sum = 0;
		var _g1 = 1;
		var _g = this.numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.elements[i].max) num--; else {
				sum += num;
				num++;
			}
		}
		return sum;
	}
	,__class__: oimohx_physics_collision_broadphase_sap_SAPAxis
};
var oimohx_physics_collision_broadphase_sap_SAPBroadPhase = function() {
	this.numElementsS = 0;
	this.numElementsD = 0;
	this.axesS = [];
	this.axesD = [];
	oimohx_physics_collision_broadphase_BroadPhase.call(this);
	this.axesD[0] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.axesD[1] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.axesD[2] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.axesS[0] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.axesS[1] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.axesS[2] = new oimohx_physics_collision_broadphase_sap_SAPAxis();
	this.index1 = 0;
	this.index2 = 1;
	this.collectPairs = $bind(this,this._collectPairs);
};
$hxClasses["oimohx.physics.collision.broadphase.sap.SAPBroadPhase"] = oimohx_physics_collision_broadphase_sap_SAPBroadPhase;
oimohx_physics_collision_broadphase_sap_SAPBroadPhase.__name__ = ["oimohx","physics","collision","broadphase","sap","SAPBroadPhase"];
oimohx_physics_collision_broadphase_sap_SAPBroadPhase.__super__ = oimohx_physics_collision_broadphase_BroadPhase;
oimohx_physics_collision_broadphase_sap_SAPBroadPhase.prototype = $extend(oimohx_physics_collision_broadphase_BroadPhase.prototype,{
	axesD: null
	,axesS: null
	,index1: null
	,index2: null
	,numElementsD: null
	,numElementsS: null
	,createProxy: function(shape) {
		return new oimohx_physics_collision_broadphase_sap_SAPProxy(this,shape);
	}
	,addProxy: function(proxy) {
		var p;
		p = js_Boot.__cast(proxy , oimohx_physics_collision_broadphase_sap_SAPProxy);
		if(p.isDynamic()) {
			this.axesD[0].addElements(p.min[0],p.max[0]);
			this.axesD[1].addElements(p.min[1],p.max[1]);
			this.axesD[2].addElements(p.min[2],p.max[2]);
			p.belongsTo = 1;
			this.numElementsD += 2;
		} else {
			this.axesS[0].addElements(p.min[0],p.max[0]);
			this.axesS[1].addElements(p.min[1],p.max[1]);
			this.axesS[2].addElements(p.min[2],p.max[2]);
			p.belongsTo = 2;
			this.numElementsS += 2;
		}
	}
	,removeProxy: function(proxy) {
		var p;
		p = js_Boot.__cast(proxy , oimohx_physics_collision_broadphase_sap_SAPProxy);
		if(p.belongsTo == 0) return;
		var _sw0_ = p.belongsTo;
		switch(_sw0_) {
		case 1:
			this.axesD[0].removeElements(p.min[0],p.max[0]);
			this.axesD[1].removeElements(p.min[1],p.max[1]);
			this.axesD[2].removeElements(p.min[2],p.max[2]);
			this.numElementsD -= 2;
			break;
		case 2:
			this.axesS[0].removeElements(p.min[0],p.max[0]);
			this.axesS[1].removeElements(p.min[1],p.max[1]);
			this.axesS[2].removeElements(p.min[2],p.max[2]);
			this.numElementsS -= 2;
			break;
		}
		p.belongsTo = 0;
	}
	,_collectPairs: function() {
		if(this.numElementsD == 0) return;
		var axis1 = this.axesD[this.index1];
		var axis2 = this.axesD[this.index2];
		axis1.sort();
		axis2.sort();
		var count1 = axis1.calculateTestCount();
		var count2 = axis2.calculateTestCount();
		var elementsD;
		var elementsS;
		if(count1 <= count2) {
			axis2 = this.axesS[this.index1];
			axis2.sort();
			elementsD = axis1.elements;
			elementsS = axis2.elements;
		} else {
			axis1 = this.axesS[this.index2];
			axis1.sort();
			elementsD = axis2.elements;
			elementsS = axis1.elements;
			this.index1 ^= this.index2;
			this.index2 ^= this.index1;
			this.index1 ^= this.index2;
		}
		var activeD = null;
		var activeS = null;
		var p = 0;
		var q = 0;
		var e1;
		var dyn;
		while(p < this.numElementsD) {
			if(q == this.numElementsS) {
				e1 = elementsD[p];
				dyn = true;
				p++;
			} else if(elementsD[p].value < elementsS[q].value) {
				e1 = elementsD[p];
				dyn = true;
				p++;
			} else {
				e1 = elementsS[q];
				dyn = false;
				q++;
			}
			if(!e1.max) {
				var e2 = activeD;
				while(e2 != null) {
					var s2 = e2.proxy.shape;
					this.numPairChecks++;
					if(e1.min1.value > e2.max1.value || e1.max1.value < e2.min1.value || e1.min2.value > e2.max2.value || e1.max2.value < e2.min2.value || !this.isAvailablePair(e1.proxy.shape,s2)) {
						e2 = e2.pair;
						continue;
					}
					this.addPair(e1.proxy.shape,s2);
					e2 = e2.pair;
				}
				if(dyn) {
					e2 = activeS;
					while(e2 != null) {
						var s21 = e2.proxy.shape;
						this.numPairChecks++;
						if(e1.min1.value > e2.max1.value || e1.max1.value < e2.min1.value || e1.min2.value > e2.max2.value || e1.max2.value < e2.min2.value || !this.isAvailablePair(e1.proxy.shape,s21)) {
							e2 = e2.pair;
							continue;
						}
						this.addPair(e1.proxy.shape,s21);
						e2 = e2.pair;
					}
					e1.pair = activeD;
					activeD = e1;
				} else {
					e1.pair = activeS;
					activeS = e1;
				}
			} else {
				var min = e1.pair;
				if(dyn) {
					if(min == activeD) {
						activeD = activeD.pair;
						continue;
					} else e1 = activeD;
				} else if(min == activeS) {
					activeS = activeS.pair;
					continue;
				} else e1 = activeS;
				do {
					var e21 = e1.pair;
					if(e21 == min) {
						e1.pair = e21.pair;
						break;
					}
					e1 = e21;
				} while(e1 != null);
			}
		}
		this.index2 = (this.index1 | this.index2) ^ 3;
	}
	,__class__: oimohx_physics_collision_broadphase_sap_SAPBroadPhase
});
var oimohx_physics_collision_broadphase_sap_SAPElement = function(proxy,max) {
	this.proxy = proxy;
	this.max = max;
	this.value = 0;
};
$hxClasses["oimohx.physics.collision.broadphase.sap.SAPElement"] = oimohx_physics_collision_broadphase_sap_SAPElement;
oimohx_physics_collision_broadphase_sap_SAPElement.__name__ = ["oimohx","physics","collision","broadphase","sap","SAPElement"];
oimohx_physics_collision_broadphase_sap_SAPElement.prototype = {
	proxy: null
	,pair: null
	,value: null
	,max: null
	,min1: null
	,max1: null
	,min2: null
	,max2: null
	,__class__: oimohx_physics_collision_broadphase_sap_SAPElement
};
var oimohx_physics_collision_broadphase_sap_SAPProxy = function(sap,shape) {
	this.max = [];
	this.min = [];
	oimohx_physics_collision_broadphase_Proxy.call(this,shape);
	this.sap = sap;
	this.min[0] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,false);
	this.max[0] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,true);
	this.min[1] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,false);
	this.max[1] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,true);
	this.min[2] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,false);
	this.max[2] = new oimohx_physics_collision_broadphase_sap_SAPElement(this,true);
	this.max[0].pair = this.min[0];
	this.max[1].pair = this.min[1];
	this.max[2].pair = this.min[2];
	this.min[0].min1 = this.min[1];
	this.min[0].max1 = this.max[1];
	this.min[0].min2 = this.min[2];
	this.min[0].max2 = this.max[2];
	this.min[1].min1 = this.min[0];
	this.min[1].max1 = this.max[0];
	this.min[1].min2 = this.min[2];
	this.min[1].max2 = this.max[2];
	this.min[2].min1 = this.min[0];
	this.min[2].max1 = this.max[0];
	this.min[2].min2 = this.min[1];
	this.min[2].max2 = this.max[1];
	this.update = $bind(this,this._update);
};
$hxClasses["oimohx.physics.collision.broadphase.sap.SAPProxy"] = oimohx_physics_collision_broadphase_sap_SAPProxy;
oimohx_physics_collision_broadphase_sap_SAPProxy.__name__ = ["oimohx","physics","collision","broadphase","sap","SAPProxy"];
oimohx_physics_collision_broadphase_sap_SAPProxy.__super__ = oimohx_physics_collision_broadphase_Proxy;
oimohx_physics_collision_broadphase_sap_SAPProxy.prototype = $extend(oimohx_physics_collision_broadphase_Proxy.prototype,{
	min: null
	,max: null
	,belongsTo: null
	,sap: null
	,_update: function() {
		this.min[0].value = this.aabb.minX;
		this.max[0].value = this.aabb.maxX;
		this.min[1].value = this.aabb.minY;
		this.max[1].value = this.aabb.maxY;
		this.min[2].value = this.aabb.minZ;
		this.max[2].value = this.aabb.maxZ;
		if(this.belongsTo == 1 && !this.isDynamic() || this.belongsTo == 2 && this.isDynamic()) {
			this.sap.removeProxy(this);
			this.sap.addProxy(this);
		}
	}
	,isDynamic: function() {
		var body = this.shape.parent;
		return body.isDynamic && !body.sleeping;
	}
	,__class__: oimohx_physics_collision_broadphase_sap_SAPProxy
});
var oimohx_physics_collision_narrowphase_CollisionDetector = function() {
};
$hxClasses["oimohx.physics.collision.narrowphase.CollisionDetector"] = oimohx_physics_collision_narrowphase_CollisionDetector;
oimohx_physics_collision_narrowphase_CollisionDetector.__name__ = ["oimohx","physics","collision","narrowphase","CollisionDetector"];
oimohx_physics_collision_narrowphase_CollisionDetector.prototype = {
	flip: null
	,detectCollision: function(shape1,shape2,manifold) {
	}
	,__class__: oimohx_physics_collision_narrowphase_CollisionDetector
};
var oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector = function() {
	this.INF = Infinity;
	oimohx_physics_collision_narrowphase_CollisionDetector.call(this);
	this.clipVertices1 = [];
	this.clipVertices2 = [];
	this.used = [];
};
$hxClasses["oimohx.physics.collision.narrowphase.BoxBoxCollisionDetector"] = oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector;
oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector.__name__ = ["oimohx","physics","collision","narrowphase","BoxBoxCollisionDetector"];
oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector.__super__ = oimohx_physics_collision_narrowphase_CollisionDetector;
oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector.prototype = $extend(oimohx_physics_collision_narrowphase_CollisionDetector.prototype,{
	clipVertices1: null
	,clipVertices2: null
	,used: null
	,INF: null
	,detectCollision: function(shape1,shape2,manifold) {
		var b1;
		var b2;
		if(shape1.id < shape2.id) {
			b1 = js_Boot.__cast(shape1 , oimohx_physics_collision_shape_BoxShape);
			b2 = js_Boot.__cast(shape2 , oimohx_physics_collision_shape_BoxShape);
		} else {
			b1 = js_Boot.__cast(shape2 , oimohx_physics_collision_shape_BoxShape);
			b2 = js_Boot.__cast(shape1 , oimohx_physics_collision_shape_BoxShape);
		}
		var p1 = b1.position;
		var p2 = b2.position;
		var p1x = p1.x;
		var p1y = p1.y;
		var p1z = p1.z;
		var p2x = p2.x;
		var p2y = p2.y;
		var p2z = p2.z;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var w1 = b1.halfWidth;
		var h1 = b1.halfHeight;
		var d1 = b1.halfDepth;
		var w2 = b2.halfWidth;
		var h2 = b2.halfHeight;
		var d2 = b2.halfDepth;
		var d1x = b1.halfDirectionWidth.x;
		var d1y = b1.halfDirectionWidth.y;
		var d1z = b1.halfDirectionWidth.z;
		var d2x = b1.halfDirectionHeight.x;
		var d2y = b1.halfDirectionHeight.y;
		var d2z = b1.halfDirectionHeight.z;
		var d3x = b1.halfDirectionDepth.x;
		var d3y = b1.halfDirectionDepth.y;
		var d3z = b1.halfDirectionDepth.z;
		var d4x = b2.halfDirectionWidth.x;
		var d4y = b2.halfDirectionWidth.y;
		var d4z = b2.halfDirectionWidth.z;
		var d5x = b2.halfDirectionHeight.x;
		var d5y = b2.halfDirectionHeight.y;
		var d5z = b2.halfDirectionHeight.z;
		var d6x = b2.halfDirectionDepth.x;
		var d6y = b2.halfDirectionDepth.y;
		var d6z = b2.halfDirectionDepth.z;
		var a1x = b1.normalDirectionWidth.x;
		var a1y = b1.normalDirectionWidth.y;
		var a1z = b1.normalDirectionWidth.z;
		var a2x = b1.normalDirectionHeight.x;
		var a2y = b1.normalDirectionHeight.y;
		var a2z = b1.normalDirectionHeight.z;
		var a3x = b1.normalDirectionDepth.x;
		var a3y = b1.normalDirectionDepth.y;
		var a3z = b1.normalDirectionDepth.z;
		var a4x = b2.normalDirectionWidth.x;
		var a4y = b2.normalDirectionWidth.y;
		var a4z = b2.normalDirectionWidth.z;
		var a5x = b2.normalDirectionHeight.x;
		var a5y = b2.normalDirectionHeight.y;
		var a5z = b2.normalDirectionHeight.z;
		var a6x = b2.normalDirectionDepth.x;
		var a6y = b2.normalDirectionDepth.y;
		var a6z = b2.normalDirectionDepth.z;
		var a7x = a1y * a4z - a1z * a4y;
		var a7y = a1z * a4x - a1x * a4z;
		var a7z = a1x * a4y - a1y * a4x;
		var a8x = a1y * a5z - a1z * a5y;
		var a8y = a1z * a5x - a1x * a5z;
		var a8z = a1x * a5y - a1y * a5x;
		var a9x = a1y * a6z - a1z * a6y;
		var a9y = a1z * a6x - a1x * a6z;
		var a9z = a1x * a6y - a1y * a6x;
		var aax = a2y * a4z - a2z * a4y;
		var aay = a2z * a4x - a2x * a4z;
		var aaz = a2x * a4y - a2y * a4x;
		var abx = a2y * a5z - a2z * a5y;
		var aby = a2z * a5x - a2x * a5z;
		var abz = a2x * a5y - a2y * a5x;
		var acx = a2y * a6z - a2z * a6y;
		var acy = a2z * a6x - a2x * a6z;
		var acz = a2x * a6y - a2y * a6x;
		var adx = a3y * a4z - a3z * a4y;
		var ady = a3z * a4x - a3x * a4z;
		var adz = a3x * a4y - a3y * a4x;
		var aex = a3y * a5z - a3z * a5y;
		var aey = a3z * a5x - a3x * a5z;
		var aez = a3x * a5y - a3y * a5x;
		var afx = a3y * a6z - a3z * a6y;
		var afy = a3z * a6x - a3x * a6z;
		var afz = a3x * a6y - a3y * a6x;
		var right1;
		var right2;
		var right3;
		var right4;
		var right5;
		var right6;
		var right7;
		var right8;
		var right9;
		var righta;
		var rightb;
		var rightc;
		var rightd;
		var righte;
		var rightf;
		var overlap1;
		var overlap2;
		var overlap3;
		var overlap4;
		var overlap5;
		var overlap6;
		var overlap7;
		var overlap8;
		var overlap9;
		var overlapa;
		var overlapb;
		var overlapc;
		var overlapd;
		var overlape;
		var overlapf;
		var invalid7 = false;
		var invalid8 = false;
		var invalid9 = false;
		var invalida = false;
		var invalidb = false;
		var invalidc = false;
		var invalidd = false;
		var invalide = false;
		var invalidf = false;
		var len;
		var len1;
		var len2;
		var dot1;
		var dot2;
		var dot3;
		len = a1x * dx + a1y * dy + a1z * dz;
		right1 = len > 0;
		if(!right1) len = -len;
		len1 = w1;
		dot1 = a1x * a4x + a1y * a4y + a1z * a4z;
		dot2 = a1x * a5x + a1y * a5y + a1z * a5z;
		dot3 = a1x * a6x + a1y * a6y + a1z * a6z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len2 = dot1 * w2 + dot2 * h2 + dot3 * d2;
		overlap1 = len - len1 - len2;
		if(overlap1 > 0) return;
		len = a2x * dx + a2y * dy + a2z * dz;
		right2 = len > 0;
		if(!right2) len = -len;
		len1 = h1;
		dot1 = a2x * a4x + a2y * a4y + a2z * a4z;
		dot2 = a2x * a5x + a2y * a5y + a2z * a5z;
		dot3 = a2x * a6x + a2y * a6y + a2z * a6z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len2 = dot1 * w2 + dot2 * h2 + dot3 * d2;
		overlap2 = len - len1 - len2;
		if(overlap2 > 0) return;
		len = a3x * dx + a3y * dy + a3z * dz;
		right3 = len > 0;
		if(!right3) len = -len;
		len1 = d1;
		dot1 = a3x * a4x + a3y * a4y + a3z * a4z;
		dot2 = a3x * a5x + a3y * a5y + a3z * a5z;
		dot3 = a3x * a6x + a3y * a6y + a3z * a6z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len2 = dot1 * w2 + dot2 * h2 + dot3 * d2;
		overlap3 = len - len1 - len2;
		if(overlap3 > 0) return;
		len = a4x * dx + a4y * dy + a4z * dz;
		right4 = len > 0;
		if(!right4) len = -len;
		dot1 = a4x * a1x + a4y * a1y + a4z * a1z;
		dot2 = a4x * a2x + a4y * a2y + a4z * a2z;
		dot3 = a4x * a3x + a4y * a3y + a4z * a3z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len1 = dot1 * w1 + dot2 * h1 + dot3 * d1;
		len2 = w2;
		overlap4 = len - len1 - len2;
		if(overlap4 > 0) return;
		len = a5x * dx + a5y * dy + a5z * dz;
		right5 = len > 0;
		if(!right5) len = -len;
		dot1 = a5x * a1x + a5y * a1y + a5z * a1z;
		dot2 = a5x * a2x + a5y * a2y + a5z * a2z;
		dot3 = a5x * a3x + a5y * a3y + a5z * a3z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len1 = dot1 * w1 + dot2 * h1 + dot3 * d1;
		len2 = h2;
		overlap5 = len - len1 - len2;
		if(overlap5 > 0) return;
		len = a6x * dx + a6y * dy + a6z * dz;
		right6 = len > 0;
		if(!right6) len = -len;
		dot1 = a6x * a1x + a6y * a1y + a6z * a1z;
		dot2 = a6x * a2x + a6y * a2y + a6z * a2z;
		dot3 = a6x * a3x + a6y * a3y + a6z * a3z;
		if(dot1 < 0) dot1 = -dot1;
		if(dot2 < 0) dot2 = -dot2;
		if(dot3 < 0) dot3 = -dot3;
		len1 = dot1 * w1 + dot2 * h1 + dot3 * d1;
		len2 = d2;
		overlap6 = len - len1 - len2;
		if(overlap6 > 0) return;
		len = a7x * a7x + a7y * a7y + a7z * a7z;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			a7x *= len;
			a7y *= len;
			a7z *= len;
			len = a7x * dx + a7y * dy + a7z * dz;
			right7 = len > 0;
			if(!right7) len = -len;
			dot1 = a7x * a2x + a7y * a2y + a7z * a2z;
			dot2 = a7x * a3x + a7y * a3y + a7z * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * h1 + dot2 * d1;
			dot1 = a7x * a5x + a7y * a5y + a7z * a5z;
			dot2 = a7x * a6x + a7y * a6y + a7z * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * h2 + dot2 * d2;
			overlap7 = len - len1 - len2;
			if(overlap7 > 0) return;
		} else {
			right7 = false;
			overlap7 = 0;
			invalid7 = true;
		}
		len = a8x * a8x + a8y * a8y + a8z * a8z;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			a8x *= len;
			a8y *= len;
			a8z *= len;
			len = a8x * dx + a8y * dy + a8z * dz;
			right8 = len > 0;
			if(!right8) len = -len;
			dot1 = a8x * a2x + a8y * a2y + a8z * a2z;
			dot2 = a8x * a3x + a8y * a3y + a8z * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * h1 + dot2 * d1;
			dot1 = a8x * a4x + a8y * a4y + a8z * a4z;
			dot2 = a8x * a6x + a8y * a6y + a8z * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * d2;
			overlap8 = len - len1 - len2;
			if(overlap8 > 0) return;
		} else {
			right8 = false;
			overlap8 = 0;
			invalid8 = true;
		}
		len = a9x * a9x + a9y * a9y + a9z * a9z;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			a9x *= len;
			a9y *= len;
			a9z *= len;
			len = a9x * dx + a9y * dy + a9z * dz;
			right9 = len > 0;
			if(!right9) len = -len;
			dot1 = a9x * a2x + a9y * a2y + a9z * a2z;
			dot2 = a9x * a3x + a9y * a3y + a9z * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * h1 + dot2 * d1;
			dot1 = a9x * a4x + a9y * a4y + a9z * a4z;
			dot2 = a9x * a5x + a9y * a5y + a9z * a5z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * h2;
			overlap9 = len - len1 - len2;
			if(overlap9 > 0) return;
		} else {
			right9 = false;
			overlap9 = 0;
			invalid9 = true;
		}
		len = aax * aax + aay * aay + aaz * aaz;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			aax *= len;
			aay *= len;
			aaz *= len;
			len = aax * dx + aay * dy + aaz * dz;
			righta = len > 0;
			if(!righta) len = -len;
			dot1 = aax * a1x + aay * a1y + aaz * a1z;
			dot2 = aax * a3x + aay * a3y + aaz * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * d1;
			dot1 = aax * a5x + aay * a5y + aaz * a5z;
			dot2 = aax * a6x + aay * a6y + aaz * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * h2 + dot2 * d2;
			overlapa = len - len1 - len2;
			if(overlapa > 0) return;
		} else {
			righta = false;
			overlapa = 0;
			invalida = true;
		}
		len = abx * abx + aby * aby + abz * abz;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			abx *= len;
			aby *= len;
			abz *= len;
			len = abx * dx + aby * dy + abz * dz;
			rightb = len > 0;
			if(!rightb) len = -len;
			dot1 = abx * a1x + aby * a1y + abz * a1z;
			dot2 = abx * a3x + aby * a3y + abz * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * d1;
			dot1 = abx * a4x + aby * a4y + abz * a4z;
			dot2 = abx * a6x + aby * a6y + abz * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * d2;
			overlapb = len - len1 - len2;
			if(overlapb > 0) return;
		} else {
			rightb = false;
			overlapb = 0;
			invalidb = true;
		}
		len = acx * acx + acy * acy + acz * acz;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			acx *= len;
			acy *= len;
			acz *= len;
			len = acx * dx + acy * dy + acz * dz;
			rightc = len > 0;
			if(!rightc) len = -len;
			dot1 = acx * a1x + acy * a1y + acz * a1z;
			dot2 = acx * a3x + acy * a3y + acz * a3z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * d1;
			dot1 = acx * a4x + acy * a4y + acz * a4z;
			dot2 = acx * a5x + acy * a5y + acz * a5z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * h2;
			overlapc = len - len1 - len2;
			if(overlapc > 0) return;
		} else {
			rightc = false;
			overlapc = 0;
			invalidc = true;
		}
		len = adx * adx + ady * ady + adz * adz;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			adx *= len;
			ady *= len;
			adz *= len;
			len = adx * dx + ady * dy + adz * dz;
			rightd = len > 0;
			if(!rightd) len = -len;
			dot1 = adx * a1x + ady * a1y + adz * a1z;
			dot2 = adx * a2x + ady * a2y + adz * a2z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * h1;
			dot1 = adx * a5x + ady * a5y + adz * a5z;
			dot2 = adx * a6x + ady * a6y + adz * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * h2 + dot2 * d2;
			overlapd = len - len1 - len2;
			if(overlapd > 0) return;
		} else {
			rightd = false;
			overlapd = 0;
			invalidd = true;
		}
		len = aex * aex + aey * aey + aez * aez;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			aex *= len;
			aey *= len;
			aez *= len;
			len = aex * dx + aey * dy + aez * dz;
			righte = len > 0;
			if(!righte) len = -len;
			dot1 = aex * a1x + aey * a1y + aez * a1z;
			dot2 = aex * a2x + aey * a2y + aez * a2z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * h1;
			dot1 = aex * a4x + aey * a4y + aez * a4z;
			dot2 = aex * a6x + aey * a6y + aez * a6z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * d2;
			overlape = len - len1 - len2;
			if(overlape > 0) return;
		} else {
			righte = false;
			overlape = 0;
			invalide = true;
		}
		len = afx * afx + afy * afy + afz * afz;
		if(len > 1e-5) {
			len = 1 / Math.sqrt(len);
			afx *= len;
			afy *= len;
			afz *= len;
			len = afx * dx + afy * dy + afz * dz;
			rightf = len > 0;
			if(!rightf) len = -len;
			dot1 = afx * a1x + afy * a1y + afz * a1z;
			dot2 = afx * a2x + afy * a2y + afz * a2z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len1 = dot1 * w1 + dot2 * h1;
			dot1 = afx * a4x + afy * a4y + afz * a4z;
			dot2 = afx * a5x + afy * a5y + afz * a5z;
			if(dot1 < 0) dot1 = -dot1;
			if(dot2 < 0) dot2 = -dot2;
			len2 = dot1 * w2 + dot2 * h2;
			overlapf = len - len1 - len2;
			if(overlapf > 0) return;
		} else {
			rightf = false;
			overlapf = 0;
			invalidf = true;
		}
		var depth = overlap1;
		var depth2 = overlap1;
		var minIndex = 0;
		var right = right1;
		if(overlap2 > depth2) {
			depth = overlap2;
			depth2 = overlap2;
			minIndex = 1;
			right = right2;
		}
		if(overlap3 > depth2) {
			depth = overlap3;
			depth2 = overlap3;
			minIndex = 2;
			right = right3;
		}
		if(overlap4 > depth2) {
			depth = overlap4;
			depth2 = overlap4;
			minIndex = 3;
			right = right4;
		}
		if(overlap5 > depth2) {
			depth = overlap5;
			depth2 = overlap5;
			minIndex = 4;
			right = right5;
		}
		if(overlap6 > depth2) {
			depth = overlap6;
			depth2 = overlap6;
			minIndex = 5;
			right = right6;
		}
		if(overlap7 - 0.01 > depth2 && !invalid7) {
			depth = overlap7;
			depth2 = overlap7 - 0.01;
			minIndex = 6;
			right = right7;
		}
		if(overlap8 - 0.01 > depth2 && !invalid8) {
			depth = overlap8;
			depth2 = overlap8 - 0.01;
			minIndex = 7;
			right = right8;
		}
		if(overlap9 - 0.01 > depth2 && !invalid9) {
			depth = overlap9;
			depth2 = overlap9 - 0.01;
			minIndex = 8;
			right = right9;
		}
		if(overlapa - 0.01 > depth2 && !invalida) {
			depth = overlapa;
			depth2 = overlapa - 0.01;
			minIndex = 9;
			right = righta;
		}
		if(overlapb - 0.01 > depth2 && !invalidb) {
			depth = overlapb;
			depth2 = overlapb - 0.01;
			minIndex = 10;
			right = rightb;
		}
		if(overlapc - 0.01 > depth2 && !invalidc) {
			depth = overlapc;
			depth2 = overlapc - 0.01;
			minIndex = 11;
			right = rightc;
		}
		if(overlapd - 0.01 > depth2 && !invalidd) {
			depth = overlapd;
			depth2 = overlapd - 0.01;
			minIndex = 12;
			right = rightd;
		}
		if(overlape - 0.01 > depth2 && !invalide) {
			depth = overlape;
			depth2 = overlape - 0.01;
			minIndex = 13;
			right = righte;
		}
		if(overlapf - 0.01 > depth2 && !invalidf) {
			depth = overlapf;
			minIndex = 14;
			right = rightf;
		}
		var nx = 0;
		var ny = 0;
		var nz = 0;
		var n1x = 0;
		var n1y = 0;
		var n1z = 0;
		var n2x = 0;
		var n2y = 0;
		var n2z = 0;
		var cx = 0;
		var cy = 0;
		var cz = 0;
		var s1x = 0;
		var s1y = 0;
		var s1z = 0;
		var s2x = 0;
		var s2y = 0;
		var s2z = 0;
		var swap = false;
		switch(minIndex) {
		case 0:
			if(right) {
				cx = p1x + d1x;
				cy = p1y + d1y;
				cz = p1z + d1z;
				nx = a1x;
				ny = a1y;
				nz = a1z;
			} else {
				cx = p1x - d1x;
				cy = p1y - d1y;
				cz = p1z - d1z;
				nx = -a1x;
				ny = -a1y;
				nz = -a1z;
			}
			s1x = d2x;
			s1y = d2y;
			s1z = d2z;
			n1x = -a2x;
			n1y = -a2y;
			n1z = -a2z;
			s2x = d3x;
			s2y = d3y;
			s2z = d3z;
			n2x = -a3x;
			n2y = -a3y;
			n2z = -a3z;
			break;
		case 1:
			if(right) {
				cx = p1x + d2x;
				cy = p1y + d2y;
				cz = p1z + d2z;
				nx = a2x;
				ny = a2y;
				nz = a2z;
			} else {
				cx = p1x - d2x;
				cy = p1y - d2y;
				cz = p1z - d2z;
				nx = -a2x;
				ny = -a2y;
				nz = -a2z;
			}
			s1x = d1x;
			s1y = d1y;
			s1z = d1z;
			n1x = -a1x;
			n1y = -a1y;
			n1z = -a1z;
			s2x = d3x;
			s2y = d3y;
			s2z = d3z;
			n2x = -a3x;
			n2y = -a3y;
			n2z = -a3z;
			break;
		case 2:
			if(right) {
				cx = p1x + d3x;
				cy = p1y + d3y;
				cz = p1z + d3z;
				nx = a3x;
				ny = a3y;
				nz = a3z;
			} else {
				cx = p1x - d3x;
				cy = p1y - d3y;
				cz = p1z - d3z;
				nx = -a3x;
				ny = -a3y;
				nz = -a3z;
			}
			s1x = d1x;
			s1y = d1y;
			s1z = d1z;
			n1x = -a1x;
			n1y = -a1y;
			n1z = -a1z;
			s2x = d2x;
			s2y = d2y;
			s2z = d2z;
			n2x = -a2x;
			n2y = -a2y;
			n2z = -a2z;
			break;
		case 3:
			swap = true;
			if(!right) {
				cx = p2x + d4x;
				cy = p2y + d4y;
				cz = p2z + d4z;
				nx = a4x;
				ny = a4y;
				nz = a4z;
			} else {
				cx = p2x - d4x;
				cy = p2y - d4y;
				cz = p2z - d4z;
				nx = -a4x;
				ny = -a4y;
				nz = -a4z;
			}
			s1x = d5x;
			s1y = d5y;
			s1z = d5z;
			n1x = -a5x;
			n1y = -a5y;
			n1z = -a5z;
			s2x = d6x;
			s2y = d6y;
			s2z = d6z;
			n2x = -a6x;
			n2y = -a6y;
			n2z = -a6z;
			break;
		case 4:
			swap = true;
			if(!right) {
				cx = p2x + d5x;
				cy = p2y + d5y;
				cz = p2z + d5z;
				nx = a5x;
				ny = a5y;
				nz = a5z;
			} else {
				cx = p2x - d5x;
				cy = p2y - d5y;
				cz = p2z - d5z;
				nx = -a5x;
				ny = -a5y;
				nz = -a5z;
			}
			s1x = d4x;
			s1y = d4y;
			s1z = d4z;
			n1x = -a4x;
			n1y = -a4y;
			n1z = -a4z;
			s2x = d6x;
			s2y = d6y;
			s2z = d6z;
			n2x = -a6x;
			n2y = -a6y;
			n2z = -a6z;
			break;
		case 5:
			swap = true;
			if(!right) {
				cx = p2x + d6x;
				cy = p2y + d6y;
				cz = p2z + d6z;
				nx = a6x;
				ny = a6y;
				nz = a6z;
			} else {
				cx = p2x - d6x;
				cy = p2y - d6y;
				cz = p2z - d6z;
				nx = -a6x;
				ny = -a6y;
				nz = -a6z;
			}
			s1x = d4x;
			s1y = d4y;
			s1z = d4z;
			n1x = -a4x;
			n1y = -a4y;
			n1z = -a4z;
			s2x = d5x;
			s2y = d5y;
			s2z = d5z;
			n2x = -a5x;
			n2y = -a5y;
			n2z = -a5z;
			break;
		case 6:
			nx = a7x;
			ny = a7y;
			nz = a7z;
			n1x = a1x;
			n1y = a1y;
			n1z = a1z;
			n2x = a4x;
			n2y = a4y;
			n2z = a4z;
			break;
		case 7:
			nx = a8x;
			ny = a8y;
			nz = a8z;
			n1x = a1x;
			n1y = a1y;
			n1z = a1z;
			n2x = a5x;
			n2y = a5y;
			n2z = a5z;
			break;
		case 8:
			nx = a9x;
			ny = a9y;
			nz = a9z;
			n1x = a1x;
			n1y = a1y;
			n1z = a1z;
			n2x = a6x;
			n2y = a6y;
			n2z = a6z;
			break;
		case 9:
			nx = aax;
			ny = aay;
			nz = aaz;
			n1x = a2x;
			n1y = a2y;
			n1z = a2z;
			n2x = a4x;
			n2y = a4y;
			n2z = a4z;
			break;
		case 10:
			nx = abx;
			ny = aby;
			nz = abz;
			n1x = a2x;
			n1y = a2y;
			n1z = a2z;
			n2x = a5x;
			n2y = a5y;
			n2z = a5z;
			break;
		case 11:
			nx = acx;
			ny = acy;
			nz = acz;
			n1x = a2x;
			n1y = a2y;
			n1z = a2z;
			n2x = a6x;
			n2y = a6y;
			n2z = a6z;
			break;
		case 12:
			nx = adx;
			ny = ady;
			nz = adz;
			n1x = a3x;
			n1y = a3y;
			n1z = a3z;
			n2x = a4x;
			n2y = a4y;
			n2z = a4z;
			break;
		case 13:
			nx = aex;
			ny = aey;
			nz = aez;
			n1x = a3x;
			n1y = a3y;
			n1z = a3z;
			n2x = a5x;
			n2y = a5y;
			n2z = a5z;
			break;
		case 14:
			nx = afx;
			ny = afy;
			nz = afz;
			n1x = a3x;
			n1y = a3y;
			n1z = a3z;
			n2x = a6x;
			n2y = a6y;
			n2z = a6z;
			break;
		}
		var v = null;
		if(minIndex > 5) {
			if(!right) {
				nx = -nx;
				ny = -ny;
				nz = -nz;
			}
			var distance;
			var maxDistance;
			var vx;
			var vy;
			var vz;
			var v1x;
			var v1y;
			var v1z;
			var v2x;
			var v2y;
			var v2z;
			v = b1.vertex1;
			v1x = v.x;
			v1y = v.y;
			v1z = v.z;
			maxDistance = nx * v1x + ny * v1y + nz * v1z;
			v = b1.vertex2;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex3;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex4;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex5;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex6;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex7;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b1.vertex8;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance > maxDistance) {
				maxDistance = distance;
				v1x = vx;
				v1y = vy;
				v1z = vz;
			}
			v = b2.vertex1;
			v2x = v.x;
			v2y = v.y;
			v2z = v.z;
			maxDistance = nx * v2x + ny * v2y + nz * v2z;
			v = b2.vertex2;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex3;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex4;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex5;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex6;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex7;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			v = b2.vertex8;
			vx = v.x;
			vy = v.y;
			vz = v.z;
			distance = nx * vx + ny * vy + nz * vz;
			if(distance < maxDistance) {
				maxDistance = distance;
				v2x = vx;
				v2y = vy;
				v2z = vz;
			}
			vx = v2x - v1x;
			vy = v2y - v1y;
			vz = v2z - v1z;
			dot1 = n1x * n2x + n1y * n2y + n1z * n2z;
			var t = (vx * (n1x - n2x * dot1) + vy * (n1y - n2y * dot1) + vz * (n1z - n2z * dot1)) / (1 - dot1 * dot1);
			manifold.addPoint(v1x + n1x * t + nx * depth * 0.5,v1y + n1y * t + ny * depth * 0.5,v1z + n1z * t + nz * depth * 0.5,nx,ny,nz,depth,false);
			return;
		}
		var q1x = 0;
		var q1y = 0;
		var q1z = 0;
		var q2x = 0;
		var q2y = 0;
		var q2z = 0;
		var q3x = 0;
		var q3y = 0;
		var q3z = 0;
		var q4x = 0;
		var q4y = 0;
		var q4z = 0;
		var minDot = 1;
		var dot = 0;
		var minDotIndex = 0;
		if(swap) {
			dot = a1x * nx + a1y * ny + a1z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 0;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 1;
			}
			dot = a2x * nx + a2y * ny + a2z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 2;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 3;
			}
			dot = a3x * nx + a3y * ny + a3z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 4;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 5;
			}
			switch(minDotIndex) {
			case 0:
				v = b1.vertex1;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex3;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex4;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex2;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 1:
				v = b1.vertex6;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex8;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex7;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex5;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 2:
				v = b1.vertex5;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex1;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex2;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex6;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 3:
				v = b1.vertex8;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex4;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex3;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex7;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 4:
				v = b1.vertex5;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex7;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex3;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex1;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 5:
				v = b1.vertex2;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b1.vertex4;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b1.vertex8;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b1.vertex6;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			}
		} else {
			dot = a4x * nx + a4y * ny + a4z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 0;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 1;
			}
			dot = a5x * nx + a5y * ny + a5z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 2;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 3;
			}
			dot = a6x * nx + a6y * ny + a6z * nz;
			if(dot < minDot) {
				minDot = dot;
				minDotIndex = 4;
			}
			if(-dot < minDot) {
				minDot = -dot;
				minDotIndex = 5;
			}
			switch(minDotIndex) {
			case 0:
				v = b2.vertex1;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex3;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex4;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex2;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 1:
				v = b2.vertex6;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex8;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex7;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex5;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 2:
				v = b2.vertex5;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex1;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex2;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex6;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 3:
				v = b2.vertex8;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex4;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex3;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex7;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 4:
				v = b2.vertex5;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex7;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex3;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex1;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			case 5:
				v = b2.vertex2;
				q1x = v.x;
				q1y = v.y;
				q1z = v.z;
				v = b2.vertex4;
				q2x = v.x;
				q2y = v.y;
				q2z = v.z;
				v = b2.vertex8;
				q3x = v.x;
				q3y = v.y;
				q3z = v.z;
				v = b2.vertex6;
				q4x = v.x;
				q4y = v.y;
				q4z = v.z;
				break;
			}
		}
		var numClipVertices;
		var numAddedClipVertices;
		var index;
		var x1;
		var y1;
		var z1;
		var x2;
		var y2;
		var z2;
		this.clipVertices1[0] = q1x;
		this.clipVertices1[1] = q1y;
		this.clipVertices1[2] = q1z;
		this.clipVertices1[3] = q2x;
		this.clipVertices1[4] = q2y;
		this.clipVertices1[5] = q2z;
		this.clipVertices1[6] = q3x;
		this.clipVertices1[7] = q3y;
		this.clipVertices1[8] = q3z;
		this.clipVertices1[9] = q4x;
		this.clipVertices1[10] = q4y;
		this.clipVertices1[11] = q4z;
		numAddedClipVertices = 0;
		x1 = this.clipVertices1[9];
		y1 = this.clipVertices1[10];
		z1 = this.clipVertices1[11];
		dot1 = (x1 - cx - s1x) * n1x + (y1 - cy - s1y) * n1y + (z1 - cz - s1z) * n1z;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			index = i * 3;
			x2 = this.clipVertices1[index];
			y2 = this.clipVertices1[index + 1];
			z2 = this.clipVertices1[index + 2];
			dot2 = (x2 - cx - s1x) * n1x + (y2 - cy - s1y) * n1y + (z2 - cz - s1z) * n1z;
			if(dot1 > 0) {
				if(dot2 > 0) {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					this.clipVertices2[index] = x2;
					this.clipVertices2[index + 1] = y2;
					this.clipVertices2[index + 2] = z2;
				} else {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					var t1 = dot1 / (dot1 - dot2);
					this.clipVertices2[index] = x1 + (x2 - x1) * t1;
					this.clipVertices2[index + 1] = y1 + (y2 - y1) * t1;
					this.clipVertices2[index + 2] = z1 + (z2 - z1) * t1;
				}
			} else if(dot2 > 0) {
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				var t2 = dot1 / (dot1 - dot2);
				this.clipVertices2[index] = x1 + (x2 - x1) * t2;
				this.clipVertices2[index + 1] = y1 + (y2 - y1) * t2;
				this.clipVertices2[index + 2] = z1 + (z2 - z1) * t2;
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				this.clipVertices2[index] = x2;
				this.clipVertices2[index + 1] = y2;
				this.clipVertices2[index + 2] = z2;
			}
			x1 = x2;
			y1 = y2;
			z1 = z2;
			dot1 = dot2;
		}
		numClipVertices = numAddedClipVertices;
		if(numClipVertices == 0) return;
		numAddedClipVertices = 0;
		index = (numClipVertices - 1) * 3;
		x1 = this.clipVertices2[index];
		y1 = this.clipVertices2[index + 1];
		z1 = this.clipVertices2[index + 2];
		dot1 = (x1 - cx - s2x) * n2x + (y1 - cy - s2y) * n2y + (z1 - cz - s2z) * n2z;
		var _g1 = 0;
		while(_g1 < numClipVertices) {
			var i1 = _g1++;
			index = i1 * 3;
			x2 = this.clipVertices2[index];
			y2 = this.clipVertices2[index + 1];
			z2 = this.clipVertices2[index + 2];
			dot2 = (x2 - cx - s2x) * n2x + (y2 - cy - s2y) * n2y + (z2 - cz - s2z) * n2z;
			if(dot1 > 0) {
				if(dot2 > 0) {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					this.clipVertices1[index] = x2;
					this.clipVertices1[index + 1] = y2;
					this.clipVertices1[index + 2] = z2;
				} else {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					var t3 = dot1 / (dot1 - dot2);
					this.clipVertices1[index] = x1 + (x2 - x1) * t3;
					this.clipVertices1[index + 1] = y1 + (y2 - y1) * t3;
					this.clipVertices1[index + 2] = z1 + (z2 - z1) * t3;
				}
			} else if(dot2 > 0) {
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				var t4 = dot1 / (dot1 - dot2);
				this.clipVertices1[index] = x1 + (x2 - x1) * t4;
				this.clipVertices1[index + 1] = y1 + (y2 - y1) * t4;
				this.clipVertices1[index + 2] = z1 + (z2 - z1) * t4;
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				this.clipVertices1[index] = x2;
				this.clipVertices1[index + 1] = y2;
				this.clipVertices1[index + 2] = z2;
			}
			x1 = x2;
			y1 = y2;
			z1 = z2;
			dot1 = dot2;
		}
		numClipVertices = numAddedClipVertices;
		if(numClipVertices == 0) return;
		numAddedClipVertices = 0;
		index = (numClipVertices - 1) * 3;
		x1 = this.clipVertices1[index];
		y1 = this.clipVertices1[index + 1];
		z1 = this.clipVertices1[index + 2];
		dot1 = (x1 - cx + s1x) * -n1x + (y1 - cy + s1y) * -n1y + (z1 - cz + s1z) * -n1z;
		var _g2 = 0;
		while(_g2 < numClipVertices) {
			var i2 = _g2++;
			index = i2 * 3;
			x2 = this.clipVertices1[index];
			y2 = this.clipVertices1[index + 1];
			z2 = this.clipVertices1[index + 2];
			dot2 = (x2 - cx + s1x) * -n1x + (y2 - cy + s1y) * -n1y + (z2 - cz + s1z) * -n1z;
			if(dot1 > 0) {
				if(dot2 > 0) {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					this.clipVertices2[index] = x2;
					this.clipVertices2[index + 1] = y2;
					this.clipVertices2[index + 2] = z2;
				} else {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					var t5 = dot1 / (dot1 - dot2);
					this.clipVertices2[index] = x1 + (x2 - x1) * t5;
					this.clipVertices2[index + 1] = y1 + (y2 - y1) * t5;
					this.clipVertices2[index + 2] = z1 + (z2 - z1) * t5;
				}
			} else if(dot2 > 0) {
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				var t6 = dot1 / (dot1 - dot2);
				this.clipVertices2[index] = x1 + (x2 - x1) * t6;
				this.clipVertices2[index + 1] = y1 + (y2 - y1) * t6;
				this.clipVertices2[index + 2] = z1 + (z2 - z1) * t6;
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				this.clipVertices2[index] = x2;
				this.clipVertices2[index + 1] = y2;
				this.clipVertices2[index + 2] = z2;
			}
			x1 = x2;
			y1 = y2;
			z1 = z2;
			dot1 = dot2;
		}
		numClipVertices = numAddedClipVertices;
		if(numClipVertices == 0) return;
		numAddedClipVertices = 0;
		index = (numClipVertices - 1) * 3;
		x1 = this.clipVertices2[index];
		y1 = this.clipVertices2[index + 1];
		z1 = this.clipVertices2[index + 2];
		dot1 = (x1 - cx + s2x) * -n2x + (y1 - cy + s2y) * -n2y + (z1 - cz + s2z) * -n2z;
		var _g3 = 0;
		while(_g3 < numClipVertices) {
			var i3 = _g3++;
			index = i3 * 3;
			x2 = this.clipVertices2[index];
			y2 = this.clipVertices2[index + 1];
			z2 = this.clipVertices2[index + 2];
			dot2 = (x2 - cx + s2x) * -n2x + (y2 - cy + s2y) * -n2y + (z2 - cz + s2z) * -n2z;
			if(dot1 > 0) {
				if(dot2 > 0) {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					this.clipVertices1[index] = x2;
					this.clipVertices1[index + 1] = y2;
					this.clipVertices1[index + 2] = z2;
				} else {
					index = numAddedClipVertices * 3;
					numAddedClipVertices++;
					var t7 = dot1 / (dot1 - dot2);
					this.clipVertices1[index] = x1 + (x2 - x1) * t7;
					this.clipVertices1[index + 1] = y1 + (y2 - y1) * t7;
					this.clipVertices1[index + 2] = z1 + (z2 - z1) * t7;
				}
			} else if(dot2 > 0) {
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				var t8 = dot1 / (dot1 - dot2);
				this.clipVertices1[index] = x1 + (x2 - x1) * t8;
				this.clipVertices1[index + 1] = y1 + (y2 - y1) * t8;
				this.clipVertices1[index + 2] = z1 + (z2 - z1) * t8;
				index = numAddedClipVertices * 3;
				numAddedClipVertices++;
				this.clipVertices1[index] = x2;
				this.clipVertices1[index + 1] = y2;
				this.clipVertices1[index + 2] = z2;
			}
			x1 = x2;
			y1 = y2;
			z1 = z2;
			dot1 = dot2;
		}
		numClipVertices = numAddedClipVertices;
		if(swap) {
			var tb = b1;
			b1 = b2;
			b2 = tb;
		}
		if(numClipVertices == 0) return;
		var flipped = b1 != shape1;
		if(numClipVertices > 4) {
			x1 = (q1x + q2x + q3x + q4x) * 0.25;
			y1 = (q1y + q2y + q3y + q4y) * 0.25;
			z1 = (q1z + q2z + q3z + q4z) * 0.25;
			n1x = q1x - x1;
			n1y = q1y - y1;
			n1z = q1z - z1;
			n2x = q2x - x1;
			n2y = q2y - y1;
			n2z = q2z - z1;
			var index1 = 0;
			var index2 = 0;
			var index3 = 0;
			var index4 = 0;
			var maxDot = -this.INF;
			minDot = this.INF;
			var _g4 = 0;
			while(_g4 < numClipVertices) {
				var i4 = _g4++;
				this.used[i4] = false;
				index = i4 * 3;
				x1 = this.clipVertices1[index];
				y1 = this.clipVertices1[index + 1];
				z1 = this.clipVertices1[index + 2];
				dot = x1 * n1x + y1 * n1y + z1 * n1z;
				if(dot < minDot) {
					minDot = dot;
					index1 = i4;
				}
				if(dot > maxDot) {
					maxDot = dot;
					index3 = i4;
				}
			}
			this.used[index1] = true;
			this.used[index3] = true;
			maxDot = -this.INF;
			minDot = this.INF;
			var _g5 = 0;
			while(_g5 < numClipVertices) {
				var i5 = _g5++;
				if(this.used[i5]) continue;
				index = i5 * 3;
				x1 = this.clipVertices1[index];
				y1 = this.clipVertices1[index + 1];
				z1 = this.clipVertices1[index + 2];
				dot = x1 * n2x + y1 * n2y + z1 * n2z;
				if(dot < minDot) {
					minDot = dot;
					index2 = i5;
				}
				if(dot > maxDot) {
					maxDot = dot;
					index4 = i5;
				}
			}
			index = index1 * 3;
			x1 = this.clipVertices1[index];
			y1 = this.clipVertices1[index + 1];
			z1 = this.clipVertices1[index + 2];
			dot = (x1 - cx) * nx + (y1 - cy) * ny + (z1 - cz) * nz;
			if(dot < 0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);
			index = index2 * 3;
			x1 = this.clipVertices1[index];
			y1 = this.clipVertices1[index + 1];
			z1 = this.clipVertices1[index + 2];
			dot = (x1 - cx) * nx + (y1 - cy) * ny + (z1 - cz) * nz;
			if(dot < 0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);
			index = index3 * 3;
			x1 = this.clipVertices1[index];
			y1 = this.clipVertices1[index + 1];
			z1 = this.clipVertices1[index + 2];
			dot = (x1 - cx) * nx + (y1 - cy) * ny + (z1 - cz) * nz;
			if(dot < 0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);
			index = index4 * 3;
			x1 = this.clipVertices1[index];
			y1 = this.clipVertices1[index + 1];
			z1 = this.clipVertices1[index + 2];
			dot = (x1 - cx) * nx + (y1 - cy) * ny + (z1 - cz) * nz;
			if(dot < 0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);
		} else {
			var _g6 = 0;
			while(_g6 < numClipVertices) {
				var i6 = _g6++;
				index = i6 * 3;
				x1 = this.clipVertices1[index];
				y1 = this.clipVertices1[index + 1];
				z1 = this.clipVertices1[index + 2];
				dot = (x1 - cx) * nx + (y1 - cy) * ny + (z1 - cz) * nz;
				if(dot < 0) manifold.addPoint(x1,y1,z1,nx,ny,nz,dot,flipped);
			}
		}
	}
	,__class__: oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector
});
var oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector = function(flip) {
	oimohx_physics_collision_narrowphase_CollisionDetector.call(this);
	this.flip = flip;
};
$hxClasses["oimohx.physics.collision.narrowphase.SphereBoxCollisionDetector"] = oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector;
oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector.__name__ = ["oimohx","physics","collision","narrowphase","SphereBoxCollisionDetector"];
oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector.__super__ = oimohx_physics_collision_narrowphase_CollisionDetector;
oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector.prototype = $extend(oimohx_physics_collision_narrowphase_CollisionDetector.prototype,{
	detectCollision: function(shape1,shape2,manifold) {
		var s;
		var b;
		if(this.flip) {
			s = js_Boot.__cast(shape2 , oimohx_physics_collision_shape_SphereShape);
			b = js_Boot.__cast(shape1 , oimohx_physics_collision_shape_BoxShape);
		} else {
			s = js_Boot.__cast(shape1 , oimohx_physics_collision_shape_SphereShape);
			b = js_Boot.__cast(shape2 , oimohx_physics_collision_shape_BoxShape);
		}
		var ps = s.position;
		var psx = ps.x;
		var psy = ps.y;
		var psz = ps.z;
		var pb = b.position;
		var pbx = pb.x;
		var pby = pb.y;
		var pbz = pb.z;
		var rad = s.radius;
		var nw = b.normalDirectionWidth;
		var nh = b.normalDirectionHeight;
		var nd = b.normalDirectionDepth;
		var hw = b.halfWidth;
		var hh = b.halfHeight;
		var hd = b.halfDepth;
		var dx = psx - pbx;
		var dy = psy - pby;
		var dz = psz - pbz;
		var sx = nw.x * dx + nw.y * dy + nw.z * dz;
		var sy = nh.x * dx + nh.y * dy + nh.z * dz;
		var sz = nd.x * dx + nd.y * dy + nd.z * dz;
		var cx;
		var cy;
		var cz;
		var len;
		var invLen;
		var overlap = 0;
		if(sx > hw) sx = hw; else if(sx < -hw) sx = -hw; else overlap = 1;
		if(sy > hh) sy = hh; else if(sy < -hh) sy = -hh; else overlap |= 2;
		if(sz > hd) sz = hd; else if(sz < -hd) sz = -hd; else overlap |= 4;
		if(overlap == 7) {
			if(sx < 0) dx = hw + sx; else dx = hw - sx;
			if(sy < 0) dy = hh + sy; else dy = hh - sy;
			if(sz < 0) dz = hd + sz; else dz = hd - sz;
			if(dx < dy) {
				if(dx < dz) {
					len = dx - hw;
					if(sx < 0) {
						sx = -hw;
						dx = nw.x;
						dy = nw.y;
						dz = nw.z;
					} else {
						sx = hw;
						dx = -nw.x;
						dy = -nw.y;
						dz = -nw.z;
					}
				} else {
					len = dz - hd;
					if(sz < 0) {
						sz = -hd;
						dx = nd.x;
						dy = nd.y;
						dz = nd.z;
					} else {
						sz = hd;
						dx = -nd.x;
						dy = -nd.y;
						dz = -nd.z;
					}
				}
			} else if(dy < dz) {
				len = dy - hh;
				if(sy < 0) {
					sy = -hh;
					dx = nh.x;
					dy = nh.y;
					dz = nh.z;
				} else {
					sy = hh;
					dx = -nh.x;
					dy = -nh.y;
					dz = -nh.z;
				}
			} else {
				len = dz - hd;
				if(sz < 0) {
					sz = -hd;
					dx = nd.x;
					dy = nd.y;
					dz = nd.z;
				} else {
					sz = hd;
					dx = -nd.x;
					dy = -nd.y;
					dz = -nd.z;
				}
			}
			cx = pbx + sx * nw.x + sy * nh.x + sz * nd.x;
			cy = pby + sx * nw.y + sy * nh.y + sz * nd.y;
			cz = pbz + sx * nw.z + sy * nh.z + sz * nd.z;
			manifold.addPoint(psx + rad * dx,psy + rad * dy,psz + rad * dz,dx,dy,dz,len - rad,this.flip);
		} else {
			cx = pbx + sx * nw.x + sy * nh.x + sz * nd.x;
			cy = pby + sx * nw.y + sy * nh.y + sz * nd.y;
			cz = pbz + sx * nw.z + sy * nh.z + sz * nd.z;
			dx = cx - ps.x;
			dy = cy - ps.y;
			dz = cz - ps.z;
			len = dx * dx + dy * dy + dz * dz;
			if(len > 0 && len < rad * rad) {
				len = Math.sqrt(len);
				invLen = 1 / len;
				dx *= invLen;
				dy *= invLen;
				dz *= invLen;
				manifold.addPoint(psx + rad * dx,psy + rad * dy,psz + rad * dz,dx,dy,dz,len - rad,this.flip);
			}
		}
	}
	,__class__: oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector
});
var oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector = function() {
	oimohx_physics_collision_narrowphase_CollisionDetector.call(this);
};
$hxClasses["oimohx.physics.collision.narrowphase.SphereSphereCollisionDetector"] = oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector;
oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector.__name__ = ["oimohx","physics","collision","narrowphase","SphereSphereCollisionDetector"];
oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector.__super__ = oimohx_physics_collision_narrowphase_CollisionDetector;
oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector.prototype = $extend(oimohx_physics_collision_narrowphase_CollisionDetector.prototype,{
	detectCollision: function(shape1,shape2,manifold) {
		var s1;
		s1 = js_Boot.__cast(shape1 , oimohx_physics_collision_shape_SphereShape);
		var s2;
		s2 = js_Boot.__cast(shape2 , oimohx_physics_collision_shape_SphereShape);
		var p1 = s1.position;
		var p2 = s2.position;
		var dx = p2.x - p1.x;
		var dy = p2.y - p1.y;
		var dz = p2.z - p1.z;
		var len = dx * dx + dy * dy + dz * dz;
		var r1 = s1.radius;
		var r2 = s2.radius;
		var rad = r1 + r2;
		if(len > 0 && len < rad * rad) {
			len = Math.sqrt(len);
			var invLen = 1 / len;
			dx *= invLen;
			dy *= invLen;
			dz *= invLen;
			manifold.addPoint(p1.x + dx * r1,p1.y + dy * r1,p1.z + dz * r1,dx,dy,dz,len - rad,false);
		}
	}
	,__class__: oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector
});
var oimohx_physics_collision_shape_Shape = function(config) {
	this.parent = null;
	this.id = ++oimohx_physics_collision_shape_Shape.nextID;
	this.position = new oimohx_math_Vec3();
	this.relativePosition = new oimohx_math_Vec3().copy(config.relativePosition);
	this.rotation = new oimohx_math_Mat33();
	this.relativeRotation = new oimohx_math_Mat33().copy(config.relativeRotation);
	this.aabb = new oimohx_physics_collision_broadphase_AABB();
	this.density = config.density;
	this.friction = config.friction;
	this.restitution = config.restitution;
	this.belongsTo = config.belongsTo;
	this.collidesWith = config.collidesWith;
};
$hxClasses["oimohx.physics.collision.shape.Shape"] = oimohx_physics_collision_shape_Shape;
oimohx_physics_collision_shape_Shape.__name__ = ["oimohx","physics","collision","shape","Shape"];
oimohx_physics_collision_shape_Shape.prototype = {
	prev: null
	,next: null
	,id: null
	,type: null
	,position: null
	,rotation: null
	,relativePosition: null
	,relativeRotation: null
	,friction: null
	,restitution: null
	,density: null
	,aabb: null
	,proxy: null
	,parent: null
	,contactLink: null
	,numContacts: null
	,belongsTo: null
	,collidesWith: null
	,calculateMassInfo: null
	,updateProxy: null
	,__class__: oimohx_physics_collision_shape_Shape
};
var oimohx_physics_collision_shape_BoxShape = function(config,width,height,depth) {
	oimohx_physics_collision_shape_Shape.call(this,config);
	this.width = width;
	this.halfWidth = width * 0.5;
	this.height = height;
	this.halfHeight = height * 0.5;
	this.depth = depth;
	this.halfDepth = depth * 0.5;
	this.normalDirectionWidth = new oimohx_math_Vec3();
	this.normalDirectionHeight = new oimohx_math_Vec3();
	this.normalDirectionDepth = new oimohx_math_Vec3();
	this.halfDirectionWidth = new oimohx_math_Vec3();
	this.halfDirectionHeight = new oimohx_math_Vec3();
	this.halfDirectionDepth = new oimohx_math_Vec3();
	this.vertex1 = new oimohx_math_Vec3();
	this.vertex2 = new oimohx_math_Vec3();
	this.vertex3 = new oimohx_math_Vec3();
	this.vertex4 = new oimohx_math_Vec3();
	this.vertex5 = new oimohx_math_Vec3();
	this.vertex6 = new oimohx_math_Vec3();
	this.vertex7 = new oimohx_math_Vec3();
	this.vertex8 = new oimohx_math_Vec3();
	this.type = 2;
	this.calculateMassInfo = $bind(this,this._calculateMassInfo);
	this.updateProxy = $bind(this,this._updateProxy);
};
$hxClasses["oimohx.physics.collision.shape.BoxShape"] = oimohx_physics_collision_shape_BoxShape;
oimohx_physics_collision_shape_BoxShape.__name__ = ["oimohx","physics","collision","shape","BoxShape"];
oimohx_physics_collision_shape_BoxShape.__super__ = oimohx_physics_collision_shape_Shape;
oimohx_physics_collision_shape_BoxShape.prototype = $extend(oimohx_physics_collision_shape_Shape.prototype,{
	width: null
	,halfWidth: null
	,height: null
	,halfHeight: null
	,depth: null
	,halfDepth: null
	,normalDirectionWidth: null
	,normalDirectionHeight: null
	,normalDirectionDepth: null
	,halfDirectionWidth: null
	,halfDirectionHeight: null
	,halfDirectionDepth: null
	,vertex1: null
	,vertex2: null
	,vertex3: null
	,vertex4: null
	,vertex5: null
	,vertex6: null
	,vertex7: null
	,vertex8: null
	,wx: null
	,wy: null
	,wz: null
	,hx: null
	,hy: null
	,hz: null
	,dx: null
	,dy: null
	,dz: null
	,x: null
	,y: null
	,z: null
	,w: null
	,h: null
	,d: null
	,_calculateMassInfo: function(out) {
		var mass = this.width * this.height * this.depth * this.density;
		out.mass = mass;
		out.inertia.init(mass * (this.height * this.height + this.depth * this.depth) / 12,0,0,0,mass * (this.width * this.width + this.depth * this.depth) / 12,0,0,0,mass * (this.width * this.width + this.height * this.height) / 12);
	}
	,_updateProxy: function() {
		this.normalDirectionWidth.x = this.rotation.elements[0];
		this.normalDirectionWidth.y = this.rotation.elements[3];
		this.normalDirectionWidth.z = this.rotation.elements[6];
		this.normalDirectionHeight.x = this.rotation.elements[1];
		this.normalDirectionHeight.y = this.rotation.elements[4];
		this.normalDirectionHeight.z = this.rotation.elements[7];
		this.normalDirectionDepth.x = this.rotation.elements[2];
		this.normalDirectionDepth.y = this.rotation.elements[5];
		this.normalDirectionDepth.z = this.rotation.elements[8];
		this.halfDirectionWidth.x = this.rotation.elements[0] * this.halfWidth;
		this.halfDirectionWidth.y = this.rotation.elements[3] * this.halfWidth;
		this.halfDirectionWidth.z = this.rotation.elements[6] * this.halfWidth;
		this.halfDirectionHeight.x = this.rotation.elements[1] * this.halfHeight;
		this.halfDirectionHeight.y = this.rotation.elements[4] * this.halfHeight;
		this.halfDirectionHeight.z = this.rotation.elements[7] * this.halfHeight;
		this.halfDirectionDepth.x = this.rotation.elements[2] * this.halfDepth;
		this.halfDirectionDepth.y = this.rotation.elements[5] * this.halfDepth;
		this.halfDirectionDepth.z = this.rotation.elements[8] * this.halfDepth;
		this.wx = this.halfDirectionWidth.x;
		this.wy = this.halfDirectionWidth.y;
		this.wz = this.halfDirectionWidth.z;
		this.hx = this.halfDirectionHeight.x;
		this.hy = this.halfDirectionHeight.y;
		this.hz = this.halfDirectionHeight.z;
		this.dx = this.halfDirectionDepth.x;
		this.dy = this.halfDirectionDepth.y;
		this.dz = this.halfDirectionDepth.z;
		this.x = this.position.x;
		this.y = this.position.y;
		this.z = this.position.z;
		this.vertex1.x = this.x + this.wx + this.hx + this.dx;
		this.vertex1.y = this.y + this.wy + this.hy + this.dy;
		this.vertex1.z = this.z + this.wz + this.hz + this.dz;
		this.vertex2.x = this.x + this.wx + this.hx - this.dx;
		this.vertex2.y = this.y + this.wy + this.hy - this.dy;
		this.vertex2.z = this.z + this.wz + this.hz - this.dz;
		this.vertex3.x = this.x + this.wx - this.hx + this.dx;
		this.vertex3.y = this.y + this.wy - this.hy + this.dy;
		this.vertex3.z = this.z + this.wz - this.hz + this.dz;
		this.vertex4.x = this.x + this.wx - this.hx - this.dx;
		this.vertex4.y = this.y + this.wy - this.hy - this.dy;
		this.vertex4.z = this.z + this.wz - this.hz - this.dz;
		this.vertex5.x = this.x - this.wx + this.hx + this.dx;
		this.vertex5.y = this.y - this.wy + this.hy + this.dy;
		this.vertex5.z = this.z - this.wz + this.hz + this.dz;
		this.vertex6.x = this.x - this.wx + this.hx - this.dx;
		this.vertex6.y = this.y - this.wy + this.hy - this.dy;
		this.vertex6.z = this.z - this.wz + this.hz - this.dz;
		this.vertex7.x = this.x - this.wx - this.hx + this.dx;
		this.vertex7.y = this.y - this.wy - this.hy + this.dy;
		this.vertex7.z = this.z - this.wz - this.hz + this.dz;
		this.vertex8.x = this.x - this.wx - this.hx - this.dx;
		this.vertex8.y = this.y - this.wy - this.hy - this.dy;
		this.vertex8.z = this.z - this.wz - this.hz - this.dz;
		if(this.halfDirectionWidth.x < 0) this.w = -this.halfDirectionWidth.x; else this.w = this.halfDirectionWidth.x;
		if(this.halfDirectionWidth.y < 0) this.h = -this.halfDirectionWidth.y; else this.h = this.halfDirectionWidth.y;
		if(this.halfDirectionWidth.z < 0) this.d = -this.halfDirectionWidth.z; else this.d = this.halfDirectionWidth.z;
		if(this.halfDirectionHeight.x < 0) this.w -= this.halfDirectionHeight.x; else this.w += this.halfDirectionHeight.x;
		if(this.halfDirectionHeight.y < 0) this.h -= this.halfDirectionHeight.y; else this.h += this.halfDirectionHeight.y;
		if(this.halfDirectionHeight.z < 0) this.d -= this.halfDirectionHeight.z; else this.d += this.halfDirectionHeight.z;
		if(this.halfDirectionDepth.x < 0) this.w -= this.halfDirectionDepth.x; else this.w += this.halfDirectionDepth.x;
		if(this.halfDirectionDepth.y < 0) this.h -= this.halfDirectionDepth.y; else this.h += this.halfDirectionDepth.y;
		if(this.halfDirectionDepth.z < 0) this.d -= this.halfDirectionDepth.z; else this.d += this.halfDirectionDepth.z;
		this.aabb.init(this.position.x - this.w - 0.005,this.position.x + this.w + 0.005,this.position.y - this.h - 0.005,this.position.y + this.h + 0.005,this.position.z - this.d - 0.005,this.position.z + this.d + 0.005);
		if(this.proxy != null) this.proxy.update();
	}
	,__class__: oimohx_physics_collision_shape_BoxShape
});
var oimohx_physics_collision_shape_MassInfo = function() {
	this.mass = 0;
	this.inertia = new oimohx_math_Mat33();
};
$hxClasses["oimohx.physics.collision.shape.MassInfo"] = oimohx_physics_collision_shape_MassInfo;
oimohx_physics_collision_shape_MassInfo.__name__ = ["oimohx","physics","collision","shape","MassInfo"];
oimohx_physics_collision_shape_MassInfo.prototype = {
	mass: null
	,inertia: null
	,__class__: oimohx_physics_collision_shape_MassInfo
};
var oimohx_physics_collision_shape_ShapeConfig = function() {
	this.relativePosition = new oimohx_math_Vec3();
	this.relativeRotation = new oimohx_math_Mat33();
	this.friction = 0.4;
	this.restitution = 0.2;
	this.density = 1;
	this.belongsTo = 1;
	this.collidesWith = -1;
};
$hxClasses["oimohx.physics.collision.shape.ShapeConfig"] = oimohx_physics_collision_shape_ShapeConfig;
oimohx_physics_collision_shape_ShapeConfig.__name__ = ["oimohx","physics","collision","shape","ShapeConfig"];
oimohx_physics_collision_shape_ShapeConfig.prototype = {
	relativePosition: null
	,relativeRotation: null
	,friction: null
	,restitution: null
	,density: null
	,belongsTo: null
	,collidesWith: null
	,__class__: oimohx_physics_collision_shape_ShapeConfig
};
var oimohx_physics_collision_shape_SphereShape = function(config,radius) {
	oimohx_physics_collision_shape_Shape.call(this,config);
	this.radius = radius;
	this.type = 1;
	this.updateProxy = $bind(this,this._updateProxy);
	this.calculateMassInfo = $bind(this,this._calculateMassInfo);
};
$hxClasses["oimohx.physics.collision.shape.SphereShape"] = oimohx_physics_collision_shape_SphereShape;
oimohx_physics_collision_shape_SphereShape.__name__ = ["oimohx","physics","collision","shape","SphereShape"];
oimohx_physics_collision_shape_SphereShape.__super__ = oimohx_physics_collision_shape_Shape;
oimohx_physics_collision_shape_SphereShape.prototype = $extend(oimohx_physics_collision_shape_Shape.prototype,{
	radius: null
	,_updateProxy: function() {
		this.aabb.init(this.position.x - this.radius - 0.005,this.position.x + this.radius + 0.005,this.position.y - this.radius - 0.005,this.position.y + this.radius + 0.005,this.position.z - this.radius - 0.005,this.position.z + this.radius + 0.005);
		if(this.proxy != null) this.proxy.update();
	}
	,_calculateMassInfo: function(out) {
		var mass = 1.3333333333333333 * Math.PI * this.radius * this.radius * this.radius * this.density;
		out.mass = mass;
		var inertia = mass * this.radius * this.radius * 2 / 5;
		out.inertia.init(inertia,0,0,0,inertia,0,0,0,inertia);
	}
	,__class__: oimohx_physics_collision_shape_SphereShape
});
var oimohx_physics_constraint_Constraint = function() {
};
$hxClasses["oimohx.physics.constraint.Constraint"] = oimohx_physics_constraint_Constraint;
oimohx_physics_constraint_Constraint.__name__ = ["oimohx","physics","constraint","Constraint"];
oimohx_physics_constraint_Constraint.prototype = {
	parent: null
	,body1: null
	,body2: null
	,addedToIsland: null
	,preSolve: function(timeStep,invTimeStep) {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,solve: function() {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,postSolve: function() {
		throw new js__$Boot_HaxeError("Inheritance error.");
	}
	,__class__: oimohx_physics_constraint_Constraint
};
var oimohx_physics_constraint_contact_Contact = function() {
	this.b1Link = new oimohx_physics_constraint_contact_ContactLink(this);
	this.b2Link = new oimohx_physics_constraint_contact_ContactLink(this);
	this.s1Link = new oimohx_physics_constraint_contact_ContactLink(this);
	this.s2Link = new oimohx_physics_constraint_contact_ContactLink(this);
	this.manifold = new oimohx_physics_constraint_contact_ContactManifold();
	this.buffer = [];
	this.buffer[0] = new oimohx_physics_constraint_contact_ImpulseDataBuffer();
	this.buffer[1] = new oimohx_physics_constraint_contact_ImpulseDataBuffer();
	this.buffer[2] = new oimohx_physics_constraint_contact_ImpulseDataBuffer();
	this.buffer[3] = new oimohx_physics_constraint_contact_ImpulseDataBuffer();
	this.points = this.manifold.points;
	this.constraint = new oimohx_physics_constraint_contact_ContactConstraint(this.manifold);
};
$hxClasses["oimohx.physics.constraint.contact.Contact"] = oimohx_physics_constraint_contact_Contact;
oimohx_physics_constraint_contact_Contact.__name__ = ["oimohx","physics","constraint","contact","Contact"];
oimohx_physics_constraint_contact_Contact.prototype = {
	b1Link: null
	,b2Link: null
	,s1Link: null
	,s2Link: null
	,shape1: null
	,shape2: null
	,body1: null
	,body2: null
	,prev: null
	,next: null
	,persisting: null
	,sleeping: null
	,detector: null
	,manifold: null
	,constraint: null
	,touching: null
	,buffer: null
	,points: null
	,mixRestitution: function(restitution1,restitution2) {
		return Math.sqrt(restitution1 * restitution2);
	}
	,mixFriction: function(friction1,friction2) {
		return Math.sqrt(friction1 * friction2);
	}
	,updateManifold: function() {
		this.constraint.restitution = this.mixRestitution(this.shape1.restitution,this.shape2.restitution);
		this.constraint.friction = this.mixFriction(this.shape1.friction,this.shape2.friction);
		var numBuffers = this.manifold.numPoints;
		var _g = 0;
		while(_g < numBuffers) {
			var i = _g++;
			var b = this.buffer[i];
			var p = this.points[i];
			b.lp1X = p.localPoint1.x;
			b.lp1Y = p.localPoint1.y;
			b.lp1Z = p.localPoint1.z;
			b.lp2X = p.localPoint2.x;
			b.lp2Y = p.localPoint2.y;
			b.lp2Z = p.localPoint2.z;
			b.impulse = p.normalImpulse;
		}
		this.manifold.numPoints = 0;
		this.detector.detectCollision(this.shape1,this.shape2,this.manifold);
		var num = this.manifold.numPoints;
		if(num == 0) {
			this.touching = false;
			return;
		}
		this.touching = true;
		var _g1 = 0;
		while(_g1 < num) {
			var i1 = _g1++;
			var p1 = this.points[i1];
			var lp1x = p1.localPoint1.x;
			var lp1y = p1.localPoint1.y;
			var lp1z = p1.localPoint1.z;
			var lp2x = p1.localPoint2.x;
			var lp2y = p1.localPoint2.y;
			var lp2z = p1.localPoint2.z;
			var index = -1;
			var minDistance = 0.0004;
			var _g11 = 0;
			while(_g11 < numBuffers) {
				var j = _g11++;
				var b1 = this.buffer[j];
				var dx = b1.lp1X - lp1x;
				var dy = b1.lp1Y - lp1y;
				var dz = b1.lp1Z - lp1z;
				var distance1 = dx * dx + dy * dy + dz * dz;
				dx = b1.lp2X - lp2x;
				dy = b1.lp2Y - lp2y;
				dz = b1.lp2Z - lp2z;
				var distance2 = dx * dx + dy * dy + dz * dz;
				if(distance1 < distance2) {
					if(distance1 < minDistance) {
						minDistance = distance1;
						index = j;
					}
				} else if(distance2 < minDistance) {
					minDistance = distance2;
					index = j;
				}
			}
			if(index != -1) {
				var tmp = this.buffer[index];
				this.buffer[index] = this.buffer[--numBuffers];
				this.buffer[numBuffers] = tmp;
				p1.normalImpulse = tmp.impulse;
				p1.warmStarted = true;
			} else {
				p1.normalImpulse = 0;
				p1.warmStarted = false;
			}
		}
	}
	,attach: function(shape1,shape2) {
		this.shape1 = shape1;
		this.shape2 = shape2;
		this.body1 = shape1.parent;
		this.body2 = shape2.parent;
		this.manifold.body1 = this.body1;
		this.manifold.body2 = this.body2;
		this.constraint.body1 = this.body1;
		this.constraint.body2 = this.body2;
		this.constraint.attach();
		this.s1Link.shape = shape2;
		this.s1Link.body = this.body2;
		this.s2Link.shape = shape1;
		this.s2Link.body = this.body1;
		if(shape1.contactLink != null) (this.s1Link.next = shape1.contactLink).prev = this.s1Link; else this.s1Link.next = null;
		shape1.contactLink = this.s1Link;
		shape1.numContacts++;
		if(shape2.contactLink != null) (this.s2Link.next = shape2.contactLink).prev = this.s2Link; else this.s2Link.next = null;
		shape2.contactLink = this.s2Link;
		shape2.numContacts++;
		this.b1Link.shape = shape2;
		this.b1Link.body = this.body2;
		this.b2Link.shape = shape1;
		this.b2Link.body = this.body1;
		if(this.body1.contactLink != null) (this.b1Link.next = this.body1.contactLink).prev = this.b1Link; else this.b1Link.next = null;
		this.body1.contactLink = this.b1Link;
		this.body1.numContacts++;
		if(this.body2.contactLink != null) (this.b2Link.next = this.body2.contactLink).prev = this.b2Link; else this.b2Link.next = null;
		this.body2.contactLink = this.b2Link;
		this.body2.numContacts++;
		this.prev = null;
		this.next = null;
		this.persisting = true;
		this.sleeping = this.body1.sleeping && this.body2.sleeping;
		this.manifold.numPoints = 0;
	}
	,detach: function() {
		var prev = this.s1Link.prev;
		var next = this.s1Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.shape1.contactLink == this.s1Link) this.shape1.contactLink = next;
		this.s1Link.prev = null;
		this.s1Link.next = null;
		this.s1Link.shape = null;
		this.s1Link.body = null;
		this.shape1.numContacts--;
		prev = this.s2Link.prev;
		next = this.s2Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.shape2.contactLink == this.s2Link) this.shape2.contactLink = next;
		this.s2Link.prev = null;
		this.s2Link.next = null;
		this.s2Link.shape = null;
		this.s2Link.body = null;
		this.shape2.numContacts--;
		prev = this.b1Link.prev;
		next = this.b1Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.body1.contactLink == this.b1Link) this.body1.contactLink = next;
		this.b1Link.prev = null;
		this.b1Link.next = null;
		this.b1Link.shape = null;
		this.b1Link.body = null;
		this.body1.numContacts--;
		prev = this.b2Link.prev;
		next = this.b2Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.body2.contactLink == this.b2Link) this.body2.contactLink = next;
		this.b2Link.prev = null;
		this.b2Link.next = null;
		this.b2Link.shape = null;
		this.b2Link.body = null;
		this.body2.numContacts--;
		this.manifold.body1 = null;
		this.manifold.body2 = null;
		this.constraint.body1 = null;
		this.constraint.body2 = null;
		this.constraint.detach();
		this.shape1 = null;
		this.shape2 = null;
		this.body1 = null;
		this.body2 = null;
	}
	,__class__: oimohx_physics_constraint_contact_Contact
};
var oimohx_physics_constraint_contact_ContactConstraint = function(manifold) {
	oimohx_physics_constraint_Constraint.call(this);
	this.manifold = manifold;
	this.ps = manifold.points;
	this.cs = new oimohx_physics_constraint_contact_ContactPointDataBuffer();
	this.cs.next = new oimohx_physics_constraint_contact_ContactPointDataBuffer();
	this.cs.next.next = new oimohx_physics_constraint_contact_ContactPointDataBuffer();
	this.cs.next.next.next = new oimohx_physics_constraint_contact_ContactPointDataBuffer();
};
$hxClasses["oimohx.physics.constraint.contact.ContactConstraint"] = oimohx_physics_constraint_contact_ContactConstraint;
oimohx_physics_constraint_contact_ContactConstraint.__name__ = ["oimohx","physics","constraint","contact","ContactConstraint"];
oimohx_physics_constraint_contact_ContactConstraint.__super__ = oimohx_physics_constraint_Constraint;
oimohx_physics_constraint_contact_ContactConstraint.prototype = $extend(oimohx_physics_constraint_Constraint.prototype,{
	manifold: null
	,restitution: null
	,friction: null
	,p1: null
	,p2: null
	,lv1: null
	,lv2: null
	,av1: null
	,av2: null
	,i1: null
	,i2: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,m1: null
	,m2: null
	,ps: null
	,cs: null
	,num: null
	,attach: function() {
		this.p1 = this.body1.position;
		this.p2 = this.body2.position;
		this.lv1 = this.body1.linearVelocity;
		this.av1 = this.body1.angularVelocity;
		this.lv2 = this.body2.linearVelocity;
		this.av2 = this.body2.angularVelocity;
		this.i1 = this.body1.inverseInertia;
		this.i2 = this.body2.inverseInertia;
	}
	,detach: function() {
		this.p1 = null;
		this.p2 = null;
		this.lv1 = null;
		this.lv2 = null;
		this.av1 = null;
		this.av2 = null;
		this.i1 = null;
		this.i2 = null;
	}
	,preSolve: function(timeStep,invTimeStep) {
		this.m1 = this.body1.inverseMass;
		this.m2 = this.body2.inverseMass;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var p1x = this.p1.x;
		var p1y = this.p1.y;
		var p1z = this.p1.z;
		var p2x = this.p2.x;
		var p2y = this.p2.y;
		var p2z = this.p2.z;
		var m1m2 = this.m1 + this.m2;
		this.num = this.manifold.numPoints;
		var c = this.cs;
		var _g1 = 0;
		var _g = this.num;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.ps[i];
			var tmp1X;
			var tmp1Y;
			var tmp1Z;
			var tmp2X;
			var tmp2Y;
			var tmp2Z;
			tmp1X = p.position.x;
			tmp1Y = p.position.y;
			tmp1Z = p.position.z;
			var rp1X = tmp1X - p1x;
			var rp1Y = tmp1Y - p1y;
			var rp1Z = tmp1Z - p1z;
			var rp2X = tmp1X - p2x;
			var rp2Y = tmp1Y - p2y;
			var rp2Z = tmp1Z - p2z;
			c.rp1X = rp1X;
			c.rp1Y = rp1Y;
			c.rp1Z = rp1Z;
			c.rp2X = rp2X;
			c.rp2Y = rp2Y;
			c.rp2Z = rp2Z;
			c.norImp = p.normalImpulse;
			c.tanImp = p.tangentImpulse;
			c.binImp = p.binormalImpulse;
			var norX = p.normal.x;
			var norY = p.normal.y;
			var norZ = p.normal.z;
			var rvX = this.lv2.x + this.av2.y * rp2Z - this.av2.z * rp2Y - (this.lv1.x + this.av1.y * rp1Z - this.av1.z * rp1Y);
			var rvY = this.lv2.y + this.av2.z * rp2X - this.av2.x * rp2Z - (this.lv1.y + this.av1.z * rp1X - this.av1.x * rp1Z);
			var rvZ = this.lv2.z + this.av2.x * rp2Y - this.av2.y * rp2X - (this.lv1.z + this.av1.x * rp1Y - this.av1.y * rp1X);
			var rvn = norX * rvX + norY * rvY + norZ * rvZ;
			var tanX = rvX - rvn * norX;
			var tanY = rvY - rvn * norY;
			var tanZ = rvZ - rvn * norZ;
			var len = tanX * tanX + tanY * tanY + tanZ * tanZ;
			if(len > 0.04) len = 1 / Math.sqrt(len); else {
				tanX = norY * norX - norZ * norZ;
				tanY = -norZ * norY - norX * norX;
				tanZ = norX * norZ + norY * norY;
				len = 1 / Math.sqrt(tanX * tanX + tanY * tanY + tanZ * tanZ);
			}
			tanX *= len;
			tanY *= len;
			tanZ *= len;
			var binX = norY * tanZ - norZ * tanY;
			var binY = norZ * tanX - norX * tanZ;
			var binZ = norX * tanY - norY * tanX;
			c.norX = norX;
			c.norY = norY;
			c.norZ = norZ;
			c.tanX = tanX;
			c.tanY = tanY;
			c.tanZ = tanZ;
			c.binX = binX;
			c.binY = binY;
			c.binZ = binZ;
			c.norU1X = norX * this.m1;
			c.norU1Y = norY * this.m1;
			c.norU1Z = norZ * this.m1;
			c.norU2X = norX * this.m2;
			c.norU2Y = norY * this.m2;
			c.norU2Z = norZ * this.m2;
			c.tanU1X = tanX * this.m1;
			c.tanU1Y = tanY * this.m1;
			c.tanU1Z = tanZ * this.m1;
			c.tanU2X = tanX * this.m2;
			c.tanU2Y = tanY * this.m2;
			c.tanU2Z = tanZ * this.m2;
			c.binU1X = binX * this.m1;
			c.binU1Y = binY * this.m1;
			c.binU1Z = binZ * this.m1;
			c.binU2X = binX * this.m2;
			c.binU2Y = binY * this.m2;
			c.binU2Z = binZ * this.m2;
			var norT1X = rp1Y * norZ - rp1Z * norY;
			var norT1Y = rp1Z * norX - rp1X * norZ;
			var norT1Z = rp1X * norY - rp1Y * norX;
			var norT2X = rp2Y * norZ - rp2Z * norY;
			var norT2Y = rp2Z * norX - rp2X * norZ;
			var norT2Z = rp2X * norY - rp2Y * norX;
			var tanT1X = rp1Y * tanZ - rp1Z * tanY;
			var tanT1Y = rp1Z * tanX - rp1X * tanZ;
			var tanT1Z = rp1X * tanY - rp1Y * tanX;
			var tanT2X = rp2Y * tanZ - rp2Z * tanY;
			var tanT2Y = rp2Z * tanX - rp2X * tanZ;
			var tanT2Z = rp2X * tanY - rp2Y * tanX;
			var binT1X = rp1Y * binZ - rp1Z * binY;
			var binT1Y = rp1Z * binX - rp1X * binZ;
			var binT1Z = rp1X * binY - rp1Y * binX;
			var binT2X = rp2Y * binZ - rp2Z * binY;
			var binT2Y = rp2Z * binX - rp2X * binZ;
			var binT2Z = rp2X * binY - rp2Y * binX;
			var norTU1X = norT1X * this.i1e00 + norT1Y * this.i1e01 + norT1Z * this.i1e02;
			var norTU1Y = norT1X * this.i1e10 + norT1Y * this.i1e11 + norT1Z * this.i1e12;
			var norTU1Z = norT1X * this.i1e20 + norT1Y * this.i1e21 + norT1Z * this.i1e22;
			var norTU2X = norT2X * this.i2e00 + norT2Y * this.i2e01 + norT2Z * this.i2e02;
			var norTU2Y = norT2X * this.i2e10 + norT2Y * this.i2e11 + norT2Z * this.i2e12;
			var norTU2Z = norT2X * this.i2e20 + norT2Y * this.i2e21 + norT2Z * this.i2e22;
			var tanTU1X = tanT1X * this.i1e00 + tanT1Y * this.i1e01 + tanT1Z * this.i1e02;
			var tanTU1Y = tanT1X * this.i1e10 + tanT1Y * this.i1e11 + tanT1Z * this.i1e12;
			var tanTU1Z = tanT1X * this.i1e20 + tanT1Y * this.i1e21 + tanT1Z * this.i1e22;
			var tanTU2X = tanT2X * this.i2e00 + tanT2Y * this.i2e01 + tanT2Z * this.i2e02;
			var tanTU2Y = tanT2X * this.i2e10 + tanT2Y * this.i2e11 + tanT2Z * this.i2e12;
			var tanTU2Z = tanT2X * this.i2e20 + tanT2Y * this.i2e21 + tanT2Z * this.i2e22;
			var binTU1X = binT1X * this.i1e00 + binT1Y * this.i1e01 + binT1Z * this.i1e02;
			var binTU1Y = binT1X * this.i1e10 + binT1Y * this.i1e11 + binT1Z * this.i1e12;
			var binTU1Z = binT1X * this.i1e20 + binT1Y * this.i1e21 + binT1Z * this.i1e22;
			var binTU2X = binT2X * this.i2e00 + binT2Y * this.i2e01 + binT2Z * this.i2e02;
			var binTU2Y = binT2X * this.i2e10 + binT2Y * this.i2e11 + binT2Z * this.i2e12;
			var binTU2Z = binT2X * this.i2e20 + binT2Y * this.i2e21 + binT2Z * this.i2e22;
			c.norT1X = norT1X;
			c.norT1Y = norT1Y;
			c.norT1Z = norT1Z;
			c.tanT1X = tanT1X;
			c.tanT1Y = tanT1Y;
			c.tanT1Z = tanT1Z;
			c.binT1X = binT1X;
			c.binT1Y = binT1Y;
			c.binT1Z = binT1Z;
			c.norT2X = norT2X;
			c.norT2Y = norT2Y;
			c.norT2Z = norT2Z;
			c.tanT2X = tanT2X;
			c.tanT2Y = tanT2Y;
			c.tanT2Z = tanT2Z;
			c.binT2X = binT2X;
			c.binT2Y = binT2Y;
			c.binT2Z = binT2Z;
			c.norTU1X = norTU1X;
			c.norTU1Y = norTU1Y;
			c.norTU1Z = norTU1Z;
			c.tanTU1X = tanTU1X;
			c.tanTU1Y = tanTU1Y;
			c.tanTU1Z = tanTU1Z;
			c.binTU1X = binTU1X;
			c.binTU1Y = binTU1Y;
			c.binTU1Z = binTU1Z;
			c.norTU2X = norTU2X;
			c.norTU2Y = norTU2Y;
			c.norTU2Z = norTU2Z;
			c.tanTU2X = tanTU2X;
			c.tanTU2Y = tanTU2Y;
			c.tanTU2Z = tanTU2Z;
			c.binTU2X = binTU2X;
			c.binTU2Y = binTU2Y;
			c.binTU2Z = binTU2Z;
			tmp1X = norT1X * this.i1e00 + norT1Y * this.i1e01 + norT1Z * this.i1e02;
			tmp1Y = norT1X * this.i1e10 + norT1Y * this.i1e11 + norT1Z * this.i1e12;
			tmp1Z = norT1X * this.i1e20 + norT1Y * this.i1e21 + norT1Z * this.i1e22;
			tmp2X = tmp1Y * rp1Z - tmp1Z * rp1Y;
			tmp2Y = tmp1Z * rp1X - tmp1X * rp1Z;
			tmp2Z = tmp1X * rp1Y - tmp1Y * rp1X;
			tmp1X = norT2X * this.i2e00 + norT2Y * this.i2e01 + norT2Z * this.i2e02;
			tmp1Y = norT2X * this.i2e10 + norT2Y * this.i2e11 + norT2Z * this.i2e12;
			tmp1Z = norT2X * this.i2e20 + norT2Y * this.i2e21 + norT2Z * this.i2e22;
			tmp2X += tmp1Y * rp2Z - tmp1Z * rp2Y;
			tmp2Y += tmp1Z * rp2X - tmp1X * rp2Z;
			tmp2Z += tmp1X * rp2Y - tmp1Y * rp2X;
			var norDen = 1 / (m1m2 + norX * tmp2X + norY * tmp2Y + norZ * tmp2Z);
			tmp1X = tanT1X * this.i1e00 + tanT1Y * this.i1e01 + tanT1Z * this.i1e02;
			tmp1Y = tanT1X * this.i1e10 + tanT1Y * this.i1e11 + tanT1Z * this.i1e12;
			tmp1Z = tanT1X * this.i1e20 + tanT1Y * this.i1e21 + tanT1Z * this.i1e22;
			tmp2X = tmp1Y * rp1Z - tmp1Z * rp1Y;
			tmp2Y = tmp1Z * rp1X - tmp1X * rp1Z;
			tmp2Z = tmp1X * rp1Y - tmp1Y * rp1X;
			tmp1X = tanT2X * this.i2e00 + tanT2Y * this.i2e01 + tanT2Z * this.i2e02;
			tmp1Y = tanT2X * this.i2e10 + tanT2Y * this.i2e11 + tanT2Z * this.i2e12;
			tmp1Z = tanT2X * this.i2e20 + tanT2Y * this.i2e21 + tanT2Z * this.i2e22;
			tmp2X += tmp1Y * rp2Z - tmp1Z * rp2Y;
			tmp2Y += tmp1Z * rp2X - tmp1X * rp2Z;
			tmp2Z += tmp1X * rp2Y - tmp1Y * rp2X;
			var tanDen = 1 / (m1m2 + tanX * tmp2X + tanY * tmp2Y + tanZ * tmp2Z);
			tmp1X = binT1X * this.i1e00 + binT1Y * this.i1e01 + binT1Z * this.i1e02;
			tmp1Y = binT1X * this.i1e10 + binT1Y * this.i1e11 + binT1Z * this.i1e12;
			tmp1Z = binT1X * this.i1e20 + binT1Y * this.i1e21 + binT1Z * this.i1e22;
			tmp2X = tmp1Y * rp1Z - tmp1Z * rp1Y;
			tmp2Y = tmp1Z * rp1X - tmp1X * rp1Z;
			tmp2Z = tmp1X * rp1Y - tmp1Y * rp1X;
			tmp1X = binT2X * this.i2e00 + binT2Y * this.i2e01 + binT2Z * this.i2e02;
			tmp1Y = binT2X * this.i2e10 + binT2Y * this.i2e11 + binT2Z * this.i2e12;
			tmp1Z = binT2X * this.i2e20 + binT2Y * this.i2e21 + binT2Z * this.i2e22;
			tmp2X += tmp1Y * rp2Z - tmp1Z * rp2Y;
			tmp2Y += tmp1Z * rp2X - tmp1X * rp2Z;
			tmp2Z += tmp1X * rp2Y - tmp1Y * rp2X;
			var binDen = 1 / (m1m2 + binX * tmp2X + binY * tmp2Y + binZ * tmp2Z);
			c.norDen = norDen;
			c.tanDen = tanDen;
			c.binDen = binDen;
			if(p.warmStarted) {
				var norImp = p.normalImpulse;
				this.lv1.x += c.norU1X * norImp;
				this.lv1.y += c.norU1Y * norImp;
				this.lv1.z += c.norU1Z * norImp;
				this.av1.x += norTU1X * norImp;
				this.av1.y += norTU1Y * norImp;
				this.av1.z += norTU1Z * norImp;
				this.lv2.x -= c.norU2X * norImp;
				this.lv2.y -= c.norU2Y * norImp;
				this.lv2.z -= c.norU2Z * norImp;
				this.av2.x -= norTU2X * norImp;
				this.av2.y -= norTU2Y * norImp;
				this.av2.z -= norTU2Z * norImp;
				c.norImp = norImp;
				c.tanImp = 0;
				c.binImp = 0;
				rvn = 0;
			} else {
				c.norImp = 0;
				c.tanImp = 0;
				c.binImp = 0;
			}
			if(rvn > -1) rvn = 0;
			var norTar = this.restitution * -rvn;
			var sepV = -(p.penetration + 0.005) * invTimeStep * 0.05;
			if(norTar < sepV) norTar = sepV;
			c.norTar = norTar;
			c.last = i == this.num - 1;
			c = c.next;
		}
	}
	,solve: function() {
		var lv1x = this.lv1.x;
		var lv1y = this.lv1.y;
		var lv1z = this.lv1.z;
		var lv2x = this.lv2.x;
		var lv2y = this.lv2.y;
		var lv2z = this.lv2.z;
		var av1x = this.av1.x;
		var av1y = this.av1.y;
		var av1z = this.av1.z;
		var av2x = this.av2.x;
		var av2y = this.av2.y;
		var av2z = this.av2.z;
		var c = this.cs;
		while(true) {
			var oldImp1;
			var newImp1;
			var oldImp2;
			var newImp2;
			var rvn;
			var norImp = c.norImp;
			var tanImp = c.tanImp;
			var binImp = c.binImp;
			var max = -norImp * this.friction;
			var rvX = lv2x - lv1x;
			var rvY = lv2y - lv1y;
			var rvZ = lv2z - lv1z;
			rvn = rvX * c.tanX + rvY * c.tanY + rvZ * c.tanZ + av2x * c.tanT2X + av2y * c.tanT2Y + av2z * c.tanT2Z - av1x * c.tanT1X - av1y * c.tanT1Y - av1z * c.tanT1Z;
			oldImp1 = tanImp;
			newImp1 = rvn * c.tanDen;
			tanImp += newImp1;
			rvn = rvX * c.binX + rvY * c.binY + rvZ * c.binZ + av2x * c.binT2X + av2y * c.binT2Y + av2z * c.binT2Z - av1x * c.binT1X - av1y * c.binT1Y - av1z * c.binT1Z;
			oldImp2 = binImp;
			newImp2 = rvn * c.binDen;
			binImp += newImp2;
			var len = tanImp * tanImp + binImp * binImp;
			if(len > max * max) {
				len = max / Math.sqrt(len);
				tanImp *= len;
				binImp *= len;
			}
			newImp1 = tanImp - oldImp1;
			newImp2 = binImp - oldImp2;
			lv1x += c.tanU1X * newImp1 + c.binU1X * newImp2;
			lv1y += c.tanU1Y * newImp1 + c.binU1Y * newImp2;
			lv1z += c.tanU1Z * newImp1 + c.binU1Z * newImp2;
			av1x += c.tanTU1X * newImp1 + c.binTU1X * newImp2;
			av1y += c.tanTU1Y * newImp1 + c.binTU1Y * newImp2;
			av1z += c.tanTU1Z * newImp1 + c.binTU1Z * newImp2;
			lv2x -= c.tanU2X * newImp1 + c.binU2X * newImp2;
			lv2y -= c.tanU2Y * newImp1 + c.binU2Y * newImp2;
			lv2z -= c.tanU2Z * newImp1 + c.binU2Z * newImp2;
			av2x -= c.tanTU2X * newImp1 + c.binTU2X * newImp2;
			av2y -= c.tanTU2Y * newImp1 + c.binTU2Y * newImp2;
			av2z -= c.tanTU2Z * newImp1 + c.binTU2Z * newImp2;
			rvn = (lv2x - lv1x) * c.norX + (lv2y - lv1y) * c.norY + (lv2z - lv1z) * c.norZ + av2x * c.norT2X + av2y * c.norT2Y + av2z * c.norT2Z - av1x * c.norT1X - av1y * c.norT1Y - av1z * c.norT1Z;
			oldImp1 = norImp;
			newImp1 = (rvn - c.norTar) * c.norDen;
			norImp += newImp1;
			if(norImp > 0) norImp = 0;
			newImp1 = norImp - oldImp1;
			lv1x += c.norU1X * newImp1;
			lv1y += c.norU1Y * newImp1;
			lv1z += c.norU1Z * newImp1;
			av1x += c.norTU1X * newImp1;
			av1y += c.norTU1Y * newImp1;
			av1z += c.norTU1Z * newImp1;
			lv2x -= c.norU2X * newImp1;
			lv2y -= c.norU2Y * newImp1;
			lv2z -= c.norU2Z * newImp1;
			av2x -= c.norTU2X * newImp1;
			av2y -= c.norTU2Y * newImp1;
			av2z -= c.norTU2Z * newImp1;
			c.norImp = norImp;
			c.tanImp = tanImp;
			c.binImp = binImp;
			if(c.last) break;
			c = c.next;
		}
		this.lv1.x = lv1x;
		this.lv1.y = lv1y;
		this.lv1.z = lv1z;
		this.lv2.x = lv2x;
		this.lv2.y = lv2y;
		this.lv2.z = lv2z;
		this.av1.x = av1x;
		this.av1.y = av1y;
		this.av1.z = av1z;
		this.av2.x = av2x;
		this.av2.y = av2y;
		this.av2.z = av2z;
	}
	,postSolve: function() {
		var c = this.cs;
		var _g1 = 0;
		var _g = this.num;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.ps[i];
			p.normal.x = c.norX;
			p.normal.y = c.norY;
			p.normal.z = c.norZ;
			p.tangent.x = c.tanX;
			p.tangent.y = c.tanY;
			p.tangent.z = c.tanZ;
			p.binormal.x = c.binX;
			p.binormal.y = c.binY;
			p.binormal.z = c.binZ;
			p.normalImpulse = c.norImp;
			p.tangentImpulse = c.tanImp;
			p.binormalImpulse = c.binImp;
			p.normalDenominator = c.norDen;
			p.tangentDenominator = c.tanDen;
			p.binormalDenominator = c.binDen;
			c = c.next;
		}
	}
	,__class__: oimohx_physics_constraint_contact_ContactConstraint
});
var oimohx_physics_constraint_contact_ContactLink = function(contact) {
	this.contact = contact;
};
$hxClasses["oimohx.physics.constraint.contact.ContactLink"] = oimohx_physics_constraint_contact_ContactLink;
oimohx_physics_constraint_contact_ContactLink.__name__ = ["oimohx","physics","constraint","contact","ContactLink"];
oimohx_physics_constraint_contact_ContactLink.prototype = {
	prev: null
	,next: null
	,shape: null
	,body: null
	,contact: null
	,__class__: oimohx_physics_constraint_contact_ContactLink
};
var oimohx_physics_constraint_contact_ContactManifold = function() {
	this.points = [];
	this.points[0] = new oimohx_physics_constraint_contact_ManifoldPoint();
	this.points[1] = new oimohx_physics_constraint_contact_ManifoldPoint();
	this.points[2] = new oimohx_physics_constraint_contact_ManifoldPoint();
	this.points[3] = new oimohx_physics_constraint_contact_ManifoldPoint();
};
$hxClasses["oimohx.physics.constraint.contact.ContactManifold"] = oimohx_physics_constraint_contact_ContactManifold;
oimohx_physics_constraint_contact_ContactManifold.__name__ = ["oimohx","physics","constraint","contact","ContactManifold"];
oimohx_physics_constraint_contact_ContactManifold.prototype = {
	body1: null
	,body2: null
	,points: null
	,numPoints: null
	,reset: function(shape1,shape2) {
		this.body1 = shape1.parent;
		this.body2 = shape2.parent;
		this.numPoints = 0;
	}
	,addPoint: function(x,y,z,normalX,normalY,normalZ,penetration,flip) {
		var p = this.points[this.numPoints++];
		p.position.x = x;
		p.position.y = y;
		p.position.z = z;
		var r = this.body1.rotation;
		var rx = x - this.body1.position.x;
		var ry = y - this.body1.position.y;
		var rz = z - this.body1.position.z;
		p.localPoint1.x = rx * r.elements[0] + ry * r.elements[1] + rz * r.elements[2];
		p.localPoint1.y = rx * r.elements[3] + ry * r.elements[4] + rz * r.elements[5];
		p.localPoint1.z = rx * r.elements[6] + ry * r.elements[7] + rz * r.elements[8];
		r = this.body2.rotation;
		rx = x - this.body2.position.x;
		ry = y - this.body2.position.y;
		rz = z - this.body2.position.z;
		p.localPoint2.x = rx * r.elements[0] + ry * r.elements[1] + rz * r.elements[2];
		p.localPoint2.y = rx * r.elements[3] + ry * r.elements[4] + rz * r.elements[5];
		p.localPoint2.z = rx * r.elements[6] + ry * r.elements[7] + rz * r.elements[8];
		p.normalImpulse = 0;
		if(flip) {
			p.normal.x = -normalX;
			p.normal.y = -normalY;
			p.normal.z = -normalZ;
		} else {
			p.normal.x = normalX;
			p.normal.y = normalY;
			p.normal.z = normalZ;
		}
		p.penetration = penetration;
		p.warmStarted = false;
	}
	,__class__: oimohx_physics_constraint_contact_ContactManifold
};
var oimohx_physics_constraint_contact_ContactPointDataBuffer = function() {
};
$hxClasses["oimohx.physics.constraint.contact.ContactPointDataBuffer"] = oimohx_physics_constraint_contact_ContactPointDataBuffer;
oimohx_physics_constraint_contact_ContactPointDataBuffer.__name__ = ["oimohx","physics","constraint","contact","ContactPointDataBuffer"];
oimohx_physics_constraint_contact_ContactPointDataBuffer.prototype = {
	norX: null
	,norY: null
	,norZ: null
	,tanX: null
	,tanY: null
	,tanZ: null
	,binX: null
	,binY: null
	,binZ: null
	,rp1X: null
	,rp1Y: null
	,rp1Z: null
	,rp2X: null
	,rp2Y: null
	,rp2Z: null
	,norU1X: null
	,norU1Y: null
	,norU1Z: null
	,norU2X: null
	,norU2Y: null
	,norU2Z: null
	,tanU1X: null
	,tanU1Y: null
	,tanU1Z: null
	,tanU2X: null
	,tanU2Y: null
	,tanU2Z: null
	,binU1X: null
	,binU1Y: null
	,binU1Z: null
	,binU2X: null
	,binU2Y: null
	,binU2Z: null
	,norT1X: null
	,norT1Y: null
	,norT1Z: null
	,norT2X: null
	,norT2Y: null
	,norT2Z: null
	,tanT1X: null
	,tanT1Y: null
	,tanT1Z: null
	,tanT2X: null
	,tanT2Y: null
	,tanT2Z: null
	,binT1X: null
	,binT1Y: null
	,binT1Z: null
	,binT2X: null
	,binT2Y: null
	,binT2Z: null
	,norTU1X: null
	,norTU1Y: null
	,norTU1Z: null
	,norTU2X: null
	,norTU2Y: null
	,norTU2Z: null
	,tanTU1X: null
	,tanTU1Y: null
	,tanTU1Z: null
	,tanTU2X: null
	,tanTU2Y: null
	,tanTU2Z: null
	,binTU1X: null
	,binTU1Y: null
	,binTU1Z: null
	,binTU2X: null
	,binTU2Y: null
	,binTU2Z: null
	,norImp: null
	,tanImp: null
	,binImp: null
	,norDen: null
	,tanDen: null
	,binDen: null
	,norTar: null
	,next: null
	,last: null
	,__class__: oimohx_physics_constraint_contact_ContactPointDataBuffer
};
var oimohx_physics_constraint_contact_ImpulseDataBuffer = function() {
};
$hxClasses["oimohx.physics.constraint.contact.ImpulseDataBuffer"] = oimohx_physics_constraint_contact_ImpulseDataBuffer;
oimohx_physics_constraint_contact_ImpulseDataBuffer.__name__ = ["oimohx","physics","constraint","contact","ImpulseDataBuffer"];
oimohx_physics_constraint_contact_ImpulseDataBuffer.prototype = {
	lp1X: null
	,lp1Y: null
	,lp1Z: null
	,lp2X: null
	,lp2Y: null
	,lp2Z: null
	,impulse: null
	,__class__: oimohx_physics_constraint_contact_ImpulseDataBuffer
};
var oimohx_physics_constraint_contact_ManifoldPoint = function() {
	this.position = new oimohx_math_Vec3();
	this.localPoint1 = new oimohx_math_Vec3();
	this.localPoint2 = new oimohx_math_Vec3();
	this.normal = new oimohx_math_Vec3();
	this.tangent = new oimohx_math_Vec3();
	this.binormal = new oimohx_math_Vec3();
	this.normalImpulse = 0;
	this.tangentImpulse = 0;
	this.binormalImpulse = 0;
	this.normalDenominator = 0;
	this.tangentDenominator = 0;
	this.binormalDenominator = 0;
	this.penetration = 0;
};
$hxClasses["oimohx.physics.constraint.contact.ManifoldPoint"] = oimohx_physics_constraint_contact_ManifoldPoint;
oimohx_physics_constraint_contact_ManifoldPoint.__name__ = ["oimohx","physics","constraint","contact","ManifoldPoint"];
oimohx_physics_constraint_contact_ManifoldPoint.prototype = {
	position: null
	,localPoint1: null
	,localPoint2: null
	,normal: null
	,tangent: null
	,binormal: null
	,normalImpulse: null
	,tangentImpulse: null
	,binormalImpulse: null
	,normalDenominator: null
	,tangentDenominator: null
	,binormalDenominator: null
	,warmStarted: null
	,penetration: null
	,__class__: oimohx_physics_constraint_contact_ManifoldPoint
};
var oimohx_physics_constraint_joint_Joint = function(config) {
	oimohx_physics_constraint_Constraint.call(this);
	this.body1 = config.body1;
	this.body2 = config.body2;
	this.localAnchorPoint1 = new oimohx_math_Vec3().copy(config.localAnchorPoint1);
	this.localAnchorPoint2 = new oimohx_math_Vec3().copy(config.localAnchorPoint2);
	this.relativeAnchorPoint1 = new oimohx_math_Vec3();
	this.relativeAnchorPoint2 = new oimohx_math_Vec3();
	this.anchorPoint1 = new oimohx_math_Vec3();
	this.anchorPoint2 = new oimohx_math_Vec3();
	this.allowCollision = config.allowCollision;
	this.b1Link = new oimohx_physics_constraint_joint_JointLink(this);
	this.b2Link = new oimohx_physics_constraint_joint_JointLink(this);
};
$hxClasses["oimohx.physics.constraint.joint.Joint"] = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_Joint.__name__ = ["oimohx","physics","constraint","joint","Joint"];
oimohx_physics_constraint_joint_Joint.__super__ = oimohx_physics_constraint_Constraint;
oimohx_physics_constraint_joint_Joint.prototype = $extend(oimohx_physics_constraint_Constraint.prototype,{
	b1Link: null
	,b2Link: null
	,type: null
	,allowCollision: null
	,localAnchorPoint1: null
	,localAnchorPoint2: null
	,relativeAnchorPoint1: null
	,relativeAnchorPoint2: null
	,anchorPoint1: null
	,anchorPoint2: null
	,prev: null
	,next: null
	,updateAnchorPoints: function() {
		var p1 = this.body1.position;
		var p2 = this.body2.position;
		var r1 = this.body1.rotation;
		var r2 = this.body2.rotation;
		var l1x = this.localAnchorPoint1.x;
		var l1y = this.localAnchorPoint1.y;
		var l1z = this.localAnchorPoint1.z;
		var l2x = this.localAnchorPoint2.x;
		var l2y = this.localAnchorPoint2.y;
		var l2z = this.localAnchorPoint2.z;
		var r1x = l1x * r1.elements[0] + l1y * r1.elements[1] + l1z * r1.elements[2];
		var r1y = l1x * r1.elements[3] + l1y * r1.elements[4] + l1z * r1.elements[5];
		var r1z = l1x * r1.elements[6] + l1y * r1.elements[7] + l1z * r1.elements[8];
		var r2x = l2x * r2.elements[0] + l2y * r2.elements[1] + l2z * r2.elements[2];
		var r2y = l2x * r2.elements[3] + l2y * r2.elements[4] + l2z * r2.elements[5];
		var r2z = l2x * r2.elements[6] + l2y * r2.elements[7] + l2z * r2.elements[8];
		this.relativeAnchorPoint1.x = r1x;
		this.relativeAnchorPoint1.y = r1y;
		this.relativeAnchorPoint1.z = r1z;
		this.relativeAnchorPoint2.x = r2x;
		this.relativeAnchorPoint2.y = r2y;
		this.relativeAnchorPoint2.z = r2z;
		var p1x = r1x + p1.x;
		var p1y = r1y + p1.y;
		var p1z = r1z + p1.z;
		var p2x = r2x + p2.x;
		var p2y = r2y + p2.y;
		var p2z = r2z + p2.z;
		this.anchorPoint1.x = p1x;
		this.anchorPoint1.y = p1y;
		this.anchorPoint1.z = p1z;
		this.anchorPoint2.x = p2x;
		this.anchorPoint2.y = p2y;
		this.anchorPoint2.z = p2z;
	}
	,attach: function() {
		this.b1Link.body = this.body2;
		this.b2Link.body = this.body1;
		if(this.body1.jointLink != null) (this.b1Link.next = this.body1.jointLink).prev = this.b1Link; else this.b1Link.next = null;
		this.body1.jointLink = this.b1Link;
		this.body1.numJoints++;
		if(this.body2.jointLink != null) (this.b2Link.next = this.body2.jointLink).prev = this.b2Link; else this.b2Link.next = null;
		this.body2.jointLink = this.b2Link;
		this.body2.numJoints++;
	}
	,detach: function() {
		var prev = this.b1Link.prev;
		var next = this.b1Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.body1.jointLink == this.b1Link) this.body1.jointLink = next;
		this.b1Link.prev = null;
		this.b1Link.next = null;
		this.b1Link.body = null;
		this.body1.numJoints--;
		prev = this.b2Link.prev;
		next = this.b2Link.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.body2.jointLink == this.b2Link) this.body2.jointLink = next;
		this.b2Link.prev = null;
		this.b2Link.next = null;
		this.b2Link.body = null;
		this.body2.numJoints--;
		this.b1Link.body = null;
		this.b2Link.body = null;
	}
	,awake: function() {
		this.body1.awake();
		this.body2.awake();
	}
	,preSolve: function(timeStep,invTimeStep) {
		oimohx_physics_constraint_Constraint.prototype.preSolve.call(this,timeStep,invTimeStep);
	}
	,solve: function() {
		oimohx_physics_constraint_Constraint.prototype.solve.call(this);
	}
	,postSolve: function() {
		oimohx_physics_constraint_Constraint.prototype.postSolve.call(this);
	}
	,__class__: oimohx_physics_constraint_joint_Joint
});
var oimohx_physics_constraint_joint_BallAndSocketJoint = function(config) {
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.type = 2;
	this.lc = new oimohx_physics_constraint_joint_base_LinearConstraint(this);
};
$hxClasses["oimohx.physics.constraint.joint.BallAndSocketJoint"] = oimohx_physics_constraint_joint_BallAndSocketJoint;
oimohx_physics_constraint_joint_BallAndSocketJoint.__name__ = ["oimohx","physics","constraint","joint","BallAndSocketJoint"];
oimohx_physics_constraint_joint_BallAndSocketJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_BallAndSocketJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	lc: null
	,preSolve: function(timeStep,invTimeStep) {
		this.updateAnchorPoints();
		this.lc.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.lc.solve();
	}
	,postSolve: function() {
	}
	,__class__: oimohx_physics_constraint_joint_BallAndSocketJoint
});
var oimohx_physics_constraint_joint_DistanceJoint = function(config,minDistance,maxDistance) {
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.type = 1;
	this.normal = new oimohx_math_Vec3();
	this.limitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.normal,true);
	this.limitMotor.lowerLimit = minDistance;
	this.limitMotor.upperLimit = maxDistance;
	this.t = new oimohx_physics_constraint_joint_base_TranslationalConstraint(this,this.limitMotor);
};
$hxClasses["oimohx.physics.constraint.joint.DistanceJoint"] = oimohx_physics_constraint_joint_DistanceJoint;
oimohx_physics_constraint_joint_DistanceJoint.__name__ = ["oimohx","physics","constraint","joint","DistanceJoint"];
oimohx_physics_constraint_joint_DistanceJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_DistanceJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	limitMotor: null
	,t: null
	,normal: null
	,preSolve: function(timeStep,invTimeStep) {
		this.updateAnchorPoints();
		var nx = this.anchorPoint2.x - this.anchorPoint1.x;
		var ny = this.anchorPoint2.y - this.anchorPoint1.y;
		var nz = this.anchorPoint2.z - this.anchorPoint1.z;
		var len = Math.sqrt(nx * nx + ny * ny + nz * nz);
		if(len > 0) len = 1 / len;
		this.normal.init(nx * len,ny * len,nz * len);
		this.t.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.t.solve();
	}
	,postSolve: function() {
	}
	,__class__: oimohx_physics_constraint_joint_DistanceJoint
});
var oimohx_physics_constraint_joint_HingeJoint = function(config,lowerAngleLimit,upperAngleLimit) {
	if(upperAngleLimit == null) upperAngleLimit = 0;
	if(lowerAngleLimit == null) lowerAngleLimit = 1;
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.localAxis1 = new oimohx_math_Vec3().normalize(config.localAxis1);
	this.localAxis2 = new oimohx_math_Vec3().normalize(config.localAxis2);
	var len;
	this.localAxis1X = this.localAxis1.x;
	this.localAxis1Y = this.localAxis1.y;
	this.localAxis1Z = this.localAxis1.z;
	this.localAngAxis1X = this.localAxis1Y * this.localAxis1X - this.localAxis1Z * this.localAxis1Z;
	this.localAngAxis1Y = -this.localAxis1Z * this.localAxis1Y - this.localAxis1X * this.localAxis1X;
	this.localAngAxis1Z = this.localAxis1X * this.localAxis1Z + this.localAxis1Y * this.localAxis1Y;
	len = 1 / Math.sqrt(this.localAngAxis1X * this.localAngAxis1X + this.localAngAxis1Y * this.localAngAxis1Y + this.localAngAxis1Z * this.localAngAxis1Z);
	this.localAngAxis1X *= len;
	this.localAngAxis1Y *= len;
	this.localAngAxis1Z *= len;
	this.localAxis2X = this.localAxis2.x;
	this.localAxis2Y = this.localAxis2.y;
	this.localAxis2Z = this.localAxis2.z;
	var arc = new oimohx_math_Mat33().setQuat(new oimohx_math_Quat().arc(this.localAxis1,this.localAxis2));
	this.localAngAxis2X = this.localAngAxis1X * arc.elements[0] + this.localAngAxis1Y * arc.elements[1] + this.localAngAxis1Z * arc.elements[2];
	this.localAngAxis2Y = this.localAngAxis1X * arc.elements[3] + this.localAngAxis1Y * arc.elements[4] + this.localAngAxis1Z * arc.elements[5];
	this.localAngAxis2Z = this.localAngAxis1X * arc.elements[6] + this.localAngAxis1Y * arc.elements[7] + this.localAngAxis1Z * arc.elements[7];
	this.type = 3;
	this.nor = new oimohx_math_Vec3();
	this.tan = new oimohx_math_Vec3();
	this.bin = new oimohx_math_Vec3();
	this.limitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.nor,false);
	this.limitMotor.lowerLimit = lowerAngleLimit;
	this.limitMotor.upperLimit = upperAngleLimit;
	this.lc = new oimohx_physics_constraint_joint_base_LinearConstraint(this);
	this.r3 = new oimohx_physics_constraint_joint_base_Rotational3Constraint(this,this.limitMotor,new oimohx_physics_constraint_joint_LimitMotor(this.tan,true),new oimohx_physics_constraint_joint_LimitMotor(this.bin,true));
};
$hxClasses["oimohx.physics.constraint.joint.HingeJoint"] = oimohx_physics_constraint_joint_HingeJoint;
oimohx_physics_constraint_joint_HingeJoint.__name__ = ["oimohx","physics","constraint","joint","HingeJoint"];
oimohx_physics_constraint_joint_HingeJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_HingeJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	localAxis1: null
	,localAxis2: null
	,limitMotor: null
	,localAxis1X: null
	,localAxis1Y: null
	,localAxis1Z: null
	,localAxis2X: null
	,localAxis2Y: null
	,localAxis2Z: null
	,localAngAxis1X: null
	,localAngAxis1Y: null
	,localAngAxis1Z: null
	,localAngAxis2X: null
	,localAngAxis2Y: null
	,localAngAxis2Z: null
	,lc: null
	,r3: null
	,nor: null
	,tan: null
	,bin: null
	,preSolve: function(timeStep,invTimeStep) {
		var tmpM;
		var tmp1X;
		var tmp1Y;
		var tmp1Z;
		this.updateAnchorPoints();
		tmpM = this.body1.rotation;
		var axis1X = this.localAxis1X * tmpM.elements[0] + this.localAxis1Y * tmpM.elements[1] + this.localAxis1Z * tmpM.elements[2];
		var axis1Y = this.localAxis1X * tmpM.elements[3] + this.localAxis1Y * tmpM.elements[4] + this.localAxis1Z * tmpM.elements[5];
		var axis1Z = this.localAxis1X * tmpM.elements[6] + this.localAxis1Y * tmpM.elements[7] + this.localAxis1Z * tmpM.elements[8];
		var angAxis1X = this.localAngAxis1X * tmpM.elements[0] + this.localAngAxis1Y * tmpM.elements[1] + this.localAngAxis1Z * tmpM.elements[2];
		var angAxis1Y = this.localAngAxis1X * tmpM.elements[3] + this.localAngAxis1Y * tmpM.elements[4] + this.localAngAxis1Z * tmpM.elements[5];
		var angAxis1Z = this.localAngAxis1X * tmpM.elements[6] + this.localAngAxis1Y * tmpM.elements[7] + this.localAngAxis1Z * tmpM.elements[8];
		tmpM = this.body2.rotation;
		var axis2X = this.localAxis2X * tmpM.elements[0] + this.localAxis2Y * tmpM.elements[1] + this.localAxis2Z * tmpM.elements[2];
		var axis2Y = this.localAxis2X * tmpM.elements[3] + this.localAxis2Y * tmpM.elements[4] + this.localAxis2Z * tmpM.elements[5];
		var axis2Z = this.localAxis2X * tmpM.elements[6] + this.localAxis2Y * tmpM.elements[7] + this.localAxis2Z * tmpM.elements[8];
		var angAxis2X = this.localAngAxis2X * tmpM.elements[0] + this.localAngAxis2Y * tmpM.elements[1] + this.localAngAxis2Z * tmpM.elements[2];
		var angAxis2Y = this.localAngAxis2X * tmpM.elements[3] + this.localAngAxis2Y * tmpM.elements[4] + this.localAngAxis2Z * tmpM.elements[5];
		var angAxis2Z = this.localAngAxis2X * tmpM.elements[6] + this.localAngAxis2Y * tmpM.elements[7] + this.localAngAxis2Z * tmpM.elements[8];
		var nx = axis1X * this.body2.inverseMass + axis2X * this.body1.inverseMass;
		var ny = axis1Y * this.body2.inverseMass + axis2Y * this.body1.inverseMass;
		var nz = axis1Z * this.body2.inverseMass + axis2Z * this.body1.inverseMass;
		tmp1X = Math.sqrt(nx * nx + ny * ny + nz * nz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		nx *= tmp1X;
		ny *= tmp1X;
		nz *= tmp1X;
		var tx = ny * nx - nz * nz;
		var ty = -nz * ny - nx * nx;
		var tz = nx * nz + ny * ny;
		tmp1X = 1 / Math.sqrt(tx * tx + ty * ty + tz * tz);
		tx *= tmp1X;
		ty *= tmp1X;
		tz *= tmp1X;
		var bx = ny * tz - nz * ty;
		var by = nz * tx - nx * tz;
		var bz = nx * ty - ny * tx;
		this.nor.init(nx,ny,nz);
		this.tan.init(tx,ty,tz);
		this.bin.init(bx,by,bz);
		if(nx * (angAxis1Y * angAxis2Z - angAxis1Z * angAxis2Y) + ny * (angAxis1Z * angAxis2X - angAxis1X * angAxis2Z) + nz * (angAxis1X * angAxis2Y - angAxis1Y * angAxis2X) < 0) this.limitMotor.angle = -this.acosClamp(angAxis1X * angAxis2X + angAxis1Y * angAxis2Y + angAxis1Z * angAxis2Z); else this.limitMotor.angle = this.acosClamp(angAxis1X * angAxis2X + angAxis1Y * angAxis2Y + angAxis1Z * angAxis2Z);
		tmp1X = axis1Y * axis2Z - axis1Z * axis2Y;
		tmp1Y = axis1Z * axis2X - axis1X * axis2Z;
		tmp1Z = axis1X * axis2Y - axis1Y * axis2X;
		this.r3.limitMotor2.angle = tx * tmp1X + ty * tmp1Y + tz * tmp1Z;
		this.r3.limitMotor3.angle = bx * tmp1X + by * tmp1Y + bz * tmp1Z;
		this.r3.preSolve(timeStep,invTimeStep);
		this.lc.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.r3.solve();
		this.lc.solve();
	}
	,postSolve: function() {
	}
	,acosClamp: function(cos) {
		if(cos > 1) return 0; else if(cos < -1) return Math.PI; else return Math.acos(cos);
	}
	,__class__: oimohx_physics_constraint_joint_HingeJoint
});
var oimohx_physics_constraint_joint_JointConfig = function() {
	this.localAnchorPoint1 = new oimohx_math_Vec3();
	this.localAnchorPoint2 = new oimohx_math_Vec3();
	this.localAxis1 = new oimohx_math_Vec3();
	this.localAxis2 = new oimohx_math_Vec3();
	this.allowCollision = false;
};
$hxClasses["oimohx.physics.constraint.joint.JointConfig"] = oimohx_physics_constraint_joint_JointConfig;
oimohx_physics_constraint_joint_JointConfig.__name__ = ["oimohx","physics","constraint","joint","JointConfig"];
oimohx_physics_constraint_joint_JointConfig.prototype = {
	body1: null
	,body2: null
	,localAnchorPoint1: null
	,localAnchorPoint2: null
	,localAxis1: null
	,localAxis2: null
	,allowCollision: null
	,__class__: oimohx_physics_constraint_joint_JointConfig
};
var oimohx_physics_constraint_joint_JointLink = function(joint) {
	this.joint = joint;
};
$hxClasses["oimohx.physics.constraint.joint.JointLink"] = oimohx_physics_constraint_joint_JointLink;
oimohx_physics_constraint_joint_JointLink.__name__ = ["oimohx","physics","constraint","joint","JointLink"];
oimohx_physics_constraint_joint_JointLink.prototype = {
	prev: null
	,next: null
	,body: null
	,joint: null
	,__class__: oimohx_physics_constraint_joint_JointLink
};
var oimohx_physics_constraint_joint_LimitMotor = function(axis,fixed) {
	this.axis = axis;
	this.angle = 0;
	if(fixed) this.lowerLimit = 0; else this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorSpeed = 0;
	this.maxMotorForce = 0;
	this.frequency = 0;
	this.dampingRatio = 0;
};
$hxClasses["oimohx.physics.constraint.joint.LimitMotor"] = oimohx_physics_constraint_joint_LimitMotor;
oimohx_physics_constraint_joint_LimitMotor.__name__ = ["oimohx","physics","constraint","joint","LimitMotor"];
oimohx_physics_constraint_joint_LimitMotor.prototype = {
	angle: null
	,axis: null
	,lowerLimit: null
	,upperLimit: null
	,motorSpeed: null
	,maxMotorForce: null
	,frequency: null
	,dampingRatio: null
	,setLimit: function(lowerLimit,upperLimit) {
		this.lowerLimit = lowerLimit;
		this.upperLimit = upperLimit;
	}
	,setMotor: function(motorSpeed,maxMotorForce) {
		this.motorSpeed = motorSpeed;
		this.maxMotorForce = maxMotorForce;
	}
	,setSpring: function(frequency,dampingRatio) {
		this.frequency = frequency;
		this.dampingRatio = dampingRatio;
	}
	,__class__: oimohx_physics_constraint_joint_LimitMotor
};
var oimohx_physics_constraint_joint_PrismaticJoint = function(config,lowerTranslation,upperTranslation) {
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.localAxis1 = new oimohx_math_Vec3().normalize(config.localAxis1);
	this.localAxis2 = new oimohx_math_Vec3().normalize(config.localAxis2);
	this.localAxis1X = this.localAxis1.x;
	this.localAxis1Y = this.localAxis1.y;
	this.localAxis1Z = this.localAxis1.z;
	this.localAxis2X = this.localAxis2.x;
	this.localAxis2Y = this.localAxis2.y;
	this.localAxis2Z = this.localAxis2.z;
	this.type = 6;
	this.nor = new oimohx_math_Vec3();
	this.tan = new oimohx_math_Vec3();
	this.bin = new oimohx_math_Vec3();
	this.ac = new oimohx_physics_constraint_joint_base_AngularConstraint(this,new oimohx_math_Quat().arc(this.localAxis1,this.localAxis2));
	this.limitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.nor,true);
	this.limitMotor.lowerLimit = lowerTranslation;
	this.limitMotor.upperLimit = upperTranslation;
	this.t3 = new oimohx_physics_constraint_joint_base_Translational3Constraint(this,this.limitMotor,new oimohx_physics_constraint_joint_LimitMotor(this.tan,true),new oimohx_physics_constraint_joint_LimitMotor(this.bin,true));
};
$hxClasses["oimohx.physics.constraint.joint.PrismaticJoint"] = oimohx_physics_constraint_joint_PrismaticJoint;
oimohx_physics_constraint_joint_PrismaticJoint.__name__ = ["oimohx","physics","constraint","joint","PrismaticJoint"];
oimohx_physics_constraint_joint_PrismaticJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_PrismaticJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	localAxis1: null
	,localAxis2: null
	,limitMotor: null
	,localAxis1X: null
	,localAxis1Y: null
	,localAxis1Z: null
	,localAxis2X: null
	,localAxis2Y: null
	,localAxis2Z: null
	,t3: null
	,ac: null
	,nor: null
	,tan: null
	,bin: null
	,preSolve: function(timeStep,invTimeStep) {
		var tmpM;
		var tmp1X;
		var tmp1Y;
		var tmp1Z;
		this.updateAnchorPoints();
		tmpM = this.body1.rotation;
		var axis1X = this.localAxis1X * tmpM.elements[0] + this.localAxis1Y * tmpM.elements[1] + this.localAxis1Z * tmpM.elements[2];
		var axis1Y = this.localAxis1X * tmpM.elements[3] + this.localAxis1Y * tmpM.elements[4] + this.localAxis1Z * tmpM.elements[5];
		var axis1Z = this.localAxis1X * tmpM.elements[6] + this.localAxis1Y * tmpM.elements[7] + this.localAxis1Z * tmpM.elements[8];
		tmpM = this.body2.rotation;
		var axis2X = this.localAxis2X * tmpM.elements[0] + this.localAxis2Y * tmpM.elements[1] + this.localAxis2Z * tmpM.elements[2];
		var axis2Y = this.localAxis2X * tmpM.elements[3] + this.localAxis2Y * tmpM.elements[4] + this.localAxis2Z * tmpM.elements[5];
		var axis2Z = this.localAxis2X * tmpM.elements[6] + this.localAxis2Y * tmpM.elements[7] + this.localAxis2Z * tmpM.elements[8];
		var nx = axis1X * this.body2.inverseMass + axis2X * this.body1.inverseMass;
		var ny = axis1Y * this.body2.inverseMass + axis2Y * this.body1.inverseMass;
		var nz = axis1Z * this.body2.inverseMass + axis2Z * this.body1.inverseMass;
		tmp1X = Math.sqrt(nx * nx + ny * ny + nz * nz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		nx *= tmp1X;
		ny *= tmp1X;
		nz *= tmp1X;
		var tx = ny * nx - nz * nz;
		var ty = -nz * ny - nx * nx;
		var tz = nx * nz + ny * ny;
		tmp1X = 1 / Math.sqrt(tx * tx + ty * ty + tz * tz);
		tx *= tmp1X;
		ty *= tmp1X;
		tz *= tmp1X;
		var bx = ny * tz - nz * ty;
		var by = nz * tx - nx * tz;
		var bz = nx * ty - ny * tx;
		this.nor.init(nx,ny,nz);
		this.tan.init(tx,ty,tz);
		this.bin.init(bx,by,bz);
		this.ac.preSolve(timeStep,invTimeStep);
		this.t3.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.ac.solve();
		this.t3.solve();
	}
	,postSolve: function() {
	}
	,__class__: oimohx_physics_constraint_joint_PrismaticJoint
});
var oimohx_physics_constraint_joint_SliderJoint = function(config,lowerTranslation,upperTranslation) {
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.localAxis1 = new oimohx_math_Vec3().normalize(config.localAxis1);
	this.localAxis2 = new oimohx_math_Vec3().normalize(config.localAxis2);
	var len;
	this.localAxis1X = this.localAxis1.x;
	this.localAxis1Y = this.localAxis1.y;
	this.localAxis1Z = this.localAxis1.z;
	this.localAngAxis1X = this.localAxis1Y * this.localAxis1X - this.localAxis1Z * this.localAxis1Z;
	this.localAngAxis1Y = -this.localAxis1Z * this.localAxis1Y - this.localAxis1X * this.localAxis1X;
	this.localAngAxis1Z = this.localAxis1X * this.localAxis1Z + this.localAxis1Y * this.localAxis1Y;
	len = 1 / Math.sqrt(this.localAngAxis1X * this.localAngAxis1X + this.localAngAxis1Y * this.localAngAxis1Y + this.localAngAxis1Z * this.localAngAxis1Z);
	this.localAngAxis1X *= len;
	this.localAngAxis1Y *= len;
	this.localAngAxis1Z *= len;
	this.localAxis2X = this.localAxis2.x;
	this.localAxis2Y = this.localAxis2.y;
	this.localAxis2Z = this.localAxis2.z;
	var arc = new oimohx_math_Mat33().setQuat(new oimohx_math_Quat().arc(this.localAxis1,this.localAxis2));
	this.localAngAxis2X = this.localAngAxis1X * arc.elements[0] + this.localAngAxis1Y * arc.elements[1] + this.localAngAxis1Z * arc.elements[2];
	this.localAngAxis2Y = this.localAngAxis1X * arc.elements[3] + this.localAngAxis1Y * arc.elements[4] + this.localAngAxis1Z * arc.elements[5];
	this.localAngAxis2Z = this.localAngAxis1X * arc.elements[6] + this.localAngAxis1Y * arc.elements[7] + this.localAngAxis1Z * arc.elements[8];
	this.type = 5;
	this.nor = new oimohx_math_Vec3();
	this.tan = new oimohx_math_Vec3();
	this.bin = new oimohx_math_Vec3();
	this.rotationalLimitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.nor,false);
	this.r3 = new oimohx_physics_constraint_joint_base_Rotational3Constraint(this,this.rotationalLimitMotor,new oimohx_physics_constraint_joint_LimitMotor(this.tan,true),new oimohx_physics_constraint_joint_LimitMotor(this.bin,true));
	this.translationalLimitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.nor,true);
	this.translationalLimitMotor.lowerLimit = lowerTranslation;
	this.translationalLimitMotor.upperLimit = upperTranslation;
	this.t3 = new oimohx_physics_constraint_joint_base_Translational3Constraint(this,this.translationalLimitMotor,new oimohx_physics_constraint_joint_LimitMotor(this.tan,true),new oimohx_physics_constraint_joint_LimitMotor(this.bin,true));
};
$hxClasses["oimohx.physics.constraint.joint.SliderJoint"] = oimohx_physics_constraint_joint_SliderJoint;
oimohx_physics_constraint_joint_SliderJoint.__name__ = ["oimohx","physics","constraint","joint","SliderJoint"];
oimohx_physics_constraint_joint_SliderJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_SliderJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	localAxis1: null
	,localAxis2: null
	,rotationalLimitMotor: null
	,translationalLimitMotor: null
	,localAxis1X: null
	,localAxis1Y: null
	,localAxis1Z: null
	,localAxis2X: null
	,localAxis2Y: null
	,localAxis2Z: null
	,localAngAxis1X: null
	,localAngAxis1Y: null
	,localAngAxis1Z: null
	,localAngAxis2X: null
	,localAngAxis2Y: null
	,localAngAxis2Z: null
	,t3: null
	,r3: null
	,nor: null
	,tan: null
	,bin: null
	,preSolve: function(timeStep,invTimeStep) {
		var tmpM;
		var tmp1X;
		var tmp1Y;
		var tmp1Z;
		this.updateAnchorPoints();
		tmpM = this.body1.rotation;
		var axis1X = this.localAxis1X * tmpM.elements[0] + this.localAxis1Y * tmpM.elements[1] + this.localAxis1Z * tmpM.elements[2];
		var axis1Y = this.localAxis1X * tmpM.elements[3] + this.localAxis1Y * tmpM.elements[4] + this.localAxis1Z * tmpM.elements[5];
		var axis1Z = this.localAxis1X * tmpM.elements[6] + this.localAxis1Y * tmpM.elements[7] + this.localAxis1Z * tmpM.elements[8];
		var angAxis1X = this.localAngAxis1X * tmpM.elements[0] + this.localAngAxis1Y * tmpM.elements[1] + this.localAngAxis1Z * tmpM.elements[2];
		var angAxis1Y = this.localAngAxis1X * tmpM.elements[3] + this.localAngAxis1Y * tmpM.elements[4] + this.localAngAxis1Z * tmpM.elements[5];
		var angAxis1Z = this.localAngAxis1X * tmpM.elements[6] + this.localAngAxis1Y * tmpM.elements[7] + this.localAngAxis1Z * tmpM.elements[8];
		tmpM = this.body2.rotation;
		var axis2X = this.localAxis2X * tmpM.elements[0] + this.localAxis2Y * tmpM.elements[1] + this.localAxis2Z * tmpM.elements[2];
		var axis2Y = this.localAxis2X * tmpM.elements[3] + this.localAxis2Y * tmpM.elements[4] + this.localAxis2Z * tmpM.elements[5];
		var axis2Z = this.localAxis2X * tmpM.elements[6] + this.localAxis2Y * tmpM.elements[7] + this.localAxis2Z * tmpM.elements[8];
		var angAxis2X = this.localAngAxis2X * tmpM.elements[0] + this.localAngAxis2Y * tmpM.elements[1] + this.localAngAxis2Z * tmpM.elements[2];
		var angAxis2Y = this.localAngAxis2X * tmpM.elements[3] + this.localAngAxis2Y * tmpM.elements[4] + this.localAngAxis2Z * tmpM.elements[5];
		var angAxis2Z = this.localAngAxis2X * tmpM.elements[6] + this.localAngAxis2Y * tmpM.elements[7] + this.localAngAxis2Z * tmpM.elements[8];
		var nx = axis1X * this.body2.inverseMass + axis2X * this.body1.inverseMass;
		var ny = axis1Y * this.body2.inverseMass + axis2Y * this.body1.inverseMass;
		var nz = axis1Z * this.body2.inverseMass + axis2Z * this.body1.inverseMass;
		tmp1X = Math.sqrt(nx * nx + ny * ny + nz * nz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		nx *= tmp1X;
		ny *= tmp1X;
		nz *= tmp1X;
		var tx = ny * nx - nz * nz;
		var ty = -nz * ny - nx * nx;
		var tz = nx * nz + ny * ny;
		tmp1X = 1 / Math.sqrt(tx * tx + ty * ty + tz * tz);
		tx *= tmp1X;
		ty *= tmp1X;
		tz *= tmp1X;
		var bx = ny * tz - nz * ty;
		var by = nz * tx - nx * tz;
		var bz = nx * ty - ny * tx;
		this.nor.init(nx,ny,nz);
		this.tan.init(tx,ty,tz);
		this.bin.init(bx,by,bz);
		if(nx * (angAxis1Y * angAxis2Z - angAxis1Z * angAxis2Y) + ny * (angAxis1Z * angAxis2X - angAxis1X * angAxis2Z) + nz * (angAxis1X * angAxis2Y - angAxis1Y * angAxis2X) < 0) this.rotationalLimitMotor.angle = -this.acosClamp(angAxis1X * angAxis2X + angAxis1Y * angAxis2Y + angAxis1Z * angAxis2Z); else this.rotationalLimitMotor.angle = this.acosClamp(angAxis1X * angAxis2X + angAxis1Y * angAxis2Y + angAxis1Z * angAxis2Z);
		tmp1X = axis1Y * axis2Z - axis1Z * axis2Y;
		tmp1Y = axis1Z * axis2X - axis1X * axis2Z;
		tmp1Z = axis1X * axis2Y - axis1Y * axis2X;
		this.r3.limitMotor2.angle = tx * tmp1X + ty * tmp1Y + tz * tmp1Z;
		this.r3.limitMotor3.angle = bx * tmp1X + by * tmp1Y + bz * tmp1Z;
		this.r3.preSolve(timeStep,invTimeStep);
		this.t3.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.r3.solve();
		this.t3.solve();
	}
	,postSolve: function() {
	}
	,acosClamp: function(cos) {
		if(cos > 1) return 0; else if(cos < -1) return Math.PI; else return Math.acos(cos);
	}
	,__class__: oimohx_physics_constraint_joint_SliderJoint
});
var oimohx_physics_constraint_joint_WheelJoint = function(config) {
	oimohx_physics_constraint_joint_Joint.call(this,config);
	this.localAxis1 = new oimohx_math_Vec3().normalize(config.localAxis1);
	this.localAxis2 = new oimohx_math_Vec3().normalize(config.localAxis2);
	var len;
	this.localAxis1X = this.localAxis1.x;
	this.localAxis1Y = this.localAxis1.y;
	this.localAxis1Z = this.localAxis1.z;
	this.localAxis2X = this.localAxis2.x;
	this.localAxis2Y = this.localAxis2.y;
	this.localAxis2Z = this.localAxis2.z;
	var dot = this.localAxis1X * this.localAxis2X + this.localAxis1Y * this.localAxis2Y + this.localAxis1Z * this.localAxis2Z;
	if(dot > -1 && dot < 1) {
		this.localAngAxis1X = this.localAxis2X - dot * this.localAxis1X;
		this.localAngAxis1Y = this.localAxis2Y - dot * this.localAxis1Y;
		this.localAngAxis1Z = this.localAxis2Z - dot * this.localAxis1Z;
		this.localAngAxis2X = this.localAxis1X - dot * this.localAxis2X;
		this.localAngAxis2Y = this.localAxis1Y - dot * this.localAxis2Y;
		this.localAngAxis2Z = this.localAxis1Z - dot * this.localAxis2Z;
		len = 1 / Math.sqrt(this.localAngAxis1X * this.localAngAxis1X + this.localAngAxis1Y * this.localAngAxis1Y + this.localAngAxis1Z * this.localAngAxis1Z);
		this.localAngAxis1X *= len;
		this.localAngAxis1Y *= len;
		this.localAngAxis1Z *= len;
		len = 1 / Math.sqrt(this.localAngAxis2X * this.localAngAxis2X + this.localAngAxis2Y * this.localAngAxis2Y + this.localAngAxis2Z * this.localAngAxis2Z);
		this.localAngAxis2X *= len;
		this.localAngAxis2Y *= len;
		this.localAngAxis2Z *= len;
	} else {
		this.localAngAxis1X = this.localAxis1Y * this.localAxis1X - this.localAxis1Z * this.localAxis1Z;
		this.localAngAxis1Y = -this.localAxis1Z * this.localAxis1Y - this.localAxis1X * this.localAxis1X;
		this.localAngAxis1Z = this.localAxis1X * this.localAxis1Z + this.localAxis1Y * this.localAxis1Y;
		len = 1 / Math.sqrt(this.localAngAxis1X * this.localAngAxis1X + this.localAngAxis1Y * this.localAngAxis1Y + this.localAngAxis1Z * this.localAngAxis1Z);
		this.localAngAxis1X *= len;
		this.localAngAxis1Y *= len;
		this.localAngAxis1Z *= len;
		var arc = new oimohx_math_Mat33().setQuat(new oimohx_math_Quat().arc(this.localAxis1,this.localAxis2));
		this.localAngAxis2X = this.localAngAxis1X * arc.elements[0] + this.localAngAxis1Y * arc.elements[1] + this.localAngAxis1Z * arc.elements[2];
		this.localAngAxis2Y = this.localAngAxis1X * arc.elements[3] + this.localAngAxis1Y * arc.elements[4] + this.localAngAxis1Z * arc.elements[5];
		this.localAngAxis2Z = this.localAngAxis1X * arc.elements[6] + this.localAngAxis1Y * arc.elements[7] + this.localAngAxis1Z * arc.elements[8];
	}
	this.type = 4;
	this.nor = new oimohx_math_Vec3();
	this.tan = new oimohx_math_Vec3();
	this.bin = new oimohx_math_Vec3();
	this.translationalLimitMotor = new oimohx_physics_constraint_joint_LimitMotor(this.tan,true);
	this.translationalLimitMotor.frequency = 8;
	this.translationalLimitMotor.dampingRatio = 1;
	this.rotationalLimitMotor1 = new oimohx_physics_constraint_joint_LimitMotor(this.tan,false);
	this.rotationalLimitMotor2 = new oimohx_physics_constraint_joint_LimitMotor(this.bin,false);
	this.t3 = new oimohx_physics_constraint_joint_base_Translational3Constraint(this,new oimohx_physics_constraint_joint_LimitMotor(this.nor,true),this.translationalLimitMotor,new oimohx_physics_constraint_joint_LimitMotor(this.bin,true));
	this.t3.weight = 1;
	this.r3 = new oimohx_physics_constraint_joint_base_Rotational3Constraint(this,new oimohx_physics_constraint_joint_LimitMotor(this.nor,true),this.rotationalLimitMotor1,this.rotationalLimitMotor2);
};
$hxClasses["oimohx.physics.constraint.joint.WheelJoint"] = oimohx_physics_constraint_joint_WheelJoint;
oimohx_physics_constraint_joint_WheelJoint.__name__ = ["oimohx","physics","constraint","joint","WheelJoint"];
oimohx_physics_constraint_joint_WheelJoint.__super__ = oimohx_physics_constraint_joint_Joint;
oimohx_physics_constraint_joint_WheelJoint.prototype = $extend(oimohx_physics_constraint_joint_Joint.prototype,{
	localAxis1: null
	,localAxis2: null
	,rotationalLimitMotor1: null
	,rotationalLimitMotor2: null
	,translationalLimitMotor: null
	,nor: null
	,tan: null
	,bin: null
	,localAxis1X: null
	,localAxis1Y: null
	,localAxis1Z: null
	,localAxis2X: null
	,localAxis2Y: null
	,localAxis2Z: null
	,localAngAxis1X: null
	,localAngAxis1Y: null
	,localAngAxis1Z: null
	,localAngAxis2X: null
	,localAngAxis2Y: null
	,localAngAxis2Z: null
	,r3: null
	,t3: null
	,preSolve: function(timeStep,invTimeStep) {
		var tmpM;
		var tmp1X;
		var tmp1Y;
		var tmp1Z;
		this.updateAnchorPoints();
		tmpM = this.body1.rotation;
		var x1 = this.localAxis1X * tmpM.elements[0] + this.localAxis1Y * tmpM.elements[1] + this.localAxis1Z * tmpM.elements[2];
		var y1 = this.localAxis1X * tmpM.elements[3] + this.localAxis1Y * tmpM.elements[4] + this.localAxis1Z * tmpM.elements[5];
		var z1 = this.localAxis1X * tmpM.elements[6] + this.localAxis1Y * tmpM.elements[7] + this.localAxis1Z * tmpM.elements[8];
		var angAxis1X = this.localAngAxis1X * tmpM.elements[0] + this.localAngAxis1Y * tmpM.elements[1] + this.localAngAxis1Z * tmpM.elements[2];
		var angAxis1Y = this.localAngAxis1X * tmpM.elements[3] + this.localAngAxis1Y * tmpM.elements[4] + this.localAngAxis1Z * tmpM.elements[5];
		var angAxis1Z = this.localAngAxis1X * tmpM.elements[6] + this.localAngAxis1Y * tmpM.elements[7] + this.localAngAxis1Z * tmpM.elements[8];
		tmpM = this.body2.rotation;
		var x2 = this.localAxis2X * tmpM.elements[0] + this.localAxis2Y * tmpM.elements[1] + this.localAxis2Z * tmpM.elements[2];
		var y2 = this.localAxis2X * tmpM.elements[3] + this.localAxis2Y * tmpM.elements[4] + this.localAxis2Z * tmpM.elements[5];
		var z2 = this.localAxis2X * tmpM.elements[6] + this.localAxis2Y * tmpM.elements[7] + this.localAxis2Z * tmpM.elements[8];
		var angAxis2X = this.localAngAxis2X * tmpM.elements[0] + this.localAngAxis2Y * tmpM.elements[1] + this.localAngAxis2Z * tmpM.elements[2];
		var angAxis2Y = this.localAngAxis2X * tmpM.elements[3] + this.localAngAxis2Y * tmpM.elements[4] + this.localAngAxis2Z * tmpM.elements[5];
		var angAxis2Z = this.localAngAxis2X * tmpM.elements[6] + this.localAngAxis2Y * tmpM.elements[7] + this.localAngAxis2Z * tmpM.elements[8];
		this.r3.limitMotor1.angle = x1 * x2 + y1 * y2 + z1 * z2;
		if(x1 * (angAxis1Y * z2 - angAxis1Z * y2) + y1 * (angAxis1Z * x2 - angAxis1X * z2) + z1 * (angAxis1X * y2 - angAxis1Y * x2) < 0) this.rotationalLimitMotor1.angle = -this.acosClamp(angAxis1X * x2 + angAxis1Y * y2 + angAxis1Z * z2); else this.rotationalLimitMotor1.angle = this.acosClamp(angAxis1X * x2 + angAxis1Y * y2 + angAxis1Z * z2);
		if(x2 * (angAxis2Y * z1 - angAxis2Z * y1) + y2 * (angAxis2Z * x1 - angAxis2X * z1) + z2 * (angAxis2X * y1 - angAxis2Y * x1) < 0) this.rotationalLimitMotor2.angle = this.acosClamp(angAxis2X * x1 + angAxis2Y * y1 + angAxis2Z * z1); else this.rotationalLimitMotor2.angle = -this.acosClamp(angAxis2X * x1 + angAxis2Y * y1 + angAxis2Z * z1);
		var nx = y2 * z1 - z2 * y1;
		var ny = z2 * x1 - x2 * z1;
		var nz = x2 * y1 - y2 * x1;
		tmp1X = Math.sqrt(nx * nx + ny * ny + nz * nz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		nx *= tmp1X;
		ny *= tmp1X;
		nz *= tmp1X;
		var tx = ny * z2 - nz * y2;
		var ty = nz * x2 - nx * z2;
		var tz = nx * y2 - ny * x2;
		tmp1X = Math.sqrt(tx * tx + ty * ty + tz * tz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		tx *= tmp1X;
		ty *= tmp1X;
		tz *= tmp1X;
		var bx = y1 * nz - z1 * ny;
		var by = z1 * nx - x1 * nz;
		var bz = x1 * ny - y1 * nx;
		tmp1X = Math.sqrt(bx * bx + by * by + bz * bz);
		if(tmp1X > 0) tmp1X = 1 / tmp1X;
		bx *= tmp1X;
		by *= tmp1X;
		bz *= tmp1X;
		this.nor.init(nx,ny,nz);
		this.tan.init(tx,ty,tz);
		this.bin.init(bx,by,bz);
		this.r3.preSolve(timeStep,invTimeStep);
		this.t3.preSolve(timeStep,invTimeStep);
	}
	,solve: function() {
		this.r3.solve();
		this.t3.solve();
	}
	,postSolve: function() {
	}
	,acosClamp: function(cos) {
		if(cos > 1) return 0; else if(cos < -1) return Math.PI; else return Math.acos(cos);
	}
	,__class__: oimohx_physics_constraint_joint_WheelJoint
});
var oimohx_physics_constraint_joint_base_AngularConstraint = function(joint,targetOrientation) {
	this.joint = joint;
	this.targetOrientation = new oimohx_math_Quat().invert(targetOrientation);
	this.relativeOrientation = new oimohx_math_Quat();
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.impx = 0;
	this.impy = 0;
	this.impz = 0;
};
$hxClasses["oimohx.physics.constraint.joint.base.AngularConstraint"] = oimohx_physics_constraint_joint_base_AngularConstraint;
oimohx_physics_constraint_joint_base_AngularConstraint.__name__ = ["oimohx","physics","constraint","joint","base","AngularConstraint"];
oimohx_physics_constraint_joint_base_AngularConstraint.prototype = {
	joint: null
	,b1: null
	,b2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,targetOrientation: null
	,relativeOrientation: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,d00: null
	,d01: null
	,d02: null
	,d10: null
	,d11: null
	,d12: null
	,d20: null
	,d21: null
	,d22: null
	,ax: null
	,ay: null
	,az: null
	,impx: null
	,impy: null
	,impz: null
	,velx: null
	,vely: null
	,velz: null
	,preSolve: function(timeStep,invTimeStep) {
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var v00 = this.i1e00 + this.i2e00;
		var v01 = this.i1e01 + this.i2e01;
		var v02 = this.i1e02 + this.i2e02;
		var v10 = this.i1e10 + this.i2e10;
		var v11 = this.i1e11 + this.i2e11;
		var v12 = this.i1e12 + this.i2e12;
		var v20 = this.i1e20 + this.i2e20;
		var v21 = this.i1e21 + this.i2e21;
		var v22 = this.i1e22 + this.i2e22;
		var inv = 1 / (v00 * (v11 * v22 - v21 * v12) + v10 * (v21 * v02 - v01 * v22) + v20 * (v01 * v12 - v11 * v02));
		this.d00 = (v11 * v22 - v12 * v21) * inv;
		this.d01 = (v02 * v21 - v01 * v22) * inv;
		this.d02 = (v01 * v12 - v02 * v11) * inv;
		this.d10 = (v12 * v20 - v10 * v22) * inv;
		this.d11 = (v00 * v22 - v02 * v20) * inv;
		this.d12 = (v02 * v10 - v00 * v12) * inv;
		this.d20 = (v10 * v21 - v11 * v20) * inv;
		this.d21 = (v01 * v20 - v00 * v21) * inv;
		this.d22 = (v00 * v11 - v01 * v10) * inv;
		this.relativeOrientation.invert(this.b1.orientation);
		this.relativeOrientation.mul(this.targetOrientation,this.relativeOrientation);
		this.relativeOrientation.mul(this.b2.orientation,this.relativeOrientation);
		inv = this.relativeOrientation.s * 2;
		this.velx = this.relativeOrientation.x * inv;
		this.vely = this.relativeOrientation.y * inv;
		this.velz = this.relativeOrientation.z * inv;
		var len = Math.sqrt(this.velx * this.velx + this.vely * this.vely + this.velz * this.velz);
		if(len > 0.02) {
			len = (0.02 - len) / len * invTimeStep * 0.05;
			this.velx *= len;
			this.vely *= len;
			this.velz *= len;
		} else {
			this.velx = 0;
			this.vely = 0;
			this.velz = 0;
		}
		this.a1.x += this.impx * this.i1e00 + this.impy * this.i1e01 + this.impz * this.i1e02;
		this.a1.y += this.impx * this.i1e10 + this.impy * this.i1e11 + this.impz * this.i1e12;
		this.a1.z += this.impx * this.i1e20 + this.impy * this.i1e21 + this.impz * this.i1e22;
		this.a2.x -= this.impx * this.i2e00 + this.impy * this.i2e01 + this.impz * this.i2e02;
		this.a2.y -= this.impx * this.i2e10 + this.impy * this.i2e11 + this.impz * this.i2e12;
		this.a2.z -= this.impx * this.i2e20 + this.impy * this.i2e21 + this.impz * this.i2e22;
	}
	,solve: function() {
		var rvx = this.a2.x - this.a1.x - this.velx;
		var rvy = this.a2.y - this.a1.y - this.vely;
		var rvz = this.a2.z - this.a1.z - this.velz;
		var nimpx = rvx * this.d00 + rvy * this.d01 + rvz * this.d02;
		var nimpy = rvx * this.d10 + rvy * this.d11 + rvz * this.d12;
		var nimpz = rvx * this.d20 + rvy * this.d21 + rvz * this.d22;
		this.impx += nimpx;
		this.impy += nimpy;
		this.impz += nimpz;
		this.a1.x += nimpx * this.i1e00 + nimpy * this.i1e01 + nimpz * this.i1e02;
		this.a1.y += nimpx * this.i1e10 + nimpy * this.i1e11 + nimpz * this.i1e12;
		this.a1.z += nimpx * this.i1e20 + nimpy * this.i1e21 + nimpz * this.i1e22;
		this.a2.x -= nimpx * this.i2e00 + nimpy * this.i2e01 + nimpz * this.i2e02;
		this.a2.y -= nimpx * this.i2e10 + nimpy * this.i2e11 + nimpz * this.i2e12;
		this.a2.z -= nimpx * this.i2e20 + nimpy * this.i2e21 + nimpz * this.i2e22;
	}
	,__class__: oimohx_physics_constraint_joint_base_AngularConstraint
};
var oimohx_physics_constraint_joint_base_LinearConstraint = function(joint) {
	this.joint = joint;
	this.r1 = joint.relativeAnchorPoint1;
	this.r2 = joint.relativeAnchorPoint2;
	this.p1 = joint.anchorPoint1;
	this.p2 = joint.anchorPoint2;
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.l1 = this.b1.linearVelocity;
	this.l2 = this.b2.linearVelocity;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.impx = 0;
	this.impy = 0;
	this.impz = 0;
};
$hxClasses["oimohx.physics.constraint.joint.base.LinearConstraint"] = oimohx_physics_constraint_joint_base_LinearConstraint;
oimohx_physics_constraint_joint_base_LinearConstraint.__name__ = ["oimohx","physics","constraint","joint","base","LinearConstraint"];
oimohx_physics_constraint_joint_base_LinearConstraint.prototype = {
	joint: null
	,b1: null
	,b2: null
	,r1: null
	,r2: null
	,p1: null
	,p2: null
	,l1: null
	,l2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,m1: null
	,m2: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,d00: null
	,d01: null
	,d02: null
	,d10: null
	,d11: null
	,d12: null
	,d20: null
	,d21: null
	,d22: null
	,r1x: null
	,r1y: null
	,r1z: null
	,r2x: null
	,r2y: null
	,r2z: null
	,ax1x: null
	,ax1y: null
	,ax1z: null
	,ay1x: null
	,ay1y: null
	,ay1z: null
	,az1x: null
	,az1y: null
	,az1z: null
	,ax2x: null
	,ax2y: null
	,ax2z: null
	,ay2x: null
	,ay2y: null
	,ay2z: null
	,az2x: null
	,az2y: null
	,az2z: null
	,vel: null
	,impx: null
	,impy: null
	,impz: null
	,velx: null
	,vely: null
	,velz: null
	,preSolve: function(timeStep,invTimeStep) {
		this.r1x = this.r1.x;
		this.r1y = this.r1.y;
		this.r1z = this.r1.z;
		this.r2x = this.r2.x;
		this.r2y = this.r2.y;
		this.r2z = this.r2.z;
		this.m1 = this.b1.inverseMass;
		this.m2 = this.b2.inverseMass;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		this.ax1x = this.r1z * this.i1e01 + -this.r1y * this.i1e02;
		this.ax1y = this.r1z * this.i1e11 + -this.r1y * this.i1e12;
		this.ax1z = this.r1z * this.i1e21 + -this.r1y * this.i1e22;
		this.ay1x = -this.r1z * this.i1e00 + this.r1x * this.i1e02;
		this.ay1y = -this.r1z * this.i1e10 + this.r1x * this.i1e12;
		this.ay1z = -this.r1z * this.i1e20 + this.r1x * this.i1e22;
		this.az1x = this.r1y * this.i1e00 + -this.r1x * this.i1e01;
		this.az1y = this.r1y * this.i1e10 + -this.r1x * this.i1e11;
		this.az1z = this.r1y * this.i1e20 + -this.r1x * this.i1e21;
		this.ax2x = this.r2z * this.i2e01 + -this.r2y * this.i2e02;
		this.ax2y = this.r2z * this.i2e11 + -this.r2y * this.i2e12;
		this.ax2z = this.r2z * this.i2e21 + -this.r2y * this.i2e22;
		this.ay2x = -this.r2z * this.i2e00 + this.r2x * this.i2e02;
		this.ay2y = -this.r2z * this.i2e10 + this.r2x * this.i2e12;
		this.ay2z = -this.r2z * this.i2e20 + this.r2x * this.i2e22;
		this.az2x = this.r2y * this.i2e00 + -this.r2x * this.i2e01;
		this.az2y = this.r2y * this.i2e10 + -this.r2x * this.i2e11;
		this.az2z = this.r2y * this.i2e20 + -this.r2x * this.i2e21;
		var k00 = this.m1 + this.m2;
		var k01 = 0;
		var k02 = 0;
		var k10 = 0;
		var k11 = k00;
		var k12 = 0;
		var k20 = 0;
		var k21 = 0;
		var k22 = k00;
		k00 += this.i1e11 * this.r1z * this.r1z - (this.i1e21 + this.i1e12) * this.r1y * this.r1z + this.i1e22 * this.r1y * this.r1y;
		k01 += (this.i1e20 * this.r1y + this.i1e12 * this.r1x) * this.r1z - this.i1e10 * this.r1z * this.r1z - this.i1e22 * this.r1x * this.r1y;
		k02 += (this.i1e10 * this.r1y - this.i1e11 * this.r1x) * this.r1z - this.i1e20 * this.r1y * this.r1y + this.i1e21 * this.r1x * this.r1y;
		k10 += (this.i1e02 * this.r1y + this.i1e21 * this.r1x) * this.r1z - this.i1e01 * this.r1z * this.r1z - this.i1e22 * this.r1x * this.r1y;
		k11 += this.i1e00 * this.r1z * this.r1z - (this.i1e20 + this.i1e02) * this.r1x * this.r1z + this.i1e22 * this.r1x * this.r1x;
		k12 += (this.i1e01 * this.r1x - this.i1e00 * this.r1y) * this.r1z - this.i1e21 * this.r1x * this.r1x + this.i1e20 * this.r1x * this.r1y;
		k20 += (this.i1e01 * this.r1y - this.i1e11 * this.r1x) * this.r1z - this.i1e02 * this.r1y * this.r1y + this.i1e12 * this.r1x * this.r1y;
		k21 += (this.i1e10 * this.r1x - this.i1e00 * this.r1y) * this.r1z - this.i1e12 * this.r1x * this.r1x + this.i1e02 * this.r1x * this.r1y;
		k22 += this.i1e00 * this.r1y * this.r1y - (this.i1e10 + this.i1e01) * this.r1x * this.r1y + this.i1e11 * this.r1x * this.r1x;
		k00 += this.i2e11 * this.r2z * this.r2z - (this.i2e21 + this.i2e12) * this.r2y * this.r2z + this.i2e22 * this.r2y * this.r2y;
		k01 += (this.i2e20 * this.r2y + this.i2e12 * this.r2x) * this.r2z - this.i2e10 * this.r2z * this.r2z - this.i2e22 * this.r2x * this.r2y;
		k02 += (this.i2e10 * this.r2y - this.i2e11 * this.r2x) * this.r2z - this.i2e20 * this.r2y * this.r2y + this.i2e21 * this.r2x * this.r2y;
		k10 += (this.i2e02 * this.r2y + this.i2e21 * this.r2x) * this.r2z - this.i2e01 * this.r2z * this.r2z - this.i2e22 * this.r2x * this.r2y;
		k11 += this.i2e00 * this.r2z * this.r2z - (this.i2e20 + this.i2e02) * this.r2x * this.r2z + this.i2e22 * this.r2x * this.r2x;
		k12 += (this.i2e01 * this.r2x - this.i2e00 * this.r2y) * this.r2z - this.i2e21 * this.r2x * this.r2x + this.i2e20 * this.r2x * this.r2y;
		k20 += (this.i2e01 * this.r2y - this.i2e11 * this.r2x) * this.r2z - this.i2e02 * this.r2y * this.r2y + this.i2e12 * this.r2x * this.r2y;
		k21 += (this.i2e10 * this.r2x - this.i2e00 * this.r2y) * this.r2z - this.i2e12 * this.r2x * this.r2x + this.i2e02 * this.r2x * this.r2y;
		k22 += this.i2e00 * this.r2y * this.r2y - (this.i2e10 + this.i2e01) * this.r2x * this.r2y + this.i2e11 * this.r2x * this.r2x;
		var inv = 1 / (k00 * (k11 * k22 - k21 * k12) + k10 * (k21 * k02 - k01 * k22) + k20 * (k01 * k12 - k11 * k02));
		this.d00 = (k11 * k22 - k12 * k21) * inv;
		this.d01 = (k02 * k21 - k01 * k22) * inv;
		this.d02 = (k01 * k12 - k02 * k11) * inv;
		this.d10 = (k12 * k20 - k10 * k22) * inv;
		this.d11 = (k00 * k22 - k02 * k20) * inv;
		this.d12 = (k02 * k10 - k00 * k12) * inv;
		this.d20 = (k10 * k21 - k11 * k20) * inv;
		this.d21 = (k01 * k20 - k00 * k21) * inv;
		this.d22 = (k00 * k11 - k01 * k10) * inv;
		this.velx = this.p2.x - this.p1.x;
		this.vely = this.p2.y - this.p1.y;
		this.velz = this.p2.z - this.p1.z;
		var len = Math.sqrt(this.velx * this.velx + this.vely * this.vely + this.velz * this.velz);
		if(len > 0.005) {
			len = (0.005 - len) / len * invTimeStep * 0.05;
			this.velx *= len;
			this.vely *= len;
			this.velz *= len;
		} else {
			this.velx = 0;
			this.vely = 0;
			this.velz = 0;
		}
		this.impx *= 0.95;
		this.impy *= 0.95;
		this.impz *= 0.95;
		this.l1.x += this.impx * this.m1;
		this.l1.y += this.impy * this.m1;
		this.l1.z += this.impz * this.m1;
		this.a1.x += this.impx * this.ax1x + this.impy * this.ay1x + this.impz * this.az1x;
		this.a1.y += this.impx * this.ax1y + this.impy * this.ay1y + this.impz * this.az1y;
		this.a1.z += this.impx * this.ax1z + this.impy * this.ay1z + this.impz * this.az1z;
		this.l2.x -= this.impx * this.m2;
		this.l2.y -= this.impy * this.m2;
		this.l2.z -= this.impz * this.m2;
		this.a2.x -= this.impx * this.ax2x + this.impy * this.ay2x + this.impz * this.az2x;
		this.a2.y -= this.impx * this.ax2y + this.impy * this.ay2y + this.impz * this.az2y;
		this.a2.z -= this.impx * this.ax2z + this.impy * this.ay2z + this.impz * this.az2z;
	}
	,solve: function() {
		var rvx = this.l2.x - this.l1.x + this.a2.y * this.r2z - this.a2.z * this.r2y - this.a1.y * this.r1z + this.a1.z * this.r1y - this.velx;
		var rvy = this.l2.y - this.l1.y + this.a2.z * this.r2x - this.a2.x * this.r2z - this.a1.z * this.r1x + this.a1.x * this.r1z - this.vely;
		var rvz = this.l2.z - this.l1.z + this.a2.x * this.r2y - this.a2.y * this.r2x - this.a1.x * this.r1y + this.a1.y * this.r1x - this.velz;
		var nimpx = rvx * this.d00 + rvy * this.d01 + rvz * this.d02;
		var nimpy = rvx * this.d10 + rvy * this.d11 + rvz * this.d12;
		var nimpz = rvx * this.d20 + rvy * this.d21 + rvz * this.d22;
		this.impx += nimpx;
		this.impy += nimpy;
		this.impz += nimpz;
		this.l1.x += nimpx * this.m1;
		this.l1.y += nimpy * this.m1;
		this.l1.z += nimpz * this.m1;
		this.a1.x += nimpx * this.ax1x + nimpy * this.ay1x + nimpz * this.az1x;
		this.a1.y += nimpx * this.ax1y + nimpy * this.ay1y + nimpz * this.az1y;
		this.a1.z += nimpx * this.ax1z + nimpy * this.ay1z + nimpz * this.az1z;
		this.l2.x -= nimpx * this.m2;
		this.l2.y -= nimpy * this.m2;
		this.l2.z -= nimpz * this.m2;
		this.a2.x -= nimpx * this.ax2x + nimpy * this.ay2x + nimpz * this.az2x;
		this.a2.y -= nimpx * this.ax2y + nimpy * this.ay2y + nimpz * this.az2y;
		this.a2.z -= nimpx * this.ax2z + nimpy * this.ay2z + nimpz * this.az2z;
	}
	,__class__: oimohx_physics_constraint_joint_base_LinearConstraint
};
var oimohx_physics_constraint_joint_base_Rotational3Constraint = function(joint,limitMotor1,limitMotor2,limitMotor3) {
	this.limitMotor1 = limitMotor1;
	this.limitMotor2 = limitMotor2;
	this.limitMotor3 = limitMotor3;
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.limitImpulse1 = 0;
	this.motorImpulse1 = 0;
	this.limitImpulse2 = 0;
	this.motorImpulse2 = 0;
	this.limitImpulse3 = 0;
	this.motorImpulse3 = 0;
};
$hxClasses["oimohx.physics.constraint.joint.base.Rotational3Constraint"] = oimohx_physics_constraint_joint_base_Rotational3Constraint;
oimohx_physics_constraint_joint_base_Rotational3Constraint.__name__ = ["oimohx","physics","constraint","joint","base","Rotational3Constraint"];
oimohx_physics_constraint_joint_base_Rotational3Constraint.prototype = {
	limitMotor1: null
	,limitMotor2: null
	,limitMotor3: null
	,cfm1: null
	,cfm2: null
	,cfm3: null
	,b1: null
	,b2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,ax1: null
	,ay1: null
	,az1: null
	,ax2: null
	,ay2: null
	,az2: null
	,ax3: null
	,ay3: null
	,az3: null
	,a1x1: null
	,a1y1: null
	,a1z1: null
	,a2x1: null
	,a2y1: null
	,a2z1: null
	,a1x2: null
	,a1y2: null
	,a1z2: null
	,a2x2: null
	,a2y2: null
	,a2z2: null
	,a1x3: null
	,a1y3: null
	,a1z3: null
	,a2x3: null
	,a2y3: null
	,a2z3: null
	,lowerLimit1: null
	,upperLimit1: null
	,limitVelocity1: null
	,limitImpulse1: null
	,limitState1: null
	,enableMotor1: null
	,motorSpeed1: null
	,maxMotorForce1: null
	,maxMotorImpulse1: null
	,motorImpulse1: null
	,lowerLimit2: null
	,upperLimit2: null
	,limitVelocity2: null
	,limitImpulse2: null
	,limitState2: null
	,enableMotor2: null
	,motorSpeed2: null
	,maxMotorForce2: null
	,maxMotorImpulse2: null
	,motorImpulse2: null
	,lowerLimit3: null
	,upperLimit3: null
	,limitVelocity3: null
	,limitImpulse3: null
	,limitState3: null
	,enableMotor3: null
	,motorSpeed3: null
	,maxMotorForce3: null
	,maxMotorImpulse3: null
	,motorImpulse3: null
	,k00: null
	,k01: null
	,k02: null
	,k10: null
	,k11: null
	,k12: null
	,k20: null
	,k21: null
	,k22: null
	,kv00: null
	,kv11: null
	,kv22: null
	,dv00: null
	,dv11: null
	,dv22: null
	,d00: null
	,d01: null
	,d02: null
	,d10: null
	,d11: null
	,d12: null
	,d20: null
	,d21: null
	,d22: null
	,preSolve: function(timeStep,invTimeStep) {
		this.ax1 = this.limitMotor1.axis.x;
		this.ay1 = this.limitMotor1.axis.y;
		this.az1 = this.limitMotor1.axis.z;
		this.ax2 = this.limitMotor2.axis.x;
		this.ay2 = this.limitMotor2.axis.y;
		this.az2 = this.limitMotor2.axis.z;
		this.ax3 = this.limitMotor3.axis.x;
		this.ay3 = this.limitMotor3.axis.y;
		this.az3 = this.limitMotor3.axis.z;
		this.lowerLimit1 = this.limitMotor1.lowerLimit;
		this.upperLimit1 = this.limitMotor1.upperLimit;
		this.motorSpeed1 = this.limitMotor1.motorSpeed;
		this.maxMotorForce1 = this.limitMotor1.maxMotorForce;
		this.enableMotor1 = this.maxMotorForce1 > 0;
		this.lowerLimit2 = this.limitMotor2.lowerLimit;
		this.upperLimit2 = this.limitMotor2.upperLimit;
		this.motorSpeed2 = this.limitMotor2.motorSpeed;
		this.maxMotorForce2 = this.limitMotor2.maxMotorForce;
		this.enableMotor2 = this.maxMotorForce2 > 0;
		this.lowerLimit3 = this.limitMotor3.lowerLimit;
		this.upperLimit3 = this.limitMotor3.upperLimit;
		this.motorSpeed3 = this.limitMotor3.motorSpeed;
		this.maxMotorForce3 = this.limitMotor3.maxMotorForce;
		this.enableMotor3 = this.maxMotorForce3 > 0;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var frequency1 = this.limitMotor1.frequency;
		var frequency2 = this.limitMotor2.frequency;
		var frequency3 = this.limitMotor3.frequency;
		var enableSpring1 = frequency1 > 0;
		var enableSpring2 = frequency2 > 0;
		var enableSpring3 = frequency3 > 0;
		var enableLimit1 = this.lowerLimit1 <= this.upperLimit1;
		var enableLimit2 = this.lowerLimit2 <= this.upperLimit2;
		var enableLimit3 = this.lowerLimit3 <= this.upperLimit3;
		var angle1 = this.limitMotor1.angle;
		if(enableLimit1) {
			if(this.lowerLimit1 == this.upperLimit1) {
				if(this.limitState1 != 0) {
					this.limitState1 = 0;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.lowerLimit1 - angle1;
			} else if(angle1 < this.lowerLimit1) {
				if(this.limitState1 != -1) {
					this.limitState1 = -1;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.lowerLimit1 - angle1;
			} else if(angle1 > this.upperLimit1) {
				if(this.limitState1 != 1) {
					this.limitState1 = 1;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.upperLimit1 - angle1;
			} else {
				this.limitState1 = 2;
				this.limitImpulse1 = 0;
				this.limitVelocity1 = 0;
			}
			if(!enableSpring1) {
				if(this.limitVelocity1 > 0.02) this.limitVelocity1 -= 0.02; else if(this.limitVelocity1 < -0.02) this.limitVelocity1 += 0.02; else this.limitVelocity1 = 0;
			}
		} else {
			this.limitState1 = 2;
			this.limitImpulse1 = 0;
		}
		var angle2 = this.limitMotor2.angle;
		if(enableLimit2) {
			if(this.lowerLimit2 == this.upperLimit2) {
				if(this.limitState2 != 0) {
					this.limitState2 = 0;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.lowerLimit2 - angle2;
			} else if(angle2 < this.lowerLimit2) {
				if(this.limitState2 != -1) {
					this.limitState2 = -1;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.lowerLimit2 - angle2;
			} else if(angle2 > this.upperLimit2) {
				if(this.limitState2 != 1) {
					this.limitState2 = 1;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.upperLimit2 - angle2;
			} else {
				this.limitState2 = 2;
				this.limitImpulse2 = 0;
				this.limitVelocity2 = 0;
			}
			if(!enableSpring2) {
				if(this.limitVelocity2 > 0.02) this.limitVelocity2 -= 0.02; else if(this.limitVelocity2 < -0.02) this.limitVelocity2 += 0.02; else this.limitVelocity2 = 0;
			}
		} else {
			this.limitState2 = 2;
			this.limitImpulse2 = 0;
		}
		var angle3 = this.limitMotor3.angle;
		if(enableLimit3) {
			if(this.lowerLimit3 == this.upperLimit3) {
				if(this.limitState3 != 0) {
					this.limitState3 = 0;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.lowerLimit3 - angle3;
			} else if(angle3 < this.lowerLimit3) {
				if(this.limitState3 != -1) {
					this.limitState3 = -1;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.lowerLimit3 - angle3;
			} else if(angle3 > this.upperLimit3) {
				if(this.limitState3 != 1) {
					this.limitState3 = 1;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.upperLimit3 - angle3;
			} else {
				this.limitState3 = 2;
				this.limitImpulse3 = 0;
				this.limitVelocity3 = 0;
			}
			if(!enableSpring3) {
				if(this.limitVelocity3 > 0.02) this.limitVelocity3 -= 0.02; else if(this.limitVelocity3 < -0.02) this.limitVelocity3 += 0.02; else this.limitVelocity3 = 0;
			}
		} else {
			this.limitState3 = 2;
			this.limitImpulse3 = 0;
		}
		if(this.enableMotor1 && (this.limitState1 != 0 || enableSpring1)) this.maxMotorImpulse1 = this.maxMotorForce1 * timeStep; else {
			this.motorImpulse1 = 0;
			this.maxMotorImpulse1 = 0;
		}
		if(this.enableMotor2 && (this.limitState2 != 0 || enableSpring2)) this.maxMotorImpulse2 = this.maxMotorForce2 * timeStep; else {
			this.motorImpulse2 = 0;
			this.maxMotorImpulse2 = 0;
		}
		if(this.enableMotor3 && (this.limitState3 != 0 || enableSpring3)) this.maxMotorImpulse3 = this.maxMotorForce3 * timeStep; else {
			this.motorImpulse3 = 0;
			this.maxMotorImpulse3 = 0;
		}
		this.a1x1 = this.ax1 * this.i1e00 + this.ay1 * this.i1e01 + this.az1 * this.i1e02;
		this.a1y1 = this.ax1 * this.i1e10 + this.ay1 * this.i1e11 + this.az1 * this.i1e12;
		this.a1z1 = this.ax1 * this.i1e20 + this.ay1 * this.i1e21 + this.az1 * this.i1e22;
		this.a2x1 = this.ax1 * this.i2e00 + this.ay1 * this.i2e01 + this.az1 * this.i2e02;
		this.a2y1 = this.ax1 * this.i2e10 + this.ay1 * this.i2e11 + this.az1 * this.i2e12;
		this.a2z1 = this.ax1 * this.i2e20 + this.ay1 * this.i2e21 + this.az1 * this.i2e22;
		this.a1x2 = this.ax2 * this.i1e00 + this.ay2 * this.i1e01 + this.az2 * this.i1e02;
		this.a1y2 = this.ax2 * this.i1e10 + this.ay2 * this.i1e11 + this.az2 * this.i1e12;
		this.a1z2 = this.ax2 * this.i1e20 + this.ay2 * this.i1e21 + this.az2 * this.i1e22;
		this.a2x2 = this.ax2 * this.i2e00 + this.ay2 * this.i2e01 + this.az2 * this.i2e02;
		this.a2y2 = this.ax2 * this.i2e10 + this.ay2 * this.i2e11 + this.az2 * this.i2e12;
		this.a2z2 = this.ax2 * this.i2e20 + this.ay2 * this.i2e21 + this.az2 * this.i2e22;
		this.a1x3 = this.ax3 * this.i1e00 + this.ay3 * this.i1e01 + this.az3 * this.i1e02;
		this.a1y3 = this.ax3 * this.i1e10 + this.ay3 * this.i1e11 + this.az3 * this.i1e12;
		this.a1z3 = this.ax3 * this.i1e20 + this.ay3 * this.i1e21 + this.az3 * this.i1e22;
		this.a2x3 = this.ax3 * this.i2e00 + this.ay3 * this.i2e01 + this.az3 * this.i2e02;
		this.a2y3 = this.ax3 * this.i2e10 + this.ay3 * this.i2e11 + this.az3 * this.i2e12;
		this.a2z3 = this.ax3 * this.i2e20 + this.ay3 * this.i2e21 + this.az3 * this.i2e22;
		this.k00 = this.ax1 * (this.a1x1 + this.a2x1) + this.ay1 * (this.a1y1 + this.a2y1) + this.az1 * (this.a1z1 + this.a2z1);
		this.k01 = this.ax1 * (this.a1x2 + this.a2x2) + this.ay1 * (this.a1y2 + this.a2y2) + this.az1 * (this.a1z2 + this.a2z2);
		this.k02 = this.ax1 * (this.a1x3 + this.a2x3) + this.ay1 * (this.a1y3 + this.a2y3) + this.az1 * (this.a1z3 + this.a2z3);
		this.k10 = this.ax2 * (this.a1x1 + this.a2x1) + this.ay2 * (this.a1y1 + this.a2y1) + this.az2 * (this.a1z1 + this.a2z1);
		this.k11 = this.ax2 * (this.a1x2 + this.a2x2) + this.ay2 * (this.a1y2 + this.a2y2) + this.az2 * (this.a1z2 + this.a2z2);
		this.k12 = this.ax2 * (this.a1x3 + this.a2x3) + this.ay2 * (this.a1y3 + this.a2y3) + this.az2 * (this.a1z3 + this.a2z3);
		this.k20 = this.ax3 * (this.a1x1 + this.a2x1) + this.ay3 * (this.a1y1 + this.a2y1) + this.az3 * (this.a1z1 + this.a2z1);
		this.k21 = this.ax3 * (this.a1x2 + this.a2x2) + this.ay3 * (this.a1y2 + this.a2y2) + this.az3 * (this.a1z2 + this.a2z2);
		this.k22 = this.ax3 * (this.a1x3 + this.a2x3) + this.ay3 * (this.a1y3 + this.a2y3) + this.az3 * (this.a1z3 + this.a2z3);
		this.kv00 = this.k00;
		this.kv11 = this.k11;
		this.kv22 = this.k22;
		this.dv00 = 1 / this.kv00;
		this.dv11 = 1 / this.kv11;
		this.dv22 = 1 / this.kv22;
		var omega = 0.0;
		var k = 0.0;
		var dmp = 0.0;
		if(enableSpring1 && this.limitState1 != 2) {
			omega = 6.2831853 * frequency1;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor1.dampingRatio * omega);
			this.cfm1 = this.kv00 * dmp;
			this.limitVelocity1 *= k * dmp;
		} else {
			this.cfm1 = 0;
			this.limitVelocity1 *= invTimeStep * 0.05;
		}
		if(enableSpring2 && this.limitState2 != 2) {
			omega = 6.2831853 * frequency2;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor2.dampingRatio * omega);
			this.cfm2 = this.kv11 * dmp;
			this.limitVelocity2 *= k * dmp;
		} else {
			this.cfm2 = 0;
			this.limitVelocity2 *= invTimeStep * 0.05;
		}
		if(enableSpring3 && this.limitState3 != 2) {
			omega = 6.2831853 * frequency3;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor3.dampingRatio * omega);
			this.cfm3 = this.kv22 * dmp;
			this.limitVelocity3 *= k * dmp;
		} else {
			this.cfm3 = 0;
			this.limitVelocity3 *= invTimeStep * 0.05;
		}
		this.k00 += this.cfm1;
		this.k11 += this.cfm2;
		this.k22 += this.cfm3;
		var inv = 1 / (this.k00 * (this.k11 * this.k22 - this.k21 * this.k12) + this.k10 * (this.k21 * this.k02 - this.k01 * this.k22) + this.k20 * (this.k01 * this.k12 - this.k11 * this.k02));
		this.d00 = (this.k11 * this.k22 - this.k12 * this.k21) * inv;
		this.d01 = (this.k02 * this.k21 - this.k01 * this.k22) * inv;
		this.d02 = (this.k01 * this.k12 - this.k02 * this.k11) * inv;
		this.d10 = (this.k12 * this.k20 - this.k10 * this.k22) * inv;
		this.d11 = (this.k00 * this.k22 - this.k02 * this.k20) * inv;
		this.d12 = (this.k02 * this.k10 - this.k00 * this.k12) * inv;
		this.d20 = (this.k10 * this.k21 - this.k11 * this.k20) * inv;
		this.d21 = (this.k01 * this.k20 - this.k00 * this.k21) * inv;
		this.d22 = (this.k00 * this.k11 - this.k01 * this.k10) * inv;
		this.limitImpulse1 *= 0.95;
		this.motorImpulse1 *= 0.95;
		this.limitImpulse2 *= 0.95;
		this.motorImpulse2 *= 0.95;
		this.limitImpulse3 *= 0.95;
		this.motorImpulse3 *= 0.95;
		var totalImpulse1 = this.limitImpulse1 + this.motorImpulse1;
		var totalImpulse2 = this.limitImpulse2 + this.motorImpulse2;
		var totalImpulse3 = this.limitImpulse3 + this.motorImpulse3;
		this.a1.x += totalImpulse1 * this.a1x1 + totalImpulse2 * this.a1x2 + totalImpulse3 * this.a1x3;
		this.a1.y += totalImpulse1 * this.a1y1 + totalImpulse2 * this.a1y2 + totalImpulse3 * this.a1y3;
		this.a1.z += totalImpulse1 * this.a1z1 + totalImpulse2 * this.a1z2 + totalImpulse3 * this.a1z3;
		this.a2.x -= totalImpulse1 * this.a2x1 + totalImpulse2 * this.a2x2 + totalImpulse3 * this.a2x3;
		this.a2.y -= totalImpulse1 * this.a2y1 + totalImpulse2 * this.a2y2 + totalImpulse3 * this.a2y3;
		this.a2.z -= totalImpulse1 * this.a2z1 + totalImpulse2 * this.a2z2 + totalImpulse3 * this.a2z3;
	}
	,solve_: function() {
		var rvx = this.a2.x - this.a1.x;
		var rvy = this.a2.y - this.a1.y;
		var rvz = this.a2.z - this.a1.z;
		this.limitVelocity3 = 30;
		var rvn1 = rvx * this.ax1 + rvy * this.ay1 + rvz * this.az1 - this.limitVelocity1;
		var rvn2 = rvx * this.ax2 + rvy * this.ay2 + rvz * this.az2 - this.limitVelocity2;
		var rvn3 = rvx * this.ax3 + rvy * this.ay3 + rvz * this.az3 - this.limitVelocity3;
		var dLimitImpulse1 = rvn1 * this.d00 + rvn2 * this.d01 + rvn3 * this.d02;
		var dLimitImpulse2 = rvn1 * this.d10 + rvn2 * this.d11 + rvn3 * this.d12;
		var dLimitImpulse3 = rvn1 * this.d20 + rvn2 * this.d21 + rvn3 * this.d22;
		this.limitImpulse1 += dLimitImpulse1;
		this.limitImpulse2 += dLimitImpulse2;
		this.limitImpulse3 += dLimitImpulse3;
		this.a1.x += dLimitImpulse1 * this.a1x1 + dLimitImpulse2 * this.a1x2 + dLimitImpulse3 * this.a1x3;
		this.a1.y += dLimitImpulse1 * this.a1y1 + dLimitImpulse2 * this.a1y2 + dLimitImpulse3 * this.a1y3;
		this.a1.z += dLimitImpulse1 * this.a1z1 + dLimitImpulse2 * this.a1z2 + dLimitImpulse3 * this.a1z3;
		this.a2.x -= dLimitImpulse1 * this.a2x1 + dLimitImpulse2 * this.a2x2 + dLimitImpulse3 * this.a2x3;
		this.a2.y -= dLimitImpulse1 * this.a2y1 + dLimitImpulse2 * this.a2y2 + dLimitImpulse3 * this.a2y3;
		this.a2.z -= dLimitImpulse1 * this.a2z1 + dLimitImpulse2 * this.a2z2 + dLimitImpulse3 * this.a2z3;
	}
	,solve: function() {
		var rvx = this.a2.x - this.a1.x;
		var rvy = this.a2.y - this.a1.y;
		var rvz = this.a2.z - this.a1.z;
		var rvn1 = rvx * this.ax1 + rvy * this.ay1 + rvz * this.az1;
		var rvn2 = rvx * this.ax2 + rvy * this.ay2 + rvz * this.az2;
		var rvn3 = rvx * this.ax3 + rvy * this.ay3 + rvz * this.az3;
		var oldMotorImpulse1 = this.motorImpulse1;
		var oldMotorImpulse2 = this.motorImpulse2;
		var oldMotorImpulse3 = this.motorImpulse3;
		var dMotorImpulse1 = 0;
		var dMotorImpulse2 = 0;
		var dMotorImpulse3 = 0;
		if(this.enableMotor1) {
			dMotorImpulse1 = (rvn1 - this.motorSpeed1) * this.dv00;
			this.motorImpulse1 += dMotorImpulse1;
			if(this.motorImpulse1 > this.maxMotorImpulse1) this.motorImpulse1 = this.maxMotorImpulse1; else if(this.motorImpulse1 < -this.maxMotorImpulse1) this.motorImpulse1 = -this.maxMotorImpulse1;
			dMotorImpulse1 = this.motorImpulse1 - oldMotorImpulse1;
		}
		if(this.enableMotor2) {
			dMotorImpulse2 = (rvn2 - this.motorSpeed2) * this.dv11;
			this.motorImpulse2 += dMotorImpulse2;
			if(this.motorImpulse2 > this.maxMotorImpulse2) this.motorImpulse2 = this.maxMotorImpulse2; else if(this.motorImpulse2 < -this.maxMotorImpulse2) this.motorImpulse2 = -this.maxMotorImpulse2;
			dMotorImpulse2 = this.motorImpulse2 - oldMotorImpulse2;
		}
		if(this.enableMotor3) {
			dMotorImpulse3 = (rvn3 - this.motorSpeed3) * this.dv22;
			this.motorImpulse3 += dMotorImpulse3;
			if(this.motorImpulse3 > this.maxMotorImpulse3) this.motorImpulse3 = this.maxMotorImpulse3; else if(this.motorImpulse3 < -this.maxMotorImpulse3) this.motorImpulse3 = -this.maxMotorImpulse3;
			dMotorImpulse3 = this.motorImpulse3 - oldMotorImpulse3;
		}
		rvn1 += dMotorImpulse1 * this.kv00 + dMotorImpulse2 * this.k01 + dMotorImpulse3 * this.k02;
		rvn2 += dMotorImpulse1 * this.k10 + dMotorImpulse2 * this.kv11 + dMotorImpulse3 * this.k12;
		rvn3 += dMotorImpulse1 * this.k20 + dMotorImpulse2 * this.k21 + dMotorImpulse3 * this.kv22;
		rvn1 -= this.limitVelocity1 + this.limitImpulse1 * this.cfm1;
		rvn2 -= this.limitVelocity2 + this.limitImpulse2 * this.cfm2;
		rvn3 -= this.limitVelocity3 + this.limitImpulse3 * this.cfm3;
		var oldLimitImpulse1 = this.limitImpulse1;
		var oldLimitImpulse2 = this.limitImpulse2;
		var oldLimitImpulse3 = this.limitImpulse3;
		var dLimitImpulse1 = rvn1 * this.d00 + rvn2 * this.d01 + rvn3 * this.d02;
		var dLimitImpulse2 = rvn1 * this.d10 + rvn2 * this.d11 + rvn3 * this.d12;
		var dLimitImpulse3 = rvn1 * this.d20 + rvn2 * this.d21 + rvn3 * this.d22;
		this.limitImpulse1 += dLimitImpulse1;
		this.limitImpulse2 += dLimitImpulse2;
		this.limitImpulse3 += dLimitImpulse3;
		var clampState = 0;
		if(this.limitState1 == 2 || this.limitImpulse1 * this.limitState1 < 0) {
			dLimitImpulse1 = -oldLimitImpulse1;
			rvn2 += dLimitImpulse1 * this.k10;
			rvn3 += dLimitImpulse1 * this.k20;
			clampState |= 1;
		}
		if(this.limitState2 == 2 || this.limitImpulse2 * this.limitState2 < 0) {
			dLimitImpulse2 = -oldLimitImpulse2;
			rvn1 += dLimitImpulse2 * this.k01;
			rvn3 += dLimitImpulse2 * this.k21;
			clampState |= 2;
		}
		if(this.limitState3 == 2 || this.limitImpulse3 * this.limitState3 < 0) {
			dLimitImpulse3 = -oldLimitImpulse3;
			rvn1 += dLimitImpulse3 * this.k02;
			rvn2 += dLimitImpulse3 * this.k12;
			clampState |= 4;
		}
		var det;
		switch(clampState) {
		case 1:
			det = 1 / (this.k11 * this.k22 - this.k12 * this.k21);
			dLimitImpulse2 = (this.k22 * rvn2 + -this.k12 * rvn3) * det;
			dLimitImpulse3 = (-this.k21 * rvn2 + this.k11 * rvn3) * det;
			break;
		case 2:
			det = 1 / (this.k00 * this.k22 - this.k02 * this.k20);
			dLimitImpulse1 = (this.k22 * rvn1 + -this.k02 * rvn3) * det;
			dLimitImpulse3 = (-this.k20 * rvn1 + this.k00 * rvn3) * det;
			break;
		case 3:
			dLimitImpulse3 = rvn3 / this.k22;
			break;
		case 4:
			det = 1 / (this.k00 * this.k11 - this.k01 * this.k10);
			dLimitImpulse1 = (this.k11 * rvn1 + -this.k01 * rvn2) * det;
			dLimitImpulse2 = (-this.k10 * rvn1 + this.k00 * rvn2) * det;
			break;
		case 5:
			dLimitImpulse2 = rvn2 / this.k11;
			break;
		case 6:
			dLimitImpulse1 = rvn1 / this.k00;
			break;
		}
		this.limitImpulse1 = dLimitImpulse1 + oldLimitImpulse1;
		this.limitImpulse2 = dLimitImpulse2 + oldLimitImpulse2;
		this.limitImpulse3 = dLimitImpulse3 + oldLimitImpulse3;
		var dImpulse1 = dMotorImpulse1 + dLimitImpulse1;
		var dImpulse2 = dMotorImpulse2 + dLimitImpulse2;
		var dImpulse3 = dMotorImpulse3 + dLimitImpulse3;
		this.a1.x += dImpulse1 * this.a1x1 + dImpulse2 * this.a1x2 + dImpulse3 * this.a1x3;
		this.a1.y += dImpulse1 * this.a1y1 + dImpulse2 * this.a1y2 + dImpulse3 * this.a1y3;
		this.a1.z += dImpulse1 * this.a1z1 + dImpulse2 * this.a1z2 + dImpulse3 * this.a1z3;
		this.a2.x -= dImpulse1 * this.a2x1 + dImpulse2 * this.a2x2 + dImpulse3 * this.a2x3;
		this.a2.y -= dImpulse1 * this.a2y1 + dImpulse2 * this.a2y2 + dImpulse3 * this.a2y3;
		this.a2.z -= dImpulse1 * this.a2z1 + dImpulse2 * this.a2z2 + dImpulse3 * this.a2z3;
		rvx = this.a2.x - this.a1.x;
		rvy = this.a2.y - this.a1.y;
		rvz = this.a2.z - this.a1.z;
		rvn2 = rvx * this.ax2 + rvy * this.ay2 + rvz * this.az2;
	}
	,__class__: oimohx_physics_constraint_joint_base_Rotational3Constraint
};
var oimohx_physics_constraint_joint_base_RotationalConstraint = function(joint,limitMotor) {
	this.limitMotor = limitMotor;
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.limitImpulse = 0;
	this.motorImpulse = 0;
};
$hxClasses["oimohx.physics.constraint.joint.base.RotationalConstraint"] = oimohx_physics_constraint_joint_base_RotationalConstraint;
oimohx_physics_constraint_joint_base_RotationalConstraint.__name__ = ["oimohx","physics","constraint","joint","base","RotationalConstraint"];
oimohx_physics_constraint_joint_base_RotationalConstraint.prototype = {
	limitMotor: null
	,b1: null
	,b2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,cfm: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,motorDenom: null
	,invMotorDenom: null
	,invDenom: null
	,ax: null
	,ay: null
	,az: null
	,a1x: null
	,a1y: null
	,a1z: null
	,a2x: null
	,a2y: null
	,a2z: null
	,enableLimit: null
	,lowerLimit: null
	,upperLimit: null
	,limitVelocity: null
	,limitImpulse: null
	,limitState: null
	,enableMotor: null
	,motorSpeed: null
	,maxMotorForce: null
	,maxMotorImpulse: null
	,motorImpulse: null
	,preSolve: function(timeStep,invTimeStep) {
		this.ax = this.limitMotor.axis.x;
		this.ay = this.limitMotor.axis.y;
		this.az = this.limitMotor.axis.z;
		this.lowerLimit = this.limitMotor.lowerLimit;
		this.upperLimit = this.limitMotor.upperLimit;
		this.motorSpeed = this.limitMotor.motorSpeed;
		this.maxMotorForce = this.limitMotor.maxMotorForce;
		this.enableMotor = this.maxMotorForce > 0;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var frequency = this.limitMotor.frequency;
		var enableSpring = frequency > 0;
		var enableLimit = this.lowerLimit <= this.upperLimit;
		var angle = this.limitMotor.angle;
		if(enableLimit) {
			if(this.lowerLimit == this.upperLimit) {
				if(this.limitState != 0) {
					this.limitState = 0;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.lowerLimit - angle;
			} else if(angle < this.lowerLimit) {
				if(this.limitState != -1) {
					this.limitState = -1;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.lowerLimit - angle;
			} else if(angle > this.upperLimit) {
				if(this.limitState != 1) {
					this.limitState = 1;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.upperLimit - angle;
			} else {
				this.limitState = 2;
				this.limitImpulse = 0;
				this.limitVelocity = 0;
			}
			if(!enableSpring) {
				if(this.limitVelocity > 0.02) this.limitVelocity -= 0.02; else if(this.limitVelocity < -0.02) this.limitVelocity += 0.02; else this.limitVelocity = 0;
			}
		} else {
			this.limitState = 2;
			this.limitImpulse = 0;
		}
		if(this.enableMotor && (this.limitState != 0 || enableSpring)) this.maxMotorImpulse = this.maxMotorForce * timeStep; else {
			this.motorImpulse = 0;
			this.maxMotorImpulse = 0;
		}
		this.a1x = this.ax * this.i1e00 + this.ay * this.i1e01 + this.az * this.i1e02;
		this.a1y = this.ax * this.i1e10 + this.ay * this.i1e11 + this.az * this.i1e12;
		this.a1z = this.ax * this.i1e20 + this.ay * this.i1e21 + this.az * this.i1e22;
		this.a2x = this.ax * this.i2e00 + this.ay * this.i2e01 + this.az * this.i2e02;
		this.a2y = this.ax * this.i2e10 + this.ay * this.i2e11 + this.az * this.i2e12;
		this.a2z = this.ax * this.i2e20 + this.ay * this.i2e21 + this.az * this.i2e22;
		this.motorDenom = this.ax * (this.a1x + this.a2x) + this.ay * (this.a1y + this.a2y) + this.az * (this.a1z + this.a2z);
		this.invMotorDenom = 1 / this.motorDenom;
		if(enableSpring && this.limitState != 2) {
			var omega = 6.2831853 * frequency;
			var k = omega * omega * timeStep;
			var dmp = invTimeStep / (k + 2 * this.limitMotor.dampingRatio * omega);
			this.cfm = this.motorDenom * dmp;
			this.limitVelocity *= k * dmp;
		} else {
			this.cfm = 0;
			this.limitVelocity *= invTimeStep * 0.05;
		}
		this.invDenom = 1 / (this.motorDenom + this.cfm);
		this.limitImpulse *= 0.95;
		this.motorImpulse *= 0.95;
		var totalImpulse = this.limitImpulse + this.motorImpulse;
		this.a1.x += totalImpulse * this.a1x;
		this.a1.y += totalImpulse * this.a1y;
		this.a1.z += totalImpulse * this.a1z;
		this.a2.x -= totalImpulse * this.a2x;
		this.a2.y -= totalImpulse * this.a2y;
		this.a2.z -= totalImpulse * this.a2z;
	}
	,solve: function() {
		var rvn = this.ax * (this.a2.x - this.a1.x) + this.ay * (this.a2.y - this.a1.y) + this.az * (this.a2.z - this.a1.z);
		var newMotorImpulse;
		if(this.enableMotor) {
			newMotorImpulse = (rvn - this.motorSpeed) * this.invMotorDenom;
			var oldMotorImpulse = this.motorImpulse;
			this.motorImpulse += newMotorImpulse;
			if(this.motorImpulse > this.maxMotorImpulse) this.motorImpulse = this.maxMotorImpulse; else if(this.motorImpulse < -this.maxMotorImpulse) this.motorImpulse = -this.maxMotorImpulse;
			newMotorImpulse = this.motorImpulse - oldMotorImpulse;
			rvn -= newMotorImpulse * this.motorDenom;
		} else newMotorImpulse = 0;
		var newLimitImpulse;
		if(this.limitState != 2) {
			newLimitImpulse = (rvn - this.limitVelocity - this.limitImpulse * this.cfm) * this.invDenom;
			var oldLimitImpulse = this.limitImpulse;
			this.limitImpulse += newLimitImpulse;
			if(this.limitImpulse * this.limitState < 0) this.limitImpulse = 0;
			newLimitImpulse = this.limitImpulse - oldLimitImpulse;
		} else newLimitImpulse = 0;
		var totalImpulse = newLimitImpulse + newMotorImpulse;
		this.a1.x += totalImpulse * this.a1x;
		this.a1.y += totalImpulse * this.a1y;
		this.a1.z += totalImpulse * this.a1z;
		this.a2.x -= totalImpulse * this.a2x;
		this.a2.y -= totalImpulse * this.a2y;
		this.a2.z -= totalImpulse * this.a2z;
	}
	,__class__: oimohx_physics_constraint_joint_base_RotationalConstraint
};
var oimohx_physics_constraint_joint_base_Translational3Constraint = function(joint,limitMotor1,limitMotor2,limitMotor3) {
	this.limitMotor1 = limitMotor1;
	this.limitMotor2 = limitMotor2;
	this.limitMotor3 = limitMotor3;
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.p1 = joint.anchorPoint1;
	this.p2 = joint.anchorPoint2;
	this.r1 = joint.relativeAnchorPoint1;
	this.r2 = joint.relativeAnchorPoint2;
	this.l1 = this.b1.linearVelocity;
	this.l2 = this.b2.linearVelocity;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.limitImpulse1 = 0;
	this.motorImpulse1 = 0;
	this.limitImpulse2 = 0;
	this.motorImpulse2 = 0;
	this.limitImpulse3 = 0;
	this.motorImpulse3 = 0;
	this.cfm1 = 0;
	this.cfm2 = 0;
	this.cfm3 = 0;
	this.weight = -1;
};
$hxClasses["oimohx.physics.constraint.joint.base.Translational3Constraint"] = oimohx_physics_constraint_joint_base_Translational3Constraint;
oimohx_physics_constraint_joint_base_Translational3Constraint.__name__ = ["oimohx","physics","constraint","joint","base","Translational3Constraint"];
oimohx_physics_constraint_joint_base_Translational3Constraint.prototype = {
	limitMotor1: null
	,limitMotor2: null
	,limitMotor3: null
	,weight: null
	,cfm1: null
	,cfm2: null
	,cfm3: null
	,b1: null
	,b2: null
	,p1: null
	,p2: null
	,r1: null
	,r2: null
	,l1: null
	,l2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,m1: null
	,m2: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,ax1: null
	,ay1: null
	,az1: null
	,ax2: null
	,ay2: null
	,az2: null
	,ax3: null
	,ay3: null
	,az3: null
	,r1x: null
	,r1y: null
	,r1z: null
	,r2x: null
	,r2y: null
	,r2z: null
	,t1x1: null
	,t1y1: null
	,t1z1: null
	,t2x1: null
	,t2y1: null
	,t2z1: null
	,l1x1: null
	,l1y1: null
	,l1z1: null
	,l2x1: null
	,l2y1: null
	,l2z1: null
	,a1x1: null
	,a1y1: null
	,a1z1: null
	,a2x1: null
	,a2y1: null
	,a2z1: null
	,t1x2: null
	,t1y2: null
	,t1z2: null
	,t2x2: null
	,t2y2: null
	,t2z2: null
	,l1x2: null
	,l1y2: null
	,l1z2: null
	,l2x2: null
	,l2y2: null
	,l2z2: null
	,a1x2: null
	,a1y2: null
	,a1z2: null
	,a2x2: null
	,a2y2: null
	,a2z2: null
	,t1x3: null
	,t1y3: null
	,t1z3: null
	,t2x3: null
	,t2y3: null
	,t2z3: null
	,l1x3: null
	,l1y3: null
	,l1z3: null
	,l2x3: null
	,l2y3: null
	,l2z3: null
	,a1x3: null
	,a1y3: null
	,a1z3: null
	,a2x3: null
	,a2y3: null
	,a2z3: null
	,lowerLimit1: null
	,upperLimit1: null
	,limitVelocity1: null
	,limitImpulse1: null
	,limitState1: null
	,enableMotor1: null
	,motorSpeed1: null
	,maxMotorForce1: null
	,maxMotorImpulse1: null
	,motorImpulse1: null
	,lowerLimit2: null
	,upperLimit2: null
	,limitVelocity2: null
	,limitImpulse2: null
	,limitState2: null
	,enableMotor2: null
	,motorSpeed2: null
	,maxMotorForce2: null
	,maxMotorImpulse2: null
	,motorImpulse2: null
	,lowerLimit3: null
	,upperLimit3: null
	,limitVelocity3: null
	,limitImpulse3: null
	,limitState3: null
	,enableMotor3: null
	,motorSpeed3: null
	,maxMotorForce3: null
	,maxMotorImpulse3: null
	,motorImpulse3: null
	,k00: null
	,k01: null
	,k02: null
	,k10: null
	,k11: null
	,k12: null
	,k20: null
	,k21: null
	,k22: null
	,kv00: null
	,kv11: null
	,kv22: null
	,dv00: null
	,dv11: null
	,dv22: null
	,d00: null
	,d01: null
	,d02: null
	,d10: null
	,d11: null
	,d12: null
	,d20: null
	,d21: null
	,d22: null
	,preSolve: function(timeStep,invTimeStep) {
		this.ax1 = this.limitMotor1.axis.x;
		this.ay1 = this.limitMotor1.axis.y;
		this.az1 = this.limitMotor1.axis.z;
		this.ax2 = this.limitMotor2.axis.x;
		this.ay2 = this.limitMotor2.axis.y;
		this.az2 = this.limitMotor2.axis.z;
		this.ax3 = this.limitMotor3.axis.x;
		this.ay3 = this.limitMotor3.axis.y;
		this.az3 = this.limitMotor3.axis.z;
		this.lowerLimit1 = this.limitMotor1.lowerLimit;
		this.upperLimit1 = this.limitMotor1.upperLimit;
		this.motorSpeed1 = this.limitMotor1.motorSpeed;
		this.maxMotorForce1 = this.limitMotor1.maxMotorForce;
		this.enableMotor1 = this.maxMotorForce1 > 0;
		this.lowerLimit2 = this.limitMotor2.lowerLimit;
		this.upperLimit2 = this.limitMotor2.upperLimit;
		this.motorSpeed2 = this.limitMotor2.motorSpeed;
		this.maxMotorForce2 = this.limitMotor2.maxMotorForce;
		this.enableMotor2 = this.maxMotorForce2 > 0;
		this.lowerLimit3 = this.limitMotor3.lowerLimit;
		this.upperLimit3 = this.limitMotor3.upperLimit;
		this.motorSpeed3 = this.limitMotor3.motorSpeed;
		this.maxMotorForce3 = this.limitMotor3.maxMotorForce;
		this.enableMotor3 = this.maxMotorForce3 > 0;
		this.m1 = this.b1.inverseMass;
		this.m2 = this.b2.inverseMass;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var dx = this.p2.x - this.p1.x;
		var dy = this.p2.y - this.p1.y;
		var dz = this.p2.z - this.p1.z;
		var d1 = dx * this.ax1 + dy * this.ay1 + dz * this.az1;
		var d2 = dx * this.ax2 + dy * this.ay2 + dz * this.az2;
		var d3 = dx * this.ax3 + dy * this.ay3 + dz * this.az3;
		var frequency1 = this.limitMotor1.frequency;
		var frequency2 = this.limitMotor2.frequency;
		var frequency3 = this.limitMotor3.frequency;
		var enableSpring1 = frequency1 > 0;
		var enableSpring2 = frequency2 > 0;
		var enableSpring3 = frequency3 > 0;
		var enableLimit1 = this.lowerLimit1 <= this.upperLimit1;
		var enableLimit2 = this.lowerLimit2 <= this.upperLimit2;
		var enableLimit3 = this.lowerLimit3 <= this.upperLimit3;
		if(enableSpring1 && d1 > 20 || d1 < -20) enableSpring1 = false;
		if(enableSpring2 && d2 > 20 || d2 < -20) enableSpring2 = false;
		if(enableSpring3 && d3 > 20 || d3 < -20) enableSpring3 = false;
		if(enableLimit1) {
			if(this.lowerLimit1 == this.upperLimit1) {
				if(this.limitState1 != 0) {
					this.limitState1 = 0;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.lowerLimit1 - d1;
				if(!enableSpring1) d1 = this.lowerLimit1;
			} else if(d1 < this.lowerLimit1) {
				if(this.limitState1 != -1) {
					this.limitState1 = -1;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.lowerLimit1 - d1;
				if(!enableSpring1) d1 = this.lowerLimit1;
			} else if(d1 > this.upperLimit1) {
				if(this.limitState1 != 1) {
					this.limitState1 = 1;
					this.limitImpulse1 = 0;
				}
				this.limitVelocity1 = this.upperLimit1 - d1;
				if(!enableSpring1) d1 = this.upperLimit1;
			} else {
				this.limitState1 = 2;
				this.limitImpulse1 = 0;
				this.limitVelocity1 = 0;
			}
			if(!enableSpring1) {
				if(this.limitVelocity1 > 0.005) this.limitVelocity1 -= 0.005; else if(this.limitVelocity1 < -0.005) this.limitVelocity1 += 0.005; else this.limitVelocity1 = 0;
			}
		} else {
			this.limitState1 = 2;
			this.limitImpulse1 = 0;
		}
		if(enableLimit2) {
			if(this.lowerLimit2 == this.upperLimit2) {
				if(this.limitState2 != 0) {
					this.limitState2 = 0;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.lowerLimit2 - d2;
				if(!enableSpring2) d2 = this.lowerLimit2;
			} else if(d2 < this.lowerLimit2) {
				if(this.limitState2 != -1) {
					this.limitState2 = -1;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.lowerLimit2 - d2;
				if(!enableSpring2) d2 = this.lowerLimit2;
			} else if(d2 > this.upperLimit2) {
				if(this.limitState2 != 1) {
					this.limitState2 = 1;
					this.limitImpulse2 = 0;
				}
				this.limitVelocity2 = this.upperLimit2 - d2;
				if(!enableSpring2) d2 = this.upperLimit2;
			} else {
				this.limitState2 = 2;
				this.limitImpulse2 = 0;
				this.limitVelocity2 = 0;
			}
			if(!enableSpring2) {
				if(this.limitVelocity2 > 0.005) this.limitVelocity2 -= 0.005; else if(this.limitVelocity2 < -0.005) this.limitVelocity2 += 0.005; else this.limitVelocity2 = 0;
			}
		} else {
			this.limitState2 = 2;
			this.limitImpulse2 = 0;
		}
		if(enableLimit3) {
			if(this.lowerLimit3 == this.upperLimit3) {
				if(this.limitState3 != 0) {
					this.limitState3 = 0;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.lowerLimit3 - d3;
				if(!enableSpring3) d3 = this.lowerLimit3;
			} else if(d3 < this.lowerLimit3) {
				if(this.limitState3 != -1) {
					this.limitState3 = -1;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.lowerLimit3 - d3;
				if(!enableSpring3) d3 = this.lowerLimit3;
			} else if(d3 > this.upperLimit3) {
				if(this.limitState3 != 1) {
					this.limitState3 = 1;
					this.limitImpulse3 = 0;
				}
				this.limitVelocity3 = this.upperLimit3 - d3;
				if(!enableSpring3) d3 = this.upperLimit3;
			} else {
				this.limitState3 = 2;
				this.limitImpulse3 = 0;
				this.limitVelocity3 = 0;
			}
			if(!enableSpring3) {
				if(this.limitVelocity3 > 0.005) this.limitVelocity3 -= 0.005; else if(this.limitVelocity3 < -0.005) this.limitVelocity3 += 0.005; else this.limitVelocity3 = 0;
			}
		} else {
			this.limitState3 = 2;
			this.limitImpulse3 = 0;
		}
		if(this.enableMotor1 && (this.limitState1 != 0 || enableSpring1)) this.maxMotorImpulse1 = this.maxMotorForce1 * timeStep; else {
			this.motorImpulse1 = 0;
			this.maxMotorImpulse1 = 0;
		}
		if(this.enableMotor2 && (this.limitState2 != 0 || enableSpring2)) this.maxMotorImpulse2 = this.maxMotorForce2 * timeStep; else {
			this.motorImpulse2 = 0;
			this.maxMotorImpulse2 = 0;
		}
		if(this.enableMotor3 && (this.limitState3 != 0 || enableSpring3)) this.maxMotorImpulse3 = this.maxMotorForce3 * timeStep; else {
			this.motorImpulse3 = 0;
			this.maxMotorImpulse3 = 0;
		}
		var rdx = d1 * this.ax1 + d2 * this.ax2 + d3 * this.ax2;
		var rdy = d1 * this.ay1 + d2 * this.ay2 + d3 * this.ay2;
		var rdz = d1 * this.az1 + d2 * this.az2 + d3 * this.az2;
		var w1 = this.m2 / (this.m1 + this.m2);
		if(this.weight >= 0) w1 = this.weight;
		var w2 = 1 - w1;
		this.r1x = this.r1.x + rdx * w1;
		this.r1y = this.r1.y + rdy * w1;
		this.r1z = this.r1.z + rdz * w1;
		this.r2x = this.r2.x - rdx * w2;
		this.r2y = this.r2.y - rdy * w2;
		this.r2z = this.r2.z - rdz * w2;
		this.t1x1 = this.r1y * this.az1 - this.r1z * this.ay1;
		this.t1y1 = this.r1z * this.ax1 - this.r1x * this.az1;
		this.t1z1 = this.r1x * this.ay1 - this.r1y * this.ax1;
		this.t2x1 = this.r2y * this.az1 - this.r2z * this.ay1;
		this.t2y1 = this.r2z * this.ax1 - this.r2x * this.az1;
		this.t2z1 = this.r2x * this.ay1 - this.r2y * this.ax1;
		this.l1x1 = this.ax1 * this.m1;
		this.l1y1 = this.ay1 * this.m1;
		this.l1z1 = this.az1 * this.m1;
		this.l2x1 = this.ax1 * this.m2;
		this.l2y1 = this.ay1 * this.m2;
		this.l2z1 = this.az1 * this.m2;
		this.a1x1 = this.t1x1 * this.i1e00 + this.t1y1 * this.i1e01 + this.t1z1 * this.i1e02;
		this.a1y1 = this.t1x1 * this.i1e10 + this.t1y1 * this.i1e11 + this.t1z1 * this.i1e12;
		this.a1z1 = this.t1x1 * this.i1e20 + this.t1y1 * this.i1e21 + this.t1z1 * this.i1e22;
		this.a2x1 = this.t2x1 * this.i2e00 + this.t2y1 * this.i2e01 + this.t2z1 * this.i2e02;
		this.a2y1 = this.t2x1 * this.i2e10 + this.t2y1 * this.i2e11 + this.t2z1 * this.i2e12;
		this.a2z1 = this.t2x1 * this.i2e20 + this.t2y1 * this.i2e21 + this.t2z1 * this.i2e22;
		this.t1x2 = this.r1y * this.az2 - this.r1z * this.ay2;
		this.t1y2 = this.r1z * this.ax2 - this.r1x * this.az2;
		this.t1z2 = this.r1x * this.ay2 - this.r1y * this.ax2;
		this.t2x2 = this.r2y * this.az2 - this.r2z * this.ay2;
		this.t2y2 = this.r2z * this.ax2 - this.r2x * this.az2;
		this.t2z2 = this.r2x * this.ay2 - this.r2y * this.ax2;
		this.l1x2 = this.ax2 * this.m1;
		this.l1y2 = this.ay2 * this.m1;
		this.l1z2 = this.az2 * this.m1;
		this.l2x2 = this.ax2 * this.m2;
		this.l2y2 = this.ay2 * this.m2;
		this.l2z2 = this.az2 * this.m2;
		this.a1x2 = this.t1x2 * this.i1e00 + this.t1y2 * this.i1e01 + this.t1z2 * this.i1e02;
		this.a1y2 = this.t1x2 * this.i1e10 + this.t1y2 * this.i1e11 + this.t1z2 * this.i1e12;
		this.a1z2 = this.t1x2 * this.i1e20 + this.t1y2 * this.i1e21 + this.t1z2 * this.i1e22;
		this.a2x2 = this.t2x2 * this.i2e00 + this.t2y2 * this.i2e01 + this.t2z2 * this.i2e02;
		this.a2y2 = this.t2x2 * this.i2e10 + this.t2y2 * this.i2e11 + this.t2z2 * this.i2e12;
		this.a2z2 = this.t2x2 * this.i2e20 + this.t2y2 * this.i2e21 + this.t2z2 * this.i2e22;
		this.t1x3 = this.r1y * this.az3 - this.r1z * this.ay3;
		this.t1y3 = this.r1z * this.ax3 - this.r1x * this.az3;
		this.t1z3 = this.r1x * this.ay3 - this.r1y * this.ax3;
		this.t2x3 = this.r2y * this.az3 - this.r2z * this.ay3;
		this.t2y3 = this.r2z * this.ax3 - this.r2x * this.az3;
		this.t2z3 = this.r2x * this.ay3 - this.r2y * this.ax3;
		this.l1x3 = this.ax3 * this.m1;
		this.l1y3 = this.ay3 * this.m1;
		this.l1z3 = this.az3 * this.m1;
		this.l2x3 = this.ax3 * this.m2;
		this.l2y3 = this.ay3 * this.m2;
		this.l2z3 = this.az3 * this.m2;
		this.a1x3 = this.t1x3 * this.i1e00 + this.t1y3 * this.i1e01 + this.t1z3 * this.i1e02;
		this.a1y3 = this.t1x3 * this.i1e10 + this.t1y3 * this.i1e11 + this.t1z3 * this.i1e12;
		this.a1z3 = this.t1x3 * this.i1e20 + this.t1y3 * this.i1e21 + this.t1z3 * this.i1e22;
		this.a2x3 = this.t2x3 * this.i2e00 + this.t2y3 * this.i2e01 + this.t2z3 * this.i2e02;
		this.a2y3 = this.t2x3 * this.i2e10 + this.t2y3 * this.i2e11 + this.t2z3 * this.i2e12;
		this.a2z3 = this.t2x3 * this.i2e20 + this.t2y3 * this.i2e21 + this.t2z3 * this.i2e22;
		var m12 = this.m1 + this.m2;
		this.k00 = (this.ax1 * this.ax1 + this.ay1 * this.ay1 + this.az1 * this.az1) * m12;
		this.k01 = (this.ax1 * this.ax2 + this.ay1 * this.ay2 + this.az1 * this.az2) * m12;
		this.k02 = (this.ax1 * this.ax3 + this.ay1 * this.ay3 + this.az1 * this.az3) * m12;
		this.k10 = (this.ax2 * this.ax1 + this.ay2 * this.ay1 + this.az2 * this.az1) * m12;
		this.k11 = (this.ax2 * this.ax2 + this.ay2 * this.ay2 + this.az2 * this.az2) * m12;
		this.k12 = (this.ax2 * this.ax3 + this.ay2 * this.ay3 + this.az2 * this.az3) * m12;
		this.k20 = (this.ax3 * this.ax1 + this.ay3 * this.ay1 + this.az3 * this.az1) * m12;
		this.k21 = (this.ax3 * this.ax2 + this.ay3 * this.ay2 + this.az3 * this.az2) * m12;
		this.k22 = (this.ax3 * this.ax3 + this.ay3 * this.ay3 + this.az3 * this.az3) * m12;
		this.k00 += this.t1x1 * this.a1x1 + this.t1y1 * this.a1y1 + this.t1z1 * this.a1z1;
		this.k01 += this.t1x1 * this.a1x2 + this.t1y1 * this.a1y2 + this.t1z1 * this.a1z2;
		this.k02 += this.t1x1 * this.a1x3 + this.t1y1 * this.a1y3 + this.t1z1 * this.a1z3;
		this.k10 += this.t1x2 * this.a1x1 + this.t1y2 * this.a1y1 + this.t1z2 * this.a1z1;
		this.k11 += this.t1x2 * this.a1x2 + this.t1y2 * this.a1y2 + this.t1z2 * this.a1z2;
		this.k12 += this.t1x2 * this.a1x3 + this.t1y2 * this.a1y3 + this.t1z2 * this.a1z3;
		this.k20 += this.t1x3 * this.a1x1 + this.t1y3 * this.a1y1 + this.t1z3 * this.a1z1;
		this.k21 += this.t1x3 * this.a1x2 + this.t1y3 * this.a1y2 + this.t1z3 * this.a1z2;
		this.k22 += this.t1x3 * this.a1x3 + this.t1y3 * this.a1y3 + this.t1z3 * this.a1z3;
		this.k00 += this.t2x1 * this.a2x1 + this.t2y1 * this.a2y1 + this.t2z1 * this.a2z1;
		this.k01 += this.t2x1 * this.a2x2 + this.t2y1 * this.a2y2 + this.t2z1 * this.a2z2;
		this.k02 += this.t2x1 * this.a2x3 + this.t2y1 * this.a2y3 + this.t2z1 * this.a2z3;
		this.k10 += this.t2x2 * this.a2x1 + this.t2y2 * this.a2y1 + this.t2z2 * this.a2z1;
		this.k11 += this.t2x2 * this.a2x2 + this.t2y2 * this.a2y2 + this.t2z2 * this.a2z2;
		this.k12 += this.t2x2 * this.a2x3 + this.t2y2 * this.a2y3 + this.t2z2 * this.a2z3;
		this.k20 += this.t2x3 * this.a2x1 + this.t2y3 * this.a2y1 + this.t2z3 * this.a2z1;
		this.k21 += this.t2x3 * this.a2x2 + this.t2y3 * this.a2y2 + this.t2z3 * this.a2z2;
		this.k22 += this.t2x3 * this.a2x3 + this.t2y3 * this.a2y3 + this.t2z3 * this.a2z3;
		this.kv00 = this.k00;
		this.kv11 = this.k11;
		this.kv22 = this.k22;
		this.dv00 = 1 / this.kv00;
		this.dv11 = 1 / this.kv11;
		this.dv22 = 1 / this.kv22;
		var omega = 0.0;
		var k = 0.0;
		var dmp = 0.0;
		if(enableSpring1 && this.limitState1 != 2) {
			omega = 6.2831853 * frequency1;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor1.dampingRatio * omega);
			this.cfm1 = this.kv00 * dmp;
			this.limitVelocity1 *= k * dmp;
		} else {
			this.cfm1 = 0;
			this.limitVelocity1 *= invTimeStep * 0.05;
		}
		if(enableSpring2 && this.limitState2 != 2) {
			omega = 6.2831853 * frequency2;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor2.dampingRatio * omega);
			this.cfm2 = this.kv11 * dmp;
			this.limitVelocity2 *= k * dmp;
		} else {
			this.cfm2 = 0;
			this.limitVelocity2 *= invTimeStep * 0.05;
		}
		if(enableSpring3 && this.limitState3 != 2) {
			omega = 6.2831853 * frequency3;
			k = omega * omega * timeStep;
			dmp = invTimeStep / (k + 2 * this.limitMotor3.dampingRatio * omega);
			this.cfm3 = this.kv22 * dmp;
			this.limitVelocity3 *= k * dmp;
		} else {
			this.cfm3 = 0;
			this.limitVelocity3 *= invTimeStep * 0.05;
		}
		this.k00 += this.cfm1;
		this.k11 += this.cfm2;
		this.k22 += this.cfm3;
		var inv = 1 / (this.k00 * (this.k11 * this.k22 - this.k21 * this.k12) + this.k10 * (this.k21 * this.k02 - this.k01 * this.k22) + this.k20 * (this.k01 * this.k12 - this.k11 * this.k02));
		this.d00 = (this.k11 * this.k22 - this.k12 * this.k21) * inv;
		this.d01 = (this.k02 * this.k21 - this.k01 * this.k22) * inv;
		this.d02 = (this.k01 * this.k12 - this.k02 * this.k11) * inv;
		this.d10 = (this.k12 * this.k20 - this.k10 * this.k22) * inv;
		this.d11 = (this.k00 * this.k22 - this.k02 * this.k20) * inv;
		this.d12 = (this.k02 * this.k10 - this.k00 * this.k12) * inv;
		this.d20 = (this.k10 * this.k21 - this.k11 * this.k20) * inv;
		this.d21 = (this.k01 * this.k20 - this.k00 * this.k21) * inv;
		this.d22 = (this.k00 * this.k11 - this.k01 * this.k10) * inv;
		var totalImpulse1 = this.limitImpulse1 + this.motorImpulse1;
		var totalImpulse2 = this.limitImpulse2 + this.motorImpulse2;
		var totalImpulse3 = this.limitImpulse3 + this.motorImpulse3;
		this.l1.x += totalImpulse1 * this.l1x1 + totalImpulse2 * this.l1x2 + totalImpulse3 * this.l1x3;
		this.l1.y += totalImpulse1 * this.l1y1 + totalImpulse2 * this.l1y2 + totalImpulse3 * this.l1y3;
		this.l1.z += totalImpulse1 * this.l1z1 + totalImpulse2 * this.l1z2 + totalImpulse3 * this.l1z3;
		this.a1.x += totalImpulse1 * this.a1x1 + totalImpulse2 * this.a1x2 + totalImpulse3 * this.a1x3;
		this.a1.y += totalImpulse1 * this.a1y1 + totalImpulse2 * this.a1y2 + totalImpulse3 * this.a1y3;
		this.a1.z += totalImpulse1 * this.a1z1 + totalImpulse2 * this.a1z2 + totalImpulse3 * this.a1z3;
		this.l2.x -= totalImpulse1 * this.l2x1 + totalImpulse2 * this.l2x2 + totalImpulse3 * this.l2x3;
		this.l2.y -= totalImpulse1 * this.l2y1 + totalImpulse2 * this.l2y2 + totalImpulse3 * this.l2y3;
		this.l2.z -= totalImpulse1 * this.l2z1 + totalImpulse2 * this.l2z2 + totalImpulse3 * this.l2z3;
		this.a2.x -= totalImpulse1 * this.a2x1 + totalImpulse2 * this.a2x2 + totalImpulse3 * this.a2x3;
		this.a2.y -= totalImpulse1 * this.a2y1 + totalImpulse2 * this.a2y2 + totalImpulse3 * this.a2y3;
		this.a2.z -= totalImpulse1 * this.a2z1 + totalImpulse2 * this.a2z2 + totalImpulse3 * this.a2z3;
	}
	,solve: function() {
		var rvx = this.l2.x - this.l1.x + this.a2.y * this.r2z - this.a2.z * this.r2y - this.a1.y * this.r1z + this.a1.z * this.r1y;
		var rvy = this.l2.y - this.l1.y + this.a2.z * this.r2x - this.a2.x * this.r2z - this.a1.z * this.r1x + this.a1.x * this.r1z;
		var rvz = this.l2.z - this.l1.z + this.a2.x * this.r2y - this.a2.y * this.r2x - this.a1.x * this.r1y + this.a1.y * this.r1x;
		var rvn1 = rvx * this.ax1 + rvy * this.ay1 + rvz * this.az1;
		var rvn2 = rvx * this.ax2 + rvy * this.ay2 + rvz * this.az2;
		var rvn3 = rvx * this.ax3 + rvy * this.ay3 + rvz * this.az3;
		var oldMotorImpulse1 = this.motorImpulse1;
		var oldMotorImpulse2 = this.motorImpulse2;
		var oldMotorImpulse3 = this.motorImpulse3;
		var dMotorImpulse1 = 0;
		var dMotorImpulse2 = 0;
		var dMotorImpulse3 = 0;
		if(this.enableMotor1) {
			dMotorImpulse1 = (rvn1 - this.motorSpeed1) * this.dv00;
			this.motorImpulse1 += dMotorImpulse1;
			if(this.motorImpulse1 > this.maxMotorImpulse1) this.motorImpulse1 = this.maxMotorImpulse1; else if(this.motorImpulse1 < -this.maxMotorImpulse1) this.motorImpulse1 = -this.maxMotorImpulse1;
			dMotorImpulse1 = this.motorImpulse1 - oldMotorImpulse1;
		}
		if(this.enableMotor2) {
			dMotorImpulse2 = (rvn2 - this.motorSpeed2) * this.dv11;
			this.motorImpulse2 += dMotorImpulse2;
			if(this.motorImpulse2 > this.maxMotorImpulse2) this.motorImpulse2 = this.maxMotorImpulse2; else if(this.motorImpulse2 < -this.maxMotorImpulse2) this.motorImpulse2 = -this.maxMotorImpulse2;
			dMotorImpulse2 = this.motorImpulse2 - oldMotorImpulse2;
		}
		if(this.enableMotor3) {
			dMotorImpulse3 = (rvn3 - this.motorSpeed3) * this.dv22;
			this.motorImpulse3 += dMotorImpulse3;
			if(this.motorImpulse3 > this.maxMotorImpulse3) this.motorImpulse3 = this.maxMotorImpulse3; else if(this.motorImpulse3 < -this.maxMotorImpulse3) this.motorImpulse3 = -this.maxMotorImpulse3;
			dMotorImpulse3 = this.motorImpulse3 - oldMotorImpulse3;
		}
		rvn1 += dMotorImpulse1 * this.kv00 + dMotorImpulse2 * this.k01 + dMotorImpulse3 * this.k02;
		rvn2 += dMotorImpulse1 * this.k10 + dMotorImpulse2 * this.kv11 + dMotorImpulse3 * this.k12;
		rvn3 += dMotorImpulse1 * this.k20 + dMotorImpulse2 * this.k21 + dMotorImpulse3 * this.kv22;
		rvn1 -= this.limitVelocity1 + this.limitImpulse1 * this.cfm1;
		rvn2 -= this.limitVelocity2 + this.limitImpulse2 * this.cfm2;
		rvn3 -= this.limitVelocity3 + this.limitImpulse3 * this.cfm3;
		var oldLimitImpulse1 = this.limitImpulse1;
		var oldLimitImpulse2 = this.limitImpulse2;
		var oldLimitImpulse3 = this.limitImpulse3;
		var dLimitImpulse1 = rvn1 * this.d00 + rvn2 * this.d01 + rvn3 * this.d02;
		var dLimitImpulse2 = rvn1 * this.d10 + rvn2 * this.d11 + rvn3 * this.d12;
		var dLimitImpulse3 = rvn1 * this.d20 + rvn2 * this.d21 + rvn3 * this.d22;
		this.limitImpulse1 += dLimitImpulse1;
		this.limitImpulse2 += dLimitImpulse2;
		this.limitImpulse3 += dLimitImpulse3;
		var clampState = 0;
		if(this.limitState1 == 2 || this.limitImpulse1 * this.limitState1 < 0) {
			dLimitImpulse1 = -oldLimitImpulse1;
			rvn2 += dLimitImpulse1 * this.k10;
			rvn3 += dLimitImpulse1 * this.k20;
			clampState |= 1;
		}
		if(this.limitState2 == 2 || this.limitImpulse2 * this.limitState2 < 0) {
			dLimitImpulse2 = -oldLimitImpulse2;
			rvn1 += dLimitImpulse2 * this.k01;
			rvn3 += dLimitImpulse2 * this.k21;
			clampState |= 2;
		}
		if(this.limitState3 == 2 || this.limitImpulse3 * this.limitState3 < 0) {
			dLimitImpulse3 = -oldLimitImpulse3;
			rvn1 += dLimitImpulse3 * this.k02;
			rvn2 += dLimitImpulse3 * this.k12;
			clampState |= 4;
		}
		var det;
		switch(clampState) {
		case 1:
			det = 1 / (this.k11 * this.k22 - this.k12 * this.k21);
			dLimitImpulse2 = (this.k22 * rvn2 + -this.k12 * rvn3) * det;
			dLimitImpulse3 = (-this.k21 * rvn2 + this.k11 * rvn3) * det;
			break;
		case 2:
			det = 1 / (this.k00 * this.k22 - this.k02 * this.k20);
			dLimitImpulse1 = (this.k22 * rvn1 + -this.k02 * rvn3) * det;
			dLimitImpulse3 = (-this.k20 * rvn1 + this.k00 * rvn3) * det;
			break;
		case 3:
			dLimitImpulse3 = rvn3 / this.k22;
			break;
		case 4:
			det = 1 / (this.k00 * this.k11 - this.k01 * this.k10);
			dLimitImpulse1 = (this.k11 * rvn1 + -this.k01 * rvn2) * det;
			dLimitImpulse2 = (-this.k10 * rvn1 + this.k00 * rvn2) * det;
			break;
		case 5:
			dLimitImpulse2 = rvn2 / this.k11;
			break;
		case 6:
			dLimitImpulse1 = rvn1 / this.k00;
			break;
		}
		this.limitImpulse1 = oldLimitImpulse1 + dLimitImpulse1;
		this.limitImpulse2 = oldLimitImpulse2 + dLimitImpulse2;
		this.limitImpulse3 = oldLimitImpulse3 + dLimitImpulse3;
		var dImpulse1 = dMotorImpulse1 + dLimitImpulse1;
		var dImpulse2 = dMotorImpulse2 + dLimitImpulse2;
		var dImpulse3 = dMotorImpulse3 + dLimitImpulse3;
		this.l1.x += dImpulse1 * this.l1x1 + dImpulse2 * this.l1x2 + dImpulse3 * this.l1x3;
		this.l1.y += dImpulse1 * this.l1y1 + dImpulse2 * this.l1y2 + dImpulse3 * this.l1y3;
		this.l1.z += dImpulse1 * this.l1z1 + dImpulse2 * this.l1z2 + dImpulse3 * this.l1z3;
		this.a1.x += dImpulse1 * this.a1x1 + dImpulse2 * this.a1x2 + dImpulse3 * this.a1x3;
		this.a1.y += dImpulse1 * this.a1y1 + dImpulse2 * this.a1y2 + dImpulse3 * this.a1y3;
		this.a1.z += dImpulse1 * this.a1z1 + dImpulse2 * this.a1z2 + dImpulse3 * this.a1z3;
		this.l2.x -= dImpulse1 * this.l2x1 + dImpulse2 * this.l2x2 + dImpulse3 * this.l2x3;
		this.l2.y -= dImpulse1 * this.l2y1 + dImpulse2 * this.l2y2 + dImpulse3 * this.l2y3;
		this.l2.z -= dImpulse1 * this.l2z1 + dImpulse2 * this.l2z2 + dImpulse3 * this.l2z3;
		this.a2.x -= dImpulse1 * this.a2x1 + dImpulse2 * this.a2x2 + dImpulse3 * this.a2x3;
		this.a2.y -= dImpulse1 * this.a2y1 + dImpulse2 * this.a2y2 + dImpulse3 * this.a2y3;
		this.a2.z -= dImpulse1 * this.a2z1 + dImpulse2 * this.a2z2 + dImpulse3 * this.a2z3;
	}
	,__class__: oimohx_physics_constraint_joint_base_Translational3Constraint
};
var oimohx_physics_constraint_joint_base_TranslationalConstraint = function(joint,limitMotor) {
	this.limitMotor = limitMotor;
	this.b1 = joint.body1;
	this.b2 = joint.body2;
	this.p1 = joint.anchorPoint1;
	this.p2 = joint.anchorPoint2;
	this.r1 = joint.relativeAnchorPoint1;
	this.r2 = joint.relativeAnchorPoint2;
	this.l1 = this.b1.linearVelocity;
	this.l2 = this.b2.linearVelocity;
	this.a1 = this.b1.angularVelocity;
	this.a2 = this.b2.angularVelocity;
	this.i1 = this.b1.inverseInertia;
	this.i2 = this.b2.inverseInertia;
	this.limitImpulse = 0;
	this.motorImpulse = 0;
};
$hxClasses["oimohx.physics.constraint.joint.base.TranslationalConstraint"] = oimohx_physics_constraint_joint_base_TranslationalConstraint;
oimohx_physics_constraint_joint_base_TranslationalConstraint.__name__ = ["oimohx","physics","constraint","joint","base","TranslationalConstraint"];
oimohx_physics_constraint_joint_base_TranslationalConstraint.prototype = {
	limitMotor: null
	,b1: null
	,b2: null
	,p1: null
	,p2: null
	,r1: null
	,r2: null
	,l1: null
	,l2: null
	,a1: null
	,a2: null
	,i1: null
	,i2: null
	,cfm: null
	,m1: null
	,m2: null
	,i1e00: null
	,i1e01: null
	,i1e02: null
	,i1e10: null
	,i1e11: null
	,i1e12: null
	,i1e20: null
	,i1e21: null
	,i1e22: null
	,i2e00: null
	,i2e01: null
	,i2e02: null
	,i2e10: null
	,i2e11: null
	,i2e12: null
	,i2e20: null
	,i2e21: null
	,i2e22: null
	,motorDenom: null
	,invMotorDenom: null
	,invDenom: null
	,ax: null
	,ay: null
	,az: null
	,r1x: null
	,r1y: null
	,r1z: null
	,r2x: null
	,r2y: null
	,r2z: null
	,t1x: null
	,t1y: null
	,t1z: null
	,t2x: null
	,t2y: null
	,t2z: null
	,l1x: null
	,l1y: null
	,l1z: null
	,l2x: null
	,l2y: null
	,l2z: null
	,a1x: null
	,a1y: null
	,a1z: null
	,a2x: null
	,a2y: null
	,a2z: null
	,lowerLimit: null
	,upperLimit: null
	,limitVelocity: null
	,limitImpulse: null
	,limitState: null
	,enableMotor: null
	,motorSpeed: null
	,maxMotorForce: null
	,maxMotorImpulse: null
	,motorImpulse: null
	,preSolve: function(timeStep,invTimeStep) {
		this.ax = this.limitMotor.axis.x;
		this.ay = this.limitMotor.axis.y;
		this.az = this.limitMotor.axis.z;
		this.lowerLimit = this.limitMotor.lowerLimit;
		this.upperLimit = this.limitMotor.upperLimit;
		this.motorSpeed = this.limitMotor.motorSpeed;
		this.maxMotorForce = this.limitMotor.maxMotorForce;
		this.enableMotor = this.maxMotorForce > 0;
		this.m1 = this.b1.inverseMass;
		this.m2 = this.b2.inverseMass;
		this.i1e00 = this.i1.elements[0];
		this.i1e01 = this.i1.elements[1];
		this.i1e02 = this.i1.elements[2];
		this.i1e10 = this.i1.elements[3];
		this.i1e11 = this.i1.elements[4];
		this.i1e12 = this.i1.elements[5];
		this.i1e20 = this.i1.elements[6];
		this.i1e21 = this.i1.elements[7];
		this.i1e22 = this.i1.elements[8];
		this.i2e00 = this.i2.elements[0];
		this.i2e01 = this.i2.elements[1];
		this.i2e02 = this.i2.elements[2];
		this.i2e10 = this.i2.elements[3];
		this.i2e11 = this.i2.elements[4];
		this.i2e12 = this.i2.elements[5];
		this.i2e20 = this.i2.elements[6];
		this.i2e21 = this.i2.elements[7];
		this.i2e22 = this.i2.elements[8];
		var dx = this.p2.x - this.p1.x;
		var dy = this.p2.y - this.p1.y;
		var dz = this.p2.z - this.p1.z;
		var d = dx * this.ax + dy * this.ay + dz * this.az;
		var frequency = this.limitMotor.frequency;
		var enableSpring = frequency > 0;
		var enableLimit = this.lowerLimit <= this.upperLimit;
		if(enableSpring && d > 20 || d < -20) enableSpring = false;
		if(enableLimit) {
			if(this.lowerLimit == this.upperLimit) {
				if(this.limitState != 0) {
					this.limitState = 0;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.lowerLimit - d;
				if(!enableSpring) d = this.lowerLimit;
			} else if(d < this.lowerLimit) {
				if(this.limitState != -1) {
					this.limitState = -1;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.lowerLimit - d;
				if(!enableSpring) d = this.lowerLimit;
			} else if(d > this.upperLimit) {
				if(this.limitState != 1) {
					this.limitState = 1;
					this.limitImpulse = 0;
				}
				this.limitVelocity = this.upperLimit - d;
				if(!enableSpring) d = this.upperLimit;
			} else {
				this.limitState = 2;
				this.limitImpulse = 0;
				this.limitVelocity = 0;
			}
			if(!enableSpring) {
				if(this.limitVelocity > 0.005) this.limitVelocity -= 0.005; else if(this.limitVelocity < -0.005) this.limitVelocity += 0.005; else this.limitVelocity = 0;
			}
		} else {
			this.limitState = 2;
			this.limitImpulse = 0;
		}
		if(this.enableMotor && (this.limitState != 0 || enableSpring)) this.maxMotorImpulse = this.maxMotorForce * timeStep; else {
			this.motorImpulse = 0;
			this.maxMotorImpulse = 0;
		}
		var rdx = d * this.ax;
		var rdy = d * this.ay;
		var rdz = d * this.az;
		var w1 = this.m1 / (this.m1 + this.m2);
		var w2 = 1 - w1;
		this.r1x = this.r1.x + rdx * w1;
		this.r1y = this.r1.y + rdy * w1;
		this.r1z = this.r1.z + rdz * w1;
		this.r2x = this.r2.x - rdx * w2;
		this.r2y = this.r2.y - rdy * w2;
		this.r2z = this.r2.z - rdz * w2;
		this.t1x = this.r1y * this.az - this.r1z * this.ay;
		this.t1y = this.r1z * this.ax - this.r1x * this.az;
		this.t1z = this.r1x * this.ay - this.r1y * this.ax;
		this.t2x = this.r2y * this.az - this.r2z * this.ay;
		this.t2y = this.r2z * this.ax - this.r2x * this.az;
		this.t2z = this.r2x * this.ay - this.r2y * this.ax;
		this.l1x = this.ax * this.m1;
		this.l1y = this.ay * this.m1;
		this.l1z = this.az * this.m1;
		this.l2x = this.ax * this.m2;
		this.l2y = this.ay * this.m2;
		this.l2z = this.az * this.m2;
		this.a1x = this.t1x * this.i1e00 + this.t1y * this.i1e01 + this.t1z * this.i1e02;
		this.a1y = this.t1x * this.i1e10 + this.t1y * this.i1e11 + this.t1z * this.i1e12;
		this.a1z = this.t1x * this.i1e20 + this.t1y * this.i1e21 + this.t1z * this.i1e22;
		this.a2x = this.t2x * this.i2e00 + this.t2y * this.i2e01 + this.t2z * this.i2e02;
		this.a2y = this.t2x * this.i2e10 + this.t2y * this.i2e11 + this.t2z * this.i2e12;
		this.a2z = this.t2x * this.i2e20 + this.t2y * this.i2e21 + this.t2z * this.i2e22;
		this.motorDenom = this.m1 + this.m2 + this.ax * (this.a1y * this.r1z - this.a1z * this.r1y + this.a2y * this.r2z - this.a2z * this.r2y) + this.ay * (this.a1z * this.r1x - this.a1x * this.r1z + this.a2z * this.r2x - this.a2x * this.r2z) + this.az * (this.a1x * this.r1y - this.a1y * this.r1x + this.a2x * this.r2y - this.a2y * this.r2x);
		this.invMotorDenom = 1 / this.motorDenom;
		if(enableSpring && this.limitState != 2) {
			var omega = 6.2831853 * frequency;
			var k = omega * omega * timeStep;
			var dmp = invTimeStep / (k + 2 * this.limitMotor.dampingRatio * omega);
			this.cfm = this.motorDenom * dmp;
			this.limitVelocity *= k * dmp;
		} else {
			this.cfm = 0;
			this.limitVelocity *= invTimeStep * 0.05;
		}
		this.invDenom = 1 / (this.motorDenom + this.cfm);
		var totalImpulse = this.limitImpulse + this.motorImpulse;
		this.l1.x += totalImpulse * this.l1x;
		this.l1.y += totalImpulse * this.l1y;
		this.l1.z += totalImpulse * this.l1z;
		this.a1.x += totalImpulse * this.a1x;
		this.a1.y += totalImpulse * this.a1y;
		this.a1.z += totalImpulse * this.a1z;
		this.l2.x -= totalImpulse * this.l2x;
		this.l2.y -= totalImpulse * this.l2y;
		this.l2.z -= totalImpulse * this.l2z;
		this.a2.x -= totalImpulse * this.a2x;
		this.a2.y -= totalImpulse * this.a2y;
		this.a2.z -= totalImpulse * this.a2z;
	}
	,solve: function() {
		var rvn = this.ax * (this.l2.x - this.l1.x) + this.ay * (this.l2.y - this.l1.y) + this.az * (this.l2.z - this.l1.z) + this.t2x * this.a2.x - this.t1x * this.a1.x + this.t2y * this.a2.y - this.t1y * this.a1.y + this.t2z * this.a2.z - this.t1z * this.a1.z;
		var newMotorImpulse;
		if(this.enableMotor) {
			newMotorImpulse = (rvn - this.motorSpeed) * this.invMotorDenom;
			var oldMotorImpulse = this.motorImpulse;
			this.motorImpulse += newMotorImpulse;
			if(this.motorImpulse > this.maxMotorImpulse) this.motorImpulse = this.maxMotorImpulse; else if(this.motorImpulse < -this.maxMotorImpulse) this.motorImpulse = -this.maxMotorImpulse;
			newMotorImpulse = this.motorImpulse - oldMotorImpulse;
			rvn -= newMotorImpulse * this.motorDenom;
		} else newMotorImpulse = 0;
		var newLimitImpulse;
		if(this.limitState != 2) {
			newLimitImpulse = (rvn - this.limitVelocity - this.limitImpulse * this.cfm) * this.invDenom;
			var oldLimitImpulse = this.limitImpulse;
			this.limitImpulse += newLimitImpulse;
			if(this.limitImpulse * this.limitState < 0) this.limitImpulse = 0;
			newLimitImpulse = this.limitImpulse - oldLimitImpulse;
		} else newLimitImpulse = 0;
		var totalImpulse = newLimitImpulse + newMotorImpulse;
		this.l1.x += totalImpulse * this.l1x;
		this.l1.y += totalImpulse * this.l1y;
		this.l1.z += totalImpulse * this.l1z;
		this.a1.x += totalImpulse * this.a1x;
		this.a1.y += totalImpulse * this.a1y;
		this.a1.z += totalImpulse * this.a1z;
		this.l2.x -= totalImpulse * this.l2x;
		this.l2.y -= totalImpulse * this.l2y;
		this.l2.z -= totalImpulse * this.l2z;
		this.a2.x -= totalImpulse * this.a2x;
		this.a2.y -= totalImpulse * this.a2y;
		this.a2.z -= totalImpulse * this.a2z;
	}
	,__class__: oimohx_physics_constraint_joint_base_TranslationalConstraint
};
var oimohx_physics_dynamics_RigidBody = function(x,y,z,rad,ax,ay,az) {
	if(az == null) az = 0;
	if(ay == null) ay = 0;
	if(ax == null) ax = 0;
	if(rad == null) rad = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.massInfo = new oimohx_physics_collision_shape_MassInfo();
	this.numShapes = 0;
	this.controlRot = false;
	this.controlPos = false;
	this.position = new oimohx_math_Vec3(0,0,0);
	this.name = "";
	this.position = new oimohx_math_Vec3(x,y,z);
	var len = ax * ax + ay * ay + az * az;
	if(len > 0) {
		len = 1 / Math.sqrt(len);
		ax *= len;
		ay *= len;
		az *= len;
	}
	var sin = Math.sin(rad * 0.5);
	var cos = Math.cos(rad * 0.5);
	this.orientation = new oimohx_math_Quat(cos,sin * ax,sin * ay,sin * az);
	this.linearVelocity = new oimohx_math_Vec3();
	this.angularVelocity = new oimohx_math_Vec3();
	this.sleepPosition = new oimohx_math_Vec3();
	this.sleepOrientation = new oimohx_math_Quat();
	this.rotation = new oimohx_math_Mat33();
	this.inverseInertia = new oimohx_math_Mat33();
	this.localInertia = new oimohx_math_Mat33();
	this.inverseLocalInertia = new oimohx_math_Mat33();
	this.allowSleep = true;
	this.sleepTime = 0;
	this.newOrientation = new oimohx_math_Quat();
	this.newRotation = new oimohx_math_Vec3(0,0,0);
	this.newPosition = new oimohx_math_Vec3(0,0,0);
	this.matrix = new oimohx_math_Mat44();
};
$hxClasses["oimohx.physics.dynamics.RigidBody"] = oimohx_physics_dynamics_RigidBody;
oimohx_physics_dynamics_RigidBody.__name__ = ["oimohx","physics","dynamics","RigidBody"];
oimohx_physics_dynamics_RigidBody.prototype = {
	prev: null
	,next: null
	,name: null
	,type: null
	,isDynamic: null
	,isStatic: null
	,position: null
	,orientation: null
	,sleepPosition: null
	,sleepOrientation: null
	,linearVelocity: null
	,angularVelocity: null
	,rotation: null
	,matrix: null
	,newRotation: null
	,newPosition: null
	,newOrientation: null
	,controlPos: null
	,controlRot: null
	,mass: null
	,inverseMass: null
	,inverseInertia: null
	,localInertia: null
	,inverseLocalInertia: null
	,shapes: null
	,numShapes: null
	,parent: null
	,contactLink: null
	,numContacts: null
	,jointLink: null
	,numJoints: null
	,addedToIsland: null
	,sleepTime: null
	,sleeping: null
	,allowSleep: null
	,massInfo: null
	,prestep: null
	,addShape: function(shape) {
		if(shape != null) {
			if(shape.parent != null) throw new js__$Boot_HaxeError("Shape already has a parent!");
			if(this.shapes != null) (this.shapes.prev = shape).next = this.shapes;
			this.shapes = shape;
			shape.parent = this;
			if(this.parent != null) this.parent.addShape(shape);
			this.numShapes++;
		}
	}
	,removeShape: function(shape) {
		var remove = shape;
		if(remove.parent != this) return;
		var prev = remove.prev;
		var next = remove.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.shapes == remove) this.shapes = next;
		remove.prev = null;
		remove.next = null;
		remove.parent = null;
		if(this.parent != null) this.parent.removeShape(remove);
		this.numShapes--;
	}
	,setupMass: function(type,adjustPosition) {
		if(adjustPosition == null) adjustPosition = true;
		if(type == null) type = 1;
		this.type = type;
		this.isDynamic = type == 1;
		this.isStatic = type == 2;
		this.mass = 0;
		this.localInertia.init(0,0,0,0,0,0,0,0,0);
		var tmpM = new oimohx_math_Mat33();
		var tmpV = new oimohx_math_Vec3();
		var shape = this.shapes;
		while(shape != null) {
			shape.calculateMassInfo(this.massInfo);
			var shapeMass = this.massInfo.mass;
			var relX = shape.relativePosition.x;
			var relY = shape.relativePosition.y;
			var relZ = shape.relativePosition.z;
			tmpV.x += relX * shapeMass;
			tmpV.y += relY * shapeMass;
			tmpV.z += relZ * shapeMass;
			this.mass += shapeMass;
			this.rotateInertia(shape.relativeRotation,this.massInfo.inertia,tmpM);
			this.localInertia.addEqual(tmpM);
			this.localInertia.elements[0] = this.localInertia.elements[0] + shapeMass * (relY * relY + relZ * relZ);
			this.localInertia.elements[1] = this.localInertia.elements[1] + shapeMass * (relX * relX + relZ * relZ);
			this.localInertia.elements[2] = this.localInertia.elements[2] + shapeMass * (relX * relX + relY * relY);
			var xy = shapeMass * relX * relY;
			var yz = shapeMass * relY * relZ;
			var zx = shapeMass * relZ * relX;
			this.localInertia.elements[3] = this.localInertia.elements[3] - xy;
			this.localInertia.elements[4] = this.localInertia.elements[4] - xy;
			this.localInertia.elements[5] = this.localInertia.elements[5] - yz;
			this.localInertia.elements[6] = this.localInertia.elements[6] - yz;
			this.localInertia.elements[7] = this.localInertia.elements[7] - zx;
			this.localInertia.elements[8] = this.localInertia.elements[8] - zx;
			shape = shape.next;
		}
		this.inverseMass = 1 / this.mass;
		tmpV.scaleEqual(this.inverseMass);
		if(adjustPosition) {
			this.position.addEqual(tmpV);
			shape = this.shapes;
			while(shape != null) {
				shape.relativePosition.subEqual(tmpV);
				shape = shape.next;
			}
			var relX1 = tmpV.x;
			var relY1 = tmpV.y;
			var relZ1 = tmpV.z;
			this.localInertia.elements[0] = this.localInertia.elements[0] - this.mass * (relY1 * relY1 + relZ1 * relZ1);
			this.localInertia.elements[1] = this.localInertia.elements[1] - this.mass * (relX1 * relX1 + relZ1 * relZ1);
			this.localInertia.elements[2] = this.localInertia.elements[2] - this.mass * (relX1 * relX1 + relY1 * relY1);
			var xy1 = this.mass * relX1 * relY1;
			var yz1 = this.mass * relY1 * relZ1;
			var zx1 = this.mass * relZ1 * relX1;
			this.localInertia.elements[3] = this.localInertia.elements[3] + xy1;
			this.localInertia.elements[4] = this.localInertia.elements[4] + xy1;
			this.localInertia.elements[5] = this.localInertia.elements[5] + yz1;
			this.localInertia.elements[6] = this.localInertia.elements[6] + yz1;
			this.localInertia.elements[7] = this.localInertia.elements[7] + zx1;
			this.localInertia.elements[8] = this.localInertia.elements[8] + zx1;
		}
		this.inverseLocalInertia.invert(this.localInertia);
		if(type == 2) {
			this.inverseMass = 0;
			this.inverseLocalInertia.init(0,0,0,0,0,0,0,0,0);
		}
		this.syncShapes();
		this.awake();
	}
	,awake: function() {
		if(!this.allowSleep || !this.sleeping) return;
		this.sleeping = false;
		this.sleepTime = 0;
		var cs = this.contactLink;
		while(cs != null) {
			cs.body.sleepTime = 0;
			cs.body.sleeping = false;
			cs = cs.next;
		}
		var js = this.jointLink;
		while(js != null) {
			js.body.sleepTime = 0;
			js.body.sleeping = false;
			js = js.next;
		}
		var shape = this.shapes;
		while(shape != null) {
			shape.updateProxy();
			shape = shape.next;
		}
	}
	,sleep: function() {
		if(!this.allowSleep || this.sleeping) return;
		this.linearVelocity.x = 0;
		this.linearVelocity.y = 0;
		this.linearVelocity.z = 0;
		this.angularVelocity.x = 0;
		this.angularVelocity.y = 0;
		this.angularVelocity.z = 0;
		this.sleepPosition.x = this.position.x;
		this.sleepPosition.y = this.position.y;
		this.sleepPosition.z = this.position.z;
		this.sleepOrientation.s = this.orientation.s;
		this.sleepOrientation.x = this.orientation.x;
		this.sleepOrientation.y = this.orientation.y;
		this.sleepOrientation.z = this.orientation.z;
		this.sleepTime = 0;
		this.sleeping = true;
		var shape = this.shapes;
		while(shape != null) {
			shape.updateProxy();
			shape = shape.next;
		}
	}
	,isLonely: function() {
		return this.numJoints == 0 && this.numContacts == 0;
	}
	,updatePosition: function(timeStep) {
		var _g = this.type;
		switch(_g) {
		case 2:
			this.linearVelocity.x = 0;
			this.linearVelocity.y = 0;
			this.linearVelocity.z = 0;
			this.angularVelocity.x = 0;
			this.angularVelocity.y = 0;
			this.angularVelocity.z = 0;
			break;
		case 1:
			var vx = this.linearVelocity.x;
			var vy = this.linearVelocity.y;
			var vz = this.linearVelocity.z;
			this.position.x += vx * timeStep;
			this.position.y += vy * timeStep;
			this.position.z += vz * timeStep;
			vx = this.angularVelocity.x;
			vy = this.angularVelocity.y;
			vz = this.angularVelocity.z;
			var os = this.orientation.s;
			var ox = this.orientation.x;
			var oy = this.orientation.y;
			var oz = this.orientation.z;
			timeStep *= 0.5;
			var s = (-vx * ox - vy * oy - vz * oz) * timeStep;
			var x = (vx * os + vy * oz - vz * oy) * timeStep;
			var y = (-vx * oz + vy * os + vz * ox) * timeStep;
			var z = (vx * oy - vy * ox + vz * os) * timeStep;
			os += s;
			ox += x;
			oy += y;
			oz += z;
			s = 1 / Math.sqrt(os * os + ox * ox + oy * oy + oz * oz);
			this.orientation.s = os * s;
			this.orientation.x = ox * s;
			this.orientation.y = oy * s;
			this.orientation.z = oz * s;
			break;
		default:
		}
		this.syncShapes();
	}
	,rotateInertia: function(rot,inertia,out) {
		var r00 = rot.elements[0];
		var r01 = rot.elements[1];
		var r02 = rot.elements[2];
		var r10 = rot.elements[3];
		var r11 = rot.elements[4];
		var r12 = rot.elements[5];
		var r20 = rot.elements[6];
		var r21 = rot.elements[7];
		var r22 = rot.elements[8];
		var i00 = inertia.elements[0];
		var i01 = inertia.elements[1];
		var i02 = inertia.elements[2];
		var i10 = inertia.elements[3];
		var i11 = inertia.elements[4];
		var i12 = inertia.elements[5];
		var i20 = inertia.elements[6];
		var i21 = inertia.elements[7];
		var i22 = inertia.elements[8];
		var e00 = r00 * i00 + r01 * i10 + r02 * i20;
		var e01 = r00 * i01 + r01 * i11 + r02 * i21;
		var e02 = r00 * i02 + r01 * i12 + r02 * i22;
		var e10 = r10 * i00 + r11 * i10 + r12 * i20;
		var e11 = r10 * i01 + r11 * i11 + r12 * i21;
		var e12 = r10 * i02 + r11 * i12 + r12 * i22;
		var e20 = r20 * i00 + r21 * i10 + r22 * i20;
		var e21 = r20 * i01 + r21 * i11 + r22 * i21;
		var e22 = r20 * i02 + r21 * i12 + r22 * i22;
		out.elements[0] = e00 * r00 + e01 * r01 + e02 * r02;
		out.elements[1] = e00 * r10 + e01 * r11 + e02 * r12;
		out.elements[2] = e00 * r20 + e01 * r21 + e02 * r22;
		out.elements[3] = e10 * r00 + e11 * r01 + e12 * r02;
		out.elements[4] = e10 * r10 + e11 * r11 + e12 * r12;
		out.elements[5] = e10 * r20 + e11 * r21 + e12 * r22;
		out.elements[6] = e20 * r00 + e21 * r01 + e22 * r02;
		out.elements[7] = e20 * r10 + e21 * r11 + e22 * r12;
		out.elements[8] = e20 * r20 + e21 * r21 + e22 * r22;
	}
	,syncShapes: function() {
		var s = this.orientation.s;
		var x = this.orientation.x;
		var y = this.orientation.y;
		var z = this.orientation.z;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var sx = s * x2;
		var sy = s * y2;
		var sz = s * z2;
		var tr = this.rotation.elements;
		var val = tr[0] = 1 - yy - zz;
		this.rotation.elements[0] = val;
		var val1 = tr[1] = xy - sz;
		this.rotation.elements[1] = val1;
		var val2 = tr[2] = xz + sy;
		this.rotation.elements[2] = val2;
		var val3 = tr[3] = xy + sz;
		this.rotation.elements[3] = val3;
		var val4 = tr[4] = 1 - xx - zz;
		this.rotation.elements[4] = val4;
		var val5 = tr[5] = yz - sx;
		this.rotation.elements[5] = val5;
		var val6 = tr[6] = xz - sy;
		this.rotation.elements[6] = val6;
		var val7 = tr[7] = yz + sx;
		this.rotation.elements[7] = val7;
		var val8 = tr[8] = 1 - xx - yy;
		this.rotation.elements[8] = val8;
		this.rotateInertia(this.rotation,this.inverseLocalInertia,this.inverseInertia);
		var shape = this.shapes;
		while(shape != null) {
			shape.position.mul(this.position,shape.relativePosition,this.rotation);
			shape.rotation.mul(shape.relativeRotation,this.rotation);
			shape.updateProxy();
			shape = shape.next;
		}
	}
	,applyImpulse: function(position,force) {
		this.linearVelocity.x += force.x * this.inverseMass;
		this.linearVelocity.y += force.y * this.inverseMass;
		this.linearVelocity.z += force.z * this.inverseMass;
		var rel = new oimohx_math_Vec3();
		rel.sub(position,this.position).cross(rel,force).mulMat(this.inverseInertia,rel);
		this.angularVelocity.addEqual(rel);
	}
	,setImpulse: function(position,force) {
		this.linearVelocity.x = force.x * this.inverseMass;
		this.linearVelocity.y = force.y * this.inverseMass;
		this.linearVelocity.z = force.z * this.inverseMass;
		var rel = new oimohx_math_Vec3();
		rel.sub(position,this.position).cross(rel,force).mulMat(this.inverseInertia,rel);
		this.angularVelocity.x = rel.x;
		this.angularVelocity.y = rel.y;
		this.angularVelocity.z = rel.z;
	}
	,rotationVectToQuad: function(rot) {
		var r = com_babylonhx_physics_plugins_Body.EulerToAxis(rot.x * oimohx_physics_dynamics_World.TO_RAD,rot.y * oimohx_physics_dynamics_World.TO_RAD,rot.z * oimohx_physics_dynamics_World.TO_RAD);
		return this.rotationAxisToQuad(r[0],r[1],r[2],r[3]);
	}
	,rotationAxisToQuad: function(rad,ax,ay,az) {
		var len = ax * ax + ay * ay + az * az;
		if(len > 0) {
			len = 1 / Math.sqrt(len);
			ax *= len;
			ay *= len;
			az *= len;
		}
		var sin = Math.sin(rad * 0.5);
		var cos = Math.cos(rad * 0.5);
		return new oimohx_math_Quat(cos,sin * ax,sin * ay,sin * az);
	}
	,setPosition: function(pos) {
		this.newPosition.init(pos.x * 0.01,pos.y * 0.01,pos.z * 0.01);
		this.controlPos = true;
	}
	,setQuaternion: function(q) {
		this.newOrientation.init(q.s,q.x,q.y,q.z);
		this.controlRot = true;
	}
	,setRotation: function(rot) {
		this.newOrientation = this.rotationVectToQuad(rot);
		this.controlRot = true;
	}
	,resetPosition: function(x,y,z) {
		this.linearVelocity.init();
		this.angularVelocity.init();
		this.position.init(x * 0.01,y * 0.01,z * 0.01);
		this.awake();
	}
	,resetQuaternion: function(q) {
		this.angularVelocity.init();
		this.orientation = new oimohx_math_Quat(q.s,q.x,q.y,q.z);
		this.awake();
	}
	,resetRotation: function(x,y,z) {
		this.angularVelocity.init();
		this.orientation = this.rotationVectToQuad(new oimohx_math_Vec3(x,y,z));
		this.awake();
	}
	,getPosition: function() {
		return new oimohx_math_Vec3().scale(this.position,100);
	}
	,getMatrix: function() {
		var m = this.matrix.elements;
		var r;
		var len = null;
		var this1;
		this1 = new Float32Array(9);
		r = this1;
		var p = null;
		if(!this.sleeping) {
			r = this.rotation.elements;
			m[0] = r[0];
			m[1] = r[3];
			m[2] = r[6];
			m[3] = 0;
			m[4] = r[1];
			m[5] = r[4];
			m[6] = r[7];
			m[7] = 0;
			m[8] = r[2];
			m[9] = r[5];
			m[10] = r[8];
			m[11] = 0;
			p = this.position;
			m[12] = p.x * 100;
			m[13] = p.y * 100;
			m[14] = p.z * 100;
			m[15] = 0;
		} else m[15] = 1;
		return m;
	}
	,__class__: oimohx_physics_dynamics_RigidBody
};
var oimohx_physics_dynamics_World = function(stepPerSecond,broadPhaseType) {
	if(broadPhaseType == null) broadPhaseType = 2;
	if(stepPerSecond == null) stepPerSecond = 60;
	this.so = null;
	this.o = null;
	this.sp = null;
	this.p = null;
	this.lv = null;
	this.body = null;
	haxe_Log.trace("OimoPhysics *** Copyright (c) 2012-2013 EL-EMENT saharan",{ fileName : "World.hx", lineNumber : 142, className : "oimohx.physics.dynamics.World", methodName : "new"});
	this.timeStep = 1 / stepPerSecond;
	switch(broadPhaseType) {
	case 1:
		this.broadPhase = new oimohx_physics_collision_broadphase_BruteForceBroadPhase();
		break;
	case 2:
		this.broadPhase = new oimohx_physics_collision_broadphase_sap_SAPBroadPhase();
		break;
	case 3:
		this.broadPhase = new oimohx_physics_collision_broadphase_dbvt_DBVTBroadPhase();
		break;
	default:
	}
	this.numIterations = 8;
	this.gravity = new oimohx_math_Vec3(oimohx_physics_dynamics_World.gravityX,oimohx_physics_dynamics_World.gravityY,oimohx_physics_dynamics_World.gravityZ);
	this.performance = new oimohx_physics_util_Performance();
	var numShapeTypes = 3;
	this.detectors = [];
	var _g = 0;
	while(_g < numShapeTypes) {
		var i = _g++;
		this.detectors[i] = [];
	}
	this.detectors[1][1] = new oimohx_physics_collision_narrowphase_SphereSphereCollisionDetector();
	this.detectors[1][2] = new oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector(false);
	this.detectors[2][1] = new oimohx_physics_collision_narrowphase_SphereBoxCollisionDetector(true);
	this.detectors[2][2] = new oimohx_physics_collision_narrowphase_BoxBoxCollisionDetector();
	this.randX = 65535;
	this.randA = 98765;
	this.randB = 123456789;
	this.maxIslandRigidBodies = 64;
	this.islandRigidBodies = [];
	this.islandStack = [];
	this.maxIslandConstraints = 128;
	this.islandConstraints = [];
	this.enableRandomizer = true;
};
$hxClasses["oimohx.physics.dynamics.World"] = oimohx_physics_dynamics_World;
oimohx_physics_dynamics_World.__name__ = ["oimohx","physics","dynamics","World"];
oimohx_physics_dynamics_World.prototype = {
	rigidBodies: null
	,numRigidBodies: null
	,contacts: null
	,unusedContacts: null
	,numContacts: null
	,numContactPoints: null
	,joints: null
	,numJoints: null
	,numIslands: null
	,timeStep: null
	,gravity: null
	,numIterations: null
	,enableRandomizer: null
	,performance: null
	,broadPhase: null
	,detectors: null
	,islandStack: null
	,islandRigidBodies: null
	,maxIslandRigidBodies: null
	,islandConstraints: null
	,maxIslandConstraints: null
	,randX: null
	,randA: null
	,randB: null
	,clear: function() {
		this.randX = 65535;
		while(this.joints != null) this.removeJoint(this.joints);
		while(this.contacts != null) this.removeContact(this.contacts);
		while(this.rigidBodies != null) this.removeRigidBody(this.rigidBodies);
	}
	,addRigidBody: function(rigidBody) {
		if(rigidBody.parent != null) {
			haxe_Log.trace("Body already has a parent!",{ fileName : "World.hx", lineNumber : 207, className : "oimohx.physics.dynamics.World", methodName : "addRigidBody"});
			return;
		}
		rigidBody.parent = this;
		rigidBody.awake();
		var shape = rigidBody.shapes;
		while(shape != null) {
			this.addShape(shape);
			shape = shape.next;
		}
		if(this.rigidBodies != null) (this.rigidBodies.prev = rigidBody).next = this.rigidBodies;
		this.rigidBodies = rigidBody;
		this.numRigidBodies++;
	}
	,removeRigidBody: function(rigidBody) {
		var remove = rigidBody;
		if(remove.parent != this) return;
		remove.awake();
		var js = remove.jointLink;
		while(js != null) {
			var joint = js.joint;
			js = js.next;
			this.removeJoint(joint);
		}
		var shape = rigidBody.shapes;
		while(shape != null) {
			this.removeShape(shape);
			shape = shape.next;
		}
		var prev = remove.prev;
		var next = remove.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.rigidBodies == remove) this.rigidBodies = next;
		remove.prev = null;
		remove.next = null;
		remove.parent = null;
		this.numRigidBodies--;
		remove.setupMass();
		remove.position.x = 9999;
		remove.position.y = 9999;
		remove.position.z = 9999;
	}
	,addShape: function(shape) {
		if(shape.parent == null || shape.parent.parent == null) {
		}
		shape.proxy = this.broadPhase.createProxy(shape);
		shape.updateProxy();
		this.broadPhase.addProxy(shape.proxy);
	}
	,removeShape: function(shape) {
		this.broadPhase.removeProxy(shape.proxy);
		shape.proxy = null;
	}
	,addJoint: function(joint) {
		if(joint.parent != null) {
		}
		if(this.joints != null) (this.joints.prev = joint).next = this.joints;
		this.joints = joint;
		joint.parent = this;
		this.numJoints++;
		joint.awake();
		joint.attach();
	}
	,removeJoint: function(joint) {
		var remove = joint;
		var prev = remove.prev;
		var next = remove.next;
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
		if(this.joints == remove) this.joints = next;
		remove.prev = null;
		remove.next = null;
		this.numJoints--;
		remove.awake();
		remove.detach();
		remove.parent = null;
	}
	,body: null
	,lv: null
	,p: null
	,sp: null
	,o: null
	,so: null
	,step: function(dt) {
		this.timeStep = dt;
		var time1 = haxe_Timer.stamp();
		this.body = this.rigidBodies;
		this.lv = null;
		this.p = null;
		this.sp = null;
		this.o = null;
		this.so = null;
		while(this.body != null) {
			if(this.body.prestep != null) this.body.prestep();
			this.body.addedToIsland = false;
			if(this.body.sleeping) {
				this.lv = this.body.linearVelocity;
				this.p = this.body.position;
				this.sp = this.body.sleepPosition;
				this.o = this.body.orientation;
				this.so = this.body.sleepOrientation;
				if(this.lv.x != 0 || this.lv.y != 0 || this.lv.z != 0 || this.p.x != this.sp.x || this.p.y != this.sp.y || this.p.z != this.sp.z || this.o.s != this.so.s || this.o.x != this.so.x || this.o.y != this.so.y || this.o.z != this.so.z) this.body.awake();
			}
			this.body = this.body.next;
		}
		this.updateContacts();
		this.solveIslands();
		var time2 = haxe_Timer.stamp();
		this.performance.totalTime = time2 - time1;
		this.performance.updatingTime = this.performance.totalTime - (this.performance.broadPhaseTime + this.performance.narrowPhaseTime + this.performance.solvingTime);
	}
	,updateContacts: function() {
		var time1 = haxe_Timer.stamp() * 1000;
		this.broadPhase.detectPairs();
		var pairs = this.broadPhase.pairs;
		var numPairs = this.broadPhase.numPairs;
		var _g = 0;
		while(_g < numPairs) {
			var i = _g++;
			var pair = pairs[i];
			var s1;
			var s2;
			if(pair.shape1.id < pair.shape2.id) {
				s1 = pair.shape1;
				s2 = pair.shape2;
			} else {
				s1 = pair.shape2;
				s2 = pair.shape1;
			}
			var link;
			if(s1.numContacts < s2.numContacts) link = s1.contactLink; else link = s2.contactLink;
			var exists = false;
			while(link != null) {
				if(link.contact.shape1 == s1 && link.contact.shape2 == s2) {
					link.contact.persisting = true;
					exists = true;
					break;
				}
				link = link.next;
			}
			if(!exists) this.addContact(s1,s2);
		}
		var time2 = haxe_Timer.stamp() * 1000;
		this.performance.broadPhaseTime = time2 - time1;
		this.numContactPoints = 0;
		var contact = this.contacts;
		var aabb1;
		var aabb2;
		while(contact != null) {
			if(!contact.persisting) {
				aabb1 = contact.shape1.aabb;
				aabb2 = contact.shape2.aabb;
				if(aabb1.minX > aabb2.maxX || aabb1.maxX < aabb2.minX || aabb1.minY > aabb2.maxY || aabb1.maxY < aabb2.minY || aabb1.minZ > aabb2.maxZ || aabb1.maxZ < aabb2.minZ) {
					var next = contact.next;
					this.removeContact(contact);
					contact = next;
					continue;
				}
			}
			if(contact.body1.isDynamic && !contact.body1.sleeping || contact.body2.isDynamic && !contact.body2.sleeping) contact.updateManifold();
			this.numContactPoints += contact.manifold.numPoints;
			contact.persisting = false;
			contact.constraint.addedToIsland = false;
			contact = contact.next;
		}
		var time3 = haxe_Timer.stamp() * 1000;
		this.performance.narrowPhaseTime = time3 - time2;
	}
	,addContact: function(s1,s2) {
		var newContact;
		if(this.unusedContacts != null) {
			newContact = this.unusedContacts;
			this.unusedContacts = this.unusedContacts.next;
		} else newContact = new oimohx_physics_constraint_contact_Contact();
		newContact.attach(s1,s2);
		newContact.detector = this.detectors[s1.type][s2.type];
		if(this.contacts != null) (this.contacts.prev = newContact).next = this.contacts;
		this.contacts = newContact;
		this.numContacts++;
	}
	,removeContact: function(contact) {
		var prev = contact.prev;
		var next = contact.next;
		if(next != null) next.prev = prev;
		if(prev != null) prev.next = next;
		if(this.contacts == contact) this.contacts = next;
		contact.prev = null;
		contact.next = null;
		contact.detach();
		contact.next = this.unusedContacts;
		this.unusedContacts = contact;
		this.numContacts--;
	}
	,checkContact: function(name1,name2) {
		if(this.getContact(name1,name2) != null) return true;
		return false;
	}
	,getContact: function(name1,name2) {
		var n1 = "";
		var n2 = "";
		var contact = this.contacts;
		while(contact != null) {
			n1 = contact.body1.name;
			n2 = contact.body2.name;
			if(n1 == name1 && n2 == name2 || n2 == name1 && n1 == name2) {
				if(contact.touching) return contact; else return null;
			} else contact = contact.next;
		}
		return null;
	}
	,calSleep: function(body) {
		if(!body.allowSleep) return false;
		var v = body.linearVelocity;
		if(v.x * v.x + v.y * v.y + v.z * v.z > 0.04) return false;
		v = body.angularVelocity;
		if(v.x * v.x + v.y * v.y + v.z * v.z > 0.25) return false;
		return true;
	}
	,solveIslands: function() {
		var invTimeStep = 1 / this.timeStep;
		var body;
		var joint;
		var constraint;
		joint = this.joints;
		while(joint != null) {
			joint.addedToIsland = false;
			joint = joint.next;
		}
		if(this.maxIslandRigidBodies < this.numRigidBodies) {
			this.maxIslandRigidBodies = this.numRigidBodies << 1;
			this.islandRigidBodies = [];
			this.islandStack = [];
		}
		var numConstraints = this.numJoints + this.numContacts;
		if(this.maxIslandConstraints < numConstraints) {
			this.maxIslandConstraints = numConstraints << 1;
			this.islandConstraints = [];
		}
		var time1 = Math.round(haxe_Timer.stamp() * 1000);
		this.numIslands = 0;
		var base = this.rigidBodies;
		while(base != null) {
			if(base.addedToIsland || base.isStatic || base.sleeping) {
				base = base.next;
				continue;
			}
			if(base.numJoints == 0 && base.numContacts == 0) {
				if(base.isDynamic) {
					base.linearVelocity.x += this.gravity.x * this.timeStep;
					base.linearVelocity.y += this.gravity.y * this.timeStep;
					base.linearVelocity.z += this.gravity.z * this.timeStep;
				}
				if(this.calSleep(base)) {
					base.sleepTime += this.timeStep;
					if(base.sleepTime > 0.5) base.sleep(); else base.updatePosition(this.timeStep);
				} else {
					base.sleepTime = 0;
					base.updatePosition(this.timeStep);
				}
				this.numIslands++;
				base = base.next;
				continue;
			}
			var islandNumRigidBodies = 0;
			var islandNumConstraints = 0;
			var stackCount = 1;
			this.islandStack[0] = base;
			base.addedToIsland = true;
			do {
				if(stackCount == 0) break;
				body = this.islandStack[--stackCount];
				this.islandStack[stackCount] = null;
				body.sleeping = false;
				this.islandRigidBodies[islandNumRigidBodies++] = body;
				if(body.isStatic) continue;
				var cs = body.contactLink;
				while(cs != null) {
					var contact = cs.contact;
					constraint = contact.constraint;
					if(constraint.addedToIsland || !contact.touching) {
						cs = cs.next;
						continue;
					}
					this.islandConstraints[islandNumConstraints++] = constraint;
					constraint.addedToIsland = true;
					var next = cs.body;
					if(next.addedToIsland) {
						cs = cs.next;
						continue;
					}
					this.islandStack[stackCount++] = next;
					next.addedToIsland = true;
					cs = cs.next;
				}
				var js = body.jointLink;
				while(js != null) {
					constraint = js.joint;
					if(constraint.addedToIsland) {
						js = js.next;
						continue;
					}
					this.islandConstraints[islandNumConstraints++] = constraint;
					constraint.addedToIsland = true;
					var next1 = js.body;
					if(next1.addedToIsland || !next1.isDynamic) {
						js = js.next;
						continue;
					}
					this.islandStack[stackCount++] = next1;
					next1.addedToIsland = true;
					js = js.next;
				}
			} while(stackCount != 0);
			var gx = this.gravity.x * this.timeStep;
			var gy = this.gravity.y * this.timeStep;
			var gz = this.gravity.z * this.timeStep;
			var _g = 0;
			while(_g < islandNumRigidBodies) {
				var j = _g++;
				body = this.islandRigidBodies[j];
				if(body.isDynamic) {
					body.linearVelocity.x += gx;
					body.linearVelocity.y += gy;
					body.linearVelocity.z += gz;
				}
			}
			if(this.enableRandomizer) {
				var _g1 = 1;
				while(_g1 < islandNumConstraints) {
					var j1 = _g1++;
					this.randX = this.randX * this.randA + this.randB & 2147483647;
					var swap = this.randX / 2147483648.0 * j1 | 0 | 0;
					constraint = this.islandConstraints[j1];
					this.islandConstraints[j1] = this.islandConstraints[swap];
					this.islandConstraints[swap] = constraint;
				}
			}
			var _g2 = 0;
			while(_g2 < islandNumConstraints) {
				var j2 = _g2++;
				this.islandConstraints[j2].preSolve(this.timeStep,invTimeStep);
			}
			var _g11 = 0;
			var _g3 = this.numIterations;
			while(_g11 < _g3) {
				var k = _g11++;
				var _g21 = 0;
				while(_g21 < islandNumConstraints) {
					var j3 = _g21++;
					this.islandConstraints[j3].solve();
				}
			}
			var _g4 = 0;
			while(_g4 < islandNumConstraints) {
				var j4 = _g4++;
				this.islandConstraints[j4].postSolve();
				this.islandConstraints[j4] = null;
			}
			var sleepTime = 10;
			var _g5 = 0;
			while(_g5 < islandNumRigidBodies) {
				var j5 = _g5++;
				body = this.islandRigidBodies[j5];
				if(this.calSleep(body)) {
					body.sleepTime += this.timeStep;
					if(body.sleepTime < sleepTime) sleepTime = body.sleepTime;
				} else {
					body.sleepTime = 0;
					sleepTime = 0;
					continue;
				}
			}
			if(sleepTime > 0.5) {
				var _g6 = 0;
				while(_g6 < islandNumRigidBodies) {
					var j6 = _g6++;
					this.islandRigidBodies[j6].sleep();
					this.islandRigidBodies[j6] = null;
				}
			} else {
				var _g7 = 0;
				while(_g7 < islandNumRigidBodies) {
					var j7 = _g7++;
					this.islandRigidBodies[j7].updatePosition(this.timeStep);
					this.islandRigidBodies[j7] = null;
				}
			}
			this.numIslands++;
			if(base != null) base = base.next;
		}
		var time2 = Math.round(haxe_Timer.stamp() * 1000);
		this.performance.solvingTime = time2 - time1;
	}
	,__class__: oimohx_physics_dynamics_World
};
var oimohx_physics_util_Performance = function() {
};
$hxClasses["oimohx.physics.util.Performance"] = oimohx_physics_util_Performance;
oimohx_physics_util_Performance.__name__ = ["oimohx","physics","util","Performance"];
oimohx_physics_util_Performance.prototype = {
	broadPhaseTime: null
	,narrowPhaseTime: null
	,solvingTime: null
	,updatingTime: null
	,totalTime: null
	,__class__: oimohx_physics_util_Performance
};
var samples_InstancedBones = function(scene) {
	var light = new com_babylonhx_lights_DirectionalLight("dir01",new com_babylonhx_math_Vector3(0,-0.5,-1.0),scene);
	var camera = new com_babylonhx_cameras_ArcRotateCamera("Camera",0,0,20,new com_babylonhx_math_Vector3(0,30,0),scene);
	camera.attachControl(this);
	camera.setPosition(new com_babylonhx_math_Vector3(20,70,120));
	light.position = new com_babylonhx_math_Vector3(50,250,200);
	light.shadowOrthoScale = 2.0;
	camera.minZ = 1.0;
	new com_babylonhx_layer_Layer("background","assets/img/graygrad.jpg",scene,true);
	scene.ambientColor = new com_babylonhx_math_Color3(0.3,0.3,0.3);
	var ground = com_babylonhx_mesh_Mesh.CreateGround("ground",700,700,1,scene,false);
	var groundMaterial = new com_babylonhx_materials_StandardMaterial("ground",scene);
	groundMaterial.diffuseColor = new com_babylonhx_math_Color3(0.2,0.2,0.2);
	groundMaterial.specularColor = new com_babylonhx_math_Color3(0,0,0);
	ground.set_material(groundMaterial);
	ground.set_receiveShadows(true);
	var shadowGenerator = new com_babylonhx_lights_shadows_ShadowGenerator(1024,light);
	shadowGenerator.set_usePoissonSampling(true);
	com_babylonhx_loading_SceneLoader.RegisterPlugin(com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin());
	com_babylonhx_loading_SceneLoader.ImportMesh("him","assets/models/Dude/","Dude.babylon",scene,function(newMeshes2,particleSystems2,skeletons2) {
		var dude = newMeshes2[0];
		var _g1 = 1;
		var _g = newMeshes2.length;
		while(_g1 < _g) {
			var index = _g1++;
			shadowGenerator.getShadowMap().renderList.push(newMeshes2[index]);
		}
		var _g2 = 0;
		while(_g2 < 10) {
			var count = _g2++;
			var offsetX = 200 * Math.random() - 100;
			var offsetZ = 200 * Math.random() - 100;
			var _g21 = 1;
			var _g11 = newMeshes2.length;
			while(_g21 < _g11) {
				var index1 = _g21++;
				var instance = (js_Boot.__cast(newMeshes2[index1] , com_babylonhx_mesh_Mesh)).createInstance("instance" + count);
				instance.parent = newMeshes2[index1].parent;
				instance.position = newMeshes2[index1].position.clone();
				if((js_Boot.__cast(instance.parent , com_babylonhx_mesh_Mesh)).subMeshes == null) {
					instance.position.x += offsetX;
					instance.position.z -= offsetZ;
				}
			}
		}
		dude.rotation.y = Math.PI;
		dude.position = new com_babylonhx_math_Vector3(0,0,-80);
		scene.beginAnimation(skeletons2[0],0,100,true,1.0);
		scene._engine.runRenderLoop(function() {
			scene.render();
		});
	});
};
$hxClasses["samples.InstancedBones"] = samples_InstancedBones;
samples_InstancedBones.__name__ = ["samples","InstancedBones"];
samples_InstancedBones.prototype = {
	__class__: samples_InstancedBones
};
var samples_LoadScene = function(scene) {
	com_babylonhx_loading_SceneLoader.RegisterPlugin(com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin());
	com_babylonhx_loading_SceneLoader.Load("assets/scenes/Heart/","Heart.babylon",scene._engine,function(s) {
		scene = s;
		scene.activeCamera.attachControl();
		scene.getMeshByName("Labels").setEnabled(false);
		scene.getMeshByName("lums").useVertexColors = false;
		scene.gravity.scaleInPlace(0.5);
		s._engine.runRenderLoop(function() {
			s.render();
		});
	});
};
$hxClasses["samples.LoadScene"] = samples_LoadScene;
samples_LoadScene.__name__ = ["samples","LoadScene"];
samples_LoadScene.prototype = {
	__class__: samples_LoadScene
};
var snow_AppFixedTimestep = function() {
	this.overflow = 0.0;
	this.frame_time = 0.0167;
	snow_App.call(this);
};
$hxClasses["snow.AppFixedTimestep"] = snow_AppFixedTimestep;
snow_AppFixedTimestep.__name__ = ["snow","AppFixedTimestep"];
snow_AppFixedTimestep.__super__ = snow_App;
snow_AppFixedTimestep.prototype = $extend(snow_App.prototype,{
	frame_time: null
	,overflow: null
	,on_internal_init: function() {
		snow_App.prototype.on_internal_init.call(this);
		this.frame_time = 0.016666666666666666;
		this.last_frame_start = snow_Snow.core.timestamp();
	}
	,on_internal_update: function() {
		this.cur_frame_start = snow_Snow.core.timestamp();
		this.delta_time = this.cur_frame_start - this.last_frame_start;
		this.delta_sim = this.delta_time * this.timescale;
		if(this.delta_sim > this.max_frame_time) this.delta_sim = this.max_frame_time;
		this.last_frame_start = this.cur_frame_start;
		this.overflow += this.delta_sim;
		while(this.overflow >= this.frame_time) {
			this.app.do_internal_update(this.frame_time * this.timescale);
			this.current_time += this.frame_time * this.timescale;
			this.overflow -= this.frame_time * this.timescale;
		}
		this.alpha = this.overflow / this.frame_time;
	}
	,__class__: snow_AppFixedTimestep
});
var snow_Snow = function() {
	this.is_ready = false;
	this.was_ready = false;
	this.has_shutdown = false;
	this.shutting_down = false;
	this.platform = "unknown";
	this.freeze = false;
	this.platform = "web";
	snow_Snow.core = new snow_core_web_Core(this);
	snow_Snow.next_queue = [];
};
$hxClasses["snow.Snow"] = snow_Snow;
snow_Snow.__name__ = ["snow","Snow"];
snow_Snow.__properties__ = {get_timestamp:"get_timestamp"}
snow_Snow.next = function(func) {
	if(func != null) snow_Snow.next_queue.push(func);
};
snow_Snow.get_timestamp = function() {
	return snow_Snow.core.timestamp();
};
snow_Snow.prototype = {
	host: null
	,config: null
	,snow_config: null
	,freeze: null
	,io: null
	,input: null
	,assets: null
	,audio: null
	,windowing: null
	,platform: null
	,shutting_down: null
	,has_shutdown: null
	,window: null
	,was_ready: null
	,is_ready: null
	,shutdown: function() {
		this.shutting_down = true;
		this.host.ondestroy();
		this.io.module.destroy();
		this.audio.destroy();
		this.input.destroy();
		this.windowing.destroy();
		snow_Snow.core.shutdown();
		this.has_shutdown = true;
	}
	,render: function() {
		this.windowing.update();
	}
	,dispatch_system_event: function(_event) {
		this.on_event(_event);
	}
	,init: function(_snow_config,_host) {
		this.snow_config = _snow_config;
		if(this.snow_config.app_package == null) this.snow_config.app_package = "org.snowkit.snowdefault";
		this.config = this.default_config();
		this.host = _host;
		this.host.app = this;
		snow_Snow.core.init($bind(this,this.on_event));
	}
	,on_snow_init: function() {
		this.host.on_internal_init();
	}
	,on_snow_ready: function() {
		var _g = this;
		if(this.was_ready) throw new js__$Boot_HaxeError(snow_types_Error.error("firing ready event more than once is invalid usage"));
		this.io = new snow_system_io_IO(this);
		this.input = new snow_system_input_Input(this);
		this.audio = new snow_system_audio_Audio(this);
		this.assets = new snow_system_assets_Assets(this);
		this.windowing = new snow_system_window_Windowing(this);
		this.was_ready = true;
		this.setup_app_path();
		this.setup_default_assets().then(function(_) {
			_g.setup_configs().then(function(_1) {
				_g.setup_default_window();
				snow_Snow.next($bind(_g,_g.on_ready));
			});
		}).error(function(e) {
			throw new js__$Boot_HaxeError(snow_types_Error.init("snow / cannot recover from error: " + e));
		});
		snow_api_Promises.step();
		while(snow_Snow.next_queue.length > 0) this.cycle_next_queue();
	}
	,do_internal_update: function(dt) {
		this.io.module.update();
		this.input.update();
		this.audio.update();
		this.host.update(dt);
	}
	,on_ready: function() {
		this.is_ready = true;
		this.host.ready();
	}
	,on_snow_update: function() {
		if(this.freeze) return;
		snow_api_Timer.update();
		snow_api_Promises.step();
		this.cycle_next_queue();
		if(!this.is_ready) return;
		this.host.on_internal_update();
		this.host.on_internal_render();
	}
	,on_event: function(_event) {
		if(_event.type != 3 && _event.type != 0 && _event.type != 5 && _event.type != 6) null;
		if(_event.type != 3) null;
		if(this.is_ready) {
			this.io.module.on_event(_event);
			this.audio.on_event(_event);
			this.windowing.on_event(_event);
			this.input.on_event(_event);
			this.host.onevent(_event);
		}
		var _g = _event.type;
		if(_g != null) switch(_g) {
		case 1:
			this.on_snow_init();
			break;
		case 2:
			this.on_snow_ready();
			break;
		case 3:
			this.on_snow_update();
			break;
		case 7:case 8:
			this.shutdown();
			break;
		case 4:
			haxe_Log.trace("     i / snow / " + "Goodbye.",{ fileName : "Snow.hx", lineNumber : 319, className : "snow.Snow", methodName : "on_event"});
			break;
		default:
		} else {
		}
	}
	,cycle_next_queue: function() {
		var count = snow_Snow.next_queue.length;
		if(count > 0) {
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				(snow_Snow.next_queue.shift())();
			}
		}
	}
	,setup_app_path: function() {
	}
	,setup_default_assets: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			if(!_g.snow_config.config_custom_assets) {
				_g.assets.manifest_path = _g.snow_config.config_assets_path;
				_g.default_asset_list().then(function(list) {
					_g.assets.list = list;
				}).error(function(e) {
					null;
				}).then(resolve);
			}
		});
	}
	,setup_configs: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			if(!_g.snow_config.config_custom_runtime) _g.default_runtime_config().then(function(_runtime_conf) {
				_g.config.runtime = _runtime_conf;
			}).error(function(error) {
				throw new js__$Boot_HaxeError(snow_types_Error.init("config / failed / default runtime config failed to parse as JSON. cannot recover. " + error));
			}).then(function() {
				_g.setup_host_config();
				resolve();
			}); else {
				_g.setup_host_config();
				resolve();
			}
		});
	}
	,setup_host_config: function() {
		this.config = this.host.config(this.config);
	}
	,setup_default_window: function() {
		if(this.config.has_window == true) {
			this.window = this.windowing.create(this.config.window);
			if(this.window.handle == null) throw new js__$Boot_HaxeError(snow_types_Error.windowing("requested default window cannot be created. cannot continue"));
		} else null;
	}
	,default_config: function() {
		return { has_window : true, runtime : { }, window : this.default_window_config(), render : this.default_render_config(), web : { no_context_menu : true, prevent_default_keys : [snow_system_input_Keycodes.left,snow_system_input_Keycodes.right,snow_system_input_Keycodes.up,snow_system_input_Keycodes.down,snow_system_input_Keycodes.backspace,snow_system_input_Keycodes.tab,snow_system_input_Keycodes["delete"]], prevent_default_mouse_wheel : true, true_fullscreen : false}, 'native' : { audio_buffer_length : 176400, audio_buffer_count : 4}};
	}
	,default_runtime_config: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			var load = _g.io.data_flow(_g.snow_config.config_runtime_path,snow_system_assets_AssetJSON.processor);
			load.then(resolve).error(function(error) {
				switch(error[1]) {
				case 3:
					var val = error[2];
					reject(error);
					break;
				default:
					resolve();
				}
			});
		});
	}
	,default_asset_list: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			var list_path = _g.assets.root + _g.assets.manifest_path;
			var load = _g.io.data_flow(list_path,snow_system_assets_AssetJSON.processor);
			load.then(function(json) {
				var _list = json;
				resolve(_list);
			}).error(reject);
		});
	}
	,default_render_config: function() {
		return { depth : false, stencil : false, antialiasing : 0, red_bits : 8, green_bits : 8, blue_bits : 8, alpha_bits : 8, depth_bits : 0, stencil_bits : 0, opengl : { minor : 0, major : 0, profile : 0}};
	}
	,default_window_config: function() {
		var conf = { fullscreen_desktop : true, fullscreen : false, borderless : false, resizable : true, x : 536805376, y : 536805376, width : 960, height : 640, title : "snow app"};
		return conf;
	}
	,set_freeze: function(_freeze) {
		this.freeze = _freeze;
		if(_freeze) this.audio.suspend(); else this.audio.resume();
		return this.freeze;
	}
	,get_time: function() {
		return snow_Snow.core.timestamp();
	}
	,get_uniqueid: function() {
		return this.make_uniqueid();
	}
	,make_uniqueid: function(val) {
		if(val == null) val = Std.random(2147483647);
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		if(q > 0) return this.make_uniqueid(q) + (r > 9?(function($this) {
			var $r;
			var ascii = 65 + (r - 10);
			if(ascii > 90) ascii += 6;
			$r = String.fromCharCode(ascii);
			return $r;
		}(this)):(r == null?"null":"" + r).charAt(0));
		return Std.string(r > 9?(function($this) {
			var $r;
			var ascii1 = 65 + (r - 10);
			if(ascii1 > 90) ascii1 += 6;
			$r = String.fromCharCode(ascii1);
			return $r;
		}(this)):(r == null?"null":"" + r).charAt(0));
	}
	,typename: function(t) {
		return Type.getClassName(Type.getClass(t));
	}
	,__class__: snow_Snow
	,__properties__: {set_freeze:"set_freeze",get_uniqueid:"get_uniqueid",get_time:"get_time"}
};
var snow_api__$Debug_LogError = $hxClasses["snow.api._Debug.LogError"] = { __ename__ : ["snow","api","_Debug","LogError"], __constructs__ : ["RequireString"] };
snow_api__$Debug_LogError.RequireString = function(detail) { var $x = ["RequireString",0,detail]; $x.__enum__ = snow_api__$Debug_LogError; $x.toString = $estr; return $x; };
var snow_api_Debug = function() { };
$hxClasses["snow.api.Debug"] = snow_api_Debug;
snow_api_Debug.__name__ = ["snow","api","Debug"];
snow_api_Debug._get_spacing = function(_file) {
	var _spaces = "";
	var _trace_length = _file.length + 4;
	var _diff = snow_api_Debug._log_width - _trace_length;
	if(_diff > 0) {
		var _g = 0;
		while(_g < _diff) {
			var i = _g++;
			_spaces += " ";
		}
	}
	return _spaces;
};
var snow_api_DebugError = $hxClasses["snow.api.DebugError"] = { __ename__ : ["snow","api","DebugError"], __constructs__ : ["assertion","null_assertion"] };
snow_api_DebugError.assertion = function(expr) { var $x = ["assertion",0,expr]; $x.__enum__ = snow_api_DebugError; $x.toString = $estr; return $x; };
snow_api_DebugError.null_assertion = function(expr) { var $x = ["null_assertion",1,expr]; $x.__enum__ = snow_api_DebugError; $x.toString = $estr; return $x; };
var snow_api_Promise = function(func) {
	this.was_caught = false;
	var _g = this;
	this.state = 0;
	this.reject_reactions = [];
	this.fulfill_reactions = [];
	this.settle_reactions = [];
	snow_api_Promises.queue(function() {
		func($bind(_g,_g.onfulfill),$bind(_g,_g.onreject));
		snow_api_Promises.defer(snow_api_Promises.next);
	});
};
$hxClasses["snow.api.Promise"] = snow_api_Promise;
snow_api_Promise.__name__ = ["snow","api","Promise"];
snow_api_Promise.all = function(list) {
	return new snow_api_Promise(function(ok,no) {
		var current = 0;
		var total = list.length;
		var fulfill_result = [];
		var reject_result = null;
		var all_state = 0;
		var single_ok = function(index,val) {
			if(all_state != 0) return;
			current++;
			fulfill_result[index] = val;
			if(total == current) {
				all_state = 1;
				ok(fulfill_result);
			}
		};
		var single_err = function(val1) {
			if(all_state != 0) return;
			all_state = 2;
			reject_result = val1;
			no(reject_result);
		};
		var index1 = 0;
		var _g = 0;
		while(_g < list.length) {
			var promise = list[_g];
			++_g;
			promise.then((function(f,a1) {
				return function(a2) {
					f(a1,a2);
				};
			})(single_ok,index1)).error(single_err);
			index1++;
		}
	});
};
snow_api_Promise.race = function(list) {
	return new snow_api_Promise(function(ok,no) {
		var settled = false;
		var single_ok = function(val) {
			if(settled) return;
			settled = true;
			ok(val);
		};
		var single_err = function(val1) {
			if(settled) return;
			settled = true;
			no(val1);
		};
		var _g = 0;
		while(_g < list.length) {
			var promise = list[_g];
			++_g;
			promise.then(single_ok).error(single_err);
		}
	});
};
snow_api_Promise.reject = function(reason) {
	return new snow_api_Promise(function(ok,no) {
		no(reason);
	});
};
snow_api_Promise.resolve = function(val) {
	return new snow_api_Promise(function(ok,no) {
		ok(val);
	});
};
snow_api_Promise.prototype = {
	state: null
	,result: null
	,reject_reactions: null
	,fulfill_reactions: null
	,settle_reactions: null
	,was_caught: null
	,then: function(on_fulfilled,on_rejected) {
		var _g = this.state;
		switch(_g) {
		case 0:
			this.add_fulfill(on_fulfilled);
			this.add_reject(on_rejected);
			return this.new_linked_promise();
		case 1:
			snow_api_Promises.defer(on_fulfilled,this.result);
			return snow_api_Promise.resolve(this.result);
		case 2:
			snow_api_Promises.defer(on_rejected,this.result);
			return snow_api_Promise.reject(this.result);
		}
	}
	,error: function(on_rejected) {
		var _g = this.state;
		switch(_g) {
		case 0:
			this.add_reject(on_rejected);
			return this.new_linked_resolve_empty();
		case 1:
			return snow_api_Promise.resolve(this.result);
		case 2:
			snow_api_Promises.defer(on_rejected,this.result);
			return snow_api_Promise.reject(this.result);
		}
	}
	,toString: function() {
		return "Promise { state:" + this.state_string() + ", result:" + Std.string(this.result) + " }";
	}
	,add_settle: function(f) {
		if(this.state == 0) this.settle_reactions.push(f); else snow_api_Promises.defer(f,this.result);
	}
	,new_linked_promise: function() {
		var _g = this;
		return new snow_api_Promise(function(f,r) {
			_g.add_settle(function(_) {
				if(_g.state == 1) f(_g.result); else r(_g.result);
			});
		});
	}
	,new_linked_resolve: function() {
		var _g = this;
		return new snow_api_Promise(function(f,r) {
			_g.add_settle(function(val) {
				f(val);
			});
		});
	}
	,new_linked_reject: function() {
		var _g = this;
		return new snow_api_Promise(function(f,r) {
			_g.add_settle(function(val) {
				r(val);
			});
		});
	}
	,new_linked_resolve_empty: function() {
		var _g = this;
		return new snow_api_Promise(function(f,r) {
			_g.add_settle(function(_) {
				f();
			});
		});
	}
	,new_linked_reject_empty: function() {
		var _g = this;
		return new snow_api_Promise(function(f,r) {
			_g.add_settle(function(_) {
				r();
			});
		});
	}
	,add_fulfill: function(f) {
		if(f != null) this.fulfill_reactions.push(f);
	}
	,add_reject: function(f) {
		if(f != null) {
			this.was_caught = true;
			this.reject_reactions.push(f);
		}
	}
	,onfulfill: function(val) {
		this.state = 1;
		this.result = val;
		while(this.fulfill_reactions.length > 0) {
			var fn = this.fulfill_reactions.shift();
			fn(this.result);
		}
		this.onsettle();
	}
	,onreject: function(reason) {
		this.state = 2;
		this.result = reason;
		while(this.reject_reactions.length > 0) {
			var fn = this.reject_reactions.shift();
			fn(this.result);
		}
		this.onsettle();
	}
	,onsettle: function() {
		while(this.settle_reactions.length > 0) {
			var fn = this.settle_reactions.shift();
			fn(this.result);
		}
	}
	,onexception: function(err) {
		var _g = this;
		this.add_settle(function(_) {
			if(!_g.was_caught) {
				if(_g.state == 2) {
					throw new js__$Boot_HaxeError(snow_api_PromiseError.UnhandledPromiseRejection(_g.toString()));
					return;
				}
			}
		});
		if(this.state == 0) this.onreject(err);
	}
	,state_string: function() {
		var _g = this.state;
		switch(_g) {
		case 0:
			return "pending";
		case 1:
			return "fulfilled";
		case 2:
			return "rejected";
		}
	}
	,__class__: snow_api_Promise
};
var snow_api_Promises = function() { };
$hxClasses["snow.api.Promises"] = snow_api_Promises;
snow_api_Promises.__name__ = ["snow","api","Promises"];
snow_api_Promises.step = function() {
	snow_api_Promises.next();
	while(snow_api_Promises.defers.length > 0) {
		var defer = snow_api_Promises.defers.shift();
		defer.f(defer.a);
	}
};
snow_api_Promises.next = function() {
	if(snow_api_Promises.calls.length > 0) (snow_api_Promises.calls.shift())();
};
snow_api_Promises.defer = function(f,a) {
	if(f == null) return;
	snow_api_Promises.defers.push({ f : f, a : a});
};
snow_api_Promises.queue = function(f) {
	if(f == null) return;
	snow_api_Promises.calls.push(f);
};
var snow_api_PromiseError = $hxClasses["snow.api.PromiseError"] = { __ename__ : ["snow","api","PromiseError"], __constructs__ : ["UnhandledPromiseRejection"] };
snow_api_PromiseError.UnhandledPromiseRejection = function(err) { var $x = ["UnhandledPromiseRejection",0,err]; $x.__enum__ = snow_api_PromiseError; $x.toString = $estr; return $x; };
var snow_api_Timer = function(_time) {
	this.time = _time;
	snow_api_Timer.running_timers.push(this);
	this.fire_at = snow_Snow.core.timestamp() + this.time;
	this.running = true;
};
$hxClasses["snow.api.Timer"] = snow_api_Timer;
snow_api_Timer.__name__ = ["snow","api","Timer"];
snow_api_Timer.measure = function(f,pos) {
	var t0 = snow_Snow.core.timestamp();
	var r = f();
	haxe_Log.trace(snow_Snow.core.timestamp() - t0 + "s",pos);
	return r;
};
snow_api_Timer.update = function() {
	var now = snow_Snow.core.timestamp();
	var _g = 0;
	var _g1 = snow_api_Timer.running_timers;
	while(_g < _g1.length) {
		var timer = _g1[_g];
		++_g;
		if(timer.running) {
			if(timer.fire_at < now) {
				timer.fire_at += timer.time;
				timer.run();
			}
		}
	}
};
snow_api_Timer.delay = function(_time,_f) {
	var t = new snow_api_Timer(_time);
	t.run = function() {
		t.stop();
		_f();
	};
	return t;
};
snow_api_Timer.prototype = {
	time: null
	,fire_at: null
	,running: null
	,run: function() {
	}
	,stop: function() {
		if(this.running) {
			this.running = false;
			HxOverrides.remove(snow_api_Timer.running_timers,this);
		}
	}
	,__class__: snow_api_Timer
};
var snow_api_buffers__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["snow.api.buffers._Float32Array.Float32Array_Impl_"] = snow_api_buffers__$Float32Array_Float32Array_$Impl_$;
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.__name__ = ["snow","api","buffers","_Float32Array","Float32Array_Impl_"];
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
snow_api_buffers__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var snow_api_buffers__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["snow.api.buffers._Int16Array.Int16Array_Impl_"] = snow_api_buffers__$Int16Array_Int16Array_$Impl_$;
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.__name__ = ["snow","api","buffers","_Int16Array","Int16Array_Impl_"];
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
snow_api_buffers__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var snow_api_buffers__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["snow.api.buffers._Int32Array.Int32Array_Impl_"] = snow_api_buffers__$Int32Array_Int32Array_$Impl_$;
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.__name__ = ["snow","api","buffers","_Int32Array","Int32Array_Impl_"];
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
snow_api_buffers__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$ = {};
$hxClasses["snow.api.buffers._Uint8Array.Uint8Array_Impl_"] = snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$;
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.__name__ = ["snow","api","buffers","_Uint8Array","Uint8Array_Impl_"];
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.toString = function(this1) {
	return "Uint8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var snow_core_web_Core = function(_app) {
	this._time_now = 0.0;
	this._lf_timestamp = 0.016;
	this.start_timestamp = 0.0;
	this.app = _app;
	this.start_timestamp = this.timestamp();
};
$hxClasses["snow.core.web.Core"] = snow_core_web_Core;
snow_core_web_Core.__name__ = ["snow","core","web","Core"];
snow_core_web_Core.prototype = {
	app: null
	,start_timestamp: null
	,init: function(_event_handler) {
		this.app.on_event({ type : 1});
		this.app.on_event({ type : 2});
		if(this.app.snow_config.has_loop) this.request_update();
	}
	,shutdown: function() {
	}
	,timestamp: function() {
		var now;
		if(window.performance != null) now = window.performance.now() / 1000.0; else now = haxe_Timer.stamp();
		return now - this.start_timestamp;
	}
	,_lf_timestamp: null
	,_time_now: null
	,request_update: function() {
		var _g = this;
		if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) window.requestAnimationFrame($bind(this,this.snow_core_loop)); else {
			haxe_Log.trace("     i / core / " + ("warning : requestAnimationFrame not found, falling back to render_rate! render_rate:" + this.app.host.render_rate),{ fileName : "Core.hx", lineNumber : 76, className : "snow.core.web.Core", methodName : "request_update"});
			window.setTimeout(function() {
				var _now = _g.timestamp();
				_g._time_now += _now - _g._lf_timestamp;
				_g.snow_core_loop(_g._time_now * 1000.0);
				_g._lf_timestamp = _now;
			},this.app.host.render_rate * 1000.0 | 0);
		}
	}
	,snow_core_loop: function(_t) {
		if(_t == null) _t = 0.016;
		this.update();
		this.app.on_event({ type : 3});
		this.request_update();
		return true;
	}
	,update: function() {
	}
	,__class__: snow_core_web_Core
};
var snow_modules_interfaces_Assets = function() { };
$hxClasses["snow.modules.interfaces.Assets"] = snow_modules_interfaces_Assets;
snow_modules_interfaces_Assets.__name__ = ["snow","modules","interfaces","Assets"];
snow_modules_interfaces_Assets.prototype = {
	init: null
	,update: null
	,destroy: null
	,on_event: null
	,image_load_info: null
	,image_info_from_bytes: null
	,image_info_from_pixels: null
	,__class__: snow_modules_interfaces_Assets
};
var snow_core_web_assets_Assets = function(_system) {
	this.system = _system;
};
$hxClasses["snow.core.web.assets.Assets"] = snow_core_web_assets_Assets;
snow_core_web_assets_Assets.__name__ = ["snow","core","web","assets","Assets"];
snow_core_web_assets_Assets.__interfaces__ = [snow_modules_interfaces_Assets];
snow_core_web_assets_Assets.prototype = {
	system: null
	,init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,image_load_info: function(_id,_components) {
		if(_components == null) _components = 4;
		return this.system.app.io.data_flow(_id,snow_system_assets_AssetImage.processor);
	}
	,image_info_from_element: function(_id,_elem) {
		var width_pot = this.nearest_power_of_two(_elem.width);
		var height_pot = this.nearest_power_of_two(_elem.height);
		var image_bytes = this.POT_bytes_from_element(_elem.width,_elem.height,width_pot,height_pot,_elem);
		var info = { id : _id, bpp : 4, width : _elem.width, height : _elem.height, width_actual : width_pot, height_actual : height_pot, bpp_source : 4, pixels : image_bytes};
		image_bytes = null;
		return info;
	}
	,image_info_from_pixels: function(_id,_width,_height,_pixels) {
		var width_pot = this.nearest_power_of_two(_width);
		var height_pot = this.nearest_power_of_two(_height);
		var image_bytes = this.POT_bytes_from_pixels(_width,_height,width_pot,height_pot,_pixels);
		var info = { id : _id, bpp : 4, width : _width, height : _height, width_actual : width_pot, height_actual : height_pot, bpp_source : 4, pixels : image_bytes};
		image_bytes = null;
		return info;
	}
	,image_info_from_bytes: function(_id,_bytes,_components) {
		if(_components == null) _components = 4;
		var _g = this;
		if(_id == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
		if(_bytes == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_bytes was null"));
		if(!(_bytes.length != 0)) throw new js__$Boot_HaxeError(snow_api_DebugError.assertion("_bytes.length != 0"));
		var ext = haxe_io_Path.extension(_id);
		return new snow_api_Promise(function(resolve,reject) {
			var str = "";
			var i = 0;
			var len = _bytes.length;
			while(i < len) str += String.fromCharCode((function($this) {
				var $r;
				var a;
				{
					var idx = i++;
					a = _bytes[idx];
				}
				$r = a & 255;
				return $r;
			}(this)));
			var b64 = window.btoa(str);
			var src = "data:image/" + ext + ";base64," + b64;
			var _img = new Image();
			_img.onload = function(_) {
				var info = _g.image_info_from_element(_id,_img);
				resolve(info);
			};
			_img.onerror = function(e) {
				reject(snow_types_Error.error("failed to load image from bytes, on error: " + e));
			};
			_img.src = src;
		});
	}
	,POT_bytes_from_pixels: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas;
		var _this = window.document;
		tmp_canvas = _this.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d",null);
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		var image_bytes = null;
		var _pixels = new Uint8ClampedArray(_source.buffer);
		var _imgdata = tmp_context.createImageData(_width,_height);
		_imgdata.data.set(_pixels);
		try {
			tmp_context.putImageData(_imgdata,0,0);
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe_Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 197, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_pixels"});
			throw new js__$Boot_HaxeError(e);
		}
		tmp_canvas = null;
		tmp_context = null;
		_imgdata = null;
		var view = image_bytes.data;
		var len = null;
		var this1;
		if(view != null) this1 = new Uint8Array(view); else this1 = null;
		return this1;
	}
	,POT_bytes_from_element: function(_width,_height,_width_pot,_height_pot,_source) {
		var tmp_canvas;
		var _this = window.document;
		tmp_canvas = _this.createElement("canvas");
		tmp_canvas.width = _width_pot;
		tmp_canvas.height = _height_pot;
		var tmp_context = tmp_canvas.getContext("2d",null);
		tmp_context.clearRect(0,0,tmp_canvas.width,tmp_canvas.height);
		tmp_context.drawImage(_source,0,0,_width,_height);
		var image_bytes = null;
		try {
			image_bytes = tmp_context.getImageData(0,0,tmp_canvas.width,tmp_canvas.height);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			haxe_Log.trace("   i / assets / " + tips,{ fileName : "Assets.hx", lineNumber : 233, className : "snow.core.web.assets.Assets", methodName : "POT_bytes_from_element"});
			throw new js__$Boot_HaxeError(e);
		}
		tmp_canvas = null;
		tmp_context = null;
		var view = image_bytes.data;
		var len = null;
		var this1;
		if(view != null) this1 = new Uint8Array(view); else this1 = null;
		return this1;
	}
	,nearest_power_of_two: function(_value) {
		if(!snow_core_web_assets_Assets.POT) return _value;
		_value--;
		_value |= _value >> 1;
		_value |= _value >> 2;
		_value |= _value >> 4;
		_value |= _value >> 8;
		_value |= _value >> 16;
		_value++;
		return _value;
	}
	,__class__: snow_core_web_assets_Assets
};
var snow_core_web_input_DOMKeys = function() { };
$hxClasses["snow.core.web.input.DOMKeys"] = snow_core_web_input_DOMKeys;
snow_core_web_input_DOMKeys.__name__ = ["snow","core","web","input","DOMKeys"];
snow_core_web_input_DOMKeys.dom_key_to_keycode = function(_keycode) {
	switch(_keycode) {
	case 16:
		return snow_system_input_Keycodes.lshift;
	case 17:
		return snow_system_input_Keycodes.lctrl;
	case 18:
		return snow_system_input_Keycodes.lalt;
	case 20:
		return snow_system_input_Keycodes.capslock;
	case 33:
		return snow_system_input_Keycodes.pageup;
	case 34:
		return snow_system_input_Keycodes.pagedown;
	case 35:
		return snow_system_input_Keycodes.end;
	case 36:
		return snow_system_input_Keycodes.home;
	case 37:
		return snow_system_input_Keycodes.left;
	case 38:
		return snow_system_input_Keycodes.up;
	case 39:
		return snow_system_input_Keycodes.right;
	case 40:
		return snow_system_input_Keycodes.down;
	case 44:
		return snow_system_input_Keycodes.printscreen;
	case 45:
		return snow_system_input_Keycodes.insert;
	case 46:
		return snow_system_input_Keycodes["delete"];
	case 91:
		return snow_system_input_Keycodes.lmeta;
	case 93:
		return snow_system_input_Keycodes.rmeta;
	case 224:
		return snow_system_input_Keycodes.lmeta;
	case 96:
		return snow_system_input_Keycodes.kp_0;
	case 97:
		return snow_system_input_Keycodes.kp_1;
	case 98:
		return snow_system_input_Keycodes.kp_2;
	case 99:
		return snow_system_input_Keycodes.kp_3;
	case 100:
		return snow_system_input_Keycodes.kp_4;
	case 101:
		return snow_system_input_Keycodes.kp_5;
	case 102:
		return snow_system_input_Keycodes.kp_6;
	case 103:
		return snow_system_input_Keycodes.kp_7;
	case 104:
		return snow_system_input_Keycodes.kp_8;
	case 105:
		return snow_system_input_Keycodes.kp_9;
	case 106:
		return snow_system_input_Keycodes.kp_multiply;
	case 107:
		return snow_system_input_Keycodes.kp_plus;
	case 109:
		return snow_system_input_Keycodes.kp_minus;
	case 110:
		return snow_system_input_Keycodes.kp_decimal;
	case 111:
		return snow_system_input_Keycodes.kp_divide;
	case 144:
		return snow_system_input_Keycodes.numlockclear;
	case 112:
		return snow_system_input_Keycodes.f1;
	case 113:
		return snow_system_input_Keycodes.f2;
	case 114:
		return snow_system_input_Keycodes.f3;
	case 115:
		return snow_system_input_Keycodes.f4;
	case 116:
		return snow_system_input_Keycodes.f5;
	case 117:
		return snow_system_input_Keycodes.f6;
	case 118:
		return snow_system_input_Keycodes.f7;
	case 119:
		return snow_system_input_Keycodes.f8;
	case 120:
		return snow_system_input_Keycodes.f9;
	case 121:
		return snow_system_input_Keycodes.f10;
	case 122:
		return snow_system_input_Keycodes.f11;
	case 123:
		return snow_system_input_Keycodes.f12;
	case 124:
		return snow_system_input_Keycodes.f13;
	case 125:
		return snow_system_input_Keycodes.f14;
	case 126:
		return snow_system_input_Keycodes.f15;
	case 127:
		return snow_system_input_Keycodes.f16;
	case 128:
		return snow_system_input_Keycodes.f17;
	case 129:
		return snow_system_input_Keycodes.f18;
	case 130:
		return snow_system_input_Keycodes.f19;
	case 131:
		return snow_system_input_Keycodes.f20;
	case 132:
		return snow_system_input_Keycodes.f21;
	case 133:
		return snow_system_input_Keycodes.f22;
	case 134:
		return snow_system_input_Keycodes.f23;
	case 135:
		return snow_system_input_Keycodes.f24;
	case 160:
		return snow_system_input_Keycodes.caret;
	case 161:
		return snow_system_input_Keycodes.exclaim;
	case 162:
		return snow_system_input_Keycodes.quotedbl;
	case 163:
		return snow_system_input_Keycodes.hash;
	case 164:
		return snow_system_input_Keycodes.dollar;
	case 165:
		return snow_system_input_Keycodes.percent;
	case 166:
		return snow_system_input_Keycodes.ampersand;
	case 167:
		return snow_system_input_Keycodes.underscore;
	case 168:
		return snow_system_input_Keycodes.leftparen;
	case 169:
		return snow_system_input_Keycodes.rightparen;
	case 170:
		return snow_system_input_Keycodes.asterisk;
	case 171:
		return snow_system_input_Keycodes.plus;
	case 172:
		return snow_system_input_Keycodes.backslash;
	case 173:
		return snow_system_input_Keycodes.minus;
	case 174:
		return snow_system_input_Keycodes.leftbracket;
	case 175:
		return snow_system_input_Keycodes.rightbracket;
	case 176:
		return snow_system_input_Keycodes.backquote;
	case 181:
		return snow_system_input_Keycodes.audiomute;
	case 182:
		return snow_system_input_Keycodes.volumedown;
	case 183:
		return snow_system_input_Keycodes.volumeup;
	case 188:
		return snow_system_input_Keycodes.comma;
	case 190:
		return snow_system_input_Keycodes.period;
	case 191:
		return snow_system_input_Keycodes.slash;
	case 192:
		return snow_system_input_Keycodes.backquote;
	case 219:
		return snow_system_input_Keycodes.leftbracket;
	case 221:
		return snow_system_input_Keycodes.rightbracket;
	case 220:
		return snow_system_input_Keycodes.backslash;
	case 222:
		return snow_system_input_Keycodes.quote;
	}
	return _keycode;
};
var snow_modules_interfaces_Input = function() { };
$hxClasses["snow.modules.interfaces.Input"] = snow_modules_interfaces_Input;
snow_modules_interfaces_Input.__name__ = ["snow","modules","interfaces","Input"];
snow_modules_interfaces_Input.prototype = {
	init: null
	,update: null
	,destroy: null
	,on_event: null
	,listen: null
	,unlisten: null
	,gamepad_add: null
	,gamepad_remove: null
	,__class__: snow_modules_interfaces_Input
};
var snow_system_input_Scancodes = function() { };
$hxClasses["snow.system.input.Scancodes"] = snow_system_input_Scancodes;
snow_system_input_Scancodes.__name__ = ["snow","system","input","Scancodes"];
snow_system_input_Scancodes.$name = function(scancode) {
	var res = null;
	if(scancode >= 0 && scancode < snow_system_input_Scancodes.scancode_names.length) res = snow_system_input_Scancodes.scancode_names[scancode];
	if(res != null) return res; else return "";
};
var snow_system_input_Keycodes = function() { };
$hxClasses["snow.system.input.Keycodes"] = snow_system_input_Keycodes;
snow_system_input_Keycodes.__name__ = ["snow","system","input","Keycodes"];
snow_system_input_Keycodes.from_scan = function(scancode) {
	return scancode | snow_system_input_Scancodes.MASK;
};
snow_system_input_Keycodes.to_scan = function(keycode) {
	if((keycode & snow_system_input_Scancodes.MASK) != 0) return keycode & ~snow_system_input_Scancodes.MASK;
	switch(keycode) {
	case 13:
		return snow_system_input_Scancodes.enter;
	case 27:
		return snow_system_input_Scancodes.escape;
	case 8:
		return snow_system_input_Scancodes.backspace;
	case 9:
		return snow_system_input_Scancodes.tab;
	case 32:
		return snow_system_input_Scancodes.space;
	case 47:
		return snow_system_input_Scancodes.slash;
	case 48:
		return snow_system_input_Scancodes.key_0;
	case 49:
		return snow_system_input_Scancodes.key_1;
	case 50:
		return snow_system_input_Scancodes.key_2;
	case 51:
		return snow_system_input_Scancodes.key_3;
	case 52:
		return snow_system_input_Scancodes.key_4;
	case 53:
		return snow_system_input_Scancodes.key_5;
	case 54:
		return snow_system_input_Scancodes.key_6;
	case 55:
		return snow_system_input_Scancodes.key_7;
	case 56:
		return snow_system_input_Scancodes.key_8;
	case 57:
		return snow_system_input_Scancodes.key_9;
	case 59:
		return snow_system_input_Scancodes.semicolon;
	case 61:
		return snow_system_input_Scancodes.equals;
	case 91:
		return snow_system_input_Scancodes.leftbracket;
	case 92:
		return snow_system_input_Scancodes.backslash;
	case 93:
		return snow_system_input_Scancodes.rightbracket;
	case 96:
		return snow_system_input_Scancodes.grave;
	case 97:
		return snow_system_input_Scancodes.key_a;
	case 98:
		return snow_system_input_Scancodes.key_b;
	case 99:
		return snow_system_input_Scancodes.key_c;
	case 100:
		return snow_system_input_Scancodes.key_d;
	case 101:
		return snow_system_input_Scancodes.key_e;
	case 102:
		return snow_system_input_Scancodes.key_f;
	case 103:
		return snow_system_input_Scancodes.key_g;
	case 104:
		return snow_system_input_Scancodes.key_h;
	case 105:
		return snow_system_input_Scancodes.key_i;
	case 106:
		return snow_system_input_Scancodes.key_j;
	case 107:
		return snow_system_input_Scancodes.key_k;
	case 108:
		return snow_system_input_Scancodes.key_l;
	case 109:
		return snow_system_input_Scancodes.key_m;
	case 110:
		return snow_system_input_Scancodes.key_n;
	case 111:
		return snow_system_input_Scancodes.key_o;
	case 112:
		return snow_system_input_Scancodes.key_p;
	case 113:
		return snow_system_input_Scancodes.key_q;
	case 114:
		return snow_system_input_Scancodes.key_r;
	case 115:
		return snow_system_input_Scancodes.key_s;
	case 116:
		return snow_system_input_Scancodes.key_t;
	case 117:
		return snow_system_input_Scancodes.key_u;
	case 118:
		return snow_system_input_Scancodes.key_v;
	case 119:
		return snow_system_input_Scancodes.key_w;
	case 120:
		return snow_system_input_Scancodes.key_x;
	case 121:
		return snow_system_input_Scancodes.key_y;
	case 122:
		return snow_system_input_Scancodes.key_z;
	}
	return snow_system_input_Scancodes.unknown;
};
snow_system_input_Keycodes.$name = function(keycode) {
	if((keycode & snow_system_input_Scancodes.MASK) != 0) return snow_system_input_Scancodes.$name(keycode & ~snow_system_input_Scancodes.MASK);
	switch(keycode) {
	case 13:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes.enter);
	case 27:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes.escape);
	case 8:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes.backspace);
	case 9:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes.tab);
	case 32:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes.space);
	case 127:
		return snow_system_input_Scancodes.$name(snow_system_input_Scancodes["delete"]);
	default:
		var decoder = new haxe_Utf8();
		decoder.__b += String.fromCharCode(keycode);
		return decoder.__b;
	}
};
var snow_core_web_input_Input = function(_system) {
	this.gamepads_supported = false;
	this.system = _system;
};
$hxClasses["snow.core.web.input.Input"] = snow_core_web_input_Input;
snow_core_web_input_Input.__name__ = ["snow","core","web","input","Input"];
snow_core_web_input_Input.__interfaces__ = [snow_modules_interfaces_Input];
snow_core_web_input_Input.prototype = {
	active_gamepads: null
	,gamepads_supported: null
	,system: null
	,init: function() {
		window.document.addEventListener("keypress",$bind(this,this.on_keypress));
		window.document.addEventListener("keydown",$bind(this,this.on_keydown));
		window.document.addEventListener("keyup",$bind(this,this.on_keyup));
		this.active_gamepads = new haxe_ds_IntMap();
		this.gamepads_supported = this.get_gamepad_list() != null;
		haxe_Log.trace("    i / input / " + ("Gamepads supported: " + Std.string(this.gamepads_supported)),{ fileName : "Input.hx", lineNumber : 42, className : "snow.core.web.input.Input", methodName : "init"});
	}
	,update: function() {
		if(this.gamepads_supported) this.poll_gamepads();
	}
	,destroy: function() {
	}
	,listen: function(window) {
		window.handle.addEventListener("contextmenu",$bind(this,this.on_contextmenu));
		window.handle.addEventListener("mousedown",$bind(this,this.on_mousedown));
		window.handle.addEventListener("mouseup",$bind(this,this.on_mouseup));
		window.handle.addEventListener("mousemove",$bind(this,this.on_mousemove));
		window.handle.addEventListener("mousewheel",$bind(this,this.on_mousewheel));
		window.handle.addEventListener("wheel",$bind(this,this.on_mousewheel));
		window.handle.addEventListener("touchstart",$bind(this,this.on_touchdown));
		window.handle.addEventListener("touchend",$bind(this,this.on_touchup));
		window.handle.addEventListener("touchmove",$bind(this,this.on_touchmove));
	}
	,unlisten: function(window) {
	}
	,on_event: function(_event) {
	}
	,text_input_start: function() {
	}
	,text_input_stop: function() {
	}
	,text_input_rect: function(x,y,w,h) {
	}
	,gamepad_add: function(id) {
	}
	,gamepad_remove: function(id) {
	}
	,poll_gamepads: function() {
		if(!this.gamepads_supported) return;
		var list = this.get_gamepad_list();
		if(list != null) {
			var _g1 = 0;
			var _g = list.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list[i] != null) this.handle_gamepad(list[i]); else {
					var _gamepad = this.active_gamepads.h[i];
					if(_gamepad != null) this.system.dispatch_gamepad_device_event(_gamepad.index,2,snow_Snow.core.timestamp());
					this.active_gamepads.remove(i);
				}
			}
		}
	}
	,handle_gamepad: function(_gamepad) {
		if(_gamepad == null) return;
		if(!(function($this) {
			var $r;
			var key = _gamepad.index;
			$r = $this.active_gamepads.h.hasOwnProperty(key);
			return $r;
		}(this))) {
			var _new_gamepad = { id : _gamepad.id, index : _gamepad.index, axes : [], buttons : [], timestamp : snow_Snow.core.timestamp()};
			var axes = _gamepad.axes;
			var _g = 0;
			while(_g < axes.length) {
				var value = axes[_g];
				++_g;
				_new_gamepad.axes.push(value);
			}
			var _button_list = _gamepad.buttons;
			var _g1 = 0;
			while(_g1 < _button_list.length) {
				var _button = _button_list[_g1];
				++_g1;
				_new_gamepad.buttons.push({ pressed : false, value : 0});
			}
			this.active_gamepads.h[_new_gamepad.index] = _new_gamepad;
			this.system.dispatch_gamepad_device_event(_new_gamepad.index,1,_new_gamepad.timestamp);
		} else {
			var gamepad;
			var key1 = _gamepad.index;
			gamepad = this.active_gamepads.h[key1];
			if(gamepad.id != _gamepad.id) gamepad.id = _gamepad.id;
			var axes_changed = [];
			var buttons_changed = [];
			var last_axes = gamepad.axes;
			var last_buttons = gamepad.buttons;
			var new_axes = _gamepad.axes;
			var new_buttons = _gamepad.buttons;
			var axis_index = 0;
			var _g2 = 0;
			while(_g2 < new_axes.length) {
				var axis = new_axes[_g2];
				++_g2;
				if(axis != last_axes[axis_index]) {
					axes_changed.push(axis_index);
					gamepad.axes[axis_index] = axis;
				}
				axis_index++;
			}
			var button_index = 0;
			var _g3 = 0;
			while(_g3 < new_buttons.length) {
				var button = new_buttons[_g3];
				++_g3;
				if(button.value != last_buttons[button_index].value) {
					buttons_changed.push(button_index);
					gamepad.buttons[button_index].pressed = button.pressed;
					gamepad.buttons[button_index].value = button.value;
				}
				button_index++;
			}
			var _g4 = 0;
			while(_g4 < axes_changed.length) {
				var index = axes_changed[_g4];
				++_g4;
				this.system.dispatch_gamepad_axis_event(gamepad.index,index,new_axes[index],gamepad.timestamp);
			}
			var _g5 = 0;
			while(_g5 < buttons_changed.length) {
				var index1 = buttons_changed[_g5];
				++_g5;
				if(new_buttons[index1].pressed == true) this.system.dispatch_gamepad_button_down_event(gamepad.index,index1,new_buttons[index1].value,gamepad.timestamp); else this.system.dispatch_gamepad_button_up_event(gamepad.index,index1,new_buttons[index1].value,gamepad.timestamp);
			}
		}
	}
	,fail_gamepads: function() {
		this.gamepads_supported = false;
		haxe_Log.trace("    i / input / " + "Gamepads are not supported in this browser :(",{ fileName : "Input.hx", lineNumber : 262, className : "snow.core.web.input.Input", methodName : "fail_gamepads"});
	}
	,get_gamepad_list: function() {
		var modernizr = window.Modernizr;
		if(modernizr != null) {
			if(modernizr.gamepads == true) {
				if(($_=window.navigator,$bind($_,$_.getGamepads)) != null) return window.navigator.getGamepads();
				if(window.navigator.webkitGetGamepads != null) return window.navigator.webkitGetGamepads();
				this.fail_gamepads();
			} else this.fail_gamepads();
		}
		return null;
	}
	,on_mousedown: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		this.system.dispatch_mouse_down_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_mouse_event.button + 1,_mouse_event.timeStamp,_window.id);
	}
	,on_mouseup: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		this.system.dispatch_mouse_up_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_mouse_event.button + 1,_mouse_event.timeStamp,_window.id);
	}
	,on_mousemove: function(_mouse_event) {
		var _window = this.system.app.windowing.window_from_handle(_mouse_event.target);
		var _movement_x = _mouse_event.movementX;
		var _movement_y = _mouse_event.movementY;
		if(_mouse_event.webkitMovementX != null) {
			_movement_x = _mouse_event.webkitMovementX;
			_movement_y = _mouse_event.webkitMovementY;
		} else if(_mouse_event.mozMovementX != null) {
			_movement_x = _mouse_event.mozMovementX;
			_movement_y = _mouse_event.mozMovementY;
		}
		this.system.dispatch_mouse_move_event(_mouse_event.pageX - window.pageXOffset - _window.x,_mouse_event.pageY - window.pageYOffset - _window.y,_movement_x,_movement_y,_mouse_event.timeStamp,_window.id);
	}
	,on_mousewheel: function(_wheel_event) {
		if(this.system.app.config.web.prevent_default_mouse_wheel) _wheel_event.preventDefault();
		var _window = this.system.app.windowing.window_from_handle(_wheel_event.target);
		var _x = 0;
		var _y = 0;
		if(_wheel_event.deltaY != null) _y = _wheel_event.deltaY; else if(_wheel_event.wheelDeltaY != null) _y = -_wheel_event.wheelDeltaY / 3 | 0;
		if(_wheel_event.deltaX != null) _x = _wheel_event.deltaX; else if(_wheel_event.wheelDeltaX != null) _x = -_wheel_event.wheelDeltaX / 3 | 0;
		this.system.dispatch_mouse_wheel_event(Math.round(_x / 16),Math.round(_y / 16),_wheel_event.timeStamp,_window.id);
	}
	,on_contextmenu: function(_event) {
		if(this.system.app.config.web.no_context_menu) _event.preventDefault();
	}
	,on_keypress: function(_key_event) {
		if(_key_event.which != 0 && HxOverrides.indexOf(snow_core_web_input_Input._keypress_blacklist,_key_event.keyCode,0) == -1) {
			var _text = String.fromCharCode(_key_event.charCode);
			this.system.dispatch_text_event(_text,0,_text.length,2,_key_event.timeStamp,1);
		}
	}
	,on_keydown: function(_key_event) {
		var _keycode = this.convert_keycode(_key_event.keyCode);
		var _scancode = snow_system_input_Keycodes.to_scan(_keycode);
		var _mod_state = this.mod_state_from_event(_key_event);
		if(HxOverrides.indexOf(this.system.app.config.web.prevent_default_keys,_keycode,0) != -1) _key_event.preventDefault();
		this.system.dispatch_key_down_event(_keycode,_scancode,_key_event.repeat,_mod_state,_key_event.timeStamp,1);
	}
	,on_keyup: function(_key_event) {
		var _keycode = this.convert_keycode(_key_event.keyCode);
		var _scancode = snow_system_input_Keycodes.to_scan(_keycode);
		var _mod_state = this.mod_state_from_event(_key_event);
		if(HxOverrides.indexOf(this.system.app.config.web.prevent_default_keys,_keycode,0) != -1) _key_event.preventDefault();
		this.system.dispatch_key_up_event(_keycode,_scancode,_key_event.repeat,_mod_state,_key_event.timeStamp,1);
	}
	,mod_state_from_event: function(_key_event) {
		var _none = !_key_event.altKey && !_key_event.ctrlKey && !_key_event.metaKey && !_key_event.shiftKey;
		return { none : _none, lshift : _key_event.shiftKey, rshift : _key_event.shiftKey, lctrl : _key_event.ctrlKey, rctrl : _key_event.ctrlKey, lalt : _key_event.altKey, ralt : _key_event.altKey, lmeta : _key_event.metaKey, rmeta : _key_event.metaKey, num : false, caps : false, mode : false, ctrl : _key_event.ctrlKey, shift : _key_event.shiftKey, alt : _key_event.altKey, meta : _key_event.metaKey};
	}
	,convert_keycode: function(dom_keycode) {
		if(dom_keycode >= 65 && dom_keycode <= 90) return dom_keycode + 32;
		return snow_core_web_input_DOMKeys.dom_key_to_keycode(dom_keycode);
	}
	,on_touchdown: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_down_event(_x,_y,touch.identifier,snow_Snow.core.timestamp());
		}
	}
	,on_touchup: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_up_event(_x,_y,touch.identifier,snow_Snow.core.timestamp());
		}
	}
	,on_touchmove: function(_touch_event) {
		var _window = this.system.app.windowing.window_from_handle(_touch_event.target);
		var _g = 0;
		var _g1 = _touch_event.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var _x = touch.pageX - window.pageXOffset - _window.x;
			var _y = touch.pageY - window.pageYOffset - _window.y;
			_x = _x / _window.width;
			_y = _y / _window.height;
			this.system.dispatch_touch_move_event(_x,_y,0,0,touch.identifier,snow_Snow.core.timestamp());
		}
	}
	,__class__: snow_core_web_input_Input
};
var snow_modules_interfaces_IO = function() { };
$hxClasses["snow.modules.interfaces.IO"] = snow_modules_interfaces_IO;
snow_modules_interfaces_IO.__name__ = ["snow","modules","interfaces","IO"];
snow_modules_interfaces_IO.prototype = {
	init: null
	,update: null
	,destroy: null
	,on_event: null
	,url_open: null
	,data_load: null
	,data_save: null
	,__class__: snow_modules_interfaces_IO
};
var snow_core_web_io_IO = function(_system) {
	this.system = _system;
};
$hxClasses["snow.core.web.io.IO"] = snow_core_web_io_IO;
snow_core_web_io_IO.__name__ = ["snow","core","web","io","IO"];
snow_core_web_io_IO.__interfaces__ = [snow_modules_interfaces_IO];
snow_core_web_io_IO.prototype = {
	system: null
	,url_open: function(_url) {
		if(_url != null && _url.length > 0) window.open(_url,"_blank");
	}
	,data_load: function(_path,_options) {
		return new snow_api_Promise(function(resolve,reject) {
			var _async = true;
			var _binary = true;
			if(_options != null) {
				if(_options.binary != null) _binary = _options.binary;
			}
			var request = new XMLHttpRequest();
			request.open("GET",_path,_async);
			if(_binary) request.overrideMimeType("text/plain; charset=x-user-defined"); else request.overrideMimeType("text/plain; charset=UTF-8");
			if(_async) request.responseType = "arraybuffer";
			request.onload = function(data) {
				if(request.status == 200) resolve((function($this) {
					var $r;
					var elements = request.response;
					var len = null;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this))); else reject(snow_types_Error.error("request status was " + request.status + " / " + request.statusText));
			};
			request.send();
		});
	}
	,data_save: function(_path,_data,_options) {
		return false;
	}
	,string_save_path: function(_slot) {
		if(_slot == null) _slot = 0;
		var _pref_path = "<localstorage>";
		var _slot_path = this.string_slot_id(_slot);
		var _path = haxe_io_Path.join([_pref_path,_slot_path]);
		return haxe_io_Path.normalize(_path);
	}
	,init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(_event) {
	}
	,string_slot_id: function(_slot) {
		if(_slot == null) _slot = 0;
		var _parts = this.system.app.snow_config.app_package.split(".");
		var _appname = _parts.pop();
		var _org = _parts.join(".");
		return "" + _org + "/" + _appname + "/" + this.system.string_save_prefix + "." + _slot;
	}
	,string_slot_save: function(_slot,_contents) {
		if(_slot == null) _slot = 0;
		var storage = window.localStorage;
		if(storage == null) {
			haxe_Log.trace("       i / io / " + "localStorage isnt supported in this browser?!",{ fileName : "IO.hx", lineNumber : 114, className : "snow.core.web.io.IO", methodName : "string_slot_save"});
			return false;
		}
		var _id = this.string_slot_id(_slot);
		storage.setItem(_id,_contents);
		return true;
	}
	,string_slot_load: function(_slot) {
		if(_slot == null) _slot = 0;
		var storage = window.localStorage;
		if(storage == null) {
			haxe_Log.trace("       i / io / " + "localStorage isnt supported in this browser?!",{ fileName : "IO.hx", lineNumber : 132, className : "snow.core.web.io.IO", methodName : "string_slot_load"});
			return null;
		}
		var _id = this.string_slot_id(_slot);
		return storage.getItem(_id);
	}
	,string_slot_encode: function(_string) {
		return window.btoa(_string);
	}
	,string_slot_decode: function(_string) {
		return window.atob(_string);
	}
	,__class__: snow_core_web_io_IO
};
var snow_modules_interfaces_Windowing = function() { };
$hxClasses["snow.modules.interfaces.Windowing"] = snow_modules_interfaces_Windowing;
snow_modules_interfaces_Windowing.__name__ = ["snow","modules","interfaces","Windowing"];
snow_modules_interfaces_Windowing.prototype = {
	init: null
	,update: null
	,destroy: null
	,on_event: null
	,listen: null
	,unlisten: null
	,create: null
	,close: null
	,show: null
	,destroy_window: null
	,update_window: null
	,render: null
	,swap: null
	,simple_message: null
	,set_size: null
	,set_position: null
	,set_title: null
	,set_max_size: null
	,set_min_size: null
	,fullscreen: null
	,bordered: null
	,grab: null
	,set_cursor_position: null
	,system_enable_cursor: null
	,system_lock_cursor: null
	,system_enable_vsync: null
	,display_count: null
	,display_mode_count: null
	,display_native_mode: null
	,display_current_mode: null
	,display_mode: null
	,display_bounds: null
	,display_name: null
	,__class__: snow_modules_interfaces_Windowing
};
var snow_core_web_window_Windowing = function(_system) {
	this._hidden_event_name = "";
	this._hidden_name = "";
	this._cursor_visible = true;
	this._pre_fs_body_margin = "0";
	this._pre_fs_body_overflow = "0";
	this._pre_fs_height = 0;
	this._pre_fs_width = 0;
	this._pre_fs_s_height = "";
	this._pre_fs_s_width = "";
	this._pre_fs_margin = "0";
	this._pre_fs_padding = "0";
	this.seq_window = 1;
	this.system = _system;
	this.fs_windows = [];
	this.gl_contexts = new haxe_ds_IntMap();
};
$hxClasses["snow.core.web.window.Windowing"] = snow_core_web_window_Windowing;
snow_core_web_window_Windowing.__name__ = ["snow","core","web","window","Windowing"];
snow_core_web_window_Windowing.__interfaces__ = [snow_modules_interfaces_Windowing];
snow_core_web_window_Windowing.prototype = {
	gl_contexts: null
	,seq_window: null
	,fs_windows: null
	,system: null
	,init: function() {
		this.listen_for_visibility();
		this.listen_for_resize();
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,_copy_config: function(_config) {
		return { borderless : _config.borderless, fullscreen : _config.fullscreen, fullscreen_desktop : _config.fullscreen_desktop, height : _config.height, no_input : _config.no_input, resizable : _config.resizable, title : _config.title, width : _config.width, x : _config.x, y : _config.y};
	}
	,create: function(render_config,_config,on_created) {
		var _window_id = this.seq_window;
		var _handle;
		var _this = window.document;
		_handle = _this.createElement("canvas");
		var config = this._copy_config(_config);
		_handle.width = config.width;
		_handle.height = config.height;
		_handle.style.display = "block";
		_handle.style.position = "relative";
		_handle.style.background = "#000";
		window.document.body.appendChild(_handle);
		var _gl_context = js_html__$CanvasElement_CanvasUtil.getContextWebGL(_handle,{ alpha : false, premultipliedAlpha : false, antialias : render_config.antialiasing > 0});
		if(_gl_context == null) {
			var msg = "WebGL is required to run this!<br/><br/>";
			msg += "visit http://get.webgl.org/ for help <br/>";
			msg += "and contact the developer of the application";
			this.internal_fallback(msg);
			throw new js__$Boot_HaxeError(snow_types_Error.windowing(msg));
		}
		if(snow_modules_opengl_web_GL.current_context == null) snow_modules_opengl_web_GL.current_context = _gl_context;
		this.gl_contexts.h[_window_id] = _gl_context;
		var _window_pos = this.get_real_window_position(_handle);
		config.x = _window_pos.x;
		config.y = _window_pos.y;
		if(config.title != null && config.title != "") window.document.title = config.title;
		on_created(_handle,_window_id,{ config : config, render_config : render_config});
		_handle.setAttribute("id","window" + _window_id);
		this.seq_window++;
	}
	,destroy_window: function(_window) {
		window.document.body.removeChild(_window.handle);
	}
	,close: function(_window) {
		_window.handle.style.display = "none";
	}
	,show: function(_window) {
		_window.handle.style.display = null;
	}
	,internal_resize: function(_window,_w,_h) {
		this.system.app.dispatch_system_event({ type : 5, window : { type : 7, timestamp : snow_Snow.core.timestamp(), window_id : _window.id, event : { x : _w, y : _h}}});
		this.system.app.dispatch_system_event({ type : 5, window : { type : 6, timestamp : snow_Snow.core.timestamp(), window_id : _window.id, event : { x : _w, y : _h}}});
	}
	,update_window: function(_window) {
		var _rect = _window.handle.getBoundingClientRect();
		if(_rect.left != _window.x || _rect.top != _window.y) this.system.app.dispatch_system_event({ type : 5, window : { type : 5, timestamp : snow_Snow.core.timestamp(), window_id : _window.id, event : { x : _rect.left, y : _rect.top}}});
		if(_rect.width != _window.width || _rect.height != _window.height) this.internal_resize(_window,_rect.width,_rect.height);
		_rect = null;
	}
	,render: function(_window) {
		var _window_gl_context = this.gl_contexts.h[_window.id];
		if(snow_modules_opengl_web_GL.current_context != _window_gl_context) snow_modules_opengl_web_GL.current_context = _window_gl_context;
	}
	,swap: function(_window) {
	}
	,simple_message: function(_window,message,title) {
		if(title == null) title = "";
		window.alert(message);
	}
	,set_size: function(_window,w,h) {
		_window.handle.width = w;
		_window.handle.height = h;
		_window.handle.style.width = "" + w + "px";
		_window.handle.style.height = "" + h + "px";
		this.internal_resize(_window,w,h);
	}
	,set_position: function(_window,x,y) {
		_window.handle.style.left = "" + x + "px";
		_window.handle.style.top = "" + y + "px";
	}
	,get_real_window_position: function(handle) {
		var curleft = 0;
		var curtop = 0;
		var _obj = handle;
		var _has_parent = true;
		var _max_count = 0;
		while(_has_parent == true) {
			_max_count++;
			if(_max_count > 100) {
				_has_parent = false;
				break;
			}
			if(_obj.offsetParent != null) {
				curleft += _obj.offsetLeft;
				curtop += _obj.offsetTop;
				_obj = _obj.offsetParent;
			} else _has_parent = false;
		}
		return { x : curleft, y : curtop};
	}
	,set_title: function(_window,title) {
		window.document.title = title;
	}
	,set_max_size: function(_window,w,h) {
		_window.handle.style.maxWidth = "" + w + "px";
		_window.handle.style.maxHeight = "" + h + "px";
	}
	,set_min_size: function(_window,w,h) {
		_window.handle.style.minWidth = "" + w + "px";
		_window.handle.style.minHeight = "" + h + "px";
	}
	,_pre_fs_padding: null
	,_pre_fs_margin: null
	,_pre_fs_s_width: null
	,_pre_fs_s_height: null
	,_pre_fs_width: null
	,_pre_fs_height: null
	,_pre_fs_body_overflow: null
	,_pre_fs_body_margin: null
	,internal_fullscreen: function(_window,fullscreen) {
		var _handle = _window.handle;
		if(fullscreen) {
			if(HxOverrides.indexOf(this.fs_windows,_window,0) == -1) this.fs_windows.push(_window);
		} else HxOverrides.remove(this.fs_windows,_window);
		var true_fullscreen = this.system.app.config.web.true_fullscreen;
		if(fullscreen) {
			if(true_fullscreen) {
				if($bind(_handle,_handle.requestFullscreen) == null) {
					if(_handle.requestFullScreen == null) {
						if(_handle.webkitRequestFullscreen == null) {
							if(_handle.mozRequestFullScreen == null) {
							} else _handle.mozRequestFullScreen();
						} else _handle.webkitRequestFullscreen();
					} else _handle.requestFullScreen(null);
				} else _handle.requestFullscreen();
			} else {
				this._pre_fs_padding = _handle.style.padding;
				this._pre_fs_margin = _handle.style.margin;
				this._pre_fs_s_width = _handle.style.width;
				this._pre_fs_s_height = _handle.style.height;
				this._pre_fs_width = _handle.width;
				this._pre_fs_height = _handle.height;
				this._pre_fs_body_margin = window.document.body.style.margin;
				this._pre_fs_body_overflow = window.document.body.style.overflow;
				_handle.style.margin = "0";
				_handle.style.padding = "0";
				_handle.style.width = window.innerWidth + "px";
				_handle.style.height = window.innerHeight + "px";
				_handle.width = window.innerWidth;
				_handle.height = window.innerHeight;
				window.document.body.style.margin = "0";
				window.document.body.style.overflow = "hidden";
			}
		} else if(true_fullscreen) {
		} else {
			_handle.style.padding = this._pre_fs_padding;
			_handle.style.margin = this._pre_fs_margin;
			_handle.style.width = this._pre_fs_s_width;
			_handle.style.height = this._pre_fs_s_height;
			_handle.width = this._pre_fs_width;
			_handle.height = this._pre_fs_height;
			window.document.body.style.margin = this._pre_fs_body_margin;
			window.document.body.style.overflow = this._pre_fs_body_overflow;
		}
	}
	,fullscreen: function(_window,fullscreen) {
		this.internal_fullscreen(_window,fullscreen);
	}
	,bordered: function(_window,bordered) {
	}
	,grab: function(_window,grabbed) {
		if(grabbed) {
			if(($_=_window.handle,$bind($_,$_.requestPointerLock)) == null) {
				if(_window.handle.webkitRequestPointerLock == null) {
					if(_window.handle.mozRequestPointerLock == null) {
					} else _window.handle.mozRequestPointerLock();
				} else _window.handle.webkitRequestPointerLock();
			} else _window.handle.requestPointerLock();
		} else {
		}
	}
	,set_cursor_position: function(_window,x,y) {
	}
	,cursor_style: null
	,_cursor_visible: null
	,system_enable_cursor: function(enable) {
		if(this.cursor_style == null) {
			var _this = window.document;
			this.cursor_style = _this.createElement("style");
			this.cursor_style.innerHTML = "* { cursor:none; }";
		}
		if(enable && !this._cursor_visible) {
			this._cursor_visible = true;
			window.document.body.removeChild(this.cursor_style);
		} else if(!enable && this._cursor_visible) {
			this._cursor_visible = false;
			window.document.body.appendChild(this.cursor_style);
		}
	}
	,system_lock_cursor: function(enable) {
		if(this.system.app.window != null) this.grab(this.system.app.window,enable);
	}
	,system_enable_vsync: function(enable) {
		return -1;
	}
	,display_count: function() {
		return 1;
	}
	,display_mode_count: function(display) {
		return 1;
	}
	,display_native_mode: function(display) {
		return { format : 0, refresh_rate : 0, width : window.screen.width, height : window.screen.height};
	}
	,display_current_mode: function(display) {
		return this.display_native_mode(display);
	}
	,display_mode: function(display,mode_index) {
		return this.display_native_mode(display);
	}
	,display_bounds: function(display) {
		return { x : 0, y : 0, width : window.innerWidth, height : window.innerHeight};
	}
	,display_name: function(display) {
		return window.navigator.vendor;
	}
	,listen: function(_window) {
		_window.handle.addEventListener("mouseleave",$bind(this,this.on_internal_leave));
		_window.handle.addEventListener("mouseenter",$bind(this,this.on_internal_enter));
		if(_window.config.fullscreen) {
			this.internal_fullscreen(_window,_window.config.fullscreen);
			_window.config.width = _window.handle.width;
			_window.config.height = _window.handle.height;
		}
	}
	,unlisten: function(_window) {
		_window.handle.removeEventListener("mouseleave",$bind(this,this.on_internal_leave));
		_window.handle.removeEventListener("mouseenter",$bind(this,this.on_internal_enter));
		HxOverrides.remove(this.fs_windows,_window);
	}
	,on_internal_leave: function(_mouse_event) {
		var _window = this.system.window_from_handle(_mouse_event.target);
		this.system.app.dispatch_system_event({ type : 5, window : { type : 12, timestamp : _mouse_event.timeStamp, window_id : _window.id, event : _mouse_event}});
	}
	,on_internal_enter: function(_mouse_event) {
		var _window = this.system.window_from_handle(_mouse_event.target);
		this.system.app.dispatch_system_event({ type : 5, window : { type : 11, timestamp : _mouse_event.timeStamp, window_id : _window.id, event : _mouse_event}});
	}
	,listen_for_resize: function() {
		var _g = this;
		window.onresize = function(e) {
			if(!_g.system.app.config.web.true_fullscreen) {
				var _g1 = 0;
				var _g2 = _g.fs_windows;
				while(_g1 < _g2.length) {
					var $window = _g2[_g1];
					++_g1;
					$window.set_size(window.innerWidth,window.innerHeight);
					_g.internal_resize($window,$window.width,$window.height);
				}
			}
		};
	}
	,_hidden_name: null
	,_hidden_event_name: null
	,listen_for_visibility: function() {
		if(typeof document.hidden !== undefined) {
			this._hidden_name = "hidden";
			this._hidden_event_name = "visibilitychange";
		} else if(typeof document.mozHidden !== undefined ) {
			this._hidden_name = "mozHidden";
			this._hidden_name = "mozvisibilitychange";
		} else if(typeof document.msHidden !== "undefined") {
			this._hidden_name = "msHidden";
			this._hidden_event_name = "msvisibilitychange";
		} else if(typeof document.webkitHidden !== "undefined") {
			this._hidden_name = "webkitHidden";
			this._hidden_event_name = "webkitvisibilitychange";
		}
		if(this._hidden_name != "" && this._hidden_event_name != "") window.document.addEventListener(this._hidden_event_name,$bind(this,this.on_visibility_change));
	}
	,on_visibility_change: function(jsevent) {
		var _event = { type : 5, window : { type : 2, timestamp : snow_Snow.core.timestamp(), window_id : 1, event : jsevent}};
		if(document[this._hidden_name]) {
			_event.window.type = 3;
			this.system.app.on_event(_event);
			_event.window.type = 8;
			this.system.app.on_event(_event);
			_event.window.type = 14;
			this.system.app.on_event(_event);
		} else {
			_event.window.type = 2;
			this.system.app.on_event(_event);
			_event.window.type = 10;
			this.system.app.on_event(_event);
			_event.window.type = 13;
			this.system.app.on_event(_event);
		}
	}
	,internal_fallback: function(message) {
		var text_el;
		var overlay_el;
		var _this = window.document;
		text_el = _this.createElement("div");
		var _this1 = window.document;
		overlay_el = _this1.createElement("div");
		text_el.style.marginLeft = "auto";
		text_el.style.marginRight = "auto";
		text_el.style.color = "#d3d3d3";
		text_el.style.marginTop = "5em";
		text_el.style.fontSize = "1.4em";
		text_el.style.fontFamily = "helvetica,sans-serif";
		text_el.innerHTML = message;
		overlay_el.style.top = "0";
		overlay_el.style.left = "0";
		overlay_el.style.width = "100%";
		overlay_el.style.height = "100%";
		overlay_el.style.display = "block";
		overlay_el.style.minWidth = "100%";
		overlay_el.style.minHeight = "100%";
		overlay_el.style.textAlign = "center";
		overlay_el.style.position = "absolute";
		overlay_el.style.background = "rgba(1,1,1,0.90)";
		overlay_el.appendChild(text_el);
		window.document.body.appendChild(overlay_el);
	}
	,__class__: snow_core_web_window_Windowing
};
var snow_modules_interfaces_Audio = function() { };
$hxClasses["snow.modules.interfaces.Audio"] = snow_modules_interfaces_Audio;
snow_modules_interfaces_Audio.__name__ = ["snow","modules","interfaces","Audio"];
snow_modules_interfaces_Audio.prototype = {
	init: null
	,update: null
	,destroy: null
	,on_event: null
	,create_sound: null
	,create_sound_from_bytes: null
	,suspend: null
	,resume: null
	,__class__: snow_modules_interfaces_Audio
};
var snow_modules_howlerjs_Audio = function(_system) {
	this.system = _system;
	this.suspended_sounds = [];
	this.handles = new haxe_ds_ObjectMap();
};
$hxClasses["snow.modules.howlerjs.Audio"] = snow_modules_howlerjs_Audio;
snow_modules_howlerjs_Audio.__name__ = ["snow","modules","howlerjs","Audio"];
snow_modules_howlerjs_Audio.__interfaces__ = [snow_modules_interfaces_Audio];
snow_modules_howlerjs_Audio.prototype = {
	suspended_sounds: null
	,system: null
	,handles: null
	,init: function() {
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,on_event: function(event) {
	}
	,suspend: function() {
		var $it0 = this.handles.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			if(sound.get_playing()) {
				sound.toggle();
				this.suspended_sounds.push(sound);
			}
		}
	}
	,resume: function() {
		while(this.suspended_sounds.length > 0) {
			var sound = this.suspended_sounds.pop();
			sound.toggle();
		}
	}
	,info_from_id: function(_id,_format) {
		if(_format == null) {
			var _ext = haxe_io_Path.extension(_id);
			switch(_ext) {
			case "wav":
				_format = 2;
				break;
			case "ogg":
				_format = 1;
				break;
			case "pcm":
				_format = 3;
				break;
			default:
				_format = 0;
			}
		}
		return { format : _format, id : _id, handle : null, data : null};
	}
	,create_sound: function(_id,_name,_streaming,_format) {
		if(_streaming == null) _streaming = false;
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			var _path = _g.system.app.assets.root + _id;
			var info = _g.info_from_id(_path,_format);
			var sound = new snow_modules_howlerjs_sound_Sound(_g.system,_name,_streaming);
			info.handle = new window.Howl({ urls : [_path], onend : function() {
				_g.system.app.audio.module._on_end(info.handle);
			}, onloaderror : function() {
				reject(snow_types_Error.error("failed to create sound " + _name + " from " + _id));
			}, onload : function() {
				info.handle = this;
				sound.set_info(info);
				var key = info.handle;
				_g.handles.set(key,sound);
				resolve(sound);
			}});
		});
	}
	,create_sound_from_bytes: function(_name,_bytes,_format) {
		throw new js__$Boot_HaxeError(snow_types_Error.error("unimplemented / wip"));
	}
	,_on_end: function(handle) {
		var sound;
		var key = handle;
		sound = this.handles.h[key.__id__];
		if(sound != null) sound.emit("end");
	}
	,__class__: snow_modules_howlerjs_Audio
};
var snow_system_audio_Sound = function(_system,_name,_is_stream) {
	if(_is_stream == null) _is_stream = false;
	this.is_stream = false;
	this.position_bytes = 0;
	this.length_bytes = 0;
	this.duration = 0.0;
	this.position = 0.0;
	this.looping = false;
	this.pan = 0.0;
	this.volume = 1.0;
	this.pitch = 1.0;
	this.loaded = false;
	this.paused = false;
	this.playing = false;
	this.name = "";
	this.name = _name;
	this.system = _system;
	this.is_stream = _is_stream;
};
$hxClasses["snow.system.audio.Sound"] = snow_system_audio_Sound;
snow_system_audio_Sound.__name__ = ["snow","system","audio","Sound"];
snow_system_audio_Sound.prototype = {
	system: null
	,name: null
	,playing: null
	,paused: null
	,loaded: null
	,info: null
	,pitch: null
	,volume: null
	,pan: null
	,looping: null
	,position: null
	,duration: null
	,length_bytes: null
	,position_bytes: null
	,is_stream: null
	,emit: function(_event) {
		this.system.sound_event(this,_event);
	}
	,on: function(_event,_handler) {
		this.system.on(this.name,_event,_handler);
	}
	,off: function(_event,_handler) {
		this.system.off(this.name,_event,_handler);
	}
	,play: function() {
		haxe_Log.trace("    i / sound / " + "Sound:play called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 102, className : "snow.system.audio.Sound", methodName : "play"});
	}
	,loop: function() {
		haxe_Log.trace("    i / sound / " + "Sound:loop called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 104, className : "snow.system.audio.Sound", methodName : "loop"});
	}
	,stop: function() {
		haxe_Log.trace("    i / sound / " + "Sound:stop called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 106, className : "snow.system.audio.Sound", methodName : "stop"});
	}
	,pause: function() {
		haxe_Log.trace("    i / sound / " + "Sound:pause called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 108, className : "snow.system.audio.Sound", methodName : "pause"});
	}
	,destroy: function() {
		haxe_Log.trace("    i / sound / " + "Sound:destroy called in root Sound module. Nothing will happen.",{ fileName : "Sound.hx", lineNumber : 110, className : "snow.system.audio.Sound", methodName : "destroy"});
	}
	,internal_update: function() {
	}
	,internal_play: function() {
	}
	,internal_loop: function() {
	}
	,internal_stop: function() {
	}
	,internal_pause: function() {
	}
	,toggle: function() {
		this.set_playing(!this.get_playing());
		if(this.get_playing()) {
			if(this.get_looping()) this.loop(); else this.play();
		} else this.pause();
	}
	,get_playing: function() {
		return this.playing;
	}
	,get_paused: function() {
		return this.paused;
	}
	,get_loaded: function() {
		return this.loaded;
	}
	,get_info: function() {
		return this.info;
	}
	,set_info: function(_info) {
		return this.info = _info;
	}
	,get_pan: function() {
		return this.pan;
	}
	,get_pitch: function() {
		return this.pitch;
	}
	,get_volume: function() {
		return this.volume;
	}
	,get_looping: function() {
		return this.looping;
	}
	,get_position: function() {
		return this.position;
	}
	,get_position_bytes: function() {
		return this.position_bytes;
	}
	,get_length_bytes: function() {
		return this.length_bytes;
	}
	,get_duration: function() {
		return 0;
	}
	,set_playing: function(_playing) {
		return this.playing = _playing;
	}
	,set_paused: function(_paused) {
		return this.paused = _paused;
	}
	,set_loaded: function(_loaded) {
		return this.loaded = _loaded;
	}
	,set_pan: function(_pan) {
		return this.pan = _pan;
	}
	,set_pitch: function(_pitch) {
		return this.pitch = _pitch;
	}
	,set_volume: function(_volume) {
		return this.volume = _volume;
	}
	,set_position: function(_position) {
		return this.position = _position;
	}
	,set_looping: function(_looping) {
		return this.looping = _looping;
	}
	,set_position_bytes: function(_position_bytes) {
		return this.position_bytes = _position_bytes;
	}
	,__class__: snow_system_audio_Sound
	,__properties__: {set_position_bytes:"set_position_bytes",get_position_bytes:"get_position_bytes",get_length_bytes:"get_length_bytes",get_duration:"get_duration",set_position:"set_position",get_position:"get_position",set_looping:"set_looping",get_looping:"get_looping",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume",set_pitch:"set_pitch",get_pitch:"get_pitch",set_info:"set_info",get_info:"get_info",set_loaded:"set_loaded",get_loaded:"get_loaded",set_paused:"set_paused",get_paused:"get_paused",set_playing:"set_playing",get_playing:"get_playing"}
};
var snow_modules_howlerjs_sound_Sound = function(_system,_name,_is_stream) {
	if(_is_stream == null) _is_stream = false;
	snow_system_audio_Sound.call(this,_system,_name,_is_stream);
};
$hxClasses["snow.modules.howlerjs.sound.Sound"] = snow_modules_howlerjs_sound_Sound;
snow_modules_howlerjs_sound_Sound.__name__ = ["snow","modules","howlerjs","sound","Sound"];
snow_modules_howlerjs_sound_Sound.__super__ = snow_system_audio_Sound;
snow_modules_howlerjs_sound_Sound.prototype = $extend(snow_system_audio_Sound.prototype,{
	set_info: function(_info) {
		if(this.get_info() != null) this.destroy();
		this.info = null;
		if(_info == null) {
			haxe_Log.trace("    i / sound / " + "not creating sound, info was null",{ fileName : "Sound.hx", lineNumber : 27, className : "snow.modules.howlerjs.sound.Sound", methodName : "set_info"});
			return this.get_info();
		}
		this.info = _info;
		this.set_loaded(true);
		return this.get_info();
	}
	,set_pan: function(_pan) {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.pos3d(this.get_pan());
		return this.pan = _pan;
	}
	,set_volume: function(_volume) {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.volume(_volume);
		return this.volume = _volume;
	}
	,set_pitch: function(_pitch) {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.rate(_pitch);
		return this.pitch = _pitch;
	}
	,set_position: function(_position) {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.pos(_position);
		return this.position = _position;
	}
	,get_position: function() {
		if(this.get_info() != null && this.get_info().handle != null) return this.get_info().handle.pos();
		return this.position;
	}
	,get_duration: function() {
		if(this.get_info() != null && this.get_info().handle != null) return this.get_info().handle._duration;
		return 0;
	}
	,play: function() {
		if(this.get_info() != null && this.get_info().handle != null) {
			this.set_playing(true);
			this.set_looping(false);
			this.get_info().handle.loop(false);
			this.get_info().handle.play();
			if(this.get_info() != null && this.get_info().handle != null) {
				this.get_info().handle.rate(this.get_pitch());
				this.get_info().handle.volume(this.get_volume());
				this.get_info().handle.pos3d(this.get_pan());
			}
		}
	}
	,loop: function() {
		if(this.get_info() != null && this.get_info().handle != null) {
			this.set_playing(true);
			this.set_looping(true);
			this.get_info().handle.loop(true);
			this.get_info().handle.play();
			if(this.get_info() != null && this.get_info().handle != null) {
				this.get_info().handle.rate(this.get_pitch());
				this.get_info().handle.volume(this.get_volume());
				this.get_info().handle.pos3d(this.get_pan());
			}
		}
	}
	,stop: function() {
		this.set_playing(false);
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.stop();
	}
	,pause: function() {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.pause();
	}
	,destroy: function() {
		if(this.get_info() != null && this.get_info().handle != null) this.get_info().handle.unload();
		this.system.kill(this);
	}
	,ensure_parameters: function() {
		if(this.get_info() != null && this.get_info().handle != null) {
			this.get_info().handle.rate(this.get_pitch());
			this.get_info().handle.volume(this.get_volume());
			this.get_info().handle.pos3d(this.get_pan());
		}
	}
	,__class__: snow_modules_howlerjs_sound_Sound
});
var snow_modules_opengl_web_GL = function() { };
$hxClasses["snow.modules.opengl.web.GL"] = snow_modules_opengl_web_GL;
snow_modules_opengl_web_GL.__name__ = ["snow","modules","opengl","web","GL"];
snow_modules_opengl_web_GL.__properties__ = {get_version:"get_version"}
snow_modules_opengl_web_GL.versionString = function() {
	var ver = snow_modules_opengl_web_GL.current_context.getParameter(7938);
	var slver = snow_modules_opengl_web_GL.current_context.getParameter(35724);
	var ren = snow_modules_opengl_web_GL.current_context.getParameter(7937);
	var ven = snow_modules_opengl_web_GL.current_context.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
snow_modules_opengl_web_GL.activeTexture = function(texture) {
	snow_modules_opengl_web_GL.current_context.activeTexture(texture);
};
snow_modules_opengl_web_GL.attachShader = function(program,shader) {
	snow_modules_opengl_web_GL.current_context.attachShader(program,shader);
};
snow_modules_opengl_web_GL.bindAttribLocation = function(program,index,name) {
	snow_modules_opengl_web_GL.current_context.bindAttribLocation(program,index,name);
};
snow_modules_opengl_web_GL.bindBuffer = function(target,buffer) {
	snow_modules_opengl_web_GL.current_context.bindBuffer(target,buffer);
};
snow_modules_opengl_web_GL.bindFramebuffer = function(target,framebuffer) {
	snow_modules_opengl_web_GL.current_context.bindFramebuffer(target,framebuffer);
};
snow_modules_opengl_web_GL.bindRenderbuffer = function(target,renderbuffer) {
	snow_modules_opengl_web_GL.current_context.bindRenderbuffer(target,renderbuffer);
};
snow_modules_opengl_web_GL.bindTexture = function(target,texture) {
	snow_modules_opengl_web_GL.current_context.bindTexture(target,texture);
};
snow_modules_opengl_web_GL.blendColor = function(red,green,blue,alpha) {
	snow_modules_opengl_web_GL.current_context.blendColor(red,green,blue,alpha);
};
snow_modules_opengl_web_GL.blendEquation = function(mode) {
	snow_modules_opengl_web_GL.current_context.blendEquation(mode);
};
snow_modules_opengl_web_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	snow_modules_opengl_web_GL.current_context.blendEquationSeparate(modeRGB,modeAlpha);
};
snow_modules_opengl_web_GL.blendFunc = function(sfactor,dfactor) {
	snow_modules_opengl_web_GL.current_context.blendFunc(sfactor,dfactor);
};
snow_modules_opengl_web_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	snow_modules_opengl_web_GL.current_context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
snow_modules_opengl_web_GL.bufferData = function(target,data,usage) {
	snow_modules_opengl_web_GL.current_context.bufferData(target,data,usage);
};
snow_modules_opengl_web_GL.bufferSubData = function(target,offset,data) {
	snow_modules_opengl_web_GL.current_context.bufferSubData(target,offset,data);
};
snow_modules_opengl_web_GL.checkFramebufferStatus = function(target) {
	return snow_modules_opengl_web_GL.current_context.checkFramebufferStatus(target);
};
snow_modules_opengl_web_GL.clear = function(mask) {
	snow_modules_opengl_web_GL.current_context.clear(mask);
};
snow_modules_opengl_web_GL.clearColor = function(red,green,blue,alpha) {
	snow_modules_opengl_web_GL.current_context.clearColor(red,green,blue,alpha);
};
snow_modules_opengl_web_GL.clearDepth = function(depth) {
	snow_modules_opengl_web_GL.current_context.clearDepth(depth);
};
snow_modules_opengl_web_GL.clearStencil = function(s) {
	snow_modules_opengl_web_GL.current_context.clearStencil(s);
};
snow_modules_opengl_web_GL.colorMask = function(red,green,blue,alpha) {
	snow_modules_opengl_web_GL.current_context.colorMask(red,green,blue,alpha);
};
snow_modules_opengl_web_GL.compileShader = function(shader) {
	snow_modules_opengl_web_GL.current_context.compileShader(shader);
};
snow_modules_opengl_web_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	snow_modules_opengl_web_GL.current_context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
snow_modules_opengl_web_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	snow_modules_opengl_web_GL.current_context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
snow_modules_opengl_web_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	snow_modules_opengl_web_GL.current_context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
snow_modules_opengl_web_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	snow_modules_opengl_web_GL.current_context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
snow_modules_opengl_web_GL.createBuffer = function() {
	return snow_modules_opengl_web_GL.current_context.createBuffer();
};
snow_modules_opengl_web_GL.createFramebuffer = function() {
	return snow_modules_opengl_web_GL.current_context.createFramebuffer();
};
snow_modules_opengl_web_GL.createProgram = function() {
	return snow_modules_opengl_web_GL.current_context.createProgram();
};
snow_modules_opengl_web_GL.createRenderbuffer = function() {
	return snow_modules_opengl_web_GL.current_context.createRenderbuffer();
};
snow_modules_opengl_web_GL.createShader = function(type) {
	return snow_modules_opengl_web_GL.current_context.createShader(type);
};
snow_modules_opengl_web_GL.createTexture = function() {
	return snow_modules_opengl_web_GL.current_context.createTexture();
};
snow_modules_opengl_web_GL.cullFace = function(mode) {
	snow_modules_opengl_web_GL.current_context.cullFace(mode);
};
snow_modules_opengl_web_GL.deleteBuffer = function(buffer) {
	snow_modules_opengl_web_GL.current_context.deleteBuffer(buffer);
};
snow_modules_opengl_web_GL.deleteFramebuffer = function(framebuffer) {
	snow_modules_opengl_web_GL.current_context.deleteFramebuffer(framebuffer);
};
snow_modules_opengl_web_GL.deleteProgram = function(program) {
	snow_modules_opengl_web_GL.current_context.deleteProgram(program);
};
snow_modules_opengl_web_GL.deleteRenderbuffer = function(renderbuffer) {
	snow_modules_opengl_web_GL.current_context.deleteRenderbuffer(renderbuffer);
};
snow_modules_opengl_web_GL.deleteShader = function(shader) {
	snow_modules_opengl_web_GL.current_context.deleteShader(shader);
};
snow_modules_opengl_web_GL.deleteTexture = function(texture) {
	snow_modules_opengl_web_GL.current_context.deleteTexture(texture);
};
snow_modules_opengl_web_GL.depthFunc = function(func) {
	snow_modules_opengl_web_GL.current_context.depthFunc(func);
};
snow_modules_opengl_web_GL.depthMask = function(flag) {
	snow_modules_opengl_web_GL.current_context.depthMask(flag);
};
snow_modules_opengl_web_GL.depthRange = function(zNear,zFar) {
	snow_modules_opengl_web_GL.current_context.depthRange(zNear,zFar);
};
snow_modules_opengl_web_GL.detachShader = function(program,shader) {
	snow_modules_opengl_web_GL.current_context.detachShader(program,shader);
};
snow_modules_opengl_web_GL.disable = function(cap) {
	snow_modules_opengl_web_GL.current_context.disable(cap);
};
snow_modules_opengl_web_GL.disableVertexAttribArray = function(index) {
	snow_modules_opengl_web_GL.current_context.disableVertexAttribArray(index);
};
snow_modules_opengl_web_GL.drawArrays = function(mode,first,count) {
	snow_modules_opengl_web_GL.current_context.drawArrays(mode,first,count);
};
snow_modules_opengl_web_GL.drawElements = function(mode,count,type,offset) {
	snow_modules_opengl_web_GL.current_context.drawElements(mode,count,type,offset);
};
snow_modules_opengl_web_GL.enable = function(cap) {
	snow_modules_opengl_web_GL.current_context.enable(cap);
};
snow_modules_opengl_web_GL.enableVertexAttribArray = function(index) {
	snow_modules_opengl_web_GL.current_context.enableVertexAttribArray(index);
};
snow_modules_opengl_web_GL.finish = function() {
	snow_modules_opengl_web_GL.current_context.finish();
};
snow_modules_opengl_web_GL.flush = function() {
	snow_modules_opengl_web_GL.current_context.flush();
};
snow_modules_opengl_web_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	snow_modules_opengl_web_GL.current_context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
snow_modules_opengl_web_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	snow_modules_opengl_web_GL.current_context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
snow_modules_opengl_web_GL.frontFace = function(mode) {
	snow_modules_opengl_web_GL.current_context.frontFace(mode);
};
snow_modules_opengl_web_GL.generateMipmap = function(target) {
	snow_modules_opengl_web_GL.current_context.generateMipmap(target);
};
snow_modules_opengl_web_GL.getActiveAttrib = function(program,index) {
	return snow_modules_opengl_web_GL.current_context.getActiveAttrib(program,index);
};
snow_modules_opengl_web_GL.getActiveUniform = function(program,index) {
	return snow_modules_opengl_web_GL.current_context.getActiveUniform(program,index);
};
snow_modules_opengl_web_GL.getAttachedShaders = function(program) {
	return snow_modules_opengl_web_GL.current_context.getAttachedShaders(program);
};
snow_modules_opengl_web_GL.getAttribLocation = function(program,name) {
	return snow_modules_opengl_web_GL.current_context.getAttribLocation(program,name);
};
snow_modules_opengl_web_GL.getBufferParameter = function(target,pname) {
	return snow_modules_opengl_web_GL.current_context.getBufferParameter(target,pname);
};
snow_modules_opengl_web_GL.getContextAttributes = function() {
	return snow_modules_opengl_web_GL.current_context.getContextAttributes();
};
snow_modules_opengl_web_GL.getError = function() {
	return snow_modules_opengl_web_GL.current_context.getError();
};
snow_modules_opengl_web_GL.getExtension = function(name) {
	return snow_modules_opengl_web_GL.current_context.getExtension(name);
};
snow_modules_opengl_web_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return snow_modules_opengl_web_GL.current_context.getFramebufferAttachmentParameter(target,attachment,pname);
};
snow_modules_opengl_web_GL.getParameter = function(pname) {
	return snow_modules_opengl_web_GL.current_context.getParameter(pname);
};
snow_modules_opengl_web_GL.getProgramInfoLog = function(program) {
	return snow_modules_opengl_web_GL.current_context.getProgramInfoLog(program);
};
snow_modules_opengl_web_GL.getProgramParameter = function(program,pname) {
	return snow_modules_opengl_web_GL.current_context.getProgramParameter(program,pname);
};
snow_modules_opengl_web_GL.getRenderbufferParameter = function(target,pname) {
	return snow_modules_opengl_web_GL.current_context.getRenderbufferParameter(target,pname);
};
snow_modules_opengl_web_GL.getShaderInfoLog = function(shader) {
	return snow_modules_opengl_web_GL.current_context.getShaderInfoLog(shader);
};
snow_modules_opengl_web_GL.getShaderParameter = function(shader,pname) {
	return snow_modules_opengl_web_GL.current_context.getShaderParameter(shader,pname);
};
snow_modules_opengl_web_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return snow_modules_opengl_web_GL.current_context.getShaderPrecisionFormat(shadertype,precisiontype);
};
snow_modules_opengl_web_GL.getShaderSource = function(shader) {
	return snow_modules_opengl_web_GL.current_context.getShaderSource(shader);
};
snow_modules_opengl_web_GL.getSupportedExtensions = function() {
	return snow_modules_opengl_web_GL.current_context.getSupportedExtensions();
};
snow_modules_opengl_web_GL.getTexParameter = function(target,pname) {
	return snow_modules_opengl_web_GL.current_context.getTexParameter(target,pname);
};
snow_modules_opengl_web_GL.getUniform = function(program,location) {
	return snow_modules_opengl_web_GL.current_context.getUniform(program,location);
};
snow_modules_opengl_web_GL.getUniformLocation = function(program,name) {
	return snow_modules_opengl_web_GL.current_context.getUniformLocation(program,name);
};
snow_modules_opengl_web_GL.getVertexAttrib = function(index,pname) {
	return snow_modules_opengl_web_GL.current_context.getVertexAttrib(index,pname);
};
snow_modules_opengl_web_GL.getVertexAttribOffset = function(index,pname) {
	return snow_modules_opengl_web_GL.current_context.getVertexAttribOffset(index,pname);
};
snow_modules_opengl_web_GL.hint = function(target,mode) {
	snow_modules_opengl_web_GL.current_context.hint(target,mode);
};
snow_modules_opengl_web_GL.isBuffer = function(buffer) {
	return snow_modules_opengl_web_GL.current_context.isBuffer(buffer);
};
snow_modules_opengl_web_GL.isEnabled = function(cap) {
	return snow_modules_opengl_web_GL.current_context.isEnabled(cap);
};
snow_modules_opengl_web_GL.isFramebuffer = function(framebuffer) {
	return snow_modules_opengl_web_GL.current_context.isFramebuffer(framebuffer);
};
snow_modules_opengl_web_GL.isProgram = function(program) {
	return snow_modules_opengl_web_GL.current_context.isProgram(program);
};
snow_modules_opengl_web_GL.isRenderbuffer = function(renderbuffer) {
	return snow_modules_opengl_web_GL.current_context.isRenderbuffer(renderbuffer);
};
snow_modules_opengl_web_GL.isShader = function(shader) {
	return snow_modules_opengl_web_GL.current_context.isShader(shader);
};
snow_modules_opengl_web_GL.isTexture = function(texture) {
	return snow_modules_opengl_web_GL.current_context.isTexture(texture);
};
snow_modules_opengl_web_GL.lineWidth = function(width) {
	snow_modules_opengl_web_GL.current_context.lineWidth(width);
};
snow_modules_opengl_web_GL.linkProgram = function(program) {
	snow_modules_opengl_web_GL.current_context.linkProgram(program);
};
snow_modules_opengl_web_GL.pixelStorei = function(pname,param) {
	snow_modules_opengl_web_GL.current_context.pixelStorei(pname,param);
};
snow_modules_opengl_web_GL.polygonOffset = function(factor,units) {
	snow_modules_opengl_web_GL.current_context.polygonOffset(factor,units);
};
snow_modules_opengl_web_GL.readPixels = function(x,y,width,height,format,type,data) {
	snow_modules_opengl_web_GL.current_context.readPixels(x,y,width,height,format,type,data);
};
snow_modules_opengl_web_GL.renderbufferStorage = function(target,internalformat,width,height) {
	snow_modules_opengl_web_GL.current_context.renderbufferStorage(target,internalformat,width,height);
};
snow_modules_opengl_web_GL.sampleCoverage = function(value,invert) {
	snow_modules_opengl_web_GL.current_context.sampleCoverage(value,invert);
};
snow_modules_opengl_web_GL.scissor = function(x,y,width,height) {
	snow_modules_opengl_web_GL.current_context.scissor(x,y,width,height);
};
snow_modules_opengl_web_GL.shaderSource = function(shader,source) {
	snow_modules_opengl_web_GL.current_context.shaderSource(shader,source);
};
snow_modules_opengl_web_GL.stencilFunc = function(func,ref,mask) {
	snow_modules_opengl_web_GL.current_context.stencilFunc(func,ref,mask);
};
snow_modules_opengl_web_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	snow_modules_opengl_web_GL.current_context.stencilFuncSeparate(face,func,ref,mask);
};
snow_modules_opengl_web_GL.stencilMask = function(mask) {
	snow_modules_opengl_web_GL.current_context.stencilMask(mask);
};
snow_modules_opengl_web_GL.stencilMaskSeparate = function(face,mask) {
	snow_modules_opengl_web_GL.current_context.stencilMaskSeparate(face,mask);
};
snow_modules_opengl_web_GL.stencilOp = function(fail,zfail,zpass) {
	snow_modules_opengl_web_GL.current_context.stencilOp(fail,zfail,zpass);
};
snow_modules_opengl_web_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	snow_modules_opengl_web_GL.current_context.stencilOpSeparate(face,fail,zfail,zpass);
};
snow_modules_opengl_web_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	snow_modules_opengl_web_GL.current_context.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
snow_modules_opengl_web_GL.texParameterf = function(target,pname,param) {
	snow_modules_opengl_web_GL.current_context.texParameterf(target,pname,param);
};
snow_modules_opengl_web_GL.texParameteri = function(target,pname,param) {
	snow_modules_opengl_web_GL.current_context.texParameteri(target,pname,param);
};
snow_modules_opengl_web_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	snow_modules_opengl_web_GL.current_context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
snow_modules_opengl_web_GL.uniform1f = function(location,x) {
	snow_modules_opengl_web_GL.current_context.uniform1f(location,x);
};
snow_modules_opengl_web_GL.uniform1fv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform1fv(location,data);
};
snow_modules_opengl_web_GL.uniform1i = function(location,x) {
	snow_modules_opengl_web_GL.current_context.uniform1i(location,x);
};
snow_modules_opengl_web_GL.uniform1iv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform1iv(location,data);
};
snow_modules_opengl_web_GL.uniform2f = function(location,x,y) {
	snow_modules_opengl_web_GL.current_context.uniform2f(location,x,y);
};
snow_modules_opengl_web_GL.uniform2fv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform2fv(location,data);
};
snow_modules_opengl_web_GL.uniform2i = function(location,x,y) {
	snow_modules_opengl_web_GL.current_context.uniform2i(location,x,y);
};
snow_modules_opengl_web_GL.uniform2iv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform2iv(location,data);
};
snow_modules_opengl_web_GL.uniform3f = function(location,x,y,z) {
	snow_modules_opengl_web_GL.current_context.uniform3f(location,x,y,z);
};
snow_modules_opengl_web_GL.uniform3fv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform3fv(location,data);
};
snow_modules_opengl_web_GL.uniform3i = function(location,x,y,z) {
	snow_modules_opengl_web_GL.current_context.uniform3i(location,x,y,z);
};
snow_modules_opengl_web_GL.uniform3iv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform3iv(location,data);
};
snow_modules_opengl_web_GL.uniform4f = function(location,x,y,z,w) {
	snow_modules_opengl_web_GL.current_context.uniform4f(location,x,y,z,w);
};
snow_modules_opengl_web_GL.uniform4fv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform4fv(location,data);
};
snow_modules_opengl_web_GL.uniform4i = function(location,x,y,z,w) {
	snow_modules_opengl_web_GL.current_context.uniform4i(location,x,y,z,w);
};
snow_modules_opengl_web_GL.uniform4iv = function(location,data) {
	snow_modules_opengl_web_GL.current_context.uniform4iv(location,data);
};
snow_modules_opengl_web_GL.uniformMatrix2fv = function(location,transpose,data) {
	snow_modules_opengl_web_GL.current_context.uniformMatrix2fv(location,transpose,data);
};
snow_modules_opengl_web_GL.uniformMatrix3fv = function(location,transpose,data) {
	snow_modules_opengl_web_GL.current_context.uniformMatrix3fv(location,transpose,data);
};
snow_modules_opengl_web_GL.uniformMatrix4fv = function(location,transpose,data) {
	snow_modules_opengl_web_GL.current_context.uniformMatrix4fv(location,transpose,data);
};
snow_modules_opengl_web_GL.useProgram = function(program) {
	snow_modules_opengl_web_GL.current_context.useProgram(program);
};
snow_modules_opengl_web_GL.validateProgram = function(program) {
	snow_modules_opengl_web_GL.current_context.validateProgram(program);
};
snow_modules_opengl_web_GL.vertexAttrib1f = function(indx,x) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib1f(indx,x);
};
snow_modules_opengl_web_GL.vertexAttrib1fv = function(indx,data) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib1fv(indx,data);
};
snow_modules_opengl_web_GL.vertexAttrib2f = function(indx,x,y) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib2f(indx,x,y);
};
snow_modules_opengl_web_GL.vertexAttrib2fv = function(indx,data) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib2fv(indx,data);
};
snow_modules_opengl_web_GL.vertexAttrib3f = function(indx,x,y,z) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib3f(indx,x,y,z);
};
snow_modules_opengl_web_GL.vertexAttrib3fv = function(indx,data) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib3fv(indx,data);
};
snow_modules_opengl_web_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib4f(indx,x,y,z,w);
};
snow_modules_opengl_web_GL.vertexAttrib4fv = function(indx,data) {
	snow_modules_opengl_web_GL.current_context.vertexAttrib4fv(indx,data);
};
snow_modules_opengl_web_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	snow_modules_opengl_web_GL.current_context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
snow_modules_opengl_web_GL.viewport = function(x,y,width,height) {
	snow_modules_opengl_web_GL.current_context.viewport(x,y,width,height);
};
snow_modules_opengl_web_GL.get_version = function() {
	return 7938;
};
var snow_system_assets_Asset = function(_system,_id,_type) {
	if(_type == null) _type = 0;
	this.loaded = false;
	if(_id == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	if(_system == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	this.system = _system;
	this.type = _type;
	this.id = _id;
};
$hxClasses["snow.system.assets.Asset"] = snow_system_assets_Asset;
snow_system_assets_Asset.__name__ = ["snow","system","assets","Asset"];
snow_system_assets_Asset.prototype = {
	system: null
	,id: null
	,loaded: null
	,type: null
	,destroy: function() {
	}
	,__class__: snow_system_assets_Asset
};
var snow_system_assets_AssetImage = function(_system,_id,_image) {
	snow_system_assets_Asset.call(this,_system,_id,4);
	this.set_image(_image);
};
$hxClasses["snow.system.assets.AssetImage"] = snow_system_assets_AssetImage;
snow_system_assets_AssetImage.__name__ = ["snow","system","assets","AssetImage"];
snow_system_assets_AssetImage.load = function(_system,_id) {
	if(_id == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	if(_system == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	return new snow_system_assets_AssetImage(_system,_id,null).reload();
};
snow_system_assets_AssetImage.load_from_bytes = function(_system,_id,_bytes) {
	if(_id == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	if(_bytes == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_bytes was null"));
	if(_system == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	return new snow_system_assets_AssetImage(_system,_id,null).reload_from_bytes(_bytes);
};
snow_system_assets_AssetImage.load_from_pixels = function(_system,_id,_width,_height,_pixels) {
	if(_id == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_id was null"));
	if(_pixels == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_pixels was null"));
	if(_system == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("_system was null"));
	var info = _system.module.image_info_from_pixels(_id,_width,_height,_pixels);
	return new snow_system_assets_AssetImage(_system,_id,info);
};
snow_system_assets_AssetImage.provider = function(_app,_path) {
	return _app.assets.module.image_load_info(_path);
};
snow_system_assets_AssetImage.processor = function(_app,_id,_data) {
	if(_data == null) return snow_api_Promise.reject(snow_types_Error.error("AssetImage processor: data was null"));
	return _app.assets.module.image_info_from_bytes(_id,_data);
};
snow_system_assets_AssetImage.__super__ = snow_system_assets_Asset;
snow_system_assets_AssetImage.prototype = $extend(snow_system_assets_Asset.prototype,{
	image: null
	,reload: function() {
		var _g = this;
		this.loaded = false;
		return new snow_api_Promise(function(resolve,reject) {
			var _load = _g.system.app.io.data_flow(_g.system.root + _g.id,null,snow_system_assets_AssetImage.provider);
			_load.then(function(_image) {
				_g.set_image(_image);
				resolve(_g);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_image(null);
	}
	,reload_from_bytes: function(_bytes) {
		var _g = this;
		this.loaded = false;
		return new snow_api_Promise(function(resolve,reject) {
			var _load = _g.system.module.image_info_from_bytes(_g.id,_bytes);
			_load.then(function(_image) {
				_g.set_image(_image);
				resolve(_g);
			}).error(reject);
		});
	}
	,reload_from_pixels: function(_width,_height,_pixels) {
		this.loaded = false;
		this.set_image(this.system.module.image_info_from_pixels(this.id,_width,_height,_pixels));
	}
	,set_image: function(_image) {
		this.loaded = _image != null;
		return this.image = _image;
	}
	,__class__: snow_system_assets_AssetImage
	,__properties__: {set_image:"set_image"}
});
var snow_system_assets_AssetBytes = function(_system,_id,_bytes) {
	snow_system_assets_Asset.call(this,_system,_id,1);
	this.set_bytes(_bytes);
};
$hxClasses["snow.system.assets.AssetBytes"] = snow_system_assets_AssetBytes;
snow_system_assets_AssetBytes.__name__ = ["snow","system","assets","AssetBytes"];
snow_system_assets_AssetBytes.load = function(_system,_id) {
	return new snow_system_assets_AssetBytes(_system,_id,null).reload();
};
snow_system_assets_AssetBytes.__super__ = snow_system_assets_Asset;
snow_system_assets_AssetBytes.prototype = $extend(snow_system_assets_Asset.prototype,{
	bytes: null
	,reload: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.system.root + _g.id).then(function(_bytes) {
				_g.set_bytes(_bytes);
				resolve(_g);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_bytes(null);
	}
	,set_bytes: function(_bytes) {
		this.loaded = _bytes != null;
		return this.bytes = _bytes;
	}
	,__class__: snow_system_assets_AssetBytes
	,__properties__: {set_bytes:"set_bytes"}
});
var snow_system_assets_AssetText = function(_system,_id,_text) {
	snow_system_assets_Asset.call(this,_system,_id,2);
	this.set_text(_text);
};
$hxClasses["snow.system.assets.AssetText"] = snow_system_assets_AssetText;
snow_system_assets_AssetText.__name__ = ["snow","system","assets","AssetText"];
snow_system_assets_AssetText.load = function(_system,_id) {
	return new snow_system_assets_AssetText(_system,_id,null).reload();
};
snow_system_assets_AssetText.processor = function(_app,_id,_data) {
	if(_data == null) return snow_api_Promise.reject(snow_types_Error.error("AssetText processor: data was null"));
	return snow_api_Promise.resolve(snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.toBytes(_data).toString());
};
snow_system_assets_AssetText.__super__ = snow_system_assets_Asset;
snow_system_assets_AssetText.prototype = $extend(snow_system_assets_Asset.prototype,{
	text: null
	,reload: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.system.root + _g.id,snow_system_assets_AssetText.processor).then(function(_text) {
				_g.set_text(_text);
				resolve(_g);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_text(null);
	}
	,set_text: function(_text) {
		this.loaded = _text != null;
		return this.text = _text;
	}
	,__class__: snow_system_assets_AssetText
	,__properties__: {set_text:"set_text"}
});
var snow_system_assets_AssetJSON = function(_system,_id,_json) {
	snow_system_assets_Asset.call(this,_system,_id,3);
	this.set_json(_json);
};
$hxClasses["snow.system.assets.AssetJSON"] = snow_system_assets_AssetJSON;
snow_system_assets_AssetJSON.__name__ = ["snow","system","assets","AssetJSON"];
snow_system_assets_AssetJSON.load = function(_system,_id) {
	return new snow_system_assets_AssetJSON(_system,_id,null).reload();
};
snow_system_assets_AssetJSON.processor = function(_app,_id,_data) {
	if(_data == null) return snow_api_Promise.reject(snow_types_Error.error("AssetJSON: data was null"));
	return new snow_api_Promise(function(resolve,reject) {
		var _data_json = null;
		try {
			_data_json = JSON.parse(snow_api_buffers__$Uint8Array_Uint8Array_$Impl_$.toBytes(_data).toString());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return reject(snow_types_Error.parse(e));
		}
		return resolve(_data_json);
	});
};
snow_system_assets_AssetJSON.__super__ = snow_system_assets_Asset;
snow_system_assets_AssetJSON.prototype = $extend(snow_system_assets_Asset.prototype,{
	json: null
	,reload: function() {
		var _g = this;
		return new snow_api_Promise(function(resolve,reject) {
			_g.system.app.io.data_flow(_g.system.root + _g.id,snow_system_assets_AssetJSON.processor).then(function(_json) {
				_g.set_json(_json);
				resolve(_g);
			}).error(reject);
		});
	}
	,destroy: function() {
		this.set_json(null);
	}
	,set_json: function(_json) {
		this.loaded = _json != null;
		return this.json = _json;
	}
	,__class__: snow_system_assets_AssetJSON
	,__properties__: {set_json:"set_json"}
});
var snow_system_assets_Assets = function(_app) {
	this.manifest_path = "manifest";
	this.root = "";
	this.app = _app;
	this.list = [];
	this.module = new snow_core_web_assets_Assets(this);
};
$hxClasses["snow.system.assets.Assets"] = snow_system_assets_Assets;
snow_system_assets_Assets.__name__ = ["snow","system","assets","Assets"];
snow_system_assets_Assets.prototype = {
	list: null
	,root: null
	,manifest_path: null
	,module: null
	,app: null
	,listed: function(_id) {
		return HxOverrides.indexOf(this.list,_id,0) != -1;
	}
	,path: function(_id) {
		return this.root + _id;
	}
	,bytes: function(_id) {
		return snow_system_assets_AssetBytes.load(this,_id);
	}
	,text: function(_id) {
		return snow_system_assets_AssetText.load(this,_id);
	}
	,json: function(_id) {
		return snow_system_assets_AssetJSON.load(this,_id);
	}
	,image: function(_id) {
		return snow_system_assets_AssetImage.load(this,_id);
	}
	,image_from_bytes: function(_id,_bytes) {
		return snow_system_assets_AssetImage.load_from_bytes(this,_id,_bytes);
	}
	,image_from_pixels: function(_id,_width,_height,_pixels) {
		return snow_system_assets_AssetImage.load_from_pixels(this,_id,_width,_height,_pixels);
	}
	,__class__: snow_system_assets_Assets
};
var snow_system_audio_Audio = function(_app) {
	this.active = false;
	this.app = _app;
	this.module = new snow_modules_howlerjs_Audio(this);
	this.module.init();
	this.sound_list = new haxe_ds_StringMap();
	this.stream_list = new haxe_ds_StringMap();
	this.active = true;
};
$hxClasses["snow.system.audio.Audio"] = snow_system_audio_Audio;
snow_system_audio_Audio.__name__ = ["snow","system","audio","Audio"];
snow_system_audio_Audio.prototype = {
	module: null
	,active: null
	,app: null
	,sound_list: null
	,stream_list: null
	,create: function(_id,_name,_streaming) {
		if(_streaming == null) _streaming = false;
		if(_name == null) _name = "";
		var _g = this;
		if(_name == "") _name = this.app.make_uniqueid();
		haxe_Log.trace("    i / audio / " + ("creating sound named " + _name + " (stream: " + (_streaming == null?"null":"" + _streaming) + ")"),{ fileName : "Audio.hx", lineNumber : 53, className : "snow.system.audio.Audio", methodName : "create"});
		return new snow_api_Promise(function(resolve,reject) {
			var _create = _g.module.create_sound(_id,_name,_streaming);
			_create.then(function(_sound) {
				_g.sound_list.set(_name,_sound);
				if(_streaming) _g.stream_list.set(_name,_sound);
				resolve(_sound);
				_sound.emit("load");
			}).error(reject);
		});
	}
	,create_from_bytes: function(_name,_bytes,_format) {
		if(_name == null) _name = "";
		if(_name == "") _name = this.app.make_uniqueid();
		var sound = this.module.create_sound_from_bytes(_name,_bytes,_format);
		if(sound == null) throw new js__$Boot_HaxeError(snow_api_DebugError.null_assertion("sound was null"));
		this.sound_list.set(_name,sound);
		return sound;
	}
	,uncreate: function(_name) {
		var _sound = this.sound_list.get(_name);
		if(_sound == null) haxe_Log.trace("    i / audio / " + ("can't find sound, unable to uncreate, use create first: " + _name),{ fileName : "Audio.hx", lineNumber : 99, className : "snow.system.audio.Audio", methodName : "uncreate"});
		_sound.destroy();
	}
	,add: function(sound) {
		this.sound_list.set(sound.name,sound);
		if(sound.is_stream) this.stream_list.set(sound.name,sound);
	}
	,handlers: null
	,on: function(_name,_event,_handler) {
		if(_event == "load") {
			var sound = this.get(_name);
			if(sound != null) {
				if(sound.get_loaded()) {
					_handler(sound);
					return;
				}
			}
		}
		var _event_id = "" + _event + snow_system_audio_Audio.splitter + _name;
		if(this.handlers == null) this.handlers = new haxe_ds_StringMap();
		if(!this.handlers.exists(_event_id)) this.handlers.set(_event_id,[]);
		var _list = this.handlers.get(_event_id);
		if(HxOverrides.indexOf(_list,_handler,0) != -1) throw new js__$Boot_HaxeError("Audio on event adding the same handler twice");
		_list.push(_handler);
		this.handlers.set(_event_id,_list);
	}
	,off: function(_name,_event,_handler) {
		if(this.handlers == null) return;
		var _event_id = "" + _event + snow_system_audio_Audio.splitter + _name;
		var _list = this.handlers.get(_event_id);
		if(_list != null) {
			HxOverrides.remove(_list,_handler);
			this.handlers.set(_event_id,_list);
		}
	}
	,get: function(_name) {
		var _sound = this.sound_list.get(_name);
		return _sound;
	}
	,volume: function(_name,_volume) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_volume != null) return sound.set_volume(_volume); else return sound.get_volume();
		}
		return 0;
	}
	,pan: function(_name,_pan) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_pan != null) return sound.set_pan(_pan); else return sound.get_pan();
		}
		return 0;
	}
	,pitch: function(_name,_pitch) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_pitch != null) return sound.set_pitch(_pitch); else return sound.get_pitch();
		}
		return 0;
	}
	,position: function(_name,_position) {
		var sound = this.get(_name);
		if(sound != null) {
			if(_position != null) return sound.set_position(_position); else return sound.get_position();
		}
		return 0;
	}
	,duration: function(_name) {
		var sound = this.get(_name);
		if(sound != null) return sound.get_duration();
		return 0;
	}
	,play: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.play();
	}
	,loop: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.loop();
	}
	,pause: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.pause();
	}
	,stop: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.stop();
	}
	,toggle: function(_name) {
		if(!this.active) return;
		var sound = this.get(_name);
		if(sound != null) sound.toggle();
	}
	,kill: function(_sound) {
		if(_sound == null) return;
		this.sound_list.remove(_sound.name);
		this.stream_list.remove(_sound.name);
	}
	,suspend: function() {
		if(!this.active) return;
		haxe_Log.trace("    i / audio / " + "suspending sound context",{ fileName : "Audio.hx", lineNumber : 354, className : "snow.system.audio.Audio", methodName : "suspend"});
		this.active = false;
		var $it0 = this.stream_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.internal_pause();
		}
		this.module.suspend();
	}
	,resume: function() {
		if(this.active) return;
		haxe_Log.trace("    i / audio / " + "resuming sound context",{ fileName : "Audio.hx", lineNumber : 372, className : "snow.system.audio.Audio", methodName : "resume"});
		this.active = true;
		this.module.resume();
		var $it0 = this.stream_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.internal_play();
		}
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
		if(_event.type == 10) this.suspend(); else if(_event.type == 12) this.resume();
	}
	,destroy: function() {
		this.active = false;
		var $it0 = this.sound_list.iterator();
		while( $it0.hasNext() ) {
			var sound = $it0.next();
			sound.destroy();
		}
		this.module.destroy();
	}
	,update: function() {
		if(!this.active) return;
		var $it0 = this.sound_list.iterator();
		while( $it0.hasNext() ) {
			var _sound = $it0.next();
			if(_sound.get_playing()) _sound.internal_update();
		}
		this.module.update();
	}
	,sound_event: function(_sound,_event) {
		var _event_id = "" + _event + snow_system_audio_Audio.splitter + _sound.name;
		if(this.handlers == null) return;
		var _list = this.handlers.get(_event_id);
		if(_list != null) {
			var _g = 0;
			while(_g < _list.length) {
				var fn = _list[_g];
				++_g;
				fn(_sound);
			}
		}
	}
	,__class__: snow_system_audio_Audio
};
var snow_system_input_Input = function(_app) {
	this.touch_count = 0;
	this.app = _app;
	this.module = new snow_core_web_input_Input(this);
	this.module.init();
	this.key_code_pressed = new haxe_ds_IntMap();
	this.key_code_down = new haxe_ds_IntMap();
	this.key_code_released = new haxe_ds_IntMap();
	this.scan_code_pressed = new haxe_ds_IntMap();
	this.scan_code_down = new haxe_ds_IntMap();
	this.scan_code_released = new haxe_ds_IntMap();
	this.mouse_button_pressed = new haxe_ds_IntMap();
	this.mouse_button_down = new haxe_ds_IntMap();
	this.mouse_button_released = new haxe_ds_IntMap();
	this.gamepad_button_pressed = new haxe_ds_IntMap();
	this.gamepad_button_down = new haxe_ds_IntMap();
	this.gamepad_button_released = new haxe_ds_IntMap();
	this.gamepad_axis_values = new haxe_ds_IntMap();
	this.touches_down = new haxe_ds_IntMap();
};
$hxClasses["snow.system.input.Input"] = snow_system_input_Input;
snow_system_input_Input.__name__ = ["snow","system","input","Input"];
snow_system_input_Input.prototype = {
	app: null
	,module: null
	,keypressed: function(_code) {
		return this.key_code_pressed.h.hasOwnProperty(_code);
	}
	,keyreleased: function(_code) {
		return this.key_code_released.h.hasOwnProperty(_code);
	}
	,keydown: function(_code) {
		return this.key_code_down.h.hasOwnProperty(_code);
	}
	,scanpressed: function(_code) {
		return this.scan_code_pressed.h.hasOwnProperty(_code);
	}
	,scanreleased: function(_code) {
		return this.scan_code_released.h.hasOwnProperty(_code);
	}
	,scandown: function(_code) {
		return this.scan_code_down.h.hasOwnProperty(_code);
	}
	,mousepressed: function(_button) {
		return this.mouse_button_pressed.h.hasOwnProperty(_button);
	}
	,mousereleased: function(_button) {
		return this.mouse_button_released.h.hasOwnProperty(_button);
	}
	,mousedown: function(_button) {
		return this.mouse_button_down.h.hasOwnProperty(_button);
	}
	,gamepadpressed: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_pressed.h[_gamepad];
		if(_gamepad_state != null) return _gamepad_state.h.hasOwnProperty(_button); else return false;
	}
	,gamepadreleased: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_released.h[_gamepad];
		if(_gamepad_state != null) return _gamepad_state.h.hasOwnProperty(_button); else return false;
	}
	,gamepaddown: function(_gamepad,_button) {
		var _gamepad_state = this.gamepad_button_down.h[_gamepad];
		if(_gamepad_state != null) return _gamepad_state.h.hasOwnProperty(_button); else return false;
	}
	,gamepadaxis: function(_gamepad,_axis) {
		var _gamepad_state = this.gamepad_axis_values.h[_gamepad];
		if(_gamepad_state != null) {
			if(_gamepad_state.h.hasOwnProperty(_axis)) return _gamepad_state.h[_axis];
		}
		return 0;
	}
	,dispatch_key_down_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		if(!repeat) {
			this.key_code_pressed.h[keycode] = false;
			this.key_code_down.h[keycode] = true;
			this.scan_code_pressed.h[scancode] = false;
			this.scan_code_down.h[scancode] = true;
		}
		this.app.host.onkeydown(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_key_up_event: function(keycode,scancode,repeat,mod,timestamp,window_id) {
		this.key_code_released.h[keycode] = false;
		this.key_code_down.remove(keycode);
		this.scan_code_released.h[scancode] = false;
		this.scan_code_down.remove(scancode);
		this.app.host.onkeyup(keycode,scancode,repeat,mod,timestamp,window_id);
	}
	,dispatch_text_event: function(text,start,length,type,timestamp,window_id) {
		this.app.host.ontextinput(text,start,length,type,timestamp,window_id);
	}
	,dispatch_mouse_move_event: function(x,y,xrel,yrel,timestamp,window_id) {
		this.app.host.onmousemove(x,y,xrel,yrel,timestamp,window_id);
	}
	,dispatch_mouse_down_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_pressed.h[button] = false;
		this.mouse_button_down.h[button] = true;
		this.app.host.onmousedown(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_up_event: function(x,y,button,timestamp,window_id) {
		this.mouse_button_released.h[button] = false;
		this.mouse_button_down.remove(button);
		this.app.host.onmouseup(x,y,button,timestamp,window_id);
	}
	,dispatch_mouse_wheel_event: function(x,y,timestamp,window_id) {
		this.app.host.onmousewheel(x,y,timestamp,window_id);
	}
	,dispatch_touch_down_event: function(x,y,touch_id,timestamp) {
		if(!this.touches_down.h.hasOwnProperty(touch_id)) {
			this.touch_count++;
			this.touches_down.h[touch_id] = true;
		}
		this.app.host.ontouchdown(x,y,touch_id,timestamp);
	}
	,dispatch_touch_up_event: function(x,y,touch_id,timestamp) {
		this.app.host.ontouchup(x,y,touch_id,timestamp);
		if(this.touches_down.remove(touch_id)) this.touch_count--;
	}
	,dispatch_touch_move_event: function(x,y,dx,dy,touch_id,timestamp) {
		this.app.host.ontouchmove(x,y,dx,dy,touch_id,timestamp);
	}
	,dispatch_gamepad_axis_event: function(gamepad,axis,value,timestamp) {
		if(!this.gamepad_axis_values.h.hasOwnProperty(gamepad)) {
			var value1 = new haxe_ds_IntMap();
			this.gamepad_axis_values.h[gamepad] = value1;
		}
		var this1 = this.gamepad_axis_values.h[gamepad];
		this1.set(axis,value);
		this.app.host.ongamepadaxis(gamepad,axis,value,timestamp);
	}
	,dispatch_gamepad_button_down_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_pressed.h.hasOwnProperty(gamepad)) {
			var value1 = new haxe_ds_IntMap();
			this.gamepad_button_pressed.h[gamepad] = value1;
		}
		if(!this.gamepad_button_down.h.hasOwnProperty(gamepad)) {
			var value2 = new haxe_ds_IntMap();
			this.gamepad_button_down.h[gamepad] = value2;
		}
		var this1 = this.gamepad_button_pressed.h[gamepad];
		this1.set(button,false);
		var this2 = this.gamepad_button_down.h[gamepad];
		this2.set(button,true);
		this.app.host.ongamepaddown(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_button_up_event: function(gamepad,button,value,timestamp) {
		if(!this.gamepad_button_released.h.hasOwnProperty(gamepad)) {
			var value1 = new haxe_ds_IntMap();
			this.gamepad_button_released.h[gamepad] = value1;
		}
		if(!this.gamepad_button_down.h.hasOwnProperty(gamepad)) {
			var value2 = new haxe_ds_IntMap();
			this.gamepad_button_down.h[gamepad] = value2;
		}
		var this1 = this.gamepad_button_released.h[gamepad];
		this1.set(button,false);
		var this2 = this.gamepad_button_down.h[gamepad];
		this2.remove(button);
		this.app.host.ongamepadup(gamepad,button,value,timestamp);
	}
	,dispatch_gamepad_device_event: function(gamepad,type,timestamp) {
		this.app.host.ongamepaddevice(gamepad,type,timestamp);
	}
	,listen: function(_window) {
		this.module.listen(_window);
	}
	,unlisten: function(_window) {
		this.module.unlisten(_window);
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
	}
	,on_gamepad_added: function(_event) {
		this.module.gamepad_add(_event.which);
	}
	,on_gamepad_removed: function(_event) {
		this.module.gamepad_remove(_event.which);
	}
	,update: function() {
		this.module.update();
		this._update_keystate();
		this._update_gamepadstate();
		this._update_mousestate();
	}
	,destroy: function() {
		this.module.destroy();
	}
	,_update_mousestate: function() {
		var $it0 = this.mouse_button_pressed.keys();
		while( $it0.hasNext() ) {
			var _code = $it0.next();
			if(this.mouse_button_pressed.h[_code]) this.mouse_button_pressed.remove(_code); else this.mouse_button_pressed.h[_code] = true;
		}
		var $it1 = this.mouse_button_released.keys();
		while( $it1.hasNext() ) {
			var _code1 = $it1.next();
			if(this.mouse_button_released.h[_code1]) this.mouse_button_released.remove(_code1); else this.mouse_button_released.h[_code1] = true;
		}
	}
	,_update_gamepadstate: function() {
		var $it0 = this.gamepad_button_pressed.iterator();
		while( $it0.hasNext() ) {
			var _gamepad_pressed = $it0.next();
			var $it1 = _gamepad_pressed.keys();
			while( $it1.hasNext() ) {
				var _button = $it1.next();
				if(_gamepad_pressed.h[_button]) _gamepad_pressed.remove(_button); else _gamepad_pressed.h[_button] = true;
			}
		}
		var $it2 = this.gamepad_button_released.iterator();
		while( $it2.hasNext() ) {
			var _gamepad_released = $it2.next();
			var $it3 = _gamepad_released.keys();
			while( $it3.hasNext() ) {
				var _button1 = $it3.next();
				if(_gamepad_released.h[_button1]) _gamepad_released.remove(_button1); else _gamepad_released.h[_button1] = true;
			}
		}
	}
	,_update_keystate: function() {
		var $it0 = this.key_code_pressed.keys();
		while( $it0.hasNext() ) {
			var _code = $it0.next();
			if(this.key_code_pressed.h[_code]) this.key_code_pressed.remove(_code); else this.key_code_pressed.h[_code] = true;
		}
		var $it1 = this.key_code_released.keys();
		while( $it1.hasNext() ) {
			var _code1 = $it1.next();
			if(this.key_code_released.h[_code1]) this.key_code_released.remove(_code1); else this.key_code_released.h[_code1] = true;
		}
		var $it2 = this.scan_code_pressed.keys();
		while( $it2.hasNext() ) {
			var _code2 = $it2.next();
			if(this.scan_code_pressed.h[_code2]) this.scan_code_pressed.remove(_code2); else this.scan_code_pressed.h[_code2] = true;
		}
		var $it3 = this.scan_code_released.keys();
		while( $it3.hasNext() ) {
			var _code3 = $it3.next();
			if(this.scan_code_released.h[_code3]) this.scan_code_released.remove(_code3); else this.scan_code_released.h[_code3] = true;
		}
	}
	,key_code_down: null
	,key_code_pressed: null
	,key_code_released: null
	,scan_code_down: null
	,scan_code_pressed: null
	,scan_code_released: null
	,mouse_button_down: null
	,mouse_button_pressed: null
	,mouse_button_released: null
	,gamepad_button_down: null
	,gamepad_button_pressed: null
	,gamepad_button_released: null
	,gamepad_axis_values: null
	,touch_count: null
	,touches_down: null
	,__class__: snow_system_input_Input
};
var snow_system_io_IO = function(_app) {
	this.string_save_prefix = "slot";
	this.app = _app;
	this.module = new snow_core_web_io_IO(this);
	this.module.init();
};
$hxClasses["snow.system.io.IO"] = snow_system_io_IO;
snow_system_io_IO.__name__ = ["snow","system","io","IO"];
snow_system_io_IO.prototype = {
	app: null
	,module: null
	,string_save_prefix: null
	,url_open: function(_url) {
		this.module.url_open(_url);
	}
	,data_load: function(_path,_options) {
		return this.module.data_load(_path,_options);
	}
	,data_save: function(_path,_data,_options) {
		return this.module.data_save(_path,_data,_options);
	}
	,data_flow: function(_id,_processor,_provider) {
		var _g = this;
		if(_provider == null) _provider = $bind(this,this.default_provider);
		return new snow_api_Promise(function(resolve,reject) {
			_provider(_g.app,_id).then(function(data) {
				if(_processor != null) _processor(_g.app,_id,data).then(resolve,reject); else resolve(data);
			}).error(reject);
		});
	}
	,string_slots: null
	,string_save_path: function(_slot) {
		if(_slot == null) _slot = 0;
		return this.module.string_save_path(_slot);
	}
	,string_save: function(_key,_value,_slot) {
		if(_slot == null) _slot = 0;
		var _string_map = this.string_slots_sync(_slot);
		var _encoded_key = window.btoa(_key);
		var _encoded_value = window.btoa(_value);
		if(__map_reserved[_encoded_key] != null) _string_map.setReserved(_encoded_key,_encoded_value); else _string_map.h[_encoded_key] = _encoded_value;
		var _contents = haxe_Serializer.run(_string_map);
		_contents = window.btoa(_contents);
		return this.module.string_slot_save(_slot,_contents);
	}
	,string_load: function(_key,_slot) {
		if(_slot == null) _slot = 0;
		var _string_map = this.string_slots_sync(_slot);
		var _encoded_key = window.btoa(_key);
		var _encoded_value;
		_encoded_value = __map_reserved[_encoded_key] != null?_string_map.getReserved(_encoded_key):_string_map.h[_encoded_key];
		if(_encoded_value == null) return null;
		return window.atob(_encoded_value);
	}
	,string_slots_sync: function(_slot) {
		if(_slot == null) _slot = 0;
		if(this.string_slots == null) this.string_slots = new haxe_ds_IntMap();
		var _string_map = this.string_slots.h[_slot];
		if(_string_map == null) {
			var _string = this.module.string_slot_load(_slot);
			if(_string == null) _string_map = new haxe_ds_StringMap(); else {
				_string = window.atob(_string);
				_string_map = haxe_Unserializer.run(_string);
			}
			this.string_slots.h[_slot] = _string_map;
		}
		return _string_map;
	}
	,default_provider: function(_app,_id) {
		return this.module.data_load(_id,null);
	}
	,on_event: function(_event) {
		this.module.on_event(_event);
	}
	,update: function() {
		this.module.update();
	}
	,destroy: function() {
		this.module.destroy();
	}
	,__class__: snow_system_io_IO
};
var snow_system_window_Window = function(_system,_config) {
	this.internal_resize = false;
	this.internal_position = false;
	this.minimized = false;
	this.closed = true;
	this.auto_render = true;
	this.auto_swap = true;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.fullscreen = false;
	this.grab = false;
	this.bordered = true;
	this.title = "snow window";
	this.set_max_size({ x : 0, y : 0});
	this.set_min_size({ x : 0, y : 0});
	this.system = _system;
	this.asked_config = _config;
	this.config = _config;
	if(this.config.x == null) this.config.x = 536805376;
	if(this.config.y == null) this.config.y = 536805376;
	this.system.module.create(this.system.app.config.render,_config,$bind(this,this.on_window_created));
};
$hxClasses["snow.system.window.Window"] = snow_system_window_Window;
snow_system_window_Window.__name__ = ["snow","system","window","Window"];
snow_system_window_Window.prototype = {
	id: null
	,system: null
	,asked_config: null
	,config: null
	,handle: null
	,onevent: null
	,onrender: null
	,title: null
	,bordered: null
	,grab: null
	,fullscreen: null
	,x: null
	,y: null
	,width: null
	,height: null
	,max_size: null
	,min_size: null
	,auto_swap: null
	,auto_render: null
	,closed: null
	,minimized: null
	,internal_position: null
	,internal_resize: null
	,on_window_created: function(_handle,_id,_configs) {
		this.id = _id;
		this.handle = _handle;
		if(this.handle == null) {
			haxe_Log.trace("   i / window / " + "failed to create window",{ fileName : "Window.hx", lineNumber : 92, className : "snow.system.window.Window", methodName : "on_window_created"});
			return;
		}
		this.closed = false;
		this.config = _configs.config;
		this.system.app.config.render = _configs.render_config;
		this.internal_position = true;
		this.set_x(this.config.x);
		this.set_y(this.config.y);
		this.internal_position = false;
		this.internal_resize = true;
		this.set_width(this.config.width);
		this.set_height(this.config.height);
		this.internal_resize = false;
		this.on_event({ type : 1, window_id : _id, timestamp : snow_Snow.core.timestamp(), event : { }});
		null;
	}
	,on_event: function(_event) {
		var _g = _event.type;
		if(_g != null) switch(_g) {
		case 5:
			this.internal_position = true;
			this.set_position(_event.event.x,_event.event.y);
			this.internal_position = false;
			break;
		case 6:
			this.internal_resize = true;
			this.set_size(_event.event.x,_event.event.y);
			this.internal_resize = false;
			break;
		case 7:
			this.internal_resize = true;
			this.set_size(_event.event.x,_event.event.y);
			this.internal_resize = false;
			break;
		case 8:
			this.minimized = true;
			break;
		case 10:
			this.minimized = false;
			break;
		default:
		} else {
		}
		if(this.onevent != null) this.onevent(_event);
	}
	,update: function() {
		if(this.handle != null && !this.closed) this.system.module.update_window(this);
	}
	,render: function() {
		if(this.minimized || this.closed) return;
		if(this.handle == null) return;
		this.system.module.render(this);
		if(this.onrender != null) {
			this.onrender(this);
			if(this.auto_swap) this.swap();
			return;
		}
		snow_modules_opengl_web_GL.clearColor(0,0,0,1.0);
		snow_modules_opengl_web_GL.clear(16384);
		if(this.auto_swap) this.swap();
	}
	,swap: function() {
		if(this.handle == null || this.closed || this.minimized) return;
		this.system.module.swap(this);
	}
	,destroy: function() {
		this.closed = true;
		if(this.handle == null) return;
		this.system.remove(this);
		this.system.module.destroy_window(this);
		this.handle = null;
	}
	,close: function() {
		this.closed = true;
		if(this.handle == null) return;
		this.system.module.close(this);
	}
	,show: function() {
		if(this.handle == null) return;
		this.closed = false;
		this.system.module.show(this);
	}
	,simple_message: function(message,title) {
		if(title == null) title = "";
		if(this.handle == null) return;
		this.system.module.simple_message(this,message,title);
	}
	,get_fullscreen: function() {
		return this.fullscreen;
	}
	,set_fullscreen: function(_enable) {
		if(this.handle != null) this.system.module.fullscreen(this,_enable);
		return this.fullscreen = _enable;
	}
	,get_bordered: function() {
		return this.bordered;
	}
	,get_grab: function() {
		return this.grab;
	}
	,get_max_size: function() {
		return this.max_size;
	}
	,get_min_size: function() {
		return this.min_size;
	}
	,get_title: function() {
		return this.title;
	}
	,set_title: function(_title) {
		if(this.handle != null) this.system.module.set_title(this,_title);
		return this.title = _title;
	}
	,set_x: function(_x) {
		this.x = _x;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
		return this.x;
	}
	,set_y: function(_y) {
		this.y = _y;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
		return this.y;
	}
	,set_width: function(_width) {
		this.width = _width;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,this.width,this.height);
		return this.width;
	}
	,set_height: function(_height) {
		this.height = _height;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,this.width,this.height);
		return this.height;
	}
	,set_cursor_position: function(_x,_y) {
		if(this.handle != null && !this.closed) this.system.module.set_cursor_position(this,_x,_y);
	}
	,set_position: function(_x,_y) {
		var last_internal_position_flag = this.internal_position;
		this.internal_position = true;
		this.set_x(_x);
		this.set_y(_y);
		this.internal_position = last_internal_position_flag;
		if(this.handle != null && !this.internal_position) this.system.module.set_position(this,this.x,this.y);
	}
	,set_size: function(_width,_height) {
		var last_internal_resize_flag = this.internal_resize;
		this.internal_resize = true;
		this.set_width(_width);
		this.set_height(_height);
		this.internal_resize = last_internal_resize_flag;
		if(this.handle != null && !this.internal_resize) this.system.module.set_size(this,_width,_height);
	}
	,set_max_size: function(_size) {
		if(this.get_max_size() != null && this.handle != null) this.system.module.set_max_size(this,_size.x,_size.y);
		return this.max_size = _size;
	}
	,set_min_size: function(_size) {
		if(this.get_min_size() != null && this.handle != null) this.system.module.set_min_size(this,_size.x,_size.y);
		return this.min_size = _size;
	}
	,set_bordered: function(_bordered) {
		if(this.handle != null) this.system.module.bordered(this,_bordered);
		return this.bordered = _bordered;
	}
	,set_grab: function(_grab) {
		if(this.handle != null) this.system.module.grab(this,_grab);
		return this.grab = _grab;
	}
	,__class__: snow_system_window_Window
	,__properties__: {set_min_size:"set_min_size",get_min_size:"get_min_size",set_max_size:"set_max_size",get_max_size:"get_max_size",set_height:"set_height",set_width:"set_width",set_y:"set_y",set_x:"set_x",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_grab:"set_grab",get_grab:"get_grab",set_bordered:"set_bordered",get_bordered:"get_bordered",set_title:"set_title",get_title:"get_title"}
};
var snow_system_window_Windowing = function(_app) {
	this.window_count = 0;
	this.app = _app;
	this.window_list = new haxe_ds_IntMap();
	this.window_handles = new haxe_ds_ObjectMap();
	this.module = new snow_core_web_window_Windowing(this);
	this.module.init();
};
$hxClasses["snow.system.window.Windowing"] = snow_system_window_Windowing;
snow_system_window_Windowing.__name__ = ["snow","system","window","Windowing"];
snow_system_window_Windowing.prototype = {
	window_list: null
	,window_handles: null
	,window_count: null
	,app: null
	,module: null
	,create: function(_config) {
		var _window = new snow_system_window_Window(this,_config);
		this.window_list.h[_window.id] = _window;
		this.window_handles.set(_window.handle,_window.id);
		this.window_count++;
		this.module.listen(_window);
		if(_config.no_input == null || _config.no_input == false) this.app.input.listen(_window);
		return _window;
	}
	,remove: function(_window) {
		this.window_list.remove(_window.id);
		this.window_handles.remove(_window.handle);
		this.window_count--;
		this.module.unlisten(_window);
		if(_window.config.no_input == null || _window.config.no_input == false) this.app.input.unlisten(_window);
	}
	,window_from_handle: function(_handle) {
		if(this.window_handles.h.__keys__[_handle.__id__] != null) {
			var _id = this.window_handles.h[_handle.__id__];
			return this.window_list.h[_id];
		}
		return null;
	}
	,window_from_id: function(_id) {
		return this.window_list.h[_id];
	}
	,enable_vsync: function(_enable) {
		return this.module.system_enable_vsync(_enable);
	}
	,enable_cursor: function(_enable) {
		this.module.system_enable_cursor(_enable);
	}
	,enable_cursor_lock: function(_enable) {
		this.module.system_lock_cursor(_enable);
	}
	,display_count: function() {
		return this.module.display_count();
	}
	,display_mode_count: function(display) {
		return this.module.display_mode_count(display);
	}
	,display_native_mode: function(display) {
		return this.module.display_native_mode(display);
	}
	,display_current_mode: function(display) {
		return this.module.display_current_mode(display);
	}
	,display_mode: function(display,mode_index) {
		return this.module.display_mode(display,mode_index);
	}
	,display_bounds: function(display) {
		return this.module.display_bounds(display);
	}
	,display_name: function(display) {
		return this.module.display_name(display);
	}
	,on_event: function(_event) {
		if(_event.type == 5) {
			var _window_event = _event.window;
			var _window = this.window_list.h[_window_event.window_id];
			if(_window != null) _window.on_event(_window_event);
		}
	}
	,update: function() {
		this.module.update();
		var $it0 = this.window_list.iterator();
		while( $it0.hasNext() ) {
			var $window = $it0.next();
			$window.update();
		}
		var $it1 = this.window_list.iterator();
		while( $it1.hasNext() ) {
			var window1 = $it1.next();
			if(window1.auto_render) window1.render();
		}
	}
	,destroy: function() {
		this.module.destroy();
	}
	,__class__: snow_system_window_Windowing
};
var snow_types_Error = $hxClasses["snow.types.Error"] = { __ename__ : ["snow","types","Error"], __constructs__ : ["error","init","windowing","parse"] };
snow_types_Error.error = function(value) { var $x = ["error",0,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
snow_types_Error.init = function(value) { var $x = ["init",1,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
snow_types_Error.windowing = function(value) { var $x = ["windowing",2,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
snow_types_Error.parse = function(value) { var $x = ["parse",3,value]; $x.__enum__ = snow_types_Error; $x.toString = $estr; return $x; };
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
com_babylonhx_Engine.ALPHA_DISABLE = 0;
com_babylonhx_Engine.ALPHA_ADD = 1;
com_babylonhx_Engine.ALPHA_COMBINE = 2;
com_babylonhx_Engine.DELAYLOADSTATE_NONE = 0;
com_babylonhx_Engine.DELAYLOADSTATE_LOADED = 1;
com_babylonhx_Engine.DELAYLOADSTATE_LOADING = 2;
com_babylonhx_Engine.DELAYLOADSTATE_NOTLOADED = 4;
com_babylonhx_Engine.TEXTUREFORMAT_ALPHA = 0;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE = 1;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;
com_babylonhx_Engine.TEXTUREFORMAT_RGB = 3;
com_babylonhx_Engine.TEXTUREFORMAT_RGBA = 4;
com_babylonhx_Engine.TEXTURETYPE_UNSIGNED_INT = 0;
com_babylonhx_Engine.TEXTURETYPE_FLOAT = 1;
com_babylonhx_Engine.Version = "2.0.0";
com_babylonhx_Engine.Epsilon = 0.001;
com_babylonhx_Engine.CollisionsEpsilon = 0.001;
com_babylonhx_Engine.ShadersRepository = "assets/shaders/";
com_babylonhx_Engine.mouseDown = [];
com_babylonhx_Engine.mouseUp = [];
com_babylonhx_Engine.mouseMove = [];
com_babylonhx_Engine.mouseWheel = [];
com_babylonhx_Engine.touchDown = [];
com_babylonhx_Engine.touchUp = [];
com_babylonhx_Engine.touchMove = [];
com_babylonhx_Engine.keyUp = [];
com_babylonhx_Engine.keyDown = [];
com_babylonhx_Scene.FOGMODE_NONE = 0;
com_babylonhx_Scene.FOGMODE_EXP = 1;
com_babylonhx_Scene.FOGMODE_EXP2 = 2;
com_babylonhx_Scene.FOGMODE_LINEAR = 3;
com_babylonhx_Scene.MinDeltaTime = 1.0;
com_babylonhx_Scene.MaxDeltaTime = 1000.0;
com_babylonhx_actions_ActionManager.NothingTrigger = 0;
com_babylonhx_actions_ActionManager.OnPickTrigger = 1;
com_babylonhx_actions_ActionManager.OnLeftPickTrigger = 2;
com_babylonhx_actions_ActionManager.OnRightPickTrigger = 3;
com_babylonhx_actions_ActionManager.OnCenterPickTrigger = 4;
com_babylonhx_actions_ActionManager.OnPointerOverTrigger = 5;
com_babylonhx_actions_ActionManager.OnPointerOutTrigger = 6;
com_babylonhx_actions_ActionManager.OnEveryFrameTrigger = 7;
com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger = 8;
com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger = 9;
com_babylonhx_actions_ActionManager.OnKeyDownTrigger = 10;
com_babylonhx_actions_ActionManager.OnKeyUpTrigger = 11;
com_babylonhx_actions_ActionManager.OnPickUpTrigger = 12;
com_babylonhx_actions_ValueCondition.IsEqual = 0;
com_babylonhx_actions_ValueCondition.IsDifferent = 1;
com_babylonhx_actions_ValueCondition.IsGreater = 2;
com_babylonhx_actions_ValueCondition.IsLesser = 3;
com_babylonhx_animations_Animation.ANIMATIONTYPE_FLOAT = 0;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR3 = 1;
com_babylonhx_animations_Animation.ANIMATIONTYPE_QUATERNION = 2;
com_babylonhx_animations_Animation.ANIMATIONTYPE_MATRIX = 3;
com_babylonhx_animations_Animation.ANIMATIONTYPE_COLOR3 = 4;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR2 = 5;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_RELATIVE = 0;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE = 1;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CONSTANT = 2;
com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN = 0;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEOUT = 1;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEINOUT = 2;
com_babylonhx_cameras_Camera.PERSPECTIVE_CAMERA = 0;
com_babylonhx_cameras_Camera.ORTHOGRAPHIC_CAMERA = 1;
com_babylonhx_cameras_Camera.FOVMODE_VERTICAL_FIXED = 0;
com_babylonhx_cameras_Camera.FOVMODE_HORIZONTAL_FIXED = 1;
com_babylonhx_cameras_Camera.RIG_MODE_NONE = 0;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;
com_babylonhx_cameras_Camera.RIG_MODE_VR = 20;
com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = new com_babylonhx_math_Vector3();
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE = 0;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP = 1;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING = 2;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP = 3;
js_Boot.__toStr = {}.toString;
com_babylonhx_materials_Material.TriangleFillMode = 0;
com_babylonhx_materials_Material.WireFrameFillMode = 1;
com_babylonhx_materials_Material.PointFillMode = 2;
com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.BumpTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.FresnelEnabled = true;
com_babylonhx_tools_Tools.BaseUrl = "";
com_babylonhx_tools_Tools.__startTime = haxe_Timer.stamp();
com_babylonhx_materials_textures_Texture.NEAREST_SAMPLINGMODE = 1;
com_babylonhx_materials_textures_Texture.BILINEAR_SAMPLINGMODE = 2;
com_babylonhx_materials_textures_Texture.TRILINEAR_SAMPLINGMODE = 3;
com_babylonhx_materials_textures_Texture.EXPLICIT_MODE = 0;
com_babylonhx_materials_textures_Texture.SPHERICAL_MODE = 1;
com_babylonhx_materials_textures_Texture.PLANAR_MODE = 2;
com_babylonhx_materials_textures_Texture.CUBIC_MODE = 3;
com_babylonhx_materials_textures_Texture.PROJECTION_MODE = 4;
com_babylonhx_materials_textures_Texture.SKYBOX_MODE = 5;
com_babylonhx_materials_textures_Texture.CLAMP_ADDRESSMODE = 0;
com_babylonhx_materials_textures_Texture.WRAP_ADDRESSMODE = 1;
com_babylonhx_materials_textures_Texture.MIRROR_ADDRESSMODE = 2;
com_babylonhx_math_Matrix._tempQuaternion = new com_babylonhx_math_Quaternion();
com_babylonhx_math_Matrix._xAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._yAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._zAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS = 4;
com_babylonhx_math_Plane.transposedMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE = 0;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X = 1;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y = 2;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z = 4;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL = 7;
com_babylonhx_mesh_VertexData.transformed = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_Mesh.FRONTSIDE = 0;
com_babylonhx_mesh_Mesh.BACKSIDE = 1;
com_babylonhx_mesh_Mesh.DOUBLESIDE = 2;
com_babylonhx_mesh_Mesh.DEFAULTSIDE = 0;
com_babylonhx_mesh_Mesh.NO_CAP = 0;
com_babylonhx_mesh_Mesh.CAP_START = 1;
com_babylonhx_mesh_Mesh.CAP_END = 2;
com_babylonhx_mesh_Mesh.CAP_ALL = 3;
com_babylonhx_mesh_Mesh.CreateDecal_target = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_mesh_Mesh.CreateDecal_cameraWorldTarget = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_Mesh.decalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_Mesh.inverseDecalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_Mesh.CreateDecal_indices = [];
com_babylonhx_mesh_Mesh.CreateDecal_positions = [];
com_babylonhx_mesh_Mesh.CreateDecal_normals = [];
com_babylonhx_mesh_Mesh.CreateDecal_meshWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_Mesh.CreateDecal_transformMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_Mesh.CreateDecal_vertexData = new com_babylonhx_mesh_VertexData();
com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE = 0;
com_babylonhx_particles_ParticleSystem.BLENDMODE_STANDARD = 1;
com_babylonhx_mesh_Geometry.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
com_babylonhx_loading_plugins_BabylonFileLoader._plugin = { extensions : ".babylon", importMesh : function(meshesNames,scene,data,rootUrl,meshes,particleSystems,skeletons) {
	var parsedData = null;
	if(typeof(data) == "string") parsedData = JSON.parse(data); else if(js_Boot.__instanceof(data,haxe_io_Bytes)) {
	} else {
		haxe_Log.trace("Unknown data type!",{ fileName : "BabylonFileLoader.hx", lineNumber : 94, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "_plugin"});
		return false;
	}
	var loadedSkeletonsIds = [];
	var loadedMaterialsIds = [];
	var hierarchyIds = [];
	var pdm = parsedData.meshes;
	var _g1 = 0;
	var _g = pdm.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedMesh = pdm[index];
		if(meshesNames == null || meshesNames == "" || com_babylonhx_loading_plugins_BabylonFileLoader.isDescendantOf(parsedMesh,meshesNames,hierarchyIds)) {
			if((meshesNames instanceof Array) && meshesNames.__enum__ == null) meshesNames.splice(meshesNames.indexOf(parsedMesh.name),1);
			if(Object.prototype.hasOwnProperty.call(parsedMesh,"materialId")) {
				var materialFound = HxOverrides.indexOf(loadedMaterialsIds,parsedMesh.materialId,0) != -1;
				if(!materialFound) {
					var pdmm = parsedData.multiMaterials;
					var _g3 = 0;
					var _g2 = pdmm.length;
					while(_g3 < _g2) {
						var multimatIndex = _g3++;
						var parsedMultiMaterial = pdmm[multimatIndex];
						if(parsedMultiMaterial.id == parsedMesh.materialId) {
							var pdmmm = parsedMultiMaterial.materials;
							var _g5 = 0;
							var _g4 = pdmmm.length;
							while(_g5 < _g4) {
								var matIndex = _g5++;
								var subMatId = pdmmm[matIndex];
								loadedMaterialsIds.push(subMatId);
								com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById(subMatId == null?"null":"" + subMatId,parsedData,scene,rootUrl);
							}
							loadedMaterialsIds.push(parsedMultiMaterial.id);
							com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial(parsedMultiMaterial,scene);
							materialFound = true;
							break;
						}
					}
				}
				if(!materialFound) {
					loadedMaterialsIds.push(parsedMesh.materialId);
					com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById(parsedMesh.materialId,parsedData,scene,rootUrl);
				}
			}
			if(parsedMesh.skeletonId > -1 && scene.skeletons != null) {
				var skeletonAlreadyLoaded = HxOverrides.indexOf(loadedSkeletonsIds,parsedMesh.skeletonId,0) > -1;
				if(!skeletonAlreadyLoaded) {
					var pds = parsedData.skeletons;
					var _g31 = 0;
					var _g21 = pds.length;
					while(_g31 < _g21) {
						var skeletonIndex = _g31++;
						var parsedSkeleton = pds[skeletonIndex];
						if(parsedSkeleton.id == parsedMesh.skeletonId) {
							skeletons.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton(parsedSkeleton,scene));
							loadedSkeletonsIds.push(parsedSkeleton.id);
						}
					}
				}
			}
			var mesh = com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh(parsedMesh,scene,rootUrl);
			meshes.push(mesh);
		}
	}
	var _g11 = 0;
	var _g6 = scene.meshes.length;
	while(_g11 < _g6) {
		var index1 = _g11++;
		var currentMesh = scene.meshes[index1];
		if(currentMesh._waitingParentId != null) {
			currentMesh.parent = scene.getLastEntryByID(currentMesh._waitingParentId);
			currentMesh._waitingParentId = null;
		}
	}
	if(parsedData.particleSystems != null) {
		var pdp = parsedData.particleSystems;
		var _g12 = 0;
		var _g7 = pdp.length;
		while(_g12 < _g7) {
			var index2 = _g12++;
			var parsedParticleSystem = pdp[index2];
			if(HxOverrides.indexOf(hierarchyIds,parsedParticleSystem.emitterId,0) != -1) particleSystems.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem(parsedParticleSystem,scene,rootUrl));
		}
	}
	return true;
}, load : function(scene1,data1,rootUrl1) {
	var parsedData1 = null;
	if(typeof(data1) == "string") parsedData1 = JSON.parse(data1); else if(js_Boot.__instanceof(data1,haxe_io_Bytes)) {
	} else {
		haxe_Log.trace("Unknown data type!",{ fileName : "BabylonFileLoader.hx", lineNumber : 193, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "_plugin"});
		return false;
	}
	data1 = null;
	scene1.useDelayedTextureLoading = parsedData1.useDelayedTextureLoading && !com_babylonhx_loading_SceneLoader.get_ForceFullSceneLoadingForIncremental();
	scene1.autoClear = parsedData1.autoClear;
	scene1.clearColor = com_babylonhx_math_Color3.FromArray(parsedData1.clearColor,null);
	scene1.ambientColor = com_babylonhx_math_Color3.FromArray(parsedData1.ambientColor,null);
	scene1.gravity = com_babylonhx_math_Vector3.FromArray(parsedData1.gravity,null);
	if(parsedData1.fogMode != null && parsedData1.fogMode != 0) {
		scene1.fogMode = parsedData1.fogMode;
		scene1.fogColor = com_babylonhx_math_Color3.FromArray(parsedData1.fogColor,null);
		scene1.fogStart = parsedData1.fogStart;
		scene1.fogEnd = parsedData1.fogEnd;
		scene1.fogDensity = parsedData1.fogDensity;
	}
	var _g13 = 0;
	var _g8 = parsedData1.lights.length;
	while(_g13 < _g8) {
		var index3 = _g13++;
		var parsedLight = parsedData1.lights[index3];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseLight(parsedLight,scene1);
	}
	if(parsedData1.materials != null) {
		var _g14 = 0;
		var _g9 = parsedData1.materials.length;
		while(_g14 < _g9) {
			var index4 = _g14++;
			var parsedMaterial = parsedData1.materials[index4];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial(parsedMaterial,scene1,rootUrl1);
		}
	}
	if(parsedData1.multiMaterials != null) {
		var _g15 = 0;
		var _g10 = parsedData1.multiMaterials.length;
		while(_g15 < _g10) {
			var index5 = _g15++;
			var parsedMultiMaterial1 = parsedData1.multiMaterials[index5];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial(parsedMultiMaterial1,scene1);
		}
	}
	if(parsedData1.skeletons != null) {
		var _g16 = 0;
		var _g17 = parsedData1.skeletons.length;
		while(_g16 < _g17) {
			var index6 = _g16++;
			var parsedSkeleton1 = parsedData1.skeletons[index6];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton(parsedSkeleton1,scene1);
		}
	}
	var geometries = parsedData1.geometries;
	if(geometries != null) {
		var boxes = geometries.boxes;
		if(boxes != null) {
			var _g18 = 0;
			var _g19 = boxes.length;
			while(_g18 < _g19) {
				var index7 = _g18++;
				var parsedBox = boxes[index7];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseBox(parsedBox,scene1);
			}
		}
		var spheres = geometries.spheres;
		if(spheres != null) {
			var _g110 = 0;
			var _g20 = spheres.length;
			while(_g110 < _g20) {
				var index8 = _g110++;
				var parsedSphere = spheres[index8];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseSphere(parsedSphere,scene1);
			}
		}
		var cylinders = geometries.cylinders;
		if(cylinders != null) {
			var _g111 = 0;
			var _g22 = cylinders.length;
			while(_g111 < _g22) {
				var index9 = _g111++;
				var parsedCylinder = cylinders[index9];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseCylinder(parsedCylinder,scene1);
			}
		}
		var toruses = geometries.toruses;
		if(toruses != null) {
			var _g112 = 0;
			var _g23 = toruses.length;
			while(_g112 < _g23) {
				var index10 = _g112++;
				var parsedTorus = toruses[index10];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseTorus(parsedTorus,scene1);
			}
		}
		var grounds = geometries.grounds;
		if(grounds != null) {
			var _g113 = 0;
			var _g24 = grounds.length;
			while(_g113 < _g24) {
				var index11 = _g113++;
				var parsedGround = grounds[index11];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseGround(parsedGround,scene1);
			}
		}
		var planes = geometries.planes;
		if(planes != null) {
			var _g114 = 0;
			var _g25 = planes.length;
			while(_g114 < _g25) {
				var index12 = _g114++;
				var parsedPlane = planes[index12];
				com_babylonhx_loading_plugins_BabylonFileLoader.parsePlane(parsedPlane,scene1);
			}
		}
		var torusKnots = geometries.torusKnots;
		if(torusKnots != null) {
			var _g115 = 0;
			var _g26 = torusKnots.length;
			while(_g115 < _g26) {
				var index13 = _g115++;
				var parsedTorusKnot = torusKnots[index13];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseTorusKnot(parsedTorusKnot,scene1);
			}
		}
		var vertexData = geometries.vertexData;
		if(vertexData != null) {
			var _g116 = 0;
			var _g27 = vertexData.length;
			while(_g116 < _g27) {
				var index14 = _g116++;
				var parsedVertexData = vertexData[index14];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseVertexData(parsedVertexData,scene1,rootUrl1);
			}
		}
	}
	var pdm1 = parsedData1.meshes;
	var _g117 = 0;
	var _g28 = pdm1.length;
	while(_g117 < _g28) {
		var index15 = _g117++;
		var parsedMesh1 = pdm1[index15];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh(parsedMesh1,scene1,rootUrl1);
	}
	var pdc = parsedData1.cameras;
	var _g118 = 0;
	var _g29 = parsedData1.cameras.length;
	while(_g118 < _g29) {
		var index16 = _g118++;
		var parsedCamera = parsedData1.cameras[index16];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseCamera(parsedCamera,scene1);
	}
	if(parsedData1.activeCameraID != null) scene1.setActiveCameraByID(parsedData1.activeCameraID);
	var _g119 = 0;
	var _g30 = scene1.cameras.length;
	while(_g119 < _g30) {
		var index17 = _g119++;
		var camera = scene1.cameras[index17];
		if(camera._waitingParentId != null) {
			camera.parent = scene1.getLastEntryByID(camera._waitingParentId);
			camera._waitingParentId = null;
		}
	}
	var _g120 = 0;
	var _g32 = scene1.lights.length;
	while(_g120 < _g32) {
		var index18 = _g120++;
		var light = scene1.lights[index18];
		if(light._waitingParentId != null) {
			light.parent = scene1.getLastEntryByID(light._waitingParentId);
			light._waitingParentId = null;
		}
	}
	var _g121 = 0;
	var _g33 = scene1.meshes.length;
	while(_g121 < _g33) {
		var index19 = _g121++;
		var mesh1 = scene1.meshes[index19];
		if(mesh1._waitingParentId != null) {
			mesh1.parent = scene1.getLastEntryByID(mesh1._waitingParentId);
			mesh1._waitingParentId = null;
		}
		if(mesh1._waitingActions != null) {
			com_babylonhx_loading_plugins_BabylonFileLoader.parseActions(mesh1._waitingActions,mesh1,scene1);
			mesh1._waitingActions = null;
		}
	}
	if(parsedData1.particleSystems != null) {
		var _g122 = 0;
		var _g34 = parsedData1.particleSystems.length;
		while(_g122 < _g34) {
			var index20 = _g122++;
			var parsedParticleSystem1 = parsedData1.particleSystems[index20];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem(parsedParticleSystem1,scene1,rootUrl1);
		}
	}
	if(parsedData1.lensFlareSystems != null) {
		var _g123 = 0;
		var _g35 = parsedData1.lensFlareSystems.length;
		while(_g123 < _g35) {
			var index21 = _g123++;
			var parsedLensFlareSystem = parsedData1.lensFlareSystems[index21];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseLensFlareSystem(parsedLensFlareSystem,scene1,rootUrl1);
		}
	}
	if(parsedData1.shadowGenerators != null) {
		var _g124 = 0;
		var _g36 = parsedData1.shadowGenerators.length;
		while(_g124 < _g36) {
			var index22 = _g124++;
			var parsedShadowGenerator = parsedData1.shadowGenerators[index22];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseShadowGenerator(parsedShadowGenerator,scene1);
		}
	}
	if(parsedData1.actions != null) com_babylonhx_loading_plugins_BabylonFileLoader.parseActions(parsedData1.actions,null,scene1);
	return true;
}};
com_babylonhx_loading_SceneLoader._ForceFullSceneLoadingForIncremental = false;
com_babylonhx_loading_SceneLoader._ShowLoadingScreen = true;
com_babylonhx_loading_SceneLoader._registeredPlugins = [com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin()];
com_babylonhx_materials_ShadersStore.Shaders = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["anaglyph.fragment"] != null) _g.setReserved("anaglyph.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}"); else _g.h["anaglyph.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}";
	if(__map_reserved["blackAndWhite.fragment"] != null) _g.setReserved("blackAndWhite.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}"); else _g.h["blackAndWhite.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}";
	if(__map_reserved["blur.fragment"] != null) _g.setReserved("blur.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["blur.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["brick.fragment"] != null) _g.setReserved("brick.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["brick.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["chromaticAberration.fragment"] != null) _g.setReserved("chromaticAberration.fragment","// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}"); else _g.h["chromaticAberration.fragment"] = "// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}";
	if(__map_reserved["cloud.fragment"] != null) _g.setReserved("cloud.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 skyColor;\r\nuniform vec3 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec3 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = vec4(c, 1);\r\n\r\n}"); else _g.h["cloud.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 skyColor;\r\nuniform vec3 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec3 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = vec4(c, 1);\r\n\r\n}";
	if(__map_reserved["color.fragment"] != null) _g.setReserved("color.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}"); else _g.h["color.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["color.vertex"] != null) _g.setReserved("color.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}"); else _g.h["color.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}";
	if(__map_reserved["colorCorrection.fragment"] != null) _g.setReserved("colorCorrection.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}"); else _g.h["colorCorrection.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}";
	if(__map_reserved["convolution.fragment"] != null) _g.setReserved("convolution.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}"); else _g.h["convolution.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}";
	if(__map_reserved["default.fragment"] != null) _g.setReserved("default.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_EXPLICIT\t0.\r\n#define MAP_SPHERICAL\t1.\r\n#define MAP_PLANAR\t\t2.\r\n#define MAP_CUBIC\t\t3.\r\n#define MAP_PROJECTION\t4.\r\n#define MAP_SKYBOX\t\t5.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nvarying vec3 vPositionUVW;\r\nuniform samplerCube reflectionCubeSampler;\r\nuniform sampler2D reflection2DSampler;\r\nuniform vec3 vReflectionInfos;\r\nuniform mat4 reflectionMatrix;\r\nuniform mat4 view;\r\n\r\nvec3 computeReflectionCoords(float mode, vec4 worldPos, vec3 worldNormal)\r\n{\r\n\tif (mode == MAP_SPHERICAL)\r\n\t{\r\n\t\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n\t}\r\n\telse if (mode == MAP_PLANAR)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n\t}\r\n\telse if (mode == MAP_CUBIC)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = reflect(viewDir, worldNormal);\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n\t}\r\n\telse if (mode == MAP_PROJECTION)\r\n\t{\r\n\t\treturn vec3(reflectionMatrix * (view * worldPos));\r\n\t}\r\n\telse if (mode == MAP_SKYBOX)\r\n\t{\r\n\t\treturn vPositionUVW;\r\n\t}\r\n\r\n\treturn vec3(0, 0, 0);\r\n}\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn visibility;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn 1.0 - ChebychevInequality(moments, depth.z, bias);\r\n}\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., vSpecularColor.a));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0);\r\n#endif\r\n#ifdef POINTDIRLIGHT0\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z);\r\n#else\r\n\t#ifdef SHADOWPCF0\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n\t#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1);\r\n#endif\r\n#ifdef POINTDIRLIGHT1\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z);\r\n#else\r\n\t#ifdef SHADOWPCF1\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n\t#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2);\r\n#endif\r\n#ifdef POINTDIRLIGHT2\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z);\r\n#else\r\n\t#ifdef SHADOWPCF2\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n\t#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3);\r\n#endif\r\n#ifdef POINTDIRLIGHT3\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z);\r\n#else\r\n\t#ifdef SHADOWPCF3\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n\t#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vReflectionInfos.x, vec4(vPositionW, 1.0), normalW);\r\n\r\n\tif (vReflectionInfos.z != 0.0)\r\n\t{\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.y * shadow;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n\t\tif (vReflectionInfos.x == MAP_PROJECTION)\r\n\t\t{\r\n\t\t\tcoords /= vReflectionUVW.z;\r\n\t\t}\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.y * shadow;\r\n\t}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["default.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_EXPLICIT\t0.\r\n#define MAP_SPHERICAL\t1.\r\n#define MAP_PLANAR\t\t2.\r\n#define MAP_CUBIC\t\t3.\r\n#define MAP_PROJECTION\t4.\r\n#define MAP_SKYBOX\t\t5.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nvarying vec3 vPositionUVW;\r\nuniform samplerCube reflectionCubeSampler;\r\nuniform sampler2D reflection2DSampler;\r\nuniform vec3 vReflectionInfos;\r\nuniform mat4 reflectionMatrix;\r\nuniform mat4 view;\r\n\r\nvec3 computeReflectionCoords(float mode, vec4 worldPos, vec3 worldNormal)\r\n{\r\n\tif (mode == MAP_SPHERICAL)\r\n\t{\r\n\t\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n\t}\r\n\telse if (mode == MAP_PLANAR)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n\t}\r\n\telse if (mode == MAP_CUBIC)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = reflect(viewDir, worldNormal);\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n\t}\r\n\telse if (mode == MAP_PROJECTION)\r\n\t{\r\n\t\treturn vec3(reflectionMatrix * (view * worldPos));\r\n\t}\r\n\telse if (mode == MAP_SKYBOX)\r\n\t{\r\n\t\treturn vPositionUVW;\r\n\t}\r\n\r\n\treturn vec3(0, 0, 0);\r\n}\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn visibility;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn 1.0 - ChebychevInequality(moments, depth.z, bias);\r\n}\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., vSpecularColor.a));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0);\r\n#endif\r\n#ifdef POINTDIRLIGHT0\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z);\r\n#else\r\n\t#ifdef SHADOWPCF0\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n\t#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1);\r\n#endif\r\n#ifdef POINTDIRLIGHT1\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z);\r\n#else\r\n\t#ifdef SHADOWPCF1\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n\t#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2);\r\n#endif\r\n#ifdef POINTDIRLIGHT2\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z);\r\n#else\r\n\t#ifdef SHADOWPCF2\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n\t#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3);\r\n#endif\r\n#ifdef POINTDIRLIGHT3\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z);\r\n#else\r\n\t#ifdef SHADOWPCF3\r\n\t\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z);\r\n\t#else\r\n\t\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n\t#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vReflectionInfos.x, vec4(vPositionW, 1.0), normalW);\r\n\r\n\tif (vReflectionInfos.z != 0.0)\r\n\t{\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.y * shadow;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n\t\tif (vReflectionInfos.x == MAP_PROJECTION)\r\n\t\t{\r\n\t\t\tcoords /= vReflectionUVW.z;\r\n\t\t}\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.y * shadow;\r\n\t}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["default.vertex"] != null) _g.setReserved("default.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#ifdef LIGHT1\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#ifdef LIGHT2\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#ifdef LIGHT3\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld;\r\n\r\n#ifdef REFLECTION\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tfinalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tfinalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#else\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2);\r\n#endif \r\n\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#ifdef LIGHT1\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#ifdef LIGHT2\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#ifdef LIGHT3\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}"); else _g.h["default.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#ifdef LIGHT1\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#ifdef LIGHT2\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#ifdef LIGHT3\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld;\r\n\r\n#ifdef REFLECTION\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tfinalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tfinalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#else\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2);\r\n#endif \r\n\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#ifdef LIGHT1\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#ifdef LIGHT2\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#ifdef LIGHT3\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}";
	if(__map_reserved["depth.fragment"] != null) _g.setReserved("depth.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}"); else _g.h["depth.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}";
	if(__map_reserved["depth.vertex"] != null) _g.setReserved("depth.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n#else\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["depth.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n#else\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["depthBoxBlur.fragment"] != null) _g.setReserved("depthBoxBlur.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}"); else _g.h["depthBoxBlur.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}";
	if(__map_reserved["depthOfField.fragment"] != null) _g.setReserved("depthOfField.fragment","// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n"); else _g.h["depthOfField.fragment"] = "// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n";
	if(__map_reserved["displayPass.fragment"] != null) _g.setReserved("displayPass.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}"); else _g.h["displayPass.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}";
	if(__map_reserved["filter.fragment"] != null) _g.setReserved("filter.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}"); else _g.h["filter.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}";
	if(__map_reserved["fire.fragment"] != null) _g.setReserved("fire.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}"); else _g.h["fire.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}";
	if(__map_reserved["fxaa.fragment"] != null) _g.setReserved("fxaa.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}"); else _g.h["fxaa.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}";
	if(__map_reserved["grass.fragment"] != null) _g.setReserved("grass.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["grass.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["hdr.fragment"] != null) _g.setReserved("hdr.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i], 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i])) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n"); else _g.h["hdr.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i], 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i])) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n";
	if(__map_reserved["layer.fragment"] != null) _g.setReserved("layer.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["layer.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["layer.vertex"] != null) _g.setReserved("layer.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["layer.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["legacydefault.fragment"] != null) _g.setReserved("legacydefault.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\nuniform samplerCube reflectionCubeSampler;\r\nuniform sampler2D reflection2DSampler;\r\nuniform vec3 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bitShift = vec4(1. / (255. * 255. * 255.), 1. / (255. * 255.), 1. / 255., 1.);\r\n\treturn dot(color, bitShift);\r\n}\r\n\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv));\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn 0.;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat ChebychevInequality(vec2 moments, float t)\r\n{\r\n\tif (t <= moments.x)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat variance = moments.y - (moments.x * moments.x);\r\n\tvariance = max(variance, 0.);\r\n\r\n\tfloat d = t - moments.x;\r\n\treturn variance / (variance + d * d);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn clamp(1.3 - ChebychevInequality(moments, depth.z), 0., 1.0);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#ifdef POINTDIRLIGHT0\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0);\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#ifdef POINTDIRLIGHT1\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1);\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#ifdef POINTDIRLIGHT2\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2);\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#ifdef POINTDIRLIGHT3\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3);\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n\tif (vReflectionInfos.z != 0.0)\r\n\t{\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.y;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n\t\tif (vReflectionInfos.x == MAP_PROJECTION)\r\n\t\t{\r\n\t\t\tcoords /= vReflectionUVW.z;\r\n\t\t}\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.y;\r\n\t}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["legacydefault.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\nuniform samplerCube reflectionCubeSampler;\r\nuniform sampler2D reflection2DSampler;\r\nuniform vec3 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bitShift = vec4(1. / (255. * 255. * 255.), 1. / (255. * 255.), 1. / 255., 1.);\r\n\treturn dot(color, bitShift);\r\n}\r\n\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv));\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn 0.;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat ChebychevInequality(vec2 moments, float t)\r\n{\r\n\tif (t <= moments.x)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat variance = moments.y - (moments.x * moments.x);\r\n\tvariance = max(variance, 0.);\r\n\r\n\tfloat d = t - moments.x;\r\n\treturn variance / (variance + d * d);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn clamp(1.3 - ChebychevInequality(moments, depth.z), 0., 1.0);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#ifdef POINTDIRLIGHT0\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0);\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#ifdef POINTDIRLIGHT1\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1);\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#ifdef POINTDIRLIGHT2\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2);\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#ifdef POINTDIRLIGHT3\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3);\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n\tif (vReflectionInfos.z != 0.0)\r\n\t{\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.y;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n\t\tif (vReflectionInfos.x == MAP_PROJECTION)\r\n\t\t{\r\n\t\t\tcoords /= vReflectionUVW.z;\r\n\t\t}\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.y;\r\n\t}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["legacydefault.vertex"] != null) _g.setReserved("legacydefault.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_EXPLICIT\t0.\r\n#define MAP_SPHERICAL\t1.\r\n#define MAP_PLANAR\t\t2.\r\n#define MAP_CUBIC\t\t3.\r\n#define MAP_PROJECTION\t4.\r\n#define MAP_SKYBOX\t\t5.\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform vec3 vReflectionInfos;\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#ifdef LIGHT1\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#ifdef LIGHT2\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#ifdef LIGHT3\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvec3 computeReflectionCoords(float mode, vec4 worldPos, vec3 worldNormal)\r\n{\r\n\tif (mode == MAP_SPHERICAL)\r\n\t{\r\n\t\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n\t}\r\n\telse if (mode == MAP_PLANAR)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n\t}\r\n\telse if (mode == MAP_CUBIC)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = reflect(viewDir, worldNormal);\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n\t}\r\n\telse if (mode == MAP_PROJECTION)\r\n\t{\r\n\t\treturn vec3(reflectionMatrix * (view * worldPos));\r\n\t}\r\n\telse if (mode == MAP_SKYBOX)\r\n\t{\r\n\t\treturn position;\r\n\t}\r\n\r\n\treturn vec3(0, 0, 0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld;\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = world * (m0 + m1 + m2 + m3);\r\n#else\r\n\tfinalWorld = world * (m0 + m1 + m2);\r\n#endif \r\n\r\n#else\r\n\tfinalWorld = world;\r\n#endif\r\n\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vReflectionInfos.x, vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#ifdef LIGHT1\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#ifdef LIGHT2\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#ifdef LIGHT3\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}"); else _g.h["legacydefault.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define MAP_EXPLICIT\t0.\r\n#define MAP_SPHERICAL\t1.\r\n#define MAP_PLANAR\t\t2.\r\n#define MAP_CUBIC\t\t3.\r\n#define MAP_PROJECTION\t4.\r\n#define MAP_SKYBOX\t\t5.\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform vec3 vReflectionInfos;\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#ifdef LIGHT1\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#ifdef LIGHT2\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#ifdef LIGHT3\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvec3 computeReflectionCoords(float mode, vec4 worldPos, vec3 worldNormal)\r\n{\r\n\tif (mode == MAP_SPHERICAL)\r\n\t{\r\n\t\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n\t}\r\n\telse if (mode == MAP_PLANAR)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n\t}\r\n\telse if (mode == MAP_CUBIC)\r\n\t{\r\n\t\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\t\tvec3 coords = reflect(viewDir, worldNormal);\r\n\r\n\t\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n\t}\r\n\telse if (mode == MAP_PROJECTION)\r\n\t{\r\n\t\treturn vec3(reflectionMatrix * (view * worldPos));\r\n\t}\r\n\telse if (mode == MAP_SKYBOX)\r\n\t{\r\n\t\treturn position;\r\n\t}\r\n\r\n\treturn vec3(0, 0, 0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld;\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = world * (m0 + m1 + m2 + m3);\r\n#else\r\n\tfinalWorld = world * (m0 + m1 + m2);\r\n#endif \r\n\r\n#else\r\n\tfinalWorld = world;\r\n#endif\r\n\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vReflectionInfos.x, vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#ifdef LIGHT0\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#ifdef LIGHT1\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#ifdef LIGHT2\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#ifdef LIGHT3\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}";
	if(__map_reserved["lensFlare.fragment"] != null) _g.setReserved("lensFlare.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["lensFlare.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["lensFlare.vertex"] != null) _g.setReserved("lensFlare.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}"); else _g.h["lensFlare.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["lensHighlights.fragment"] != null) _g.setReserved("lensHighlights.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}"); else _g.h["lensHighlights.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}";
	if(__map_reserved["marble.fragment"] != null) _g.setReserved("marble.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}"); else _g.h["marble.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}";
	if(__map_reserved["outline.fragment"] != null) _g.setReserved("outline.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["outline.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["outline.vertex"] != null) _g.setReserved("outline.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n#else\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["outline.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n#else\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["particles.fragment"] != null) _g.setReserved("particles.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}"); else _g.h["particles.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}";
	if(__map_reserved["particles.vertex"] != null) _g.setReserved("particles.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}"); else _g.h["particles.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}";
	if(__map_reserved["pass.fragment"] != null) _g.setReserved("pass.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}"); else _g.h["pass.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}";
	if(__map_reserved["postprocess.vertex"] != null) _g.setReserved("postprocess.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["postprocess.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["procedural.vertex"] != null) _g.setReserved("procedural.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["procedural.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["refraction.fragment"] != null) _g.setReserved("refraction.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}"); else _g.h["refraction.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}";
	if(__map_reserved["road.fragment"] != null) _g.setReserved("road.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["road.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["shadowMap.fragment"] != null) _g.setReserved("shadowMap.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}"); else _g.h["shadowMap.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}";
	if(__map_reserved["shadowMap.vertex"] != null) _g.setReserved("shadowMap.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#endif\r\n\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["shadowMap.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n\tmat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n\tmat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n\tmat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\tmat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n\tfinalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#endif\r\n\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["sprites.fragment"] != null) _g.setReserved("sprites.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["sprites.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["sprites.vertex"] != null) _g.setReserved("sprites.vertex","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}"); else _g.h["sprites.vertex"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}";
	if(__map_reserved["ssao.fragment"] != null) _g.setReserved("ssao.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define SAMPLES 16\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[16];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\n\r\nvarying vec2 vUV;\r\n\r\nconst vec2 offset1 = vec2(0.0, 0.001);\r\nconst vec2 offset2 = vec2(0.001, 0.0);\r\n\r\nvec3 normalFromDepth(const float depth, const vec2 coords) {\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n    normal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tconst float base = 0.2;\r\n\r\n\tvec3 random = texture2D(randomSampler, vUV * randTextureTiles).rgb;\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, 0.0, 1.0)).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n"); else _g.h["ssao.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#define SAMPLES 16\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[16];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\n\r\nvarying vec2 vUV;\r\n\r\nconst vec2 offset1 = vec2(0.0, 0.001);\r\nconst vec2 offset2 = vec2(0.001, 0.0);\r\n\r\nvec3 normalFromDepth(const float depth, const vec2 coords) {\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n    normal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tconst float base = 0.2;\r\n\r\n\tvec3 random = texture2D(randomSampler, vUV * randTextureTiles).rgb;\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, 0.0, 1.0)).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n";
	if(__map_reserved["ssaoCombine.fragment"] != null) _g.setReserved("ssaoCombine.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = texture2D(originalColor, vUV) * texture2D(textureSampler, vUV);\r\n}\r\n"); else _g.h["ssaoCombine.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = texture2D(originalColor, vUV) * texture2D(textureSampler, vUV);\r\n}\r\n";
	if(__map_reserved["stereoscopicInterlace.fragment"] != null) _g.setReserved("stereoscopicInterlace.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}"); else _g.h["stereoscopicInterlace.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}";
	if(__map_reserved["volumetricLightScattering.fragment"] != null) _g.setReserved("volumetricLightScattering.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n"); else _g.h["volumetricLightScattering.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n";
	if(__map_reserved["volumetricLightScatteringPass.fragment"] != null) _g.setReserved("volumetricLightScatteringPass.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n"); else _g.h["volumetricLightScatteringPass.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n";
	if(__map_reserved["vrDistortionCorrection.fragment"] != null) _g.setReserved("vrDistortionCorrection.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}"); else _g.h["vrDistortionCorrection.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}";
	if(__map_reserved["wood.fragment"] != null) _g.setReserved("wood.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}"); else _g.h["wood.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}";
	if(__map_reserved["compose.fragment"] != null) _g.setReserved("compose.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}"); else _g.h["compose.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}";
	if(__map_reserved["downsample.fragment"] != null) _g.setReserved("downsample.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}"); else _g.h["downsample.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}";
	if(__map_reserved["cellShading.vertex"] != null) _g.setReserved("cellShading.vertex","\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n"); else _g.h["cellShading.vertex"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n";
	if(__map_reserved["cellShading.fragment"] != null) _g.setReserved("cellShading.fragment","\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n"); else _g.h["cellShading.fragment"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n";
	$r = _g;
	return $r;
}(this));
com_babylonhx_math_Axis.X = new com_babylonhx_math_Vector3(1,0,0);
com_babylonhx_math_Axis.Y = new com_babylonhx_math_Vector3(0,1,0);
com_babylonhx_math_Axis.Z = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_mesh_VertexBuffer.PositionKind = "position";
com_babylonhx_mesh_VertexBuffer.NormalKind = "normal";
com_babylonhx_mesh_VertexBuffer.UVKind = "uv";
com_babylonhx_mesh_VertexBuffer.UV2Kind = "uv2";
com_babylonhx_mesh_VertexBuffer.UV3Kind = "uv3";
com_babylonhx_mesh_VertexBuffer.UV4Kind = "uv4";
com_babylonhx_mesh_VertexBuffer.UV5Kind = "uv5";
com_babylonhx_mesh_VertexBuffer.UV6Kind = "uv6";
com_babylonhx_mesh_VertexBuffer.ColorKind = "color";
com_babylonhx_mesh_VertexBuffer.MatricesIndicesKind = "matricesIndices";
com_babylonhx_mesh_VertexBuffer.MatricesWeightsKind = "matricesWeights";
com_babylonhx_mesh_VertexBuffer.count = 0;
com_babylonhx_mesh_simplification_SimplificationSettings.QUADRATIC = 0;
com_babylonhx_physics_PhysicsEngine.NoImpostor = 0;
com_babylonhx_physics_PhysicsEngine.SphereImpostor = 1;
com_babylonhx_physics_PhysicsEngine.BoxImpostor = 2;
com_babylonhx_physics_PhysicsEngine.PlaneImpostor = 3;
com_babylonhx_physics_PhysicsEngine.MeshImpostor = 4;
com_babylonhx_physics_PhysicsEngine.CapsuleImpostor = 5;
com_babylonhx_physics_PhysicsEngine.ConeImpostor = 6;
com_babylonhx_physics_PhysicsEngine.CylinderImpostor = 7;
com_babylonhx_physics_PhysicsEngine.ConvexHullImpostor = 8;
com_babylonhx_physics_PhysicsEngine.Epsilon = 0.001;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_EFFECT_NAME = "passEffect";
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_SAMPLER_NAME = "passSampler";
com_babylonhx_tools_SmartArray._GlobalId = 0;
com_babylonhx_utils_Scancodes.MASK = 1073741824;
com_babylonhx_utils_Scancodes.unknown = 0;
com_babylonhx_utils_Scancodes.key_a = 4;
com_babylonhx_utils_Scancodes.key_b = 5;
com_babylonhx_utils_Scancodes.key_c = 6;
com_babylonhx_utils_Scancodes.key_d = 7;
com_babylonhx_utils_Scancodes.key_e = 8;
com_babylonhx_utils_Scancodes.key_f = 9;
com_babylonhx_utils_Scancodes.key_g = 10;
com_babylonhx_utils_Scancodes.key_h = 11;
com_babylonhx_utils_Scancodes.key_i = 12;
com_babylonhx_utils_Scancodes.key_j = 13;
com_babylonhx_utils_Scancodes.key_k = 14;
com_babylonhx_utils_Scancodes.key_l = 15;
com_babylonhx_utils_Scancodes.key_m = 16;
com_babylonhx_utils_Scancodes.key_n = 17;
com_babylonhx_utils_Scancodes.key_o = 18;
com_babylonhx_utils_Scancodes.key_p = 19;
com_babylonhx_utils_Scancodes.key_q = 20;
com_babylonhx_utils_Scancodes.key_r = 21;
com_babylonhx_utils_Scancodes.key_s = 22;
com_babylonhx_utils_Scancodes.key_t = 23;
com_babylonhx_utils_Scancodes.key_u = 24;
com_babylonhx_utils_Scancodes.key_v = 25;
com_babylonhx_utils_Scancodes.key_w = 26;
com_babylonhx_utils_Scancodes.key_x = 27;
com_babylonhx_utils_Scancodes.key_y = 28;
com_babylonhx_utils_Scancodes.key_z = 29;
com_babylonhx_utils_Scancodes.key_1 = 30;
com_babylonhx_utils_Scancodes.key_2 = 31;
com_babylonhx_utils_Scancodes.key_3 = 32;
com_babylonhx_utils_Scancodes.key_4 = 33;
com_babylonhx_utils_Scancodes.key_5 = 34;
com_babylonhx_utils_Scancodes.key_6 = 35;
com_babylonhx_utils_Scancodes.key_7 = 36;
com_babylonhx_utils_Scancodes.key_8 = 37;
com_babylonhx_utils_Scancodes.key_9 = 38;
com_babylonhx_utils_Scancodes.key_0 = 39;
com_babylonhx_utils_Scancodes.enter = 40;
com_babylonhx_utils_Scancodes.escape = 41;
com_babylonhx_utils_Scancodes.backspace = 42;
com_babylonhx_utils_Scancodes.tab = 43;
com_babylonhx_utils_Scancodes.space = 44;
com_babylonhx_utils_Scancodes.minus = 45;
com_babylonhx_utils_Scancodes.equals = 46;
com_babylonhx_utils_Scancodes.leftbracket = 47;
com_babylonhx_utils_Scancodes.rightbracket = 48;
com_babylonhx_utils_Scancodes.backslash = 49;
com_babylonhx_utils_Scancodes.nonushash = 50;
com_babylonhx_utils_Scancodes.semicolon = 51;
com_babylonhx_utils_Scancodes.apostrophe = 52;
com_babylonhx_utils_Scancodes.grave = 53;
com_babylonhx_utils_Scancodes.comma = 54;
com_babylonhx_utils_Scancodes.period = 55;
com_babylonhx_utils_Scancodes.slash = 56;
com_babylonhx_utils_Scancodes.capslock = 57;
com_babylonhx_utils_Scancodes.f1 = 58;
com_babylonhx_utils_Scancodes.f2 = 59;
com_babylonhx_utils_Scancodes.f3 = 60;
com_babylonhx_utils_Scancodes.f4 = 61;
com_babylonhx_utils_Scancodes.f5 = 62;
com_babylonhx_utils_Scancodes.f6 = 63;
com_babylonhx_utils_Scancodes.f7 = 64;
com_babylonhx_utils_Scancodes.f8 = 65;
com_babylonhx_utils_Scancodes.f9 = 66;
com_babylonhx_utils_Scancodes.f10 = 67;
com_babylonhx_utils_Scancodes.f11 = 68;
com_babylonhx_utils_Scancodes.f12 = 69;
com_babylonhx_utils_Scancodes.printscreen = 70;
com_babylonhx_utils_Scancodes.scrolllock = 71;
com_babylonhx_utils_Scancodes.pause = 72;
com_babylonhx_utils_Scancodes.insert = 73;
com_babylonhx_utils_Scancodes.home = 74;
com_babylonhx_utils_Scancodes.pageup = 75;
com_babylonhx_utils_Scancodes["delete"] = 76;
com_babylonhx_utils_Scancodes.end = 77;
com_babylonhx_utils_Scancodes.pagedown = 78;
com_babylonhx_utils_Scancodes.right = 79;
com_babylonhx_utils_Scancodes.left = 80;
com_babylonhx_utils_Scancodes.down = 81;
com_babylonhx_utils_Scancodes.up = 82;
com_babylonhx_utils_Scancodes.numlockclear = 83;
com_babylonhx_utils_Scancodes.kp_divide = 84;
com_babylonhx_utils_Scancodes.kp_multiply = 85;
com_babylonhx_utils_Scancodes.kp_minus = 86;
com_babylonhx_utils_Scancodes.kp_plus = 87;
com_babylonhx_utils_Scancodes.kp_enter = 88;
com_babylonhx_utils_Scancodes.kp_1 = 89;
com_babylonhx_utils_Scancodes.kp_2 = 90;
com_babylonhx_utils_Scancodes.kp_3 = 91;
com_babylonhx_utils_Scancodes.kp_4 = 92;
com_babylonhx_utils_Scancodes.kp_5 = 93;
com_babylonhx_utils_Scancodes.kp_6 = 94;
com_babylonhx_utils_Scancodes.kp_7 = 95;
com_babylonhx_utils_Scancodes.kp_8 = 96;
com_babylonhx_utils_Scancodes.kp_9 = 97;
com_babylonhx_utils_Scancodes.kp_0 = 98;
com_babylonhx_utils_Scancodes.kp_period = 99;
com_babylonhx_utils_Scancodes.nonusbackslash = 100;
com_babylonhx_utils_Scancodes.application = 101;
com_babylonhx_utils_Scancodes.power = 102;
com_babylonhx_utils_Scancodes.kp_equals = 103;
com_babylonhx_utils_Scancodes.f13 = 104;
com_babylonhx_utils_Scancodes.f14 = 105;
com_babylonhx_utils_Scancodes.f15 = 106;
com_babylonhx_utils_Scancodes.f16 = 107;
com_babylonhx_utils_Scancodes.f17 = 108;
com_babylonhx_utils_Scancodes.f18 = 109;
com_babylonhx_utils_Scancodes.f19 = 110;
com_babylonhx_utils_Scancodes.f20 = 111;
com_babylonhx_utils_Scancodes.f21 = 112;
com_babylonhx_utils_Scancodes.f22 = 113;
com_babylonhx_utils_Scancodes.f23 = 114;
com_babylonhx_utils_Scancodes.f24 = 115;
com_babylonhx_utils_Scancodes.execute = 116;
com_babylonhx_utils_Scancodes.help = 117;
com_babylonhx_utils_Scancodes.menu = 118;
com_babylonhx_utils_Scancodes.select = 119;
com_babylonhx_utils_Scancodes.stop = 120;
com_babylonhx_utils_Scancodes.again = 121;
com_babylonhx_utils_Scancodes.undo = 122;
com_babylonhx_utils_Scancodes.cut = 123;
com_babylonhx_utils_Scancodes.copy = 124;
com_babylonhx_utils_Scancodes.paste = 125;
com_babylonhx_utils_Scancodes.find = 126;
com_babylonhx_utils_Scancodes.mute = 127;
com_babylonhx_utils_Scancodes.volumeup = 128;
com_babylonhx_utils_Scancodes.volumedown = 129;
com_babylonhx_utils_Scancodes.kp_comma = 133;
com_babylonhx_utils_Scancodes.kp_equalsas400 = 134;
com_babylonhx_utils_Scancodes.international1 = 135;
com_babylonhx_utils_Scancodes.international2 = 136;
com_babylonhx_utils_Scancodes.international3 = 137;
com_babylonhx_utils_Scancodes.international4 = 138;
com_babylonhx_utils_Scancodes.international5 = 139;
com_babylonhx_utils_Scancodes.international6 = 140;
com_babylonhx_utils_Scancodes.international7 = 141;
com_babylonhx_utils_Scancodes.international8 = 142;
com_babylonhx_utils_Scancodes.international9 = 143;
com_babylonhx_utils_Scancodes.lang1 = 144;
com_babylonhx_utils_Scancodes.lang2 = 145;
com_babylonhx_utils_Scancodes.lang3 = 146;
com_babylonhx_utils_Scancodes.lang4 = 147;
com_babylonhx_utils_Scancodes.lang5 = 148;
com_babylonhx_utils_Scancodes.lang6 = 149;
com_babylonhx_utils_Scancodes.lang7 = 150;
com_babylonhx_utils_Scancodes.lang8 = 151;
com_babylonhx_utils_Scancodes.lang9 = 152;
com_babylonhx_utils_Scancodes.alterase = 153;
com_babylonhx_utils_Scancodes.sysreq = 154;
com_babylonhx_utils_Scancodes.cancel = 155;
com_babylonhx_utils_Scancodes.clear = 156;
com_babylonhx_utils_Scancodes.prior = 157;
com_babylonhx_utils_Scancodes.return2 = 158;
com_babylonhx_utils_Scancodes.separator = 159;
com_babylonhx_utils_Scancodes.out = 160;
com_babylonhx_utils_Scancodes.oper = 161;
com_babylonhx_utils_Scancodes.clearagain = 162;
com_babylonhx_utils_Scancodes.crsel = 163;
com_babylonhx_utils_Scancodes.exsel = 164;
com_babylonhx_utils_Scancodes.kp_00 = 176;
com_babylonhx_utils_Scancodes.kp_000 = 177;
com_babylonhx_utils_Scancodes.thousandsseparator = 178;
com_babylonhx_utils_Scancodes.decimalseparator = 179;
com_babylonhx_utils_Scancodes.currencyunit = 180;
com_babylonhx_utils_Scancodes.currencysubunit = 181;
com_babylonhx_utils_Scancodes.kp_leftparen = 182;
com_babylonhx_utils_Scancodes.kp_rightparen = 183;
com_babylonhx_utils_Scancodes.kp_leftbrace = 184;
com_babylonhx_utils_Scancodes.kp_rightbrace = 185;
com_babylonhx_utils_Scancodes.kp_tab = 186;
com_babylonhx_utils_Scancodes.kp_backspace = 187;
com_babylonhx_utils_Scancodes.kp_a = 188;
com_babylonhx_utils_Scancodes.kp_b = 189;
com_babylonhx_utils_Scancodes.kp_c = 190;
com_babylonhx_utils_Scancodes.kp_d = 191;
com_babylonhx_utils_Scancodes.kp_e = 192;
com_babylonhx_utils_Scancodes.kp_f = 193;
com_babylonhx_utils_Scancodes.kp_xor = 194;
com_babylonhx_utils_Scancodes.kp_power = 195;
com_babylonhx_utils_Scancodes.kp_percent = 196;
com_babylonhx_utils_Scancodes.kp_less = 197;
com_babylonhx_utils_Scancodes.kp_greater = 198;
com_babylonhx_utils_Scancodes.kp_ampersand = 199;
com_babylonhx_utils_Scancodes.kp_dblampersand = 200;
com_babylonhx_utils_Scancodes.kp_verticalbar = 201;
com_babylonhx_utils_Scancodes.kp_dblverticalbar = 202;
com_babylonhx_utils_Scancodes.kp_colon = 203;
com_babylonhx_utils_Scancodes.kp_hash = 204;
com_babylonhx_utils_Scancodes.kp_space = 205;
com_babylonhx_utils_Scancodes.kp_at = 206;
com_babylonhx_utils_Scancodes.kp_exclam = 207;
com_babylonhx_utils_Scancodes.kp_memstore = 208;
com_babylonhx_utils_Scancodes.kp_memrecall = 209;
com_babylonhx_utils_Scancodes.kp_memclear = 210;
com_babylonhx_utils_Scancodes.kp_memadd = 211;
com_babylonhx_utils_Scancodes.kp_memsubtract = 212;
com_babylonhx_utils_Scancodes.kp_memmultiply = 213;
com_babylonhx_utils_Scancodes.kp_memdivide = 214;
com_babylonhx_utils_Scancodes.kp_plusminus = 215;
com_babylonhx_utils_Scancodes.kp_clear = 216;
com_babylonhx_utils_Scancodes.kp_clearentry = 217;
com_babylonhx_utils_Scancodes.kp_binary = 218;
com_babylonhx_utils_Scancodes.kp_octal = 219;
com_babylonhx_utils_Scancodes.kp_decimal = 220;
com_babylonhx_utils_Scancodes.kp_hexadecimal = 221;
com_babylonhx_utils_Scancodes.lctrl = 224;
com_babylonhx_utils_Scancodes.lshift = 225;
com_babylonhx_utils_Scancodes.lalt = 226;
com_babylonhx_utils_Scancodes.lmeta = 227;
com_babylonhx_utils_Scancodes.rctrl = 228;
com_babylonhx_utils_Scancodes.rshift = 229;
com_babylonhx_utils_Scancodes.ralt = 230;
com_babylonhx_utils_Scancodes.rmeta = 231;
com_babylonhx_utils_Scancodes.mode = 257;
com_babylonhx_utils_Scancodes.audionext = 258;
com_babylonhx_utils_Scancodes.audioprev = 259;
com_babylonhx_utils_Scancodes.audiostop = 260;
com_babylonhx_utils_Scancodes.audioplay = 261;
com_babylonhx_utils_Scancodes.audiomute = 262;
com_babylonhx_utils_Scancodes.mediaselect = 263;
com_babylonhx_utils_Scancodes.www = 264;
com_babylonhx_utils_Scancodes.mail = 265;
com_babylonhx_utils_Scancodes.calculator = 266;
com_babylonhx_utils_Scancodes.computer = 267;
com_babylonhx_utils_Scancodes.ac_search = 268;
com_babylonhx_utils_Scancodes.ac_home = 269;
com_babylonhx_utils_Scancodes.ac_back = 270;
com_babylonhx_utils_Scancodes.ac_forward = 271;
com_babylonhx_utils_Scancodes.ac_stop = 272;
com_babylonhx_utils_Scancodes.ac_refresh = 273;
com_babylonhx_utils_Scancodes.ac_bookmarks = 274;
com_babylonhx_utils_Scancodes.brightnessdown = 275;
com_babylonhx_utils_Scancodes.brightnessup = 276;
com_babylonhx_utils_Scancodes.displayswitch = 277;
com_babylonhx_utils_Scancodes.kbdillumtoggle = 278;
com_babylonhx_utils_Scancodes.kbdillumdown = 279;
com_babylonhx_utils_Scancodes.kbdillumup = 280;
com_babylonhx_utils_Scancodes.eject = 281;
com_babylonhx_utils_Scancodes.sleep = 282;
com_babylonhx_utils_Scancodes.app1 = 283;
com_babylonhx_utils_Scancodes.app2 = 284;
com_babylonhx_utils_Scancodes.scancode_names = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
com_babylonhx_utils_Keycodes.unknown = 0;
com_babylonhx_utils_Keycodes.enter = 13;
com_babylonhx_utils_Keycodes.escape = 27;
com_babylonhx_utils_Keycodes.backspace = 8;
com_babylonhx_utils_Keycodes.tab = 9;
com_babylonhx_utils_Keycodes.space = 32;
com_babylonhx_utils_Keycodes.exclaim = 33;
com_babylonhx_utils_Keycodes.quotedbl = 34;
com_babylonhx_utils_Keycodes.hash = 35;
com_babylonhx_utils_Keycodes.percent = 37;
com_babylonhx_utils_Keycodes.dollar = 36;
com_babylonhx_utils_Keycodes.ampersand = 38;
com_babylonhx_utils_Keycodes.quote = 39;
com_babylonhx_utils_Keycodes.leftparen = 40;
com_babylonhx_utils_Keycodes.rightparen = 41;
com_babylonhx_utils_Keycodes.asterisk = 42;
com_babylonhx_utils_Keycodes.plus = 43;
com_babylonhx_utils_Keycodes.comma = 44;
com_babylonhx_utils_Keycodes.minus = 45;
com_babylonhx_utils_Keycodes.period = 46;
com_babylonhx_utils_Keycodes.slash = 47;
com_babylonhx_utils_Keycodes.key_0 = 48;
com_babylonhx_utils_Keycodes.key_1 = 49;
com_babylonhx_utils_Keycodes.key_2 = 50;
com_babylonhx_utils_Keycodes.key_3 = 51;
com_babylonhx_utils_Keycodes.key_4 = 52;
com_babylonhx_utils_Keycodes.key_5 = 53;
com_babylonhx_utils_Keycodes.key_6 = 54;
com_babylonhx_utils_Keycodes.key_7 = 55;
com_babylonhx_utils_Keycodes.key_8 = 56;
com_babylonhx_utils_Keycodes.key_9 = 57;
com_babylonhx_utils_Keycodes.colon = 58;
com_babylonhx_utils_Keycodes.semicolon = 59;
com_babylonhx_utils_Keycodes.less = 60;
com_babylonhx_utils_Keycodes.equals = 61;
com_babylonhx_utils_Keycodes.greater = 62;
com_babylonhx_utils_Keycodes.question = 63;
com_babylonhx_utils_Keycodes.at = 64;
com_babylonhx_utils_Keycodes.leftbracket = 91;
com_babylonhx_utils_Keycodes.backslash = 92;
com_babylonhx_utils_Keycodes.rightbracket = 93;
com_babylonhx_utils_Keycodes.caret = 94;
com_babylonhx_utils_Keycodes.underscore = 95;
com_babylonhx_utils_Keycodes.backquote = 96;
com_babylonhx_utils_Keycodes.key_a = 97;
com_babylonhx_utils_Keycodes.key_b = 98;
com_babylonhx_utils_Keycodes.key_c = 99;
com_babylonhx_utils_Keycodes.key_d = 100;
com_babylonhx_utils_Keycodes.key_e = 101;
com_babylonhx_utils_Keycodes.key_f = 102;
com_babylonhx_utils_Keycodes.key_g = 103;
com_babylonhx_utils_Keycodes.key_h = 104;
com_babylonhx_utils_Keycodes.key_i = 105;
com_babylonhx_utils_Keycodes.key_j = 106;
com_babylonhx_utils_Keycodes.key_k = 107;
com_babylonhx_utils_Keycodes.key_l = 108;
com_babylonhx_utils_Keycodes.key_m = 109;
com_babylonhx_utils_Keycodes.key_n = 110;
com_babylonhx_utils_Keycodes.key_o = 111;
com_babylonhx_utils_Keycodes.key_p = 112;
com_babylonhx_utils_Keycodes.key_q = 113;
com_babylonhx_utils_Keycodes.key_r = 114;
com_babylonhx_utils_Keycodes.key_s = 115;
com_babylonhx_utils_Keycodes.key_t = 116;
com_babylonhx_utils_Keycodes.key_u = 117;
com_babylonhx_utils_Keycodes.key_v = 118;
com_babylonhx_utils_Keycodes.key_w = 119;
com_babylonhx_utils_Keycodes.key_x = 120;
com_babylonhx_utils_Keycodes.key_y = 121;
com_babylonhx_utils_Keycodes.key_z = 122;
com_babylonhx_utils_Keycodes.capslock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.capslock);
com_babylonhx_utils_Keycodes.f1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f1);
com_babylonhx_utils_Keycodes.f2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f2);
com_babylonhx_utils_Keycodes.f3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f3);
com_babylonhx_utils_Keycodes.f4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f4);
com_babylonhx_utils_Keycodes.f5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f5);
com_babylonhx_utils_Keycodes.f6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f6);
com_babylonhx_utils_Keycodes.f7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f7);
com_babylonhx_utils_Keycodes.f8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f8);
com_babylonhx_utils_Keycodes.f9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f9);
com_babylonhx_utils_Keycodes.f10 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f10);
com_babylonhx_utils_Keycodes.f11 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f11);
com_babylonhx_utils_Keycodes.f12 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f12);
com_babylonhx_utils_Keycodes.printscreen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.printscreen);
com_babylonhx_utils_Keycodes.scrolllock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.scrolllock);
com_babylonhx_utils_Keycodes.pause = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pause);
com_babylonhx_utils_Keycodes.insert = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.insert);
com_babylonhx_utils_Keycodes.home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.home);
com_babylonhx_utils_Keycodes.pageup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pageup);
com_babylonhx_utils_Keycodes["delete"] = 127;
com_babylonhx_utils_Keycodes.end = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.end);
com_babylonhx_utils_Keycodes.pagedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pagedown);
com_babylonhx_utils_Keycodes.right = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.right);
com_babylonhx_utils_Keycodes.left = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.left);
com_babylonhx_utils_Keycodes.down = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.down);
com_babylonhx_utils_Keycodes.up = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.up);
com_babylonhx_utils_Keycodes.numlockclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.numlockclear);
com_babylonhx_utils_Keycodes.kp_divide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_divide);
com_babylonhx_utils_Keycodes.kp_multiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_multiply);
com_babylonhx_utils_Keycodes.kp_minus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_minus);
com_babylonhx_utils_Keycodes.kp_plus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plus);
com_babylonhx_utils_Keycodes.kp_enter = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_enter);
com_babylonhx_utils_Keycodes.kp_1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_1);
com_babylonhx_utils_Keycodes.kp_2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_2);
com_babylonhx_utils_Keycodes.kp_3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_3);
com_babylonhx_utils_Keycodes.kp_4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_4);
com_babylonhx_utils_Keycodes.kp_5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_5);
com_babylonhx_utils_Keycodes.kp_6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_6);
com_babylonhx_utils_Keycodes.kp_7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_7);
com_babylonhx_utils_Keycodes.kp_8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_8);
com_babylonhx_utils_Keycodes.kp_9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_9);
com_babylonhx_utils_Keycodes.kp_0 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_0);
com_babylonhx_utils_Keycodes.kp_period = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_period);
com_babylonhx_utils_Keycodes.application = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.application);
com_babylonhx_utils_Keycodes.power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.power);
com_babylonhx_utils_Keycodes.kp_equals = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equals);
com_babylonhx_utils_Keycodes.f13 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f13);
com_babylonhx_utils_Keycodes.f14 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f14);
com_babylonhx_utils_Keycodes.f15 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f15);
com_babylonhx_utils_Keycodes.f16 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f16);
com_babylonhx_utils_Keycodes.f17 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f17);
com_babylonhx_utils_Keycodes.f18 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f18);
com_babylonhx_utils_Keycodes.f19 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f19);
com_babylonhx_utils_Keycodes.f20 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f20);
com_babylonhx_utils_Keycodes.f21 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f21);
com_babylonhx_utils_Keycodes.f22 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f22);
com_babylonhx_utils_Keycodes.f23 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f23);
com_babylonhx_utils_Keycodes.f24 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f24);
com_babylonhx_utils_Keycodes.execute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.execute);
com_babylonhx_utils_Keycodes.help = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.help);
com_babylonhx_utils_Keycodes.menu = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.menu);
com_babylonhx_utils_Keycodes.select = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.select);
com_babylonhx_utils_Keycodes.stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.stop);
com_babylonhx_utils_Keycodes.again = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.again);
com_babylonhx_utils_Keycodes.undo = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.undo);
com_babylonhx_utils_Keycodes.cut = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cut);
com_babylonhx_utils_Keycodes.copy = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.copy);
com_babylonhx_utils_Keycodes.paste = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.paste);
com_babylonhx_utils_Keycodes.find = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.find);
com_babylonhx_utils_Keycodes.mute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mute);
com_babylonhx_utils_Keycodes.volumeup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumeup);
com_babylonhx_utils_Keycodes.volumedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumedown);
com_babylonhx_utils_Keycodes.kp_comma = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_comma);
com_babylonhx_utils_Keycodes.kp_equalsas400 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equalsas400);
com_babylonhx_utils_Keycodes.alterase = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.alterase);
com_babylonhx_utils_Keycodes.sysreq = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sysreq);
com_babylonhx_utils_Keycodes.cancel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cancel);
com_babylonhx_utils_Keycodes.clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clear);
com_babylonhx_utils_Keycodes.prior = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.prior);
com_babylonhx_utils_Keycodes.return2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.return2);
com_babylonhx_utils_Keycodes.separator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.separator);
com_babylonhx_utils_Keycodes.out = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.out);
com_babylonhx_utils_Keycodes.oper = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.oper);
com_babylonhx_utils_Keycodes.clearagain = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clearagain);
com_babylonhx_utils_Keycodes.crsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.crsel);
com_babylonhx_utils_Keycodes.exsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.exsel);
com_babylonhx_utils_Keycodes.kp_00 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_00);
com_babylonhx_utils_Keycodes.kp_000 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_000);
com_babylonhx_utils_Keycodes.thousandsseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.thousandsseparator);
com_babylonhx_utils_Keycodes.decimalseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.decimalseparator);
com_babylonhx_utils_Keycodes.currencyunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencyunit);
com_babylonhx_utils_Keycodes.currencysubunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencysubunit);
com_babylonhx_utils_Keycodes.kp_leftparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftparen);
com_babylonhx_utils_Keycodes.kp_rightparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightparen);
com_babylonhx_utils_Keycodes.kp_leftbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftbrace);
com_babylonhx_utils_Keycodes.kp_rightbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightbrace);
com_babylonhx_utils_Keycodes.kp_tab = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_tab);
com_babylonhx_utils_Keycodes.kp_backspace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_backspace);
com_babylonhx_utils_Keycodes.kp_a = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_a);
com_babylonhx_utils_Keycodes.kp_b = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_b);
com_babylonhx_utils_Keycodes.kp_c = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_c);
com_babylonhx_utils_Keycodes.kp_d = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_d);
com_babylonhx_utils_Keycodes.kp_e = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_e);
com_babylonhx_utils_Keycodes.kp_f = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_f);
com_babylonhx_utils_Keycodes.kp_xor = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_xor);
com_babylonhx_utils_Keycodes.kp_power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_power);
com_babylonhx_utils_Keycodes.kp_percent = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_percent);
com_babylonhx_utils_Keycodes.kp_less = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_less);
com_babylonhx_utils_Keycodes.kp_greater = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_greater);
com_babylonhx_utils_Keycodes.kp_ampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_ampersand);
com_babylonhx_utils_Keycodes.kp_dblampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblampersand);
com_babylonhx_utils_Keycodes.kp_verticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_verticalbar);
com_babylonhx_utils_Keycodes.kp_dblverticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblverticalbar);
com_babylonhx_utils_Keycodes.kp_colon = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_colon);
com_babylonhx_utils_Keycodes.kp_hash = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hash);
com_babylonhx_utils_Keycodes.kp_space = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_space);
com_babylonhx_utils_Keycodes.kp_at = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_at);
com_babylonhx_utils_Keycodes.kp_exclam = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_exclam);
com_babylonhx_utils_Keycodes.kp_memstore = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memstore);
com_babylonhx_utils_Keycodes.kp_memrecall = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memrecall);
com_babylonhx_utils_Keycodes.kp_memclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memclear);
com_babylonhx_utils_Keycodes.kp_memadd = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memadd);
com_babylonhx_utils_Keycodes.kp_memsubtract = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memsubtract);
com_babylonhx_utils_Keycodes.kp_memmultiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memmultiply);
com_babylonhx_utils_Keycodes.kp_memdivide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memdivide);
com_babylonhx_utils_Keycodes.kp_plusminus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plusminus);
com_babylonhx_utils_Keycodes.kp_clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clear);
com_babylonhx_utils_Keycodes.kp_clearentry = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clearentry);
com_babylonhx_utils_Keycodes.kp_binary = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_binary);
com_babylonhx_utils_Keycodes.kp_octal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_octal);
com_babylonhx_utils_Keycodes.kp_decimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_decimal);
com_babylonhx_utils_Keycodes.kp_hexadecimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hexadecimal);
com_babylonhx_utils_Keycodes.lctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lctrl);
com_babylonhx_utils_Keycodes.lshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lshift);
com_babylonhx_utils_Keycodes.lalt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lalt);
com_babylonhx_utils_Keycodes.lmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lmeta);
com_babylonhx_utils_Keycodes.rctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rctrl);
com_babylonhx_utils_Keycodes.rshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rshift);
com_babylonhx_utils_Keycodes.ralt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ralt);
com_babylonhx_utils_Keycodes.rmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rmeta);
com_babylonhx_utils_Keycodes.mode = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mode);
com_babylonhx_utils_Keycodes.audionext = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audionext);
com_babylonhx_utils_Keycodes.audioprev = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioprev);
com_babylonhx_utils_Keycodes.audiostop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiostop);
com_babylonhx_utils_Keycodes.audioplay = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioplay);
com_babylonhx_utils_Keycodes.audiomute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiomute);
com_babylonhx_utils_Keycodes.mediaselect = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mediaselect);
com_babylonhx_utils_Keycodes.www = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.www);
com_babylonhx_utils_Keycodes.mail = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mail);
com_babylonhx_utils_Keycodes.calculator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.calculator);
com_babylonhx_utils_Keycodes.computer = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.computer);
com_babylonhx_utils_Keycodes.ac_search = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_search);
com_babylonhx_utils_Keycodes.ac_home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_home);
com_babylonhx_utils_Keycodes.ac_back = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_back);
com_babylonhx_utils_Keycodes.ac_forward = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_forward);
com_babylonhx_utils_Keycodes.ac_stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_stop);
com_babylonhx_utils_Keycodes.ac_refresh = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_refresh);
com_babylonhx_utils_Keycodes.ac_bookmarks = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_bookmarks);
com_babylonhx_utils_Keycodes.brightnessdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessdown);
com_babylonhx_utils_Keycodes.brightnessup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessup);
com_babylonhx_utils_Keycodes.displayswitch = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.displayswitch);
com_babylonhx_utils_Keycodes.kbdillumtoggle = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumtoggle);
com_babylonhx_utils_Keycodes.kbdillumdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumdown);
com_babylonhx_utils_Keycodes.kbdillumup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumup);
com_babylonhx_utils_Keycodes.eject = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.eject);
com_babylonhx_utils_Keycodes.sleep = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sleep);
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
oimohx_physics_collision_broadphase_BroadPhase.BROAD_PHASE_BRUTE_FORCE = 1;
oimohx_physics_collision_broadphase_BroadPhase.BROAD_PHASE_SWEEP_AND_PRUNE = 2;
oimohx_physics_collision_broadphase_BroadPhase.BROAD_PHASE_DYNAMIC_BOUNDING_VOLUME_TREE = 3;
oimohx_physics_collision_shape_Shape.nextID = 0;
oimohx_physics_collision_shape_Shape.SHAPE_SPHERE = 1;
oimohx_physics_collision_shape_Shape.SHAPE_BOX = 2;
oimohx_physics_constraint_joint_Joint.JOINT_DISTANCE = 1;
oimohx_physics_constraint_joint_Joint.JOINT_BALL_AND_SOCKET = 2;
oimohx_physics_constraint_joint_Joint.JOINT_HINGE = 3;
oimohx_physics_constraint_joint_Joint.JOINT_WHEEL = 4;
oimohx_physics_constraint_joint_Joint.JOINT_SLIDER = 5;
oimohx_physics_constraint_joint_Joint.JOINT_PRISMATIC = 6;
oimohx_physics_dynamics_RigidBody.BODY_DYNAMIC = 1;
oimohx_physics_dynamics_RigidBody.BODY_STATIC = 2;
oimohx_physics_dynamics_RigidBody.MAX_SHAPES = 64;
oimohx_physics_dynamics_World.TO_RAD = Math.PI / 180;
oimohx_physics_dynamics_World.WORLD_SCALE = 100;
oimohx_physics_dynamics_World.INV_SCALE = 0.01;
oimohx_physics_dynamics_World.gravityX = 0;
oimohx_physics_dynamics_World.gravityY = 0;
oimohx_physics_dynamics_World.gravityZ = -9.8;
snow_api_Debug._level = 1;
snow_api_Debug._log_width = 16;
snow_api_Promises.calls = [];
snow_api_Promises.defers = [];
snow_api_Timer.running_timers = [];
snow_core_web_assets_Assets.POT = true;
snow_core_web_input_DOMKeys.dom_shift = 16;
snow_core_web_input_DOMKeys.dom_ctrl = 17;
snow_core_web_input_DOMKeys.dom_alt = 18;
snow_core_web_input_DOMKeys.dom_capslock = 20;
snow_core_web_input_DOMKeys.dom_pageup = 33;
snow_core_web_input_DOMKeys.dom_pagedown = 34;
snow_core_web_input_DOMKeys.dom_end = 35;
snow_core_web_input_DOMKeys.dom_home = 36;
snow_core_web_input_DOMKeys.dom_left = 37;
snow_core_web_input_DOMKeys.dom_up = 38;
snow_core_web_input_DOMKeys.dom_right = 39;
snow_core_web_input_DOMKeys.dom_down = 40;
snow_core_web_input_DOMKeys.dom_printscr = 44;
snow_core_web_input_DOMKeys.dom_insert = 45;
snow_core_web_input_DOMKeys.dom_delete = 46;
snow_core_web_input_DOMKeys.dom_lmeta = 91;
snow_core_web_input_DOMKeys.dom_rmeta = 93;
snow_core_web_input_DOMKeys.dom_kp_0 = 96;
snow_core_web_input_DOMKeys.dom_kp_1 = 97;
snow_core_web_input_DOMKeys.dom_kp_2 = 98;
snow_core_web_input_DOMKeys.dom_kp_3 = 99;
snow_core_web_input_DOMKeys.dom_kp_4 = 100;
snow_core_web_input_DOMKeys.dom_kp_5 = 101;
snow_core_web_input_DOMKeys.dom_kp_6 = 102;
snow_core_web_input_DOMKeys.dom_kp_7 = 103;
snow_core_web_input_DOMKeys.dom_kp_8 = 104;
snow_core_web_input_DOMKeys.dom_kp_9 = 105;
snow_core_web_input_DOMKeys.dom_kp_multiply = 106;
snow_core_web_input_DOMKeys.dom_kp_plus = 107;
snow_core_web_input_DOMKeys.dom_kp_minus = 109;
snow_core_web_input_DOMKeys.dom_kp_decimal = 110;
snow_core_web_input_DOMKeys.dom_kp_divide = 111;
snow_core_web_input_DOMKeys.dom_kp_numlock = 144;
snow_core_web_input_DOMKeys.dom_f1 = 112;
snow_core_web_input_DOMKeys.dom_f2 = 113;
snow_core_web_input_DOMKeys.dom_f3 = 114;
snow_core_web_input_DOMKeys.dom_f4 = 115;
snow_core_web_input_DOMKeys.dom_f5 = 116;
snow_core_web_input_DOMKeys.dom_f6 = 117;
snow_core_web_input_DOMKeys.dom_f7 = 118;
snow_core_web_input_DOMKeys.dom_f8 = 119;
snow_core_web_input_DOMKeys.dom_f9 = 120;
snow_core_web_input_DOMKeys.dom_f10 = 121;
snow_core_web_input_DOMKeys.dom_f11 = 122;
snow_core_web_input_DOMKeys.dom_f12 = 123;
snow_core_web_input_DOMKeys.dom_f13 = 124;
snow_core_web_input_DOMKeys.dom_f14 = 125;
snow_core_web_input_DOMKeys.dom_f15 = 126;
snow_core_web_input_DOMKeys.dom_f16 = 127;
snow_core_web_input_DOMKeys.dom_f17 = 128;
snow_core_web_input_DOMKeys.dom_f18 = 129;
snow_core_web_input_DOMKeys.dom_f19 = 130;
snow_core_web_input_DOMKeys.dom_f20 = 131;
snow_core_web_input_DOMKeys.dom_f21 = 132;
snow_core_web_input_DOMKeys.dom_f22 = 133;
snow_core_web_input_DOMKeys.dom_f23 = 134;
snow_core_web_input_DOMKeys.dom_f24 = 135;
snow_core_web_input_DOMKeys.dom_caret = 160;
snow_core_web_input_DOMKeys.dom_exclaim = 161;
snow_core_web_input_DOMKeys.dom_quotedbl = 162;
snow_core_web_input_DOMKeys.dom_hash = 163;
snow_core_web_input_DOMKeys.dom_dollar = 164;
snow_core_web_input_DOMKeys.dom_percent = 165;
snow_core_web_input_DOMKeys.dom_ampersand = 166;
snow_core_web_input_DOMKeys.dom_underscore = 167;
snow_core_web_input_DOMKeys.dom_leftparen = 168;
snow_core_web_input_DOMKeys.dom_rightparen = 169;
snow_core_web_input_DOMKeys.dom_asterisk = 170;
snow_core_web_input_DOMKeys.dom_plus = 171;
snow_core_web_input_DOMKeys.dom_pipe = 172;
snow_core_web_input_DOMKeys.dom_minus = 173;
snow_core_web_input_DOMKeys.dom_leftbrace = 174;
snow_core_web_input_DOMKeys.dom_rightbrace = 175;
snow_core_web_input_DOMKeys.dom_tilde = 176;
snow_core_web_input_DOMKeys.dom_audiomute = 181;
snow_core_web_input_DOMKeys.dom_volumedown = 182;
snow_core_web_input_DOMKeys.dom_volumeup = 183;
snow_core_web_input_DOMKeys.dom_comma = 188;
snow_core_web_input_DOMKeys.dom_period = 190;
snow_core_web_input_DOMKeys.dom_slash = 191;
snow_core_web_input_DOMKeys.dom_backquote = 192;
snow_core_web_input_DOMKeys.dom_leftbracket = 219;
snow_core_web_input_DOMKeys.dom_rightbracket = 221;
snow_core_web_input_DOMKeys.dom_backslash = 220;
snow_core_web_input_DOMKeys.dom_quote = 222;
snow_core_web_input_DOMKeys.dom_meta = 224;
snow_system_input_Scancodes.MASK = 1073741824;
snow_system_input_Scancodes.unknown = 0;
snow_system_input_Scancodes.key_a = 4;
snow_system_input_Scancodes.key_b = 5;
snow_system_input_Scancodes.key_c = 6;
snow_system_input_Scancodes.key_d = 7;
snow_system_input_Scancodes.key_e = 8;
snow_system_input_Scancodes.key_f = 9;
snow_system_input_Scancodes.key_g = 10;
snow_system_input_Scancodes.key_h = 11;
snow_system_input_Scancodes.key_i = 12;
snow_system_input_Scancodes.key_j = 13;
snow_system_input_Scancodes.key_k = 14;
snow_system_input_Scancodes.key_l = 15;
snow_system_input_Scancodes.key_m = 16;
snow_system_input_Scancodes.key_n = 17;
snow_system_input_Scancodes.key_o = 18;
snow_system_input_Scancodes.key_p = 19;
snow_system_input_Scancodes.key_q = 20;
snow_system_input_Scancodes.key_r = 21;
snow_system_input_Scancodes.key_s = 22;
snow_system_input_Scancodes.key_t = 23;
snow_system_input_Scancodes.key_u = 24;
snow_system_input_Scancodes.key_v = 25;
snow_system_input_Scancodes.key_w = 26;
snow_system_input_Scancodes.key_x = 27;
snow_system_input_Scancodes.key_y = 28;
snow_system_input_Scancodes.key_z = 29;
snow_system_input_Scancodes.key_1 = 30;
snow_system_input_Scancodes.key_2 = 31;
snow_system_input_Scancodes.key_3 = 32;
snow_system_input_Scancodes.key_4 = 33;
snow_system_input_Scancodes.key_5 = 34;
snow_system_input_Scancodes.key_6 = 35;
snow_system_input_Scancodes.key_7 = 36;
snow_system_input_Scancodes.key_8 = 37;
snow_system_input_Scancodes.key_9 = 38;
snow_system_input_Scancodes.key_0 = 39;
snow_system_input_Scancodes.enter = 40;
snow_system_input_Scancodes.escape = 41;
snow_system_input_Scancodes.backspace = 42;
snow_system_input_Scancodes.tab = 43;
snow_system_input_Scancodes.space = 44;
snow_system_input_Scancodes.minus = 45;
snow_system_input_Scancodes.equals = 46;
snow_system_input_Scancodes.leftbracket = 47;
snow_system_input_Scancodes.rightbracket = 48;
snow_system_input_Scancodes.backslash = 49;
snow_system_input_Scancodes.nonushash = 50;
snow_system_input_Scancodes.semicolon = 51;
snow_system_input_Scancodes.apostrophe = 52;
snow_system_input_Scancodes.grave = 53;
snow_system_input_Scancodes.comma = 54;
snow_system_input_Scancodes.period = 55;
snow_system_input_Scancodes.slash = 56;
snow_system_input_Scancodes.capslock = 57;
snow_system_input_Scancodes.f1 = 58;
snow_system_input_Scancodes.f2 = 59;
snow_system_input_Scancodes.f3 = 60;
snow_system_input_Scancodes.f4 = 61;
snow_system_input_Scancodes.f5 = 62;
snow_system_input_Scancodes.f6 = 63;
snow_system_input_Scancodes.f7 = 64;
snow_system_input_Scancodes.f8 = 65;
snow_system_input_Scancodes.f9 = 66;
snow_system_input_Scancodes.f10 = 67;
snow_system_input_Scancodes.f11 = 68;
snow_system_input_Scancodes.f12 = 69;
snow_system_input_Scancodes.printscreen = 70;
snow_system_input_Scancodes.scrolllock = 71;
snow_system_input_Scancodes.pause = 72;
snow_system_input_Scancodes.insert = 73;
snow_system_input_Scancodes.home = 74;
snow_system_input_Scancodes.pageup = 75;
snow_system_input_Scancodes["delete"] = 76;
snow_system_input_Scancodes.end = 77;
snow_system_input_Scancodes.pagedown = 78;
snow_system_input_Scancodes.right = 79;
snow_system_input_Scancodes.left = 80;
snow_system_input_Scancodes.down = 81;
snow_system_input_Scancodes.up = 82;
snow_system_input_Scancodes.numlockclear = 83;
snow_system_input_Scancodes.kp_divide = 84;
snow_system_input_Scancodes.kp_multiply = 85;
snow_system_input_Scancodes.kp_minus = 86;
snow_system_input_Scancodes.kp_plus = 87;
snow_system_input_Scancodes.kp_enter = 88;
snow_system_input_Scancodes.kp_1 = 89;
snow_system_input_Scancodes.kp_2 = 90;
snow_system_input_Scancodes.kp_3 = 91;
snow_system_input_Scancodes.kp_4 = 92;
snow_system_input_Scancodes.kp_5 = 93;
snow_system_input_Scancodes.kp_6 = 94;
snow_system_input_Scancodes.kp_7 = 95;
snow_system_input_Scancodes.kp_8 = 96;
snow_system_input_Scancodes.kp_9 = 97;
snow_system_input_Scancodes.kp_0 = 98;
snow_system_input_Scancodes.kp_period = 99;
snow_system_input_Scancodes.nonusbackslash = 100;
snow_system_input_Scancodes.application = 101;
snow_system_input_Scancodes.power = 102;
snow_system_input_Scancodes.kp_equals = 103;
snow_system_input_Scancodes.f13 = 104;
snow_system_input_Scancodes.f14 = 105;
snow_system_input_Scancodes.f15 = 106;
snow_system_input_Scancodes.f16 = 107;
snow_system_input_Scancodes.f17 = 108;
snow_system_input_Scancodes.f18 = 109;
snow_system_input_Scancodes.f19 = 110;
snow_system_input_Scancodes.f20 = 111;
snow_system_input_Scancodes.f21 = 112;
snow_system_input_Scancodes.f22 = 113;
snow_system_input_Scancodes.f23 = 114;
snow_system_input_Scancodes.f24 = 115;
snow_system_input_Scancodes.execute = 116;
snow_system_input_Scancodes.help = 117;
snow_system_input_Scancodes.menu = 118;
snow_system_input_Scancodes.select = 119;
snow_system_input_Scancodes.stop = 120;
snow_system_input_Scancodes.again = 121;
snow_system_input_Scancodes.undo = 122;
snow_system_input_Scancodes.cut = 123;
snow_system_input_Scancodes.copy = 124;
snow_system_input_Scancodes.paste = 125;
snow_system_input_Scancodes.find = 126;
snow_system_input_Scancodes.mute = 127;
snow_system_input_Scancodes.volumeup = 128;
snow_system_input_Scancodes.volumedown = 129;
snow_system_input_Scancodes.kp_comma = 133;
snow_system_input_Scancodes.kp_equalsas400 = 134;
snow_system_input_Scancodes.international1 = 135;
snow_system_input_Scancodes.international2 = 136;
snow_system_input_Scancodes.international3 = 137;
snow_system_input_Scancodes.international4 = 138;
snow_system_input_Scancodes.international5 = 139;
snow_system_input_Scancodes.international6 = 140;
snow_system_input_Scancodes.international7 = 141;
snow_system_input_Scancodes.international8 = 142;
snow_system_input_Scancodes.international9 = 143;
snow_system_input_Scancodes.lang1 = 144;
snow_system_input_Scancodes.lang2 = 145;
snow_system_input_Scancodes.lang3 = 146;
snow_system_input_Scancodes.lang4 = 147;
snow_system_input_Scancodes.lang5 = 148;
snow_system_input_Scancodes.lang6 = 149;
snow_system_input_Scancodes.lang7 = 150;
snow_system_input_Scancodes.lang8 = 151;
snow_system_input_Scancodes.lang9 = 152;
snow_system_input_Scancodes.alterase = 153;
snow_system_input_Scancodes.sysreq = 154;
snow_system_input_Scancodes.cancel = 155;
snow_system_input_Scancodes.clear = 156;
snow_system_input_Scancodes.prior = 157;
snow_system_input_Scancodes.return2 = 158;
snow_system_input_Scancodes.separator = 159;
snow_system_input_Scancodes.out = 160;
snow_system_input_Scancodes.oper = 161;
snow_system_input_Scancodes.clearagain = 162;
snow_system_input_Scancodes.crsel = 163;
snow_system_input_Scancodes.exsel = 164;
snow_system_input_Scancodes.kp_00 = 176;
snow_system_input_Scancodes.kp_000 = 177;
snow_system_input_Scancodes.thousandsseparator = 178;
snow_system_input_Scancodes.decimalseparator = 179;
snow_system_input_Scancodes.currencyunit = 180;
snow_system_input_Scancodes.currencysubunit = 181;
snow_system_input_Scancodes.kp_leftparen = 182;
snow_system_input_Scancodes.kp_rightparen = 183;
snow_system_input_Scancodes.kp_leftbrace = 184;
snow_system_input_Scancodes.kp_rightbrace = 185;
snow_system_input_Scancodes.kp_tab = 186;
snow_system_input_Scancodes.kp_backspace = 187;
snow_system_input_Scancodes.kp_a = 188;
snow_system_input_Scancodes.kp_b = 189;
snow_system_input_Scancodes.kp_c = 190;
snow_system_input_Scancodes.kp_d = 191;
snow_system_input_Scancodes.kp_e = 192;
snow_system_input_Scancodes.kp_f = 193;
snow_system_input_Scancodes.kp_xor = 194;
snow_system_input_Scancodes.kp_power = 195;
snow_system_input_Scancodes.kp_percent = 196;
snow_system_input_Scancodes.kp_less = 197;
snow_system_input_Scancodes.kp_greater = 198;
snow_system_input_Scancodes.kp_ampersand = 199;
snow_system_input_Scancodes.kp_dblampersand = 200;
snow_system_input_Scancodes.kp_verticalbar = 201;
snow_system_input_Scancodes.kp_dblverticalbar = 202;
snow_system_input_Scancodes.kp_colon = 203;
snow_system_input_Scancodes.kp_hash = 204;
snow_system_input_Scancodes.kp_space = 205;
snow_system_input_Scancodes.kp_at = 206;
snow_system_input_Scancodes.kp_exclam = 207;
snow_system_input_Scancodes.kp_memstore = 208;
snow_system_input_Scancodes.kp_memrecall = 209;
snow_system_input_Scancodes.kp_memclear = 210;
snow_system_input_Scancodes.kp_memadd = 211;
snow_system_input_Scancodes.kp_memsubtract = 212;
snow_system_input_Scancodes.kp_memmultiply = 213;
snow_system_input_Scancodes.kp_memdivide = 214;
snow_system_input_Scancodes.kp_plusminus = 215;
snow_system_input_Scancodes.kp_clear = 216;
snow_system_input_Scancodes.kp_clearentry = 217;
snow_system_input_Scancodes.kp_binary = 218;
snow_system_input_Scancodes.kp_octal = 219;
snow_system_input_Scancodes.kp_decimal = 220;
snow_system_input_Scancodes.kp_hexadecimal = 221;
snow_system_input_Scancodes.lctrl = 224;
snow_system_input_Scancodes.lshift = 225;
snow_system_input_Scancodes.lalt = 226;
snow_system_input_Scancodes.lmeta = 227;
snow_system_input_Scancodes.rctrl = 228;
snow_system_input_Scancodes.rshift = 229;
snow_system_input_Scancodes.ralt = 230;
snow_system_input_Scancodes.rmeta = 231;
snow_system_input_Scancodes.mode = 257;
snow_system_input_Scancodes.audionext = 258;
snow_system_input_Scancodes.audioprev = 259;
snow_system_input_Scancodes.audiostop = 260;
snow_system_input_Scancodes.audioplay = 261;
snow_system_input_Scancodes.audiomute = 262;
snow_system_input_Scancodes.mediaselect = 263;
snow_system_input_Scancodes.www = 264;
snow_system_input_Scancodes.mail = 265;
snow_system_input_Scancodes.calculator = 266;
snow_system_input_Scancodes.computer = 267;
snow_system_input_Scancodes.ac_search = 268;
snow_system_input_Scancodes.ac_home = 269;
snow_system_input_Scancodes.ac_back = 270;
snow_system_input_Scancodes.ac_forward = 271;
snow_system_input_Scancodes.ac_stop = 272;
snow_system_input_Scancodes.ac_refresh = 273;
snow_system_input_Scancodes.ac_bookmarks = 274;
snow_system_input_Scancodes.brightnessdown = 275;
snow_system_input_Scancodes.brightnessup = 276;
snow_system_input_Scancodes.displayswitch = 277;
snow_system_input_Scancodes.kbdillumtoggle = 278;
snow_system_input_Scancodes.kbdillumdown = 279;
snow_system_input_Scancodes.kbdillumup = 280;
snow_system_input_Scancodes.eject = 281;
snow_system_input_Scancodes.sleep = 282;
snow_system_input_Scancodes.app1 = 283;
snow_system_input_Scancodes.app2 = 284;
snow_system_input_Scancodes.scancode_names = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
snow_system_input_Keycodes.unknown = 0;
snow_system_input_Keycodes.enter = 13;
snow_system_input_Keycodes.escape = 27;
snow_system_input_Keycodes.backspace = 8;
snow_system_input_Keycodes.tab = 9;
snow_system_input_Keycodes.space = 32;
snow_system_input_Keycodes.exclaim = 33;
snow_system_input_Keycodes.quotedbl = 34;
snow_system_input_Keycodes.hash = 35;
snow_system_input_Keycodes.percent = 37;
snow_system_input_Keycodes.dollar = 36;
snow_system_input_Keycodes.ampersand = 38;
snow_system_input_Keycodes.quote = 39;
snow_system_input_Keycodes.leftparen = 40;
snow_system_input_Keycodes.rightparen = 41;
snow_system_input_Keycodes.asterisk = 42;
snow_system_input_Keycodes.plus = 43;
snow_system_input_Keycodes.comma = 44;
snow_system_input_Keycodes.minus = 45;
snow_system_input_Keycodes.period = 46;
snow_system_input_Keycodes.slash = 47;
snow_system_input_Keycodes.key_0 = 48;
snow_system_input_Keycodes.key_1 = 49;
snow_system_input_Keycodes.key_2 = 50;
snow_system_input_Keycodes.key_3 = 51;
snow_system_input_Keycodes.key_4 = 52;
snow_system_input_Keycodes.key_5 = 53;
snow_system_input_Keycodes.key_6 = 54;
snow_system_input_Keycodes.key_7 = 55;
snow_system_input_Keycodes.key_8 = 56;
snow_system_input_Keycodes.key_9 = 57;
snow_system_input_Keycodes.colon = 58;
snow_system_input_Keycodes.semicolon = 59;
snow_system_input_Keycodes.less = 60;
snow_system_input_Keycodes.equals = 61;
snow_system_input_Keycodes.greater = 62;
snow_system_input_Keycodes.question = 63;
snow_system_input_Keycodes.at = 64;
snow_system_input_Keycodes.leftbracket = 91;
snow_system_input_Keycodes.backslash = 92;
snow_system_input_Keycodes.rightbracket = 93;
snow_system_input_Keycodes.caret = 94;
snow_system_input_Keycodes.underscore = 95;
snow_system_input_Keycodes.backquote = 96;
snow_system_input_Keycodes.key_a = 97;
snow_system_input_Keycodes.key_b = 98;
snow_system_input_Keycodes.key_c = 99;
snow_system_input_Keycodes.key_d = 100;
snow_system_input_Keycodes.key_e = 101;
snow_system_input_Keycodes.key_f = 102;
snow_system_input_Keycodes.key_g = 103;
snow_system_input_Keycodes.key_h = 104;
snow_system_input_Keycodes.key_i = 105;
snow_system_input_Keycodes.key_j = 106;
snow_system_input_Keycodes.key_k = 107;
snow_system_input_Keycodes.key_l = 108;
snow_system_input_Keycodes.key_m = 109;
snow_system_input_Keycodes.key_n = 110;
snow_system_input_Keycodes.key_o = 111;
snow_system_input_Keycodes.key_p = 112;
snow_system_input_Keycodes.key_q = 113;
snow_system_input_Keycodes.key_r = 114;
snow_system_input_Keycodes.key_s = 115;
snow_system_input_Keycodes.key_t = 116;
snow_system_input_Keycodes.key_u = 117;
snow_system_input_Keycodes.key_v = 118;
snow_system_input_Keycodes.key_w = 119;
snow_system_input_Keycodes.key_x = 120;
snow_system_input_Keycodes.key_y = 121;
snow_system_input_Keycodes.key_z = 122;
snow_system_input_Keycodes.capslock = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.capslock);
snow_system_input_Keycodes.f1 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f1);
snow_system_input_Keycodes.f2 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f2);
snow_system_input_Keycodes.f3 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f3);
snow_system_input_Keycodes.f4 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f4);
snow_system_input_Keycodes.f5 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f5);
snow_system_input_Keycodes.f6 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f6);
snow_system_input_Keycodes.f7 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f7);
snow_system_input_Keycodes.f8 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f8);
snow_system_input_Keycodes.f9 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f9);
snow_system_input_Keycodes.f10 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f10);
snow_system_input_Keycodes.f11 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f11);
snow_system_input_Keycodes.f12 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f12);
snow_system_input_Keycodes.printscreen = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.printscreen);
snow_system_input_Keycodes.scrolllock = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.scrolllock);
snow_system_input_Keycodes.pause = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.pause);
snow_system_input_Keycodes.insert = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.insert);
snow_system_input_Keycodes.home = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.home);
snow_system_input_Keycodes.pageup = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.pageup);
snow_system_input_Keycodes["delete"] = 127;
snow_system_input_Keycodes.end = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.end);
snow_system_input_Keycodes.pagedown = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.pagedown);
snow_system_input_Keycodes.right = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.right);
snow_system_input_Keycodes.left = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.left);
snow_system_input_Keycodes.down = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.down);
snow_system_input_Keycodes.up = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.up);
snow_system_input_Keycodes.numlockclear = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.numlockclear);
snow_system_input_Keycodes.kp_divide = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_divide);
snow_system_input_Keycodes.kp_multiply = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_multiply);
snow_system_input_Keycodes.kp_minus = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_minus);
snow_system_input_Keycodes.kp_plus = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_plus);
snow_system_input_Keycodes.kp_enter = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_enter);
snow_system_input_Keycodes.kp_1 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_1);
snow_system_input_Keycodes.kp_2 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_2);
snow_system_input_Keycodes.kp_3 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_3);
snow_system_input_Keycodes.kp_4 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_4);
snow_system_input_Keycodes.kp_5 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_5);
snow_system_input_Keycodes.kp_6 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_6);
snow_system_input_Keycodes.kp_7 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_7);
snow_system_input_Keycodes.kp_8 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_8);
snow_system_input_Keycodes.kp_9 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_9);
snow_system_input_Keycodes.kp_0 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_0);
snow_system_input_Keycodes.kp_period = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_period);
snow_system_input_Keycodes.application = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.application);
snow_system_input_Keycodes.power = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.power);
snow_system_input_Keycodes.kp_equals = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_equals);
snow_system_input_Keycodes.f13 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f13);
snow_system_input_Keycodes.f14 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f14);
snow_system_input_Keycodes.f15 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f15);
snow_system_input_Keycodes.f16 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f16);
snow_system_input_Keycodes.f17 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f17);
snow_system_input_Keycodes.f18 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f18);
snow_system_input_Keycodes.f19 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f19);
snow_system_input_Keycodes.f20 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f20);
snow_system_input_Keycodes.f21 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f21);
snow_system_input_Keycodes.f22 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f22);
snow_system_input_Keycodes.f23 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f23);
snow_system_input_Keycodes.f24 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.f24);
snow_system_input_Keycodes.execute = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.execute);
snow_system_input_Keycodes.help = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.help);
snow_system_input_Keycodes.menu = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.menu);
snow_system_input_Keycodes.select = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.select);
snow_system_input_Keycodes.stop = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.stop);
snow_system_input_Keycodes.again = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.again);
snow_system_input_Keycodes.undo = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.undo);
snow_system_input_Keycodes.cut = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.cut);
snow_system_input_Keycodes.copy = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.copy);
snow_system_input_Keycodes.paste = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.paste);
snow_system_input_Keycodes.find = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.find);
snow_system_input_Keycodes.mute = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.mute);
snow_system_input_Keycodes.volumeup = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.volumeup);
snow_system_input_Keycodes.volumedown = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.volumedown);
snow_system_input_Keycodes.kp_comma = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_comma);
snow_system_input_Keycodes.kp_equalsas400 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_equalsas400);
snow_system_input_Keycodes.alterase = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.alterase);
snow_system_input_Keycodes.sysreq = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.sysreq);
snow_system_input_Keycodes.cancel = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.cancel);
snow_system_input_Keycodes.clear = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.clear);
snow_system_input_Keycodes.prior = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.prior);
snow_system_input_Keycodes.return2 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.return2);
snow_system_input_Keycodes.separator = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.separator);
snow_system_input_Keycodes.out = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.out);
snow_system_input_Keycodes.oper = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.oper);
snow_system_input_Keycodes.clearagain = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.clearagain);
snow_system_input_Keycodes.crsel = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.crsel);
snow_system_input_Keycodes.exsel = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.exsel);
snow_system_input_Keycodes.kp_00 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_00);
snow_system_input_Keycodes.kp_000 = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_000);
snow_system_input_Keycodes.thousandsseparator = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.thousandsseparator);
snow_system_input_Keycodes.decimalseparator = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.decimalseparator);
snow_system_input_Keycodes.currencyunit = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.currencyunit);
snow_system_input_Keycodes.currencysubunit = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.currencysubunit);
snow_system_input_Keycodes.kp_leftparen = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_leftparen);
snow_system_input_Keycodes.kp_rightparen = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_rightparen);
snow_system_input_Keycodes.kp_leftbrace = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_leftbrace);
snow_system_input_Keycodes.kp_rightbrace = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_rightbrace);
snow_system_input_Keycodes.kp_tab = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_tab);
snow_system_input_Keycodes.kp_backspace = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_backspace);
snow_system_input_Keycodes.kp_a = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_a);
snow_system_input_Keycodes.kp_b = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_b);
snow_system_input_Keycodes.kp_c = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_c);
snow_system_input_Keycodes.kp_d = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_d);
snow_system_input_Keycodes.kp_e = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_e);
snow_system_input_Keycodes.kp_f = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_f);
snow_system_input_Keycodes.kp_xor = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_xor);
snow_system_input_Keycodes.kp_power = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_power);
snow_system_input_Keycodes.kp_percent = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_percent);
snow_system_input_Keycodes.kp_less = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_less);
snow_system_input_Keycodes.kp_greater = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_greater);
snow_system_input_Keycodes.kp_ampersand = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_ampersand);
snow_system_input_Keycodes.kp_dblampersand = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_dblampersand);
snow_system_input_Keycodes.kp_verticalbar = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_verticalbar);
snow_system_input_Keycodes.kp_dblverticalbar = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_dblverticalbar);
snow_system_input_Keycodes.kp_colon = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_colon);
snow_system_input_Keycodes.kp_hash = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_hash);
snow_system_input_Keycodes.kp_space = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_space);
snow_system_input_Keycodes.kp_at = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_at);
snow_system_input_Keycodes.kp_exclam = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_exclam);
snow_system_input_Keycodes.kp_memstore = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memstore);
snow_system_input_Keycodes.kp_memrecall = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memrecall);
snow_system_input_Keycodes.kp_memclear = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memclear);
snow_system_input_Keycodes.kp_memadd = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memadd);
snow_system_input_Keycodes.kp_memsubtract = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memsubtract);
snow_system_input_Keycodes.kp_memmultiply = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memmultiply);
snow_system_input_Keycodes.kp_memdivide = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_memdivide);
snow_system_input_Keycodes.kp_plusminus = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_plusminus);
snow_system_input_Keycodes.kp_clear = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_clear);
snow_system_input_Keycodes.kp_clearentry = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_clearentry);
snow_system_input_Keycodes.kp_binary = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_binary);
snow_system_input_Keycodes.kp_octal = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_octal);
snow_system_input_Keycodes.kp_decimal = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_decimal);
snow_system_input_Keycodes.kp_hexadecimal = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kp_hexadecimal);
snow_system_input_Keycodes.lctrl = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.lctrl);
snow_system_input_Keycodes.lshift = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.lshift);
snow_system_input_Keycodes.lalt = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.lalt);
snow_system_input_Keycodes.lmeta = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.lmeta);
snow_system_input_Keycodes.rctrl = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.rctrl);
snow_system_input_Keycodes.rshift = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.rshift);
snow_system_input_Keycodes.ralt = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ralt);
snow_system_input_Keycodes.rmeta = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.rmeta);
snow_system_input_Keycodes.mode = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.mode);
snow_system_input_Keycodes.audionext = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.audionext);
snow_system_input_Keycodes.audioprev = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.audioprev);
snow_system_input_Keycodes.audiostop = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.audiostop);
snow_system_input_Keycodes.audioplay = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.audioplay);
snow_system_input_Keycodes.audiomute = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.audiomute);
snow_system_input_Keycodes.mediaselect = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.mediaselect);
snow_system_input_Keycodes.www = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.www);
snow_system_input_Keycodes.mail = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.mail);
snow_system_input_Keycodes.calculator = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.calculator);
snow_system_input_Keycodes.computer = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.computer);
snow_system_input_Keycodes.ac_search = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_search);
snow_system_input_Keycodes.ac_home = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_home);
snow_system_input_Keycodes.ac_back = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_back);
snow_system_input_Keycodes.ac_forward = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_forward);
snow_system_input_Keycodes.ac_stop = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_stop);
snow_system_input_Keycodes.ac_refresh = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_refresh);
snow_system_input_Keycodes.ac_bookmarks = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.ac_bookmarks);
snow_system_input_Keycodes.brightnessdown = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.brightnessdown);
snow_system_input_Keycodes.brightnessup = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.brightnessup);
snow_system_input_Keycodes.displayswitch = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.displayswitch);
snow_system_input_Keycodes.kbdillumtoggle = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kbdillumtoggle);
snow_system_input_Keycodes.kbdillumdown = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kbdillumdown);
snow_system_input_Keycodes.kbdillumup = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.kbdillumup);
snow_system_input_Keycodes.eject = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.eject);
snow_system_input_Keycodes.sleep = snow_system_input_Keycodes.from_scan(snow_system_input_Scancodes.sleep);
snow_core_web_input_Input._keypress_blacklist = [snow_system_input_Keycodes.backspace,snow_system_input_Keycodes.enter];
snow_modules_opengl_web_GL.DEPTH_BUFFER_BIT = 256;
snow_modules_opengl_web_GL.STENCIL_BUFFER_BIT = 1024;
snow_modules_opengl_web_GL.COLOR_BUFFER_BIT = 16384;
snow_modules_opengl_web_GL.POINTS = 0;
snow_modules_opengl_web_GL.LINES = 1;
snow_modules_opengl_web_GL.LINE_LOOP = 2;
snow_modules_opengl_web_GL.LINE_STRIP = 3;
snow_modules_opengl_web_GL.TRIANGLES = 4;
snow_modules_opengl_web_GL.TRIANGLE_STRIP = 5;
snow_modules_opengl_web_GL.TRIANGLE_FAN = 6;
snow_modules_opengl_web_GL.ZERO = 0;
snow_modules_opengl_web_GL.ONE = 1;
snow_modules_opengl_web_GL.SRC_COLOR = 768;
snow_modules_opengl_web_GL.ONE_MINUS_SRC_COLOR = 769;
snow_modules_opengl_web_GL.SRC_ALPHA = 770;
snow_modules_opengl_web_GL.ONE_MINUS_SRC_ALPHA = 771;
snow_modules_opengl_web_GL.DST_ALPHA = 772;
snow_modules_opengl_web_GL.ONE_MINUS_DST_ALPHA = 773;
snow_modules_opengl_web_GL.DST_COLOR = 774;
snow_modules_opengl_web_GL.ONE_MINUS_DST_COLOR = 775;
snow_modules_opengl_web_GL.SRC_ALPHA_SATURATE = 776;
snow_modules_opengl_web_GL.FUNC_ADD = 32774;
snow_modules_opengl_web_GL.BLEND_EQUATION = 32777;
snow_modules_opengl_web_GL.BLEND_EQUATION_RGB = 32777;
snow_modules_opengl_web_GL.BLEND_EQUATION_ALPHA = 34877;
snow_modules_opengl_web_GL.FUNC_SUBTRACT = 32778;
snow_modules_opengl_web_GL.FUNC_REVERSE_SUBTRACT = 32779;
snow_modules_opengl_web_GL.BLEND_DST_RGB = 32968;
snow_modules_opengl_web_GL.BLEND_SRC_RGB = 32969;
snow_modules_opengl_web_GL.BLEND_DST_ALPHA = 32970;
snow_modules_opengl_web_GL.BLEND_SRC_ALPHA = 32971;
snow_modules_opengl_web_GL.CONSTANT_COLOR = 32769;
snow_modules_opengl_web_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
snow_modules_opengl_web_GL.CONSTANT_ALPHA = 32771;
snow_modules_opengl_web_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
snow_modules_opengl_web_GL.BLEND_COLOR = 32773;
snow_modules_opengl_web_GL.ARRAY_BUFFER = 34962;
snow_modules_opengl_web_GL.ELEMENT_ARRAY_BUFFER = 34963;
snow_modules_opengl_web_GL.ARRAY_BUFFER_BINDING = 34964;
snow_modules_opengl_web_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
snow_modules_opengl_web_GL.STREAM_DRAW = 35040;
snow_modules_opengl_web_GL.STATIC_DRAW = 35044;
snow_modules_opengl_web_GL.DYNAMIC_DRAW = 35048;
snow_modules_opengl_web_GL.BUFFER_SIZE = 34660;
snow_modules_opengl_web_GL.BUFFER_USAGE = 34661;
snow_modules_opengl_web_GL.CURRENT_VERTEX_ATTRIB = 34342;
snow_modules_opengl_web_GL.FRONT = 1028;
snow_modules_opengl_web_GL.BACK = 1029;
snow_modules_opengl_web_GL.FRONT_AND_BACK = 1032;
snow_modules_opengl_web_GL.CULL_FACE = 2884;
snow_modules_opengl_web_GL.BLEND = 3042;
snow_modules_opengl_web_GL.DITHER = 3024;
snow_modules_opengl_web_GL.STENCIL_TEST = 2960;
snow_modules_opengl_web_GL.DEPTH_TEST = 2929;
snow_modules_opengl_web_GL.SCISSOR_TEST = 3089;
snow_modules_opengl_web_GL.POLYGON_OFFSET_FILL = 32823;
snow_modules_opengl_web_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
snow_modules_opengl_web_GL.SAMPLE_COVERAGE = 32928;
snow_modules_opengl_web_GL.NO_ERROR = 0;
snow_modules_opengl_web_GL.INVALID_ENUM = 1280;
snow_modules_opengl_web_GL.INVALID_VALUE = 1281;
snow_modules_opengl_web_GL.INVALID_OPERATION = 1282;
snow_modules_opengl_web_GL.OUT_OF_MEMORY = 1285;
snow_modules_opengl_web_GL.CW = 2304;
snow_modules_opengl_web_GL.CCW = 2305;
snow_modules_opengl_web_GL.LINE_WIDTH = 2849;
snow_modules_opengl_web_GL.ALIASED_POINT_SIZE_RANGE = 33901;
snow_modules_opengl_web_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
snow_modules_opengl_web_GL.CULL_FACE_MODE = 2885;
snow_modules_opengl_web_GL.FRONT_FACE = 2886;
snow_modules_opengl_web_GL.DEPTH_RANGE = 2928;
snow_modules_opengl_web_GL.DEPTH_WRITEMASK = 2930;
snow_modules_opengl_web_GL.DEPTH_CLEAR_VALUE = 2931;
snow_modules_opengl_web_GL.DEPTH_FUNC = 2932;
snow_modules_opengl_web_GL.STENCIL_CLEAR_VALUE = 2961;
snow_modules_opengl_web_GL.STENCIL_FUNC = 2962;
snow_modules_opengl_web_GL.STENCIL_FAIL = 2964;
snow_modules_opengl_web_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
snow_modules_opengl_web_GL.STENCIL_PASS_DEPTH_PASS = 2966;
snow_modules_opengl_web_GL.STENCIL_REF = 2967;
snow_modules_opengl_web_GL.STENCIL_VALUE_MASK = 2963;
snow_modules_opengl_web_GL.STENCIL_WRITEMASK = 2968;
snow_modules_opengl_web_GL.STENCIL_BACK_FUNC = 34816;
snow_modules_opengl_web_GL.STENCIL_BACK_FAIL = 34817;
snow_modules_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
snow_modules_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
snow_modules_opengl_web_GL.STENCIL_BACK_REF = 36003;
snow_modules_opengl_web_GL.STENCIL_BACK_VALUE_MASK = 36004;
snow_modules_opengl_web_GL.STENCIL_BACK_WRITEMASK = 36005;
snow_modules_opengl_web_GL.VIEWPORT = 2978;
snow_modules_opengl_web_GL.SCISSOR_BOX = 3088;
snow_modules_opengl_web_GL.COLOR_CLEAR_VALUE = 3106;
snow_modules_opengl_web_GL.COLOR_WRITEMASK = 3107;
snow_modules_opengl_web_GL.UNPACK_ALIGNMENT = 3317;
snow_modules_opengl_web_GL.PACK_ALIGNMENT = 3333;
snow_modules_opengl_web_GL.MAX_TEXTURE_SIZE = 3379;
snow_modules_opengl_web_GL.MAX_VIEWPORT_DIMS = 3386;
snow_modules_opengl_web_GL.SUBPIXEL_BITS = 3408;
snow_modules_opengl_web_GL.RED_BITS = 3410;
snow_modules_opengl_web_GL.GREEN_BITS = 3411;
snow_modules_opengl_web_GL.BLUE_BITS = 3412;
snow_modules_opengl_web_GL.ALPHA_BITS = 3413;
snow_modules_opengl_web_GL.DEPTH_BITS = 3414;
snow_modules_opengl_web_GL.STENCIL_BITS = 3415;
snow_modules_opengl_web_GL.POLYGON_OFFSET_UNITS = 10752;
snow_modules_opengl_web_GL.POLYGON_OFFSET_FACTOR = 32824;
snow_modules_opengl_web_GL.TEXTURE_BINDING_2D = 32873;
snow_modules_opengl_web_GL.SAMPLE_BUFFERS = 32936;
snow_modules_opengl_web_GL.SAMPLES = 32937;
snow_modules_opengl_web_GL.SAMPLE_COVERAGE_VALUE = 32938;
snow_modules_opengl_web_GL.SAMPLE_COVERAGE_INVERT = 32939;
snow_modules_opengl_web_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
snow_modules_opengl_web_GL.DONT_CARE = 4352;
snow_modules_opengl_web_GL.FASTEST = 4353;
snow_modules_opengl_web_GL.NICEST = 4354;
snow_modules_opengl_web_GL.GENERATE_MIPMAP_HINT = 33170;
snow_modules_opengl_web_GL.BYTE = 5120;
snow_modules_opengl_web_GL.UNSIGNED_BYTE = 5121;
snow_modules_opengl_web_GL.SHORT = 5122;
snow_modules_opengl_web_GL.UNSIGNED_SHORT = 5123;
snow_modules_opengl_web_GL.INT = 5124;
snow_modules_opengl_web_GL.UNSIGNED_INT = 5125;
snow_modules_opengl_web_GL.FLOAT = 5126;
snow_modules_opengl_web_GL.DEPTH_COMPONENT = 6402;
snow_modules_opengl_web_GL.ALPHA = 6406;
snow_modules_opengl_web_GL.RGB = 6407;
snow_modules_opengl_web_GL.RGBA = 6408;
snow_modules_opengl_web_GL.LUMINANCE = 6409;
snow_modules_opengl_web_GL.LUMINANCE_ALPHA = 6410;
snow_modules_opengl_web_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
snow_modules_opengl_web_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
snow_modules_opengl_web_GL.UNSIGNED_SHORT_5_6_5 = 33635;
snow_modules_opengl_web_GL.FRAGMENT_SHADER = 35632;
snow_modules_opengl_web_GL.VERTEX_SHADER = 35633;
snow_modules_opengl_web_GL.MAX_VERTEX_ATTRIBS = 34921;
snow_modules_opengl_web_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
snow_modules_opengl_web_GL.MAX_VARYING_VECTORS = 36348;
snow_modules_opengl_web_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
snow_modules_opengl_web_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
snow_modules_opengl_web_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
snow_modules_opengl_web_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
snow_modules_opengl_web_GL.SHADER_TYPE = 35663;
snow_modules_opengl_web_GL.DELETE_STATUS = 35712;
snow_modules_opengl_web_GL.LINK_STATUS = 35714;
snow_modules_opengl_web_GL.VALIDATE_STATUS = 35715;
snow_modules_opengl_web_GL.ATTACHED_SHADERS = 35717;
snow_modules_opengl_web_GL.ACTIVE_UNIFORMS = 35718;
snow_modules_opengl_web_GL.ACTIVE_ATTRIBUTES = 35721;
snow_modules_opengl_web_GL.SHADING_LANGUAGE_VERSION = 35724;
snow_modules_opengl_web_GL.CURRENT_PROGRAM = 35725;
snow_modules_opengl_web_GL.NEVER = 512;
snow_modules_opengl_web_GL.LESS = 513;
snow_modules_opengl_web_GL.EQUAL = 514;
snow_modules_opengl_web_GL.LEQUAL = 515;
snow_modules_opengl_web_GL.GREATER = 516;
snow_modules_opengl_web_GL.NOTEQUAL = 517;
snow_modules_opengl_web_GL.GEQUAL = 518;
snow_modules_opengl_web_GL.ALWAYS = 519;
snow_modules_opengl_web_GL.KEEP = 7680;
snow_modules_opengl_web_GL.REPLACE = 7681;
snow_modules_opengl_web_GL.INCR = 7682;
snow_modules_opengl_web_GL.DECR = 7683;
snow_modules_opengl_web_GL.INVERT = 5386;
snow_modules_opengl_web_GL.INCR_WRAP = 34055;
snow_modules_opengl_web_GL.DECR_WRAP = 34056;
snow_modules_opengl_web_GL.VENDOR = 7936;
snow_modules_opengl_web_GL.RENDERER = 7937;
snow_modules_opengl_web_GL.VERSION = 7938;
snow_modules_opengl_web_GL.NEAREST = 9728;
snow_modules_opengl_web_GL.LINEAR = 9729;
snow_modules_opengl_web_GL.NEAREST_MIPMAP_NEAREST = 9984;
snow_modules_opengl_web_GL.LINEAR_MIPMAP_NEAREST = 9985;
snow_modules_opengl_web_GL.NEAREST_MIPMAP_LINEAR = 9986;
snow_modules_opengl_web_GL.LINEAR_MIPMAP_LINEAR = 9987;
snow_modules_opengl_web_GL.TEXTURE_MAG_FILTER = 10240;
snow_modules_opengl_web_GL.TEXTURE_MIN_FILTER = 10241;
snow_modules_opengl_web_GL.TEXTURE_WRAP_S = 10242;
snow_modules_opengl_web_GL.TEXTURE_WRAP_T = 10243;
snow_modules_opengl_web_GL.TEXTURE_2D = 3553;
snow_modules_opengl_web_GL.TEXTURE = 5890;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP = 34067;
snow_modules_opengl_web_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
snow_modules_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
snow_modules_opengl_web_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
snow_modules_opengl_web_GL.TEXTURE0 = 33984;
snow_modules_opengl_web_GL.TEXTURE1 = 33985;
snow_modules_opengl_web_GL.TEXTURE2 = 33986;
snow_modules_opengl_web_GL.TEXTURE3 = 33987;
snow_modules_opengl_web_GL.TEXTURE4 = 33988;
snow_modules_opengl_web_GL.TEXTURE5 = 33989;
snow_modules_opengl_web_GL.TEXTURE6 = 33990;
snow_modules_opengl_web_GL.TEXTURE7 = 33991;
snow_modules_opengl_web_GL.TEXTURE8 = 33992;
snow_modules_opengl_web_GL.TEXTURE9 = 33993;
snow_modules_opengl_web_GL.TEXTURE10 = 33994;
snow_modules_opengl_web_GL.TEXTURE11 = 33995;
snow_modules_opengl_web_GL.TEXTURE12 = 33996;
snow_modules_opengl_web_GL.TEXTURE13 = 33997;
snow_modules_opengl_web_GL.TEXTURE14 = 33998;
snow_modules_opengl_web_GL.TEXTURE15 = 33999;
snow_modules_opengl_web_GL.TEXTURE16 = 34000;
snow_modules_opengl_web_GL.TEXTURE17 = 34001;
snow_modules_opengl_web_GL.TEXTURE18 = 34002;
snow_modules_opengl_web_GL.TEXTURE19 = 34003;
snow_modules_opengl_web_GL.TEXTURE20 = 34004;
snow_modules_opengl_web_GL.TEXTURE21 = 34005;
snow_modules_opengl_web_GL.TEXTURE22 = 34006;
snow_modules_opengl_web_GL.TEXTURE23 = 34007;
snow_modules_opengl_web_GL.TEXTURE24 = 34008;
snow_modules_opengl_web_GL.TEXTURE25 = 34009;
snow_modules_opengl_web_GL.TEXTURE26 = 34010;
snow_modules_opengl_web_GL.TEXTURE27 = 34011;
snow_modules_opengl_web_GL.TEXTURE28 = 34012;
snow_modules_opengl_web_GL.TEXTURE29 = 34013;
snow_modules_opengl_web_GL.TEXTURE30 = 34014;
snow_modules_opengl_web_GL.TEXTURE31 = 34015;
snow_modules_opengl_web_GL.ACTIVE_TEXTURE = 34016;
snow_modules_opengl_web_GL.REPEAT = 10497;
snow_modules_opengl_web_GL.CLAMP_TO_EDGE = 33071;
snow_modules_opengl_web_GL.MIRRORED_REPEAT = 33648;
snow_modules_opengl_web_GL.FLOAT_VEC2 = 35664;
snow_modules_opengl_web_GL.FLOAT_VEC3 = 35665;
snow_modules_opengl_web_GL.FLOAT_VEC4 = 35666;
snow_modules_opengl_web_GL.INT_VEC2 = 35667;
snow_modules_opengl_web_GL.INT_VEC3 = 35668;
snow_modules_opengl_web_GL.INT_VEC4 = 35669;
snow_modules_opengl_web_GL.BOOL = 35670;
snow_modules_opengl_web_GL.BOOL_VEC2 = 35671;
snow_modules_opengl_web_GL.BOOL_VEC3 = 35672;
snow_modules_opengl_web_GL.BOOL_VEC4 = 35673;
snow_modules_opengl_web_GL.FLOAT_MAT2 = 35674;
snow_modules_opengl_web_GL.FLOAT_MAT3 = 35675;
snow_modules_opengl_web_GL.FLOAT_MAT4 = 35676;
snow_modules_opengl_web_GL.SAMPLER_2D = 35678;
snow_modules_opengl_web_GL.SAMPLER_CUBE = 35680;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
snow_modules_opengl_web_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
snow_modules_opengl_web_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
snow_modules_opengl_web_GL.POINT_SPRITE = 34913;
snow_modules_opengl_web_GL.COMPILE_STATUS = 35713;
snow_modules_opengl_web_GL.LOW_FLOAT = 36336;
snow_modules_opengl_web_GL.MEDIUM_FLOAT = 36337;
snow_modules_opengl_web_GL.HIGH_FLOAT = 36338;
snow_modules_opengl_web_GL.LOW_INT = 36339;
snow_modules_opengl_web_GL.MEDIUM_INT = 36340;
snow_modules_opengl_web_GL.HIGH_INT = 36341;
snow_modules_opengl_web_GL.FRAMEBUFFER = 36160;
snow_modules_opengl_web_GL.RENDERBUFFER = 36161;
snow_modules_opengl_web_GL.RGBA4 = 32854;
snow_modules_opengl_web_GL.RGB5_A1 = 32855;
snow_modules_opengl_web_GL.RGB565 = 36194;
snow_modules_opengl_web_GL.DEPTH_COMPONENT16 = 33189;
snow_modules_opengl_web_GL.STENCIL_INDEX = 6401;
snow_modules_opengl_web_GL.STENCIL_INDEX8 = 36168;
snow_modules_opengl_web_GL.DEPTH_STENCIL = 34041;
snow_modules_opengl_web_GL.RENDERBUFFER_WIDTH = 36162;
snow_modules_opengl_web_GL.RENDERBUFFER_HEIGHT = 36163;
snow_modules_opengl_web_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
snow_modules_opengl_web_GL.RENDERBUFFER_RED_SIZE = 36176;
snow_modules_opengl_web_GL.RENDERBUFFER_GREEN_SIZE = 36177;
snow_modules_opengl_web_GL.RENDERBUFFER_BLUE_SIZE = 36178;
snow_modules_opengl_web_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
snow_modules_opengl_web_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
snow_modules_opengl_web_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
snow_modules_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
snow_modules_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
snow_modules_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
snow_modules_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
snow_modules_opengl_web_GL.COLOR_ATTACHMENT0 = 36064;
snow_modules_opengl_web_GL.DEPTH_ATTACHMENT = 36096;
snow_modules_opengl_web_GL.STENCIL_ATTACHMENT = 36128;
snow_modules_opengl_web_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
snow_modules_opengl_web_GL.NONE = 0;
snow_modules_opengl_web_GL.FRAMEBUFFER_COMPLETE = 36053;
snow_modules_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
snow_modules_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
snow_modules_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
snow_modules_opengl_web_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
snow_modules_opengl_web_GL.FRAMEBUFFER_BINDING = 36006;
snow_modules_opengl_web_GL.RENDERBUFFER_BINDING = 36007;
snow_modules_opengl_web_GL.MAX_RENDERBUFFER_SIZE = 34024;
snow_modules_opengl_web_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
snow_modules_opengl_web_GL.UNPACK_FLIP_Y_WEBGL = 37440;
snow_modules_opengl_web_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
snow_modules_opengl_web_GL.CONTEXT_LOST_WEBGL = 37442;
snow_modules_opengl_web_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
snow_modules_opengl_web_GL.BROWSER_DEFAULT_WEBGL = 37444;
snow_system_audio_Audio.splitter = " • ";
SnowApp.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
